// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Js_of_ocaml_compiler_dynlink
//# unitInfo: Requires: Js_of_ocaml_compiler__Config, Js_of_ocaml_compiler__Driver, Js_of_ocaml_compiler__Instr, Js_of_ocaml_compiler__Linker, Js_of_ocaml_compiler__Ocaml_compiler, Js_of_ocaml_compiler__Ocaml_version, Js_of_ocaml_compiler__Pretty_print, Js_of_ocaml_compiler__Primitive, Js_of_ocaml_compiler__Stdlib, Jsoo_runtime, Stdlib, Stdlib__BytesLabels, Stdlib__Format, Stdlib__Sys
//# unitInfo: Force_link: true
//# shape: Js_of_ocaml_compiler_dynlink:[N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_compiler_Stdlib = global_data.Js_of_ocaml_compiler__Stdlib,
    Js_of_ocaml_compiler_Ocaml_com =
      global_data.Js_of_ocaml_compiler__Ocaml_compiler,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_compiler_Pretty_pr =
      global_data.Js_of_ocaml_compiler__Pretty_print,
    Js_of_ocaml_compiler_Driver = global_data.Js_of_ocaml_compiler__Driver,
    Js_of_ocaml_compiler_Primitive =
      global_data.Js_of_ocaml_compiler__Primitive,
    Js_of_ocaml_compiler_Ocaml_ver =
      global_data.Js_of_ocaml_compiler__Ocaml_version,
    Js_of_ocaml_compiler_Instr = global_data.Js_of_ocaml_compiler__Instr,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Js_of_ocaml_compiler_Config = global_data.Js_of_ocaml_compiler__Config,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Js_of_ocaml_compiler_Linker = global_data.Js_of_ocaml_compiler__Linker,
    cst_toplevel_eval_not_initiali = "toplevel: eval not initialized",
    eval_ref =
      [0,
       function(param){
        return caml_call1(Stdlib[2], cst_toplevel_eval_not_initiali);
       }],
    a = Stdlib_Sys[5];
   a:
   {
    var
     b = [0, 5, [0, 2, 0]],
     cst_Expected_backend_js_of_oca = "Expected backend `js_of_ocaml`",
     cst_use_js_string = "use-js-string";
    if(typeof a !== "number" && a[1] === "js_of_ocaml"){
     caml_call1(Js_of_ocaml_compiler_Config[4], 500616045);
     break a;
    }
    caml_call1(Stdlib[2], cst_Expected_backend_js_of_oca);
   }
   var
    aliases = runtime.jsoo_get_runtime_aliases(0),
    global = globalThis,
    c = runtime.caml_jsoo_flags_use_js_string(0);
   caml_call2(Js_of_ocaml_compiler_Config[1][3], cst_use_js_string, c);
   var d = caml_call1(Jsoo_runtime[2][1][1], 0);
   caml_call1(Js_of_ocaml_compiler_Config[6], d);
   caml_call1(Js_of_ocaml_compiler_Linker[2], 0);
   caml_call2
    (Js_of_ocaml_compiler_Stdlib[24][18],
     function(param){
      var b = param[2], a = param[1];
      return caml_call2(Js_of_ocaml_compiler_Primitive[8], a, b);
     },
     aliases);
   function toplevel_compile(code, debug){
    var
     a =
       caml_call2
        (Js_of_ocaml_compiler_Ocaml_ver[2],
         Js_of_ocaml_compiler_Ocaml_ver[1],
         b);
    if(caml_call2(Js_of_ocaml_compiler_Stdlib[11], a, 0))
     var s = code;
    else{
     var
      opcode = caml_call1(Js_of_ocaml_compiler_Instr[1], 40)[4],
      len = runtime.caml_ml_string_length(code),
      b$0 = runtime.caml_create_bytes(len + 8 | 0);
     caml_call5(Stdlib_BytesLabels[12], code, 0, b$0, 0, len);
     caml_call3(Stdlib_BytesLabels[83], b$0, len, opcode);
     caml_call3(Stdlib_BytesLabels[83], b$0, len + 4 | 0, 1);
     var s = caml_call1(Stdlib_BytesLabels[6], b$0);
    }
    var
     c = caml_call1(Js_of_ocaml_compiler_Ocaml_com[3][5], 0),
     prims = caml_call1(Js_of_ocaml_compiler_Stdlib[44][11], c),
     b$1 = caml_call1(Js_of_ocaml_compiler_Stdlib[33][1], 100),
     fmt = caml_call1(Js_of_ocaml_compiler_Pretty_pr[11], b$1);
    caml_call1(Js_of_ocaml_compiler_Driver[8], fmt);
    caml_call4(Js_of_ocaml_compiler_Driver[4], prims, debug, s, fmt);
    caml_call2(Stdlib_Format[43], Stdlib_Format[116], 0);
    caml_call2(Stdlib_Format[43], Stdlib_Format[118], 0);
    caml_call1(Stdlib[63], Stdlib[39]);
    caml_call1(Stdlib[63], Stdlib[40]);
    var js = caml_call1(Js_of_ocaml_compiler_Stdlib[33][2], b$1);
    return caml_call1(eval_ref[1], js);
   }
   function toplevel_eval(x){
    var f = runtime.caml_js_eval_string(x);
    return function(param){
     var res = f(global);
     caml_call2(Stdlib_Format[43], Stdlib_Format[116], 0);
     caml_call2(Stdlib_Format[43], Stdlib_Format[118], 0);
     caml_call1(Stdlib[63], Stdlib[39]);
     caml_call1(Stdlib[63], Stdlib[40]);
     return res;};
   }
   var
    toc = runtime.jsoo_get_bytecode_sections(0),
    t = toc[1],
    sym =
      caml_call3
       (Js_of_ocaml_compiler_Ocaml_com[3][2][5],
        function(i, n, acc){
         var a = caml_call1(Js_of_ocaml_compiler_Ocaml_com[3][1][1], i);
         return caml_call3(Js_of_ocaml_compiler_Stdlib[40][2], a, n, acc);
        },
        t,
        Js_of_ocaml_compiler_Stdlib[40][1]);
   function toplevel_reloc(name){
    var
     name$0 = runtime.caml_string_of_jsstring(name),
     match = caml_call2(Js_of_ocaml_compiler_Stdlib[40][18], name$0, sym);
    if(! match)
     return caml_call1(Js_of_ocaml_compiler_Ocaml_com[3][3], name$0);
    var i = match[1];
    return i;
   }
   eval_ref[1] = toplevel_eval;
   runtime.jsoo_toplevel_init_compile(toplevel_compile);
   runtime.jsoo_toplevel_init_reloc(toplevel_reloc);
   var Js_of_ocaml_compiler_dynlink = [0, eval_ref];
   runtime.caml_register_global
    (21, Js_of_ocaml_compiler_dynlink, "Js_of_ocaml_compiler_dynlink");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
