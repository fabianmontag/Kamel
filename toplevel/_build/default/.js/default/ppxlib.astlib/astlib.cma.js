// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Astlib__
//# shape: Astlib__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Astlib = [0],
    Astlib$0 = [0, Astlib];
   runtime.caml_register_global(0, Astlib$0, "Astlib__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Stdlib0
//# unitInfo: Requires: Stdlib
//# shape: Astlib__Stdlib0:[[N],[F(2)]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    to_string = Stdlib[33],
    Int = [0, to_string];
   function map(f, o){
    if(! o) return 0;
    var v = o[1];
    return [0, caml_call1(f, v)];
   }
   var Option = [0, map], Astlib_Stdlib0 = [0, Int, Option];
   runtime.caml_register_global(1, Astlib_Stdlib0, "Astlib__Stdlib0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Location
//# unitInfo: Requires: Format_doc, Location, Stdlib__Format, Stdlib__List
//# shape: Astlib__Location:[N,F(1),F(1),N,N,N,F(2),N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_s = "%s";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Format_doc = global_data.Format_doc,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_List = global_data.Stdlib__List,
    Location = global_data.Location,
    none = Location[1],
    input_name = Location[13],
    input_lexbuf = Location[14],
    register_error_of_exn = Location[55],
    error_of_exn = Location[56],
    Error = Location[57],
    raise_errorf = Location[59],
    report_exception = Location[60],
    a = [0, [15, 0], "%a"],
    b = [0, [2, 0, 0], cst_s],
    c = [0, [2, 0, 0], cst_s],
    d = [0, [16, 0], "%t"];
   function set_input_name(name){input_name[1] = name; return 0;}
   function set_input_lexbuf(lexbuf_opt){
    input_lexbuf[1] = lexbuf_opt;
    return 0;
   }
   function is_well_formed(error){
    return typeof error[1] === "number" ? 1 : 0;
   }
   function string_of_location_msg(msg){
    return caml_call3(Stdlib_Format[147], a, Format_doc[1][2], msg[1]);
   }
   function main_msg(param){
    var main = param[2], a = main[2];
    return [0, string_of_location_msg(main), a];
   }
   function sub_msgs(param){
    var sub = param[3];
    return caml_call2
            (Stdlib_List[20],
             function(err){
              var a = err[2];
              return [0, string_of_location_msg(err), a];
             },
             sub);
   }
   function of_exn(exn){
    var match = caml_call1(error_of_exn, exn);
    if(match){
     var match$0 = match[1];
     if(typeof match$0 !== "number"){var e = match$0[2]; return [0, e];}
    }
    return 0;
   }
   function set_main_msg(error, msg){
    var
     txt = caml_call2(Format_doc[1][4], b, msg),
     main = [0, txt, error[2][2]];
    return [0, error[1], main, error[3], error[4]];
   }
   function make(sub, param){
    var loc = param[2], txt = param[1];
    function mk(loc, x){return [0, caml_call2(Format_doc[1][4], c, x), loc];}
    var
     a =
       caml_call2
        (Stdlib_List[20],
         function(param){
          var loc = param[2], txt = param[1];
          return mk(loc, txt);
         },
         sub);
    return [0, 0, mk(loc, txt), a, 0];
   }
   function set_main_loc(error, loc){
    var main = [0, error[2][1], loc];
    return [0, error[1], main, error[3], error[4]];
   }
   function raise_errorf$0(loc, msg){
    return caml_call2
            (Stdlib_Format[151],
             function(pr){
              return caml_call5
                      (raise_errorf, loc, 0, 0, d, caml_call1(Format_doc[6], pr));
             },
             msg);
   }
   var
    Astlib_Location =
      [0,
       [0,
        is_well_formed,
        main_msg,
        sub_msgs,
        set_main_msg,
        set_main_loc,
        make,
        of_exn],
       set_input_name,
       set_input_lexbuf,
       none,
       register_error_of_exn,
       Error,
       raise_errorf$0,
       report_exception];
   runtime.caml_register_global(8, Astlib_Location, "Astlib__Location");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Longident
//# unitInfo: Requires: Longident, Parse, Stdlib__Lexing
//# shape: Astlib__Longident:[N,F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Parse = global_data.Parse,
    Longident = global_data.Longident,
    flatten = Longident[1];
   function parse(s){
    var a = caml_call2(Stdlib_Lexing[3], 0, s);
    return caml_call1(Parse[10], a);
   }
   var Astlib_Longident = [0, flatten, parse];
   runtime.caml_register_global(3, Astlib_Longident, "Astlib__Longident");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_502
//# shape: Astlib__Ast_502:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M034",
    ast_intf_magic_number = "Caml1999N034",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_502 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_502, "Astlib__Ast_502");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Pprintast
//# unitInfo: Requires: Astlib__Location, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__String
//# shape: Astlib__Pprintast:[F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$50 = "",
    cst$75 = " (",
    cst_a$3 = " (%a)",
    cst$74 = " :",
    cst$73 = " : ",
    cst$76 = " :=",
    cst$51 = " ;..",
    cst$72 = " =",
    cst_in = " in",
    cst_when = " when ",
    cst$49 = " |",
    cst$82 = "!",
    cst_S = "%S",
    cst_a$0 = "%a",
    cst_a_a$0 = "%a%a",
    cst_a_a$1 = "%a@ %a",
    cst_a$1 = "%a@;",
    cst_a_a$3 = "%a@;->@;%a",
    cst_a = "%a@;.@;",
    cst_a_a_a = "%a@;: %a@;=@;%a",
    cst_a_a$2 = "%a@;=@;%a",
    cst_s = "%s",
    cst_s_c = "%s%c",
    cst$54 = "(",
    cst$44 = "((",
    cst_a_a = "((%a)%a)",
    cst$70 = "()",
    cst_module = "(module",
    cst_type$3 = "(type",
    cst_type$2 = "(type ",
    cst$59 = ")",
    cst$42 = ",",
    cst$55 = ",@;",
    cst$45 = "->",
    cst$60 = ".(",
    cst$52 = "..",
    cst$68 = ".{",
    cst$53 = ": ",
    cst$61 = "::",
    cst$78 = ":=",
    cst$79 = ":@ ",
    cst$58 = ";",
    cst$81 = ";;",
    cst$62 = ";@;",
    cst$65 = "<-",
    cst_0 = "<0>",
    cst_1 = "<1>",
    cst_2 = "<2>",
    cst_hov0 = "<hov0>",
    cst_hov2 = "<hov2>",
    cst_hov = "<hov>",
    cst_hv0 = "<hv0>",
    cst_hv2 = "<hv2>",
    cst_hv = "<hv>",
    cst_v = "<v>",
    cst_a$5 = "=@;%a",
    cst$48 = ">",
    cst_s_a = "?%s:%a",
    cst$80 = "?@ ",
    cst$77 = "@\n",
    cst$46 = "@ ",
    cst_s$1 = "@ %s",
    cst_a$2 = "@ =@ %a",
    cst_and$5 = "@ and@ ",
    cst$69 = "@,",
    cst$43 = "@;",
    cst$57 = "@;*@;",
    cst_1_2 = "@;<1 -2>",
    cst_of_a = "@;of@;%a",
    cst_2_a_a$0 = "@[<2>%a %a@]",
    cst_2_a_a = "@[<2>%a@;->@;%a@]",
    cst_2_a_as_a = "@[<2>%a@;as@;%a@]",
    cst_2_a = "@[<2>%a@]",
    cst_2_s_a = "@[<2>`%s@;%a@]",
    cst_2_let_open_s_a_in_a = "@[<2>let open%s %a in@;%a@]",
    cst_hov0_a = "@[<hov0>%a@]",
    cst_hov2_a = "@[<hov2>%a@]",
    cst_hov2_include_a_a = "@[<hov2>include@ %a@]%a",
    cst_hov2_module_type_s_a_a = "@[<hov2>module@ type@ %s%a@]%a",
    cst_v_a_a = "@[<v>%a@,%a@]",
    cst_a$4 = "[%a]@ ",
    cst$71 = "[]",
    cst$63 = "[|",
    cst$66 = "]",
    cst$56 = "_",
    cst_s$0 = "`%s",
    cst_and$4 = "and",
    cst_as = "as",
    cst_astlib_pprintast_ml = "astlib/pprintast.ml",
    cst_class$3 = "class",
    cst_class_type$1 = "class type",
    cst_constraint = "constraint",
    cst_do = "do",
    cst_done = "done",
    cst_end = "end",
    cst_exception = "exception",
    cst_external$0 = "external",
    cst_fun = "fun",
    cst_functor = "functor",
    cst_in$0 = "in",
    cst_include = "include",
    cst_inherit = "inherit",
    cst_let$1 = "let",
    cst_let_open = "let open",
    cst_module$0 = "module",
    cst_module$1 = "module ",
    cst_module_type = "module type ",
    cst_nonrec = "nonrec ",
    cst_object = "object",
    cst_of = "of",
    cst_open = "open",
    cst_private = "private",
    cst_rec = "rec",
    cst_rec$0 = "rec ",
    cst_set = "set",
    cst_type$4 = "type",
    cst_type$1 = "type ",
    cst_val$0 = "val",
    cst_with = "with",
    cst$47 = "| ",
    cst$64 = "|]",
    cst$67 = "}",
    caml_equal = runtime.caml_equal,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) === 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) === 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) === 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   function caml_call16
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15){
    return (f.l >= 0 ? f.l : f.l = f.length) === 16
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = cst$48,
    cst$7 = "<",
    cst$8 = cst$49,
    cst$9 = cst$50,
    partial = [17, 0, 0],
    cst$12 = cst$66,
    cst$13 = ".[",
    cst$14 = cst$59,
    cst$15 = cst$60,
    cst$16 = cst$67,
    cst$17 = cst$68,
    cst$18 = cst$67,
    cst$19 = cst$68,
    cst$20 = cst$67,
    cst$21 = cst$68,
    cst$22 = cst$67,
    cst$23 = cst$68,
    cst$11 = cst$67,
    cst$10 = cst$66,
    right = cst$59,
    cst$24 = cst$45,
    partial$0 = [17, 0, 0],
    partial$1 = [11, cst_0, 0],
    partial$2 = [17, 0, [17, 0, 0]],
    cst$25 = cst$56,
    partial$3 =
      [17,
       [0, cst$46, 1, 0],
       [11, cst_in$0, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]],
    partial$4 = [17, 0, 0],
    partial$5 = [15, [17, 0, 0]],
    partial$6 = [0, cst$43, 1, 0],
    partial$7 = [11, cst_2, 0],
    partial$8 = [15, [17, 0, [15, [17, 0, 0]]]],
    partial$9 = [0, cst$46, 1, 0],
    fmt =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11,
          "if",
          [17,
           [0, cst$46, 1, 0],
           [15,
            [17,
             0,
             [17,
              [0, cst$43, 1, 0],
              [18,
               [1, [0, partial$7, cst_2]],
               [11, "then", [17, partial$9, partial$8]]]]]]]]]],
       "@[<hv0>@[<2>if@ %a@]@;@[<2>then@ %a@]%a@]"],
    first$0 = [0, [0, [12, 58, [17, [0, cst$43, 1, 0], 0]], ":@;"]],
    last$0 = [0, [0, [11, " with", [17, [0, cst$43, 1, 0], 0]], " with@;"]],
    partial$10 = [17, 0, 0],
    fmt$0 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "while",
         [17,
          [0, cst$43, 1, 0],
          [15,
           [17,
            [0, cst$43, 1, 0],
            [11,
             cst_do,
             [17,
              [0, cst$43, 1, 0],
              [15, [17, [0, cst$43, 1, 0], [11, cst_done, partial$10]]]]]]]]]],
       "@[<2>while@;%a@;do@;%a@;done@]"],
    partial$11 =
      [15,
       [17,
        [0, cst$43, 1, 0],
        [11,
         cst_do,
         [17,
          0,
          [17,
           [0, cst$43, 1, 0],
           [15, [17, 0, [17, [0, cst$43, 1, 0], [11, cst_done, [17, 0, 0]]]]]]]]]],
    fmt$1 =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [18,
          [1, [0, [11, cst_2, 0], cst_2]],
          [11,
           "for ",
           [15,
            [11,
             cst$72,
             [17,
              [0, cst$43, 1, 0],
              [15, [17, [0, cst$43, 1, 0], [15, partial$11]]]]]]]]]],
       "@[<hv0>@[<hv2>@[<2>for %a =@;%a@;%a%a@;do@]@;%a@]@;done@]"],
    last$1 = [0, [0, [12, 32, 0], " "]],
    first$1 = [0, [0, [11, cst$73, 0], cst$73]],
    partial$12 = [17, 0, [15, 0]],
    partial$13 = [15, 0],
    partial$14 = [11, cst_end, [17, 0, 0]],
    partial$15 = [0, cst$46, 1, 0],
    partial$16 = [17, 0, [15, 0]],
    partial$17 = [15, 0],
    partial$18 =
      [17,
       [0, cst$46, 1, 0],
       [11, cst$45, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]],
    partial$19 = [17, 0, [15, 0]],
    cst$29 = cst$56,
    cst$28 = cst$56,
    partial$20 = [15, 0],
    opt = [0, 0],
    cst$27 = cst$56,
    cst$26 = cst$56,
    partial$21 = [17, 0, [15, 0]],
    cst$30 = cst$56,
    partial$22 = [11, cst$45, [17, [0, cst$43, 1, 0], [15, 0]]],
    partial$23 = [0, cst$43, 1, 0],
    cst$31 = "=",
    partial$24 = [17, [0, cst$43, 1, 0], [15, 0]],
    partial$25 = [15, 0],
    partial$26 = [0, cst$43, 1, 0],
    partial$27 = [17, [0, cst$43, 1, 0], [15, [17, 0, [15, 0]]]],
    cst$34 = cst$56,
    partial$28 = [15, 0],
    cst$35 = cst$56,
    partial$29 = [15, [17, 0, [15, 0]]],
    partial$30 = [0, cst$46, 1, 0],
    cst$32 = cst$56,
    cst$33 = cst$56,
    cst$36 = cst$56,
    partial$31 =
      [15, [17, 0, [15, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]],
    partial$32 = [0, cst$46, 1, 0],
    cst$37 = cst$56,
    partial$33 =
      [12,
       61,
       [17,
        [0, cst$46, 1, 0],
        [15, [17, 0, [15, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]]],
    partial$34 = [0, cst$46, 1, 0],
    cst$38 = cst$50,
    cst$39 = cst$72,
    cst$40 = cst$76,
    cst$41 = "(::)",
    first$2 =
      [0,
       [0,
        [17, [0, cst$43, 1, 0], [11, "when", [17, [0, cst$43, 1, 0], 0]]],
        "@;when@;"]],
    c = [0, [12, 96, [2, 0, 0]], cst_s$0],
    first = [0, 0, cst$50],
    last = [0, 0, cst$50],
    cst$4 = cst$50,
    cst$5 = cst$82,
    cst$1 = "+",
    cst$2 = "-",
    cst$3 = cst$50,
    cst = cst$50,
    cst$0 = cst$82,
    prefix_symbols = [0, 33, [0, 63, [0, 126, 0]]],
    infix_symbols =
      caml_list_of_js_array
       ([61, 60, 62, 64, 94, 124, 38, 43, 45, 42, 47, 36, 37, 35]),
    special_infix_strings =
      caml_list_of_js_array
       (["asr",
         "land",
         "lor",
         "lsl",
         "lsr",
         "lxor",
         "mod",
         "or",
         cst$78,
         "!=",
         cst$61]),
    reset_ctxt = [0, 0, 0, 0, 0],
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Astlib_Location = global_data.Astlib__Location,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    e = [0, [2, 0, 0], cst_s],
    f =
      [0,
       [12,
        40,
        [17, [0, cst$43, 1, 0], [2, 0, [17, [0, cst$43, 1, 0], [12, 41, 0]]]]],
       "(@;%s@;)"],
    g = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    h = [0, [2, 0, 0], cst_s];
   function value(t, default$){
    if(! t) return default$;
    var x = t[1];
    return x;
   }
   function fixity_of_string(s){
    if(s === cst$50) return -453122489;
    if(caml_call2(Stdlib_List[37], s, special_infix_strings))
     return [0, -784100624, s];
    var m = caml_string_get(s, 0);
    if(caml_call2(Stdlib_List[37], m, infix_symbols))
     return [0, -784100624, s];
    var n = caml_string_get(s, 0);
    if(caml_call2(Stdlib_List[37], n, prefix_symbols))
     return [0, -481604174, s];
    if(46 === caml_string_get(s, 0)) return [0, 237833689, s];
    var c = 3 < caml_ml_string_length(s) ? 1 : 0;
    if(c){
     var d = 108 === caml_string_get(s, 0) ? 1 : 0;
     if(d){
      var e = 101 === caml_string_get(s, 1) ? 1 : 0;
      if(e){
       var f = 116 === caml_string_get(s, 2) ? 1 : 0;
       if(f)
        var
         k = caml_string_get(s, 3),
         a = caml_call2(Stdlib_List[37], k, infix_symbols);
       else
        var a = f;
      }
      else
       var a = e;
     }
     else
      var a = d;
    }
    else
     var a = c;
    if(a) return [0, 93260188, s];
    var g = 3 < caml_ml_string_length(s) ? 1 : 0;
    if(g){
     var h = 97 === caml_string_get(s, 0) ? 1 : 0;
     if(h){
      var i = 110 === caml_string_get(s, 1) ? 1 : 0;
      if(i){
       var j = 100 === caml_string_get(s, 2) ? 1 : 0;
       if(j)
        var
         l = caml_string_get(s, 3),
         b = caml_call2(Stdlib_List[37], l, infix_symbols);
       else
        var b = j;
      }
      else
       var b = i;
     }
     else
      var b = h;
    }
    else
     var b = g;
    return b ? [0, 906850200, s] : -453122489;
   }
   function first_is(c, str){
    var
     a = str !== cst$50 ? 1 : 0,
     b = a ? caml_string_get(str, 0) === c ? 1 : 0 : a;
    return b;
   }
   function last_is(c, str){
    var
     a = str !== cst$50 ? 1 : 0,
     b =
       a
        ? caml_string_get
           (str, caml_ml_string_length(str) - 1 | 0)
          === c
          ? 1
          : 0
        : a;
    return b;
   }
   function needs_parens(txt){
    var fix = fixity_of_string(txt);
    a:
    {
     if(typeof fix !== "number"){
      var variant = fix[1];
      if(-784100624 === variant){var a = 1; break a;}
     }
     var a = 0;
    }
    if(a)
     var b = a;
    else{
     a:
     {
      if(typeof fix !== "number"){
       var variant$0 = fix[1];
       if(237833689 === variant$0){var c = 1; break a;}
      }
      var c = 0;
     }
     if(c)
      var b = c;
     else{
      a:
      {
       b:
       if(typeof fix !== "number"){
        var e = fix[1];
        if(93260188 !== e && 906850200 !== e) break b;
        var d = 1;
        break a;
       }
       var d = 0;
      }
      if(! d){
       var f = txt !== cst$50 ? 1 : 0;
       if(! f) return f;
       var g = caml_string_get(txt, 0);
       return caml_call2(Stdlib_List[37], g, prefix_symbols);
      }
      var b = d;
     }
    }
    return b;
   }
   function needs_spaces(txt){
    var a = first_is(42, txt);
    return a ? a : last_is(42, txt);
   }
   function string_loc(ppf, x){
    return caml_call3(Stdlib_Format[143], ppf, e, x[1]);
   }
   function protect_ident(ppf, txt){
    var format = needs_parens(txt) ? needs_spaces(txt) ? f : g : h;
    return caml_call3(Stdlib_Format[143], ppf, format, txt);
   }
   function override(param){return param ? cst : cst$0;}
   function view_expr(exp){
    var a = exp[1];
    if(typeof a !== "number" && 8 === a[0]){
     var x = a[1], g = x[1];
     if(0 === g[0]){
      var match = g[1];
      if(match === cst$70) return 405183496;
      if(match !== cst$61){
       if(match === cst$71) return 5493713;
      }
      else if(a[2]){
       a:
       {
        b:
        {
         var exp$0 = exp, acc = 0;
         for(;;){
          var c = exp$0[1];
          if(typeof c === "number") break b;
          if(8 !== c[0]) break b;
          var h = c[1][1];
          if(0 !== h[0]) break b;
          var i = h[1];
          if(i !== cst$61) break;
          var j = c[2];
          if(! j) break b;
          var k = j[1], d = k[1];
          if(typeof d === "number") break b;
          if(7 !== d[0]) break b;
          var e = d[1];
          if(! e) break b;
          var f = e[2];
          if(! f) break b;
          if(f[2]) break b;
          if(k[4]) break b;
          if(exp$0[4]) break b;
          var exp$1 = f[1], e1 = e[1], acc$0 = [0, e1, acc];
          exp$0 = exp$1;
          acc = acc$0;
         }
         if(i === cst$71 && ! exp$0[4]){
          var match$0 = [0, caml_call1(Stdlib_List[10], acc), 1];
          break a;
         }
        }
        var match$0 = [0, caml_call1(Stdlib_List[10], [0, exp$0, acc]), 0];
       }
       var b = match$0[2], ls = match$0[1];
       return b ? [0, -944563106, ls] : [0, -1044071951, ls];
      }
     }
     if(! a[2]) return [0, 947848242, x[1]];
    }
    return 812216871;
   }
   function is_simple_construct(param){
    a:
    {
     if(typeof param === "number"){
      if(812216871 > param) break a;
     }
     else if(-944563106 <= param[1]) break a;
     return 0;
    }
    return 1;
   }
   var
    pp = Stdlib_Format[143],
    d =
      [0,
       [11, "variable in scope syntax error: ", [2, 0, 0]],
       "variable in scope syntax error: %s"],
    i =
      [0,
       [15,
        [11,
         cst$60,
         [17, [0, cst$43, 1, 0], [2, 0, [17, [0, cst$43, 1, 0], [12, 41, 0]]]]]],
       "%a.(@;%s@;)"],
    j = [0, [15, [11, cst$60, [2, 0, [12, 41, 0]]]], "%a.(%s)"],
    k = [0, [15, [12, 46, [2, 0, 0]]], "%a.%s"],
    l = [0, cst_astlib_pprintast_ml, 262, 17],
    m = [0, [17, [0, cst$46, 1, 0], 0], cst$46],
    n = [0, 0, cst$50],
    o = [0, 0, cst$50],
    p = [0, [12, 40, 0], cst$54],
    q = [0, [12, 41, 0], cst$59],
    r = [0, 0, cst$50],
    s = [0, 0, cst$50],
    t = [0, [15, [12, 40, [15, [12, 41, 0]]]], "%a(%a)"],
    u = [0, [15, 0], cst_a$0],
    v = [0, [2, 0, [0, 0]], cst_s_c],
    w = [0, [2, 0, 0], cst_s],
    x = [0, [1, 0], "%C"],
    y =
      [0,
       [12, 123, [2, 0, [12, 124, [2, 0, [12, 124, [2, 0, [12, 125, 0]]]]]]],
       "{%s|%s|%s}"],
    z = [0, [3, 0, 0], cst_S],
    A = [0, [2, 0, [0, 0]], cst_s_c],
    B = [0, [2, 0, 0], cst_s],
    C = [0, [11, "mutable", [17, [0, cst$43, 1, 0], 0]], "mutable@;"],
    D = [0, [11, "virtual", [17, [0, cst$43, 1, 0], 0]], "virtual@;"],
    E = [0, [11, cst_rec$0, 0], cst_rec$0],
    F = [0, [11, cst_nonrec, 0], cst_nonrec],
    G = [0, [11, "downto", [17, [0, cst$46, 1, 0], 0]], "downto@ "],
    H = [0, [11, "to", [17, [0, cst$46, 1, 0], 0]], "to@ "],
    I = [0, [11, cst_private, [17, [0, cst$46, 1, 0], 0]], "private@ "],
    J = [0, [3, 0, 0], cst_S],
    K = [0, [11, "' ", [2, 0, 0]], "' %s"],
    L = [0, [12, 39, [2, 0, 0]], "'%s"],
    M = [0, [0, [12, 44, 0], cst$42]],
    N = [0, [12, 91, [15, [11, "] ", 0]]], "[%a] "],
    O = [0, [2, 0, [12, 58, [15, 0]]], "%s:%a"],
    P = [0, [12, 63, [2, 0, [12, 58, [15, 0]]]], cst_s_a],
    Q = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, 0]]], cst_2_a],
    R =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$43, 1, 0],
          [11, cst$45, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_a],
    S =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$43, 1, 0],
          [11, cst_as, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_as_a],
    T = [0, [0, [17, [0, cst$43, 1, 0], 0], cst$43]],
    U =
      [0,
       [15, [17, [0, cst$43, 1, 0], [12, 46, [17, [0, cst$43, 1, 0], 0]]]],
       cst_a],
    V = [0, [15, 0], cst_a$0],
    W =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [15, [17, 0, 0]]]],
       "@[<2>%a%a@]"],
    X = [0, [11, cst$44, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    Y = [0, [12, 95, 0], cst$56],
    Z =
      [0,
       [0,
        [17, [0, cst$43, 1, 0], [12, 42, [17, [0, cst$43, 1, 0], 0]]],
        cst$57]],
    _ = [0, [12, 40, [15, [12, 41, 0]]], "(%a)"],
    $ = [0, [0, [12, 41, [17, [0, cst$43, 1, 0], 0]], ")@;"]],
    aa = [0, [0, [12, 40, 0], cst$54]],
    ab = [0, [0, [12, 44, [17, [0, cst$43, 1, 0], 0]], cst$55]],
    ac = [0, [15, [17, [0, cst$43, 1, 0], 0]], cst_a$1],
    ad = [0, [15, [15, 0]], cst_a_a$0],
    ae =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [2,
         0,
         [11,
          cst$53,
          [15,
           [17, [0, cst$46, 1, 0], [15, [17, [0, cst$46, 1, 0], [17, 0, 0]]]]]]]],
       "@[<hov2>%s: %a@ %a@ @]"],
    af =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [17, [0, cst$46, 1, 0], [17, 0, 0]]]],
       "@[<hov2>%a@ @]"],
    ag = [0, [11, cst$51, 0], cst$51],
    ah = [0, [11, cst$52, 0], cst$52],
    ai = [0, [0, [12, 59, 0], cst$58]],
    aj =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12,
         60,
         [17,
          [0, cst$46, 1, 0],
          [15, [15, [17, [0, cst$46, 1, 0], [11, "> ", [17, 0, 0]]]]]]]],
       "@[<hov2><@ %a%a@ > @]"],
    ak = [0, [0, [12, 41, 0], cst$59]],
    al = [0, [0, [12, 40, 0], cst$54]],
    am = [0, [0, [12, 44, 0], cst$42]],
    an =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [12, 35, [15, [17, 0, 0]]]]],
       "@[<hov2>%a#%a@]"],
    ao = [0, [0, [12, 38, 0], "&"]],
    ap =
      [0,
       [17, [0, cst$43, 1, 0], [11, cst_of, [17, [0, cst$43, 1, 0], [15, 0]]]],
       cst_of_a],
    aq =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [15, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<2>%a%a@;%a@]"],
    ar = [0, [12, 62, [17, [0, cst$46, 1, 0], [15, 0]]], ">@ %a"],
    as = [0, [0, [17, [0, cst_1_2, 1, -2], [11, cst$47, 0]], "@;<1 -2>| "]],
    at = [0, [2, 0, [17, [0, cst$43, 1, 0], [15, 0]]], "%s@;%a"],
    au = [0, [12, 62, 0], cst$48],
    av =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 91, [15, [15, [12, 93, [17, 0, 0]]]]]],
       "@[<2>[%a%a]@]"],
    aw =
      [0,
       [11,
        cst_type$1,
        [15,
         [17, [0, cst$46, 1, 0], [12, 61, [17, [0, cst$46, 1, 0], [15, 0]]]]]],
       "type %a@ =@ %a"],
    ax =
      [0,
       [0,
        [17, [0, cst$46, 1, 0], [11, cst_and$4, [17, [0, cst$46, 1, 0], 0]]],
        cst_and$5]],
    ay =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module,
         [17,
          [0, cst$46, 1, 0],
          [15,
           [17,
            [0, cst$46, 1, 0],
            [11,
             cst_with,
             [17, [0, cst$46, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]]]],
       "@[<hov2>(module@ %a@ with@ %a)@]"],
    az =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_module, [17, [0, cst$46, 1, 0], [15, [12, 41, [17, 0, 0]]]]]],
       "@[<hov2>(module@ %a)@]"],
    aA =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [11, cst$60, [15, [12, 41, [17, 0, 0]]]]]],
       "@[<hov2>%a.(%a)@]"],
    aB =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$43, 1, 0],
          [11, cst_as, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_as_a],
    aC = [0, [11, cst$44, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    aD = [0, [0, [17, [0, cst$46, 1, 0], [11, cst$47, 0]], "@ | "]],
    aE =
      [0,
       [18, [1, [0, [11, cst_hov0, 0], cst_hov0]], [15, [17, 0, 0]]],
       cst_hov0_a],
    aF = [0, [15, [11, cst$61, [15, 0]]], "%a::%a"],
    aG = [0, cst$61],
    aH = [0, [15, 0], cst_a$0],
    aI = [0, [0, [17, [0, cst$46, 1, 0], 0], cst$46]],
    aJ =
      [0,
       [15,
        [17,
         [0, cst$46, 1, 0],
         [11, cst_type$2, [15, [12, 41, [17, [0, cst$43, 1, 0], [15, 0]]]]]]],
       "%a@ (type %a)@;%a"],
    aK = [0, [15, [17, [0, cst$43, 1, 0], [15, 0]]], "%a@;%a"],
    aL = [0, [15, 0], cst_a$0],
    aM =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 96, [2, 0, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]],
       cst_2_s_a],
    aN = [0, [12, 95, 0], cst$56],
    aO = [0, [15, 0], cst_a$0],
    aP = [0, [15, [11, cst$52, [15, 0]]], "%a..%a"],
    aQ = [0, [0, [12, 44, [17, [0, cst$43, 1, 0], 0]], cst$55]],
    aR =
      [0,
       [18,
        [1, [0, [11, cst_1, 0], cst_1]],
        [12, 40, [15, [12, 41, [17, 0, 0]]]]],
       "@[<1>(%a)@]"],
    aS = [0, [2, 0, 0], cst_s],
    aT = [0, [12, 96, [2, 0, 0]], cst_s$0],
    aU =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$43, 1, 0],
          [12, 61, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<2>%a@;=@;%a@]"],
    aV = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, 0]]], cst_2_a],
    aW = [0, [0, [12, 59, [17, [0, cst$43, 1, 0], 0]], cst$62]],
    aX =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 123, [17, [0, cst$43, 1, 0], [15, [11, ";_}", [17, 0, 0]]]]]],
       "@[<2>{@;%a;_}@]"],
    aY = [0, [0, [12, 59, [17, [0, cst$43, 1, 0], 0]], cst$62]],
    aZ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         123,
         [17,
          [0, cst$43, 1, 0],
          [15, [17, [0, cst$43, 1, 0], [12, 125, [17, 0, 0]]]]]]],
       "@[<2>{@;%a@;}@]"],
    a0 = [0, [0, [12, 59, 0], cst$58]],
    a1 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, cst$63, [15, [11, cst$64, [17, 0, 0]]]]],
       "@[<2>[|%a|]@]"],
    a2 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         40,
         [15,
          [17,
           [0, cst$43, 1, 0],
           [12, 58, [17, [0, cst$43, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[<2>(%a@;:@;%a)@]"],
    a3 = [0, [12, 35, [15, 0]], "#%a"],
    a4 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "(lazy", [17, [0, cst$43, 1, 0], [15, [12, 41, [17, 0, 0]]]]]],
       "@[<2>(lazy@;%a)@]"],
    a5 =
      [0,
       [11,
        cst_module,
        [17, [0, cst$46, 1, 0], [2, 0, [12, 41, [17, [0, cst$46, 1, 0], 0]]]]],
       "(module@ %s)@ "],
    a6 =
      [0,
       [11,
        cst_module,
        [17, [0, cst$46, 1, 0], [11, "_)", [17, [0, cst$46, 1, 0], 0]]]],
       "(module@ _)@ "],
    a7 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, cst_exception, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]],
       "@[<2>exception@;%a@]"],
    a8 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [12, 46, [15, [12, 32, [17, 0, 0]]]]]],
       "@[<2>%a.%a @]"],
    a9 = [0, [15, [17, [0, cst$46, 1, 0], 0]], "%a@ "],
    a_ =
      [0,
       [12, 126, [2, 0, [12, 58, [15, [17, [0, cst$43, 1, 0], 0]]]]],
       "~%s:%a@;"],
    a$ = [0, [12, 126, [2, 0, [17, [0, cst$43, 1, 0], 0]]], "~%s@;"],
    ba =
      [0,
       [12,
        63,
        [2,
         0,
         [11,
          ":(",
          [15,
           [12,
            61,
            [17,
             [0, cst$43, 1, 0],
             [15, [12, 41, [17, [0, cst$43, 1, 0], 0]]]]]]]]],
       "?%s:(%a=@;%a)@;"],
    bb =
      [0,
       [12, 63, [2, 0, [12, 58, [15, [17, [0, cst$43, 1, 0], 0]]]]],
       "?%s:%a@;"],
    bc =
      [0,
       [11,
        "?(",
        [2,
         0,
         [12,
          61,
          [17, [0, cst$43, 1, 0], [15, [12, 41, [17, [0, cst$43, 1, 0], 0]]]]]]],
       "?(%s=@;%a)@;"],
    bd = [0, [12, 63, [2, 0, [17, [0, cst$46, 1, 0], 0]]], "?%s@ "],
    be = [0, [12, 46, [15, 0]], ".%a"],
    bf =
      [0,
       [18,
        [1, [0, 0, cst$50]],
        [15,
         [15,
          [2,
           0,
           [15,
            [2,
             0,
             [17,
              [0, cst$46, 1, 0],
              [11, cst$65, [17, [0, "@;<1 2>", 1, 2], [15, partial]]]]]]]]]],
       "@[%a%a%s%a%s@ <-@;<1 2>%a@]"],
    bg =
      [0,
       [18, [1, [0, 0, cst$50]], [15, [15, [2, 0, [15, [2, 0, [17, 0, 0]]]]]]],
       "@[%a%a%s%a%s@]"],
    bh = [0, [12, 59, 0], cst$58],
    bi = [0, cst_astlib_pprintast_ml, 680, 21],
    bj =
      [0,
       [18, [1, [0, [11, cst_hov, 0], cst_hov]], [12, 33, [15, [17, 0, 0]]]],
       "@[<hov>!%a@]"],
    bk = [0, 0, cst$50],
    bl = [0, 0, cst$50],
    bm = [0, [12, 44, 0], cst$42],
    bn = [0, [12, 44, 0], cst$42],
    bo = [0, [12, 44, 0], cst$42],
    bp = [0, [12, 44, 0], cst$42],
    bq = [0, [12, 46, 0], "."],
    br =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [11, cst_in, [17, [0, cst_1_2, 1, -2], [15, [17, 0, 0]]]]]],
       "@[<2>%a in@;<1 -2>%a@]"],
    bs =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, cst_fun, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]],
       "@[<2>fun@;%a@]"],
    bt =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 40, [15, [17, [0, cst$43, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]],
       "@[<2>(%a@;%a)@]"],
    bu = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, 0]]], cst_2_a],
    bv =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv0, 0], cst_hv0]],
         [18,
          [1, [0, [11, cst_2, 0], cst_2]],
          [11,
           "match ",
           [15,
            [17,
             0,
             [17, [0, cst$46, 1, 0], [11, cst_with, [17, 0, [15, partial$0]]]]]]]]]],
       "@[<hv0>@[<hv0>@[<2>match %a@]@ with@]%a@]"],
    bw =
      [0,
       [18,
        [1, [0, [11, cst_0, 0], cst_0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          "try",
          [17,
           [0, cst$46, 1, 0],
           [15,
            [17,
             0,
             [17,
              [0, cst$46, 1, 0],
              [18,
               [1, [0, partial$1, cst_0]],
               [11, cst_with, [15, partial$2]]]]]]]]]],
       "@[<0>@[<hv2>try@ %a@]@ @[<0>with%a@]@]"],
    bx =
      [0,
       [17,
        [0, cst$43, 1, 0],
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "else", [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]],
       "@;@[<2>else@;%a@]"],
    by = [0, [0, [12, 59, [17, [0, cst$43, 1, 0], 0]], cst$62]],
    bz =
      [0,
       [18, [1, [0, [11, cst_hv, 0], cst_hv]], [15, [17, 0, 0]]],
       "@[<hv>%a@]"],
    bA =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_let$1,
         [17,
          [0, cst$46, 1, 0],
          [11,
           cst_module$0,
           [17,
            [0, cst$46, 1, 0],
            [2,
             0,
             [17,
              [0, cst$46, 1, 0],
              [12, 61, [17, [0, cst$46, 1, 0], [15, partial$3]]]]]]]]]],
       "@[<hov2>let@ module@ %s@ =@ %a@ in@ %a@]"],
    bB =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_let$1,
         [17,
          [0, cst$46, 1, 0],
          [11,
           cst_exception,
           [17,
            [0, cst$46, 1, 0],
            [15,
             [17,
              [0, cst$46, 1, 0],
              [11, cst_in$0, [17, [0, cst$46, 1, 0], [15, partial$4]]]]]]]]]],
       "@[<hov2>let@ exception@ %a@ in@ %a@]"],
    bC =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_fun,
         [17,
          [0, cst$43, 1, 0],
          [11,
           cst_type$3,
           [17,
            [0, cst$43, 1, 0],
            [2,
             0,
             [12,
              41,
              [17,
               [0, cst$43, 1, 0],
               [11, cst$45, [17, partial$6, partial$5]]]]]]]]]],
       "@[<2>fun@;(type@;%s)@;->@;%a@]"],
    bD =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_let_open,
         [2,
          0,
          [12,
           32,
           [15, [11, cst_in, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]]]],
       cst_2_let_open_s_a_in_a],
    bE = [0, [0, [17, [0, cst$69, 0, 0], 0], cst$69]],
    bF =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [18,
         [1, [0, [11, cst_v, 0], cst_v]],
         [15,
          [17,
           [0, cst$69, 0, 0],
           [15,
            [17, 0, [11, cst_in, [17, [0, cst_1_2, 1, -2], [15, [17, 0, 0]]]]]]]]]],
       "@[<2>@[<v>%a@,%a@] in@;<1 -2>%a@]"],
    bG = [0, [15, [17, [0, cst$46, 1, 0], [15, 0]]], cst_a_a$1],
    bH =
      [0,
       [18, [1, [0, [11, cst_hov2, 0], cst_hov2]], [15, [17, 0, 0]]],
       cst_hov2_a],
    bI =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [12, 32, [15, [17, 0, 0]]]]],
       cst_2_a_a$0],
    bJ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$43, 1, 0],
          [2, 0, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<2>%a@;%s@;%a@]"],
    bK = [0, "~+", [0, "~-", [0, "~+.", [0, "~-.", 0]]]],
    bL =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [12, 32, [15, [17, 0, 0]]]]],
       cst_2_a_a$0],
    bM =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]],
       "@[<2>%s@;%a@]"],
    bN =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]],
       "@[<2>%a@;%a@]"],
    bO = [0, cst_astlib_pprintast_ml, 797, 15],
    bP =
      [0,
       [0,
        [17, [0, cst$43, 1, 0], [11, cst$61, [17, [0, cst$43, 1, 0], 0]]],
        "@;::@;"]],
    bQ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 96, [2, 0, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]],
       cst_2_s_a],
    bR =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [12,
          46,
          [15,
           [17,
            [0, cst$46, 1, 0],
            [11, cst$65, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<2>%a.%a@ <-@ %a@]"],
    bS =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "new", [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>new@ %a@]"],
    bT =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [2,
         0,
         [17,
          [0, cst$46, 1, 0],
          [11, cst$65, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%s@ <-@ %a@]"],
    bU =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [2,
         0,
         [17,
          [0, cst$46, 1, 0],
          [12, 61, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%s@ =@ %a@]"],
    bV = [0, [0, [12, 59, 0], cst$58]],
    bW =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "{<", [15, [11, ">}", [17, 0, 0]]]]],
       "@[<hov2>{<%a>}@]"],
    bX =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "assert", [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>assert@ %a@]"],
    bY =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "lazy", [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>lazy@ %a@]"],
    bZ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         "(!poly!",
         [17,
          [0, cst$46, 1, 0],
          [15,
           [17, [0, cst$46, 1, 0], [11, cst$53, [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[<hov2>(!poly!@ %a@ : %a)@]"],
    b0 =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "!poly!", [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>!poly!@ %a@]"],
    b1 =
      [0,
       [11,
        cst$44,
        [15, [12, 41, [17, [0, cst$69, 0, 0], [15, [12, 41, 0]]]]]],
       "((%a)@,%a)"],
    b2 =
      [0,
       [11, cst_type$2, [15, [12, 41, [17, [0, cst$43, 1, 0], 0]]]],
       "(type %a)@;"],
    b3 =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [11, "function", [15, [15, [17, 0, 0]]]]],
       "@[<hv>function%a%a@]"],
    b4 = [0, [12, 58, [17, [0, cst$43, 1, 0], [15, 0]]], ":@;%a"],
    b5 = [0, [15, [11, ":>", [17, [0, cst$43, 1, 0], [15, 0]]]], "%a:>@;%a"],
    b6 = [0, [0, 0, cst$50]],
    b7 =
      [0, [15, [15, [2, 0, [17, [0, cst$43, 1, 0], [15, 0]]]]], "%a%a%s@;%a"],
    b8 = [0, [15, 0], cst_a$0],
    b9 =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [12, 46, [15, [17, 0, 0]]]]],
       "@[<hov2>%a.%a@]"],
    b_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [12, 35, [2, 0, [17, 0, 0]]]]],
       "@[<hov2>%a#%s@]"],
    b$ = [0, [0, [12, 44, [17, [0, cst$43, 1, 0], 0]], cst$55]],
    ca =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12, 40, [15, [12, 41, [17, 0, 0]]]]],
       "@[<hov2>(%a)@]"],
    cb = [0, [11, cst$71, 0], cst$71],
    cc = [0, [11, cst$70, 0], cst$70],
    cd = [0, cst_astlib_pprintast_ml, 920, 15],
    ce = [0, [0, [12, 59, [17, [0, cst$43, 1, 0], 0]], cst$62]],
    cf =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [12, 91, [15, [12, 93, [17, 0, 0]]]]],
       "@[<hv0>[%a]@]"],
    cg = [0, [12, 96, [2, 0, 0]], cst_s$0],
    ch =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15,
         [17,
          [0, cst$43, 1, 0],
          [12, 61, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%a@;=@;%a@]"],
    ci =
      [0,
       [18, [1, [0, [11, cst_hov2, 0], cst_hov2]], [15, [17, 0, 0]]],
       cst_hov2_a],
    cj = [0, [0, [12, 59, [17, [0, cst$43, 1, 0], 0]], cst$62]],
    ck =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [12,
          123,
          [17,
           [0, cst$43, 1, 0],
           [15, [15, [17, 0, [17, [0, cst$43, 1, 0], [12, 125, [17, 0, 0]]]]]]]]]],
       "@[<hv0>@[<hv2>{@;%a%a@]@;}@]"],
    cl = [0, [0, [12, 59, 0], cst$58]],
    cm =
      [0,
       [18,
        [1, [0, [11, cst_0, 0], cst_0]],
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, cst$63, [15, [11, cst$64, [17, 0, [17, 0, 0]]]]]]],
       "@[<0>@[<2>[|%a|]@]@]"],
    cn = [0, [12, 40, [15, [11, cst$73, [15, [12, 41, 0]]]]], "(%a : %a)"],
    co =
      [0,
       [12, 40, [15, [15, [11, " :> ", [15, [12, 41, 0]]]]]],
       "(%a%a :> %a)"],
    cp =
      [0,
       [11, cst_module, [17, [0, cst$43, 1, 0], [15, [12, 41, 0]]]],
       "(module@;%a)"],
    cq =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [17, 5, [2, 0, [17, [0, cst$46, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]],
       "@[<2>[@@%s@ %a]@]"],
    cr =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [17,
          5,
          [17, 5, [2, 0, [17, [0, cst$46, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]]],
       "@[<2>[@@@@%s@ %a]@]"],
    cs =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [17,
          5,
          [17,
           5,
           [17,
            5,
            [2, 0, [17, [0, cst$46, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]]]],
       "@[<2>[@@@@@@%s@ %a]@]"],
    ct =
      [0,
       [17, [0, cst$46, 1, 0], [12, 61, [17, [0, cst$46, 1, 0], [15, 0]]]],
       cst_a$2],
    cu =
      [0,
       [18, [1, [0, [11, cst_hov2, 0], cst_hov2]], [15, [15, [17, 0, 0]]]],
       "@[<hov2>%a%a@]"],
    cv =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [12, 37, [2, 0, [17, [0, cst$46, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]],
       "@[<2>[%%%s@ %a]@]"],
    cw =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [12,
          37,
          [12,
           37,
           [2, 0, [17, [0, cst$46, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]]],
       "@[<2>[%%%%%s@ %a]@]"],
    cx =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_exception, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]],
       "@[<hov2>exception@ %a@]%a"],
    cy =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, cst_inherit, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]],
       "@[<2>inherit@ %a@]%a"],
    cz =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "val ",
         [17,
          [0, cst$46, 1, 0],
          [15,
           [15,
            [2,
             0,
             [17,
              [0, cst$46, 1, 0],
              [12, 58, [17, [0, cst$46, 1, 0], [15, partial$12]]]]]]]]]],
       "@[<2>val @ %a%a%s@ :@ %a@]%a"],
    cA =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "method ",
         [15,
          [12,
           32,
           [15,
            [2,
             0,
             [11, cst$74, [17, [0, cst$43, 1, 0], [15, [17, 0, partial$13]]]]]]]]]],
       "@[<2>method %a %a%s :@;%a@]%a"],
    cB =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_constraint,
         [17,
          [0, cst$46, 1, 0],
          [15,
           [17,
            [0, cst$46, 1, 0],
            [12, 61, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>constraint@ %a@ =@ %a@]%a"],
    cC = [0, [0, [17, [0, cst$43, 1, 0], 0], cst$43]],
    cD = [0, [11, cst$75, [15, [12, 41, 0]]], cst_a$3],
    cE =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          cst_object,
          [18,
           [1, [0, [11, cst_1, 0], cst_1]],
           [15,
            [17,
             0,
             [17,
              [0, cst$46, 1, 0],
              [15, [17, 0, [17, partial$15, partial$14]]]]]]]]]],
       "@[<hv0>@[<hv2>object@[<1>%a@]@ %a@]@ end@]"],
    cF = [0, [0, [12, 44, 0], cst$42]],
    cG = [0, [12, 91, [15, [12, 93, [17, [0, cst$46, 1, 0], 0]]]], cst_a$4],
    cH = [0, [15, [15, [15, 0]]], "%a%a%a"],
    cI =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$43, 1, 0],
          [11, cst$45, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_a],
    cJ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_let_open,
         [2,
          0,
          [12,
           32,
           [15, [11, cst_in, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]]]],
       cst_2_let_open_s_a_in_a],
    cK =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15,
           [15,
            [2,
             0,
             [17,
              [0, cst$46, 1, 0],
              [12, 61, [17, [0, cst$46, 1, 0], [15, partial$16]]]]]]]]]],
       "@[<2>%s %a%a%s@ =@ %a@]%a"],
    cst_and = cst_and$4,
    cL = [0, [0, [17, [0, cst$69, 0, 0], 0], cst$69]],
    cst_class_type = cst_class_type$1,
    cM =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$69, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_class_type$0 = cst_class_type$1,
    cN = [0, [17, [0, cst$46, 1, 0], [11, "as ", [2, 0, 0]]], "@ as %s"],
    cO =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_inherit,
         [17,
          [0, cst$46, 1, 0],
          [2, 0, [17, [0, cst$46, 1, 0], [15, [15, [17, 0, [15, 0]]]]]]]]],
       "@[<2>inherit@ %s@ %a%a@]%a"],
    cP =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "val virtual ",
         [15,
          [2,
           0,
           [11, cst$74, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]],
       "@[<2>val virtual %a%s :@ %a@]%a"],
    cQ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_val$0,
         [2,
          0,
          [12,
           32,
           [15,
            [2,
             0,
             [11, cst$72, [17, [0, cst$43, 1, 0], [15, [17, 0, partial$17]]]]]]]]]],
       "@[<2>val%s %a%s =@;%a@]%a"],
    cR =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "method virtual ",
         [15,
          [12,
           32,
           [2,
            0,
            [11, cst$74, [17, [0, cst$43, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>method virtual %a %s :@;%a@]%a"],
    cS =
      [0,
       [2,
        0,
        [11,
         cst$74,
         [17,
          [0, cst$43, 1, 0],
          [15, [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]]]]]],
       "%s :@;%a=@;%a"],
    cT =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "method", [2, 0, [12, 32, [15, [15, [17, 0, [15, 0]]]]]]]],
       "@[<2>method%s %a%a@]%a"],
    cU =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "constraint ",
         [15, [11, cst$72, [17, [0, cst$43, 1, 0], [15, [17, 0, [15, 0]]]]]]]],
       "@[<2>constraint %a =@;%a@]%a"],
    cV =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "initializer", [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]],
       "@[<2>initializer@ %a@]%a"],
    cW = [0, [11, cst$75, [15, [12, 41, 0]]], cst_a$3],
    cX = [0, [12, 32, [15, 0]], " %a"],
    cY =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          cst_object,
          [15,
           [17,
            [0, cst$43, 1, 0],
            [15, [17, 0, [17, [0, cst$43, 1, 0], [11, cst_end, [17, 0, 0]]]]]]]]]],
       "@[<hv0>@[<hv2>object%a@;%a@]@;end@]"],
    cZ = [0, [0, [12, 44, 0], cst$42]],
    c0 = [0, [12, 91, [15, [12, 93, [17, [0, cst$46, 1, 0], 0]]]], cst_a$4],
    c1 = [0, [15, [15, 0]], cst_a_a$0],
    c2 =
      [0,
       [11,
        cst_fun,
        [17,
         [0, cst$46, 1, 0],
         [15,
          [17,
           [0, cst$46, 1, 0],
           [11, cst$45, [17, [0, cst$46, 1, 0], [15, 0]]]]]]],
       "fun@ %a@ ->@ %a"],
    c3 =
      [0,
       [11,
        cst$44,
        [15, [12, 41, [17, [0, cst$46, 1, 0], [15, [12, 41, 0]]]]]],
       "((%a)@ %a)"],
    c4 =
      [0,
       [15,
        [17,
         [0, cst$46, 1, 0],
         [11, cst_in$0, [17, [0, cst$46, 1, 0], [15, 0]]]]],
       "%a@ in@ %a"],
    c5 =
      [0,
       [12,
        40,
        [15,
         [17,
          [0, cst$46, 1, 0],
          [12, 58, [17, [0, cst$46, 1, 0], [15, [12, 41, 0]]]]]]],
       "(%a@ :@ %a)"],
    c6 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_let_open,
         [2,
          0,
          [12,
           32,
           [15, [11, cst_in, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]]]],
       cst_2_let_open_s_a_in_a],
    c7 = [0, [11, cst$44, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    c8 =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_functor,
         [17,
          [0, cst$46, 1, 0],
          [12,
           40,
           [2,
            0,
            [17,
             [0, cst$46, 1, 0],
             [12, 58, [17, [0, cst$46, 1, 0], [15, [12, 41, partial$18]]]]]]]]]],
       "@[<hov2>functor@ (%s@ :@ %a)@ ->@ %a@]"],
    c9 =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15,
         [17,
          [0, cst$46, 1, 0],
          [11, cst$45, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%a@ ->@ %a@]"],
    c_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "functor () ->", [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>functor () ->@ %a@]"],
    c$ =
      [0,
       [0,
        [17, [0, cst$46, 1, 0], [11, cst_and$4, [17, [0, cst$46, 1, 0], 0]]],
        cst_and$5]],
    da =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15,
         [17,
          [0, cst$46, 1, 0],
          [11, cst_with, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%a@ with@ %a@]"],
    db = [0, [11, cst$44, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    dc = [0, [0, [12, 41, 0], cst$59]],
    dd = [0, [0, [12, 40, 0], cst$54]],
    de = [0, [0, [12, 44, 0], cst$42]],
    df =
      [0,
       [11,
        cst_type$4,
        [17,
         [0, cst$46, 1, 0],
         [15, [12, 32, [15, [11, cst$72, [17, [0, cst$46, 1, 0], [15, 0]]]]]]]],
       "type@ %a %a =@ %a"],
    dg =
      [0,
       [11,
        cst_module$1,
        [15, [11, cst$72, [17, [0, cst$46, 1, 0], [15, 0]]]]],
       "module %a =@ %a"],
    dh =
      [0,
       [11,
        cst_module_type,
        [15, [11, cst$72, [17, [0, cst$46, 1, 0], [15, 0]]]]],
       "module type %a =@ %a"],
    di =
      [0,
       [11,
        cst_module_type,
        [15, [11, cst$76, [17, [0, cst$46, 1, 0], [15, 0]]]]],
       "module type %a :=@ %a"],
    dj = [0, [0, [12, 41, 0], cst$59]],
    dk = [0, [0, [12, 40, 0], cst$54]],
    dl = [0, [0, [12, 44, 0], cst$42]],
    dm =
      [0,
       [11,
        cst_type$4,
        [17,
         [0, cst$46, 1, 0],
         [15, [12, 32, [15, [11, cst$76, [17, [0, cst$46, 1, 0], [15, 0]]]]]]]],
       "type@ %a %a :=@ %a"],
    dn =
      [0,
       [11,
        cst_module$1,
        [15, [11, cst$76, [17, [0, cst$46, 1, 0], [15, 0]]]]],
       "module %a :=@ %a"],
    dp = [0, [15, 0], cst_a$0],
    dq =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          "sig",
          [17,
           [0, cst$46, 1, 0],
           [15, [17, 0, [17, [0, cst$46, 1, 0], [11, cst_end, [17, 0, 0]]]]]]]]],
       "@[<hv0>@[<hv2>sig@ %a@]@ end@]"],
    dr =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [11,
           cst_type$4,
           [17,
            [0, cst$46, 1, 0],
            [11, cst_of, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<hov2>module@ type@ of@ %a@]"],
    ds = [0, [11, "(module ", [15, [12, 41, 0]]], "(module %a)"],
    dt = [0, [0, [17, 3, 0], cst$77]],
    cst_val = cst_val$0,
    du =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [17,
          [0, cst$46, 1, 0],
          [15,
           [17,
            [0, cst$46, 1, 0],
            [12, 58, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>%s@ %a@ :@ %a@]%a"],
    cst_external = cst_external$0,
    dv =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [2,
           0,
           [17,
            [0, cst$46, 1, 0],
            [12, 58, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov>module@ %s@ :@ %a@]%a"],
    dw =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [2,
           0,
           [17,
            [0, cst$46, 1, 0],
            [12, 61, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov>module@ %s@ =@ %a@]%a"],
    dx =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [2,
           0,
           [17,
            [0, cst$46, 1, 0],
            [11, cst$78, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov>module@ %s@ :=@ %a@]%a"],
    dy =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [11,
           cst_rec,
           [17,
            [0, cst$46, 1, 0],
            [2,
             0,
             [12, 58, [17, [0, cst$46, 1, 0], [15, [17, 0, partial$20]]]]]]]]]],
       "@[<hov2>module@ rec@ %s:@ %a@]%a"],
    dz =
      [0,
       [17,
        [0, cst$46, 1, 0],
        [18,
         [1, [0, [11, cst_hov2, 0], cst_hov2]],
         [11,
          cst_and$4,
          [17,
           [0, cst$46, 1, 0],
           [2, 0, [12, 58, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@ @[<hov2>and@ %s:@ %a@]%a"],
    dA =
      [0,
       [17, [0, cst$46, 1, 0], [12, 61, [17, [0, cst$46, 1, 0], [15, 0]]]],
       cst_a$2],
    dB =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [11,
           cst_type$4,
           [17, [0, cst$46, 1, 0], [2, 0, [15, [17, 0, [15, 0]]]]]]]]],
       cst_hov2_module_type_s_a_a],
    dC =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [11,
           cst_type$4,
           [17,
            [0, cst$46, 1, 0],
            [2,
             0,
             [17,
              [0, cst$46, 1, 0],
              [11, cst$78, [17, [0, cst$46, 1, 0], [15, partial$21]]]]]]]]]],
       "@[<hov2>module@ type@ %s@ :=@ %a@]%a"],
    dD = [0, cst_astlib_pprintast_ml, 1290, 30],
    dE =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_open,
         [2, 0, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]],
       "@[<hov2>open%s@ %a@]%a"],
    dF =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_include, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]],
       cst_hov2_include_a_a],
    dG =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15,
           [15,
            [2,
             0,
             [17,
              [0, cst$43, 1, 0],
              [12, 58, [17, [0, cst$43, 1, 0], [15, partial$19]]]]]]]]]],
       "@[<2>%s %a%a%s@;:@;%a@]%a"],
    cst_and$0 = cst_and$4,
    dH = [0, [0, [17, [0, cst$69, 0, 0], 0], cst$69]],
    cst_class = cst_class$3,
    dI =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$69, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_class$0 = cst_class$3,
    dJ = [0, [15, 0], cst_a$0],
    dK = [0, [0, [17, 3, 0], cst$77]],
    dL =
      [0,
       [18,
        [1, [0, [11, cst_hv2, 0], cst_hv2]],
        [11,
         "struct",
         [17,
          [0, cst$43, 1, 0],
          [18,
           [1, [0, [11, cst_0, 0], cst_0]],
           [15, [17, 0, [17, [0, cst_1_2, 1, -2], [11, cst_end, [17, 0, 0]]]]]]]]],
       "@[<hv2>struct@;@[<0>%a@]@;<1 -2>end@]"],
    dM =
      [0,
       [11,
        cst_functor,
        [17,
         [0, cst$46, 1, 0],
         [12,
          40,
          [2,
           0,
           [17,
            [0, cst$46, 1, 0],
            [12,
             58,
             [17,
              [0, cst$46, 1, 0],
              [15, [12, 41, [17, partial$23, partial$22]]]]]]]]]],
       "functor@ (%s@ :@ %a)@;->@;%a"],
    dN =
      [0,
       [11,
        "functor ()",
        [17,
         [0, cst$43, 1, 0],
         [11, cst$45, [17, [0, cst$43, 1, 0], [15, 0]]]]],
       "functor ()@;->@;%a"],
    dO = [0, [12, 40, [15, [11, ")(", [15, [12, 41, 0]]]]], "(%a)(%a)"],
    dP = [0, [12, 40, [15, [11, ")()", 0]]], "(%a)()"],
    dQ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12,
         40,
         [15,
          [17,
           [0, cst$46, 1, 0],
           [12, 58, [17, [0, cst$46, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[<hov2>(%a@ :@ %a)@]"],
    dR =
      [0,
       [11, "(val", [17, [0, cst$46, 1, 0], [15, [12, 41, 0]]]],
       "(val@ %a)"],
    dS = [0, [11, cst$44, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    dT = [0, [0, [17, 3, 0], cst$77]],
    dU =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, [15, 0]]]],
       "@[<2>%a@]%a"],
    dV = [0, [12, 58, [17, [0, cst$46, 1, 0], 0]], cst$79],
    dW = [0, [12, 58, [17, [0, cst$46, 1, 0], 0]], cst$79],
    dX = [0, [12, 63, [17, [0, cst$46, 1, 0], 0]], cst$80],
    dY = [0, [11, cst_when, 0], cst_when],
    dZ = [0, [12, 63, [17, [0, cst$46, 1, 0], 0]], cst$80],
    d0 = [0, [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]], cst_a$5],
    d1 =
      [0,
       [11,
        cst_type$3,
        [17,
         [0, cst$46, 1, 0],
         [2, 0, [12, 41, [17, [0, cst$46, 1, 0], [15, 0]]]]]],
       "(type@ %s)@ %a"],
    d2 = [0, [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]], cst_a$5],
    d3 = [0, [0, [17, [0, cst$43, 1, 0], 0], cst$43]],
    d4 =
      [0,
       [15,
        [17,
         [0, cst$43, 1, 0],
         [11,
          ": type",
          [17,
           [0, cst$43, 1, 0],
           [15,
            [12,
             46,
             [17,
              [0, cst$43, 1, 0],
              [15, [17, [0, cst$43, 1, 0], [12, 61, partial$24]]]]]]]]]],
       "%a@;: type@;%a.@;%a@;=@;%a"],
    d5 =
      [0,
       [15,
        [17,
         [0, cst$43, 1, 0],
         [11,
          cst$53,
          [15,
           [17, [0, cst$43, 1, 0], [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]]]]]]],
       cst_a_a_a],
    d6 =
      [0,
       [15,
        [17, [0, cst$43, 1, 0], [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]]]],
       cst_a_a$2],
    d7 = [0, [15, [17, [0, cst$46, 1, 0], [15, 0]]], cst_a_a$1],
    d8 =
      [0,
       [12,
        40,
        [15,
         [17,
          [0, cst$43, 1, 0],
          [12,
           58,
           [17,
            [0, cst$43, 1, 0],
            [15,
             [12,
              41,
              [17, [0, cst$43, 1, 0], [12, 61, [17, partial$26, partial$25]]]]]]]]]],
       "(%a@;:@;%a)@;=@;%a"],
    d9 =
      [0,
       [15,
        [17,
         [0, cst$43, 1, 0],
         [12,
          58,
          [17,
           [0, cst$43, 1, 0],
           [15,
            [17,
             [0, cst$43, 1, 0],
             [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]]]]]]]],
       "%a@;:@;%a@;=@;%a"],
    d_ =
      [0,
       [15,
        [17, [0, cst$43, 1, 0], [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]]]],
       cst_a_a$2],
    d$ =
      [0,
       [15,
        [17,
         [0, cst$43, 1, 0],
         [11,
          cst$53,
          [15,
           [17, [0, cst$43, 1, 0], [12, 61, [17, [0, cst$43, 1, 0], [15, 0]]]]]]]],
       cst_a_a_a],
    ea =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [12, 32, [15, [15, [17, 0, [15, 0]]]]]]],
       "@[<2>%s %a%a@]%a"],
    cst_and$1 = cst_and$4,
    eb = [0, [0, [17, [0, cst$69, 0, 0], 0], cst$69]],
    cst_let = cst_let$1,
    ec =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$69, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_let$0 = cst_let$1,
    ed =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15,
           [17,
            [0, cst$43, 1, 0],
            [12, 61, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<2>%s %a@;=@;%a@]"],
    ee =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [12, 32, [2, 0, [17, 0, 0]]]]],
       "@[<2>%s %s@]"],
    ef =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst$81, [15, [17, 0, [15, 0]]]]],
       "@[<hov2>;;%a@]%a"],
    eg = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, 0]]], cst_2_a],
    eh =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_external$0,
         [17,
          [0, cst$46, 1, 0],
          [15,
           [17,
            [0, cst$46, 1, 0],
            [12, 58, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov2>external@ %a@ :@ %a@]%a"],
    ei = [0, cst_astlib_pprintast_ml, 1477, 25],
    ej = [0, [12, 40, [2, 0, [12, 58, [15, [12, 41, 0]]]]], "(%s:%a)"],
    ek = [0, [11, cst$70, 0], cst$70],
    el = [0, [11, cst$72, [17, [0, cst$46, 1, 0], [15, 0]]], " =@ %a"],
    em =
      [0,
       [11,
        cst$74,
        [17,
         [0, cst$43, 1, 0],
         [15,
          [17,
           [0, cst$43, 1, 0],
           [12, 61, [17, [0, cst$43, 1, 0], [15, [17, [0, cst$43, 1, 0], 0]]]]]]]],
       " :@;%a@;=@;%a@;"],
    en =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_module$1, [2, 0, [15, [17, 0, [15, 0]]]]]],
       "@[<hov2>module %s%a@]%a"],
    eo =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [17,
         [0, cst$46, 1, 0],
         [11,
          cst_and$4,
          [17,
           [0, cst$46, 1, 0],
           [2,
            0,
            [17,
             [0, cst$46, 1, 0],
             [12, 61, [17, [0, cst$46, 1, 0], [15, [17, 0, partial$28]]]]]]]]]],
       "@[<hov2>@ and@ %s@ =@ %a@]%a"],
    ep =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [17,
         [0, cst$46, 1, 0],
         [11,
          cst_and$4,
          [17,
           [0, cst$46, 1, 0],
           [2,
            0,
            [12,
             58,
             [15,
              [17, [0, cst$46, 1, 0], [12, 61, [17, partial$30, partial$29]]]]]]]]]],
       "@[<hov2>@ and@ %s:%a@ =@ %a@]%a"],
    eq =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [18,
         [1, [0, [11, cst_hov2, 0], cst_hov2]],
         [11,
          cst_module$0,
          [17,
           [0, cst$46, 1, 0],
           [11,
            cst_rec,
            [17,
             [0, cst$46, 1, 0],
             [2,
              0,
              [17, [0, cst$46, 1, 0], [12, 61, [17, partial$32, partial$31]]]]]]]]]],
       "@[<hv>@[<hov2>module@ rec@ %s@ =@ %a@]%a@ %a@]"],
    er =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [18,
         [1, [0, [11, cst_hov2, 0], cst_hov2]],
         [11,
          cst_module$0,
          [17,
           [0, cst$46, 1, 0],
           [11,
            cst_rec,
            [17,
             [0, cst$46, 1, 0],
             [2, 0, [12, 58, [15, [17, partial$34, partial$33]]]]]]]]]],
       "@[<hv>@[<hov2>module@ rec@ %s:%a@ =@ %a@]%a@ %a@]"],
    es = [0, cst_astlib_pprintast_ml, 1597, 13],
    et =
      [0,
       [17, [0, cst$46, 1, 0], [12, 61, [17, [0, cst$46, 1, 0], [15, 0]]]],
       cst_a$2],
    eu =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$46, 1, 0],
          [11,
           cst_type$4,
           [17, [0, cst$46, 1, 0], [2, 0, [15, [17, 0, [15, 0]]]]]]]]],
       cst_hov2_module_type_s_a_a],
    ev =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_open,
         [2, 0, [17, [0, cst$43, 1, 0], [15, [17, 0, [15, 0]]]]]]],
       "@[<2>open%s@;%a@]%a"],
    ew =
      [0,
       [11, cst$53, [18, [1, [0, 0, cst$50]], [15, [17, 0, [12, 32, 0]]]]],
       ": @[%a@] "],
    ex =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15, [15, [2, 0, [12, 32, [15, [15, [12, 61, partial$27]]]]]]]]]],
       "@[<2>%s %a%a%s %a%a=@;%a@]%a"],
    cst_and$2 = cst_and$4,
    ey = [0, [0, [17, [0, cst$69, 0, 0], 0], cst$69]],
    cst_class$1 = cst_class$3,
    ez =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$69, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_class$2 = cst_class$3,
    eA =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_include, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]],
       cst_hov2_include_a_a],
    eB = [0, [2, 0, [2, 0, [15, 0]]], "%s%s%a"],
    eC = [0, [0, [12, 41, 0], cst$59]],
    eD = [0, [0, [12, 40, 0], cst$54]],
    eE = [0, [0, [12, 44, [17, [0, cst$43, 1, 0], 0]], cst$55]],
    eF = [0, [15, [12, 32, 0]], "%a "],
    eG =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [12, 32, [15, [15, [2, 0, [2, 0, [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>%s %a%a%s%s%a@]%a"],
    cst_and$3 = cst_and$4,
    eH = [0, [0, [17, [0, cst$69, 0, 0], 0], cst$69]],
    cst_type = cst_type$4,
    eI =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$69, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_type$0 = cst_type$4,
    eJ = [0, cst_astlib_pprintast_ml, 1622, 10],
    eK =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [2,
          0,
          [12,
           58,
           [17,
            [0, cst$43, 1, 0],
            [15, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<2>%a%s:@;%a@;%a@]"],
    eL = [0, [0, [12, 59, [17, 3, 0]], ";@\n"]],
    eM = [0, [12, 123, [17, 3, [15, [12, 125, 0]]]], "{@\n%a}"],
    eN = [0, [17, [0, cst$43, 1, 0], [11, cst_private, 0]], "@;private"],
    eO = [0, [16, [17, [0, cst$43, 1, 0], [15, 0]]], "%t@;%a"],
    eP = [0, [17, [0, cst$43, 1, 0], [15, 0]], "@;%a"],
    eQ = [0, [12, 124, [17, [0, cst$43, 1, 0], 0]], "|@;"],
    eR = [0, [17, [0, cst$43, 1, 0], [12, 61, 0]], "@;="],
    eS = [0, [16, [16, [17, [0, cst$43, 1, 0], [11, cst$52, 0]]]], "%t%t@;.."],
    eT = [0, [11, cst$49, 0], cst$49],
    eU = [0, [0, [17, 3, 0], cst$77]],
    eV = [0, [17, 3, [15, 0]], "@\n%a"],
    eW = [0, [16, [16, [15, 0]]], "%t%t%a"],
    eX = [0, [16, [16, [17, [0, cst$43, 1, 0], [15, 0]]]], "%t%t@;%a"],
    eY =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [17,
         [0, cst$46, 1, 0],
         [11,
          cst_constraint,
          [17,
           [0, cst$46, 1, 0],
           [15,
            [17,
             [0, cst$46, 1, 0],
             [12, 61, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]]]]]],
       "@[<hov2>@ constraint@ %a@ =@ %a@]"],
    eZ = [0, [16, [16, [16, 0]]], "%t%t%t"],
    e0 = [0, [17, 3, [12, 124, [17, [0, cst$43, 1, 0], [15, 0]]]], "@\n|@;%a"],
    e1 = [0, [0, 0, cst$50]],
    e2 = [0, [0, [12, 41, 0], cst$59]],
    e3 = [0, [0, [12, 40, 0], cst$54]],
    e4 = [0, [0, [12, 44, 0], cst$42]],
    e5 = [0, [15, [17, [0, cst$43, 1, 0], 0]], cst_a$1],
    e6 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_type$1,
         [15,
          [15,
           [11, " += ", [15, [17, [0, cst$46, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>type %a%a += %a@ %a@]%a"],
    e7 = [0, [0, [17, [0, cst$43, 1, 0], 0], cst$43]],
    e8 =
      [0,
       [15, [17, [0, cst$43, 1, 0], [12, 46, [17, [0, cst$43, 1, 0], 0]]]],
       cst_a],
    e9 =
      [0,
       [0,
        [17, [0, cst$43, 1, 0], [12, 42, [17, [0, cst$43, 1, 0], 0]]],
        cst$57]],
    e_ =
      [0,
       [15,
        [17,
         [0, cst$43, 1, 0],
         [11, cst$45, [17, [0, cst$43, 1, 0], [15, 0]]]]],
       cst_a_a$3],
    e$ =
      [0,
       [15,
        [17,
         [0, cst$43, 1, 0],
         [11, cst$45, [17, [0, cst$43, 1, 0], [15, 0]]]]],
       cst_a_a$3],
    fa =
      [0,
       [2,
        0,
        [12,
         58,
         [17, [0, cst$43, 1, 0], [15, [15, [17, [0, cst$43, 1, 0], [15, 0]]]]]]],
       "%s:@;%a%a@;%a"],
    fb =
      [0,
       [0,
        [17, [0, cst$43, 1, 0], [12, 42, [17, [0, cst$43, 1, 0], 0]]],
        cst$57]],
    fc =
      [0,
       [17, [0, cst$43, 1, 0], [11, cst_of, [17, [0, cst$43, 1, 0], [15, 0]]]],
       cst_of_a],
    fd =
      [0,
       [17, [0, cst$43, 1, 0], [11, cst_of, [17, [0, cst$43, 1, 0], [15, 0]]]],
       cst_of_a],
    fe = [0, [2, 0, [15, [17, [0, cst$43, 1, 0], [15, 0]]]], "%s%a@;%a"],
    ff =
      [0,
       [2,
        0,
        [17,
         [0, cst$43, 1, 0],
         [12, 61, [17, [0, cst$43, 1, 0], [15, [15, 0]]]]]],
       "%s@;=@;%a%a"],
    fg =
      [0,
       [17,
        [0, cst$43, 1, 0],
        [11,
         cst$47,
         [18,
          [1, [0, [11, cst_2, 0], cst_2]],
          [15,
           [15,
            [17,
             [0, cst$43, 1, 0],
             [11, cst$45, [17, [0, cst$43, 1, 0], [15, [17, 0, 0]]]]]]]]]],
       "@;| @[<2>%a%a@;->@;%a@]"],
    fh = [0, [0, 0, cst$50]],
    fi = [0, [12, 126, [2, 0, 0]], "~%s"],
    fj = [0, [12, 126, [2, 0, [12, 58, [15, 0]]]], "~%s:%a"],
    fk = [0, [12, 63, [2, 0, 0]], "?%s"],
    fl = [0, [12, 63, [2, 0, [12, 58, [15, 0]]]], cst_s_a],
    fm = [0, [17, [0, cst$46, 1, 0], [3, 0, 0]], "@ %S"],
    fn = [0, [17, [0, cst$46, 1, 0], [2, 0, [0, 0]]], "@ %s%c"],
    fo = [0, [17, [0, cst$46, 1, 0], [2, 0, 0]], cst_s$1],
    fp = [0, [17, [0, cst$46, 1, 0], [15, 0]], "@ %a"],
    fq = [0, [17, [0, cst$46, 1, 0], [2, 0, 0]], cst_s$1],
    fr =
      [0,
       [18, [1, [0, [11, cst_hov0, 0], cst_hov0]], [15, [17, 0, 0]]],
       cst_hov0_a],
    fs =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12, 35, [2, 0, [17, [0, cst$46, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<hov2>#%s@ %a@]"],
    ft =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12, 35, [2, 0, [17, 0, 0]]]],
       "@[<hov2>#%s@]"],
    fu = [0, [18, [1, [0, 0, cst$50]], [15, [17, 0, 0]]], "@[%a@]"],
    fv = [0, [11, cst$81, 0], cst$81];
   function under_semi(ctxt){return [0, ctxt[1], 1, ctxt[3], ctxt[4]];}
   function list(sep, first, last, fu, f, xs){
    if(first) var x = first[1], first$0 = x; else var first$0 = o;
    if(last) var x$0 = last[1], last$0 = x$0; else var last$0 = n;
    if(sep) var x$1 = sep[1], sep$0 = x$1; else var sep$0 = m;
    if(! xs) return 0;
    if(! xs[2]){var x$3 = xs[1]; return caml_call2(fu, f, x$3);}
    caml_call2(pp, f, first$0);
    var param = xs;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace([0, Assert_failure, l], 1);
     var x$2 = param[1];
     if(! param[2]){caml_call2(fu, f, x$2); return caml_call2(pp, f, last$0);}
     var xs$0 = param[2];
     caml_call2(fu, f, x$2);
     caml_call2(pp, f, sep$0);
     param = xs$0;
    }
   }
   function paren(a, opt, b, fu, f, x){
    var first = a ? a[1] : s, last = opt ? opt[1] : r;
    return b
            ? (caml_call2
               (pp, f, p),
              caml_call2(pp, f, first),
              caml_call2(fu, f, x),
              caml_call2(pp, f, last),
              caml_call2(pp, f, q))
            : caml_call2(fu, f, x);
   }
   function print_longident(ppf, param){
    switch(param[0]){
      case 0:
       var s = param[1]; return protect_ident(ppf, s);
      case 1:
       var
        txt = param[2],
        longprefix = param[1],
        format = needs_parens(txt) ? needs_spaces(txt) ? i : j : k;
       return caml_call5
               (Stdlib_Format[143],
                ppf,
                format,
                print_longident,
                longprefix,
                txt);
      default:
       var s$0 = param[2], y = param[1];
       return caml_call6(pp, ppf, t, print_longident, y, print_longident, s$0);
    }
   }
   function longident_loc(f, x){
    return caml_call4(pp, f, u, print_longident, x[1]);
   }
   function constant(f, param){
    switch(param[0]){
      case 0:
       var match = param[2], i = param[1];
       if(! match)
        return paren
                (0,
                 0,
                 first_is(45, i),
                 function(f){return caml_call2(pp, f, w);},
                 f,
                 i);
       var m = match[1];
       return paren
               (0,
                0,
                first_is(45, i),
                function(f, param){
                 var m = param[2], i = param[1];
                 return caml_call4(pp, f, v, i, m);
                },
                f,
                [0, i, m]);
      case 1:
       var i$0 = param[1]; return caml_call3(pp, f, x, i$0);
      case 2:
       var match$0 = param[3], i$1 = param[1];
       if(! match$0) return caml_call3(pp, f, z, i$1);
       var delim = match$0[1];
       return caml_call5(pp, f, y, delim, i$1, delim);
      default:
       var match$1 = param[2], i$2 = param[1];
       if(! match$1)
        return paren
                (0,
                 0,
                 first_is(45, i$2),
                 function(f){return caml_call2(pp, f, B);},
                 f,
                 i$2);
       var m$0 = match$1[1];
       return paren
               (0,
                0,
                first_is(45, i$2),
                function(f, param){
                 var m = param[2], i = param[1];
                 return caml_call4(pp, f, A, i, m);
                },
                f,
                [0, i$2, m$0]);
    }
   }
   function mutable_flag(f, param){return param ? caml_call2(pp, f, C) : 0;}
   function virtual_flag(f, param){return param ? 0 : caml_call2(pp, f, D);}
   function rec_flag(f, rf){return rf ? caml_call2(pp, f, E) : 0;}
   function nonrec_flag(f, rf){return rf ? 0 : caml_call2(pp, f, F);}
   function direction_flag(f, param){
    return param ? caml_call2(pp, f, G) : caml_call2(pp, f, H);
   }
   function private_flag(f, param){return param ? 0 : caml_call2(pp, f, I);}
   function constant_string(f, s){return caml_call3(pp, f, J, s);}
   function tyvar(ppf, s){
    if(2 <= caml_ml_string_length(s) && 39 === caml_string_get(s, 1))
     return caml_call3(Stdlib_Format[143], ppf, K, s);
    return caml_call3(Stdlib_Format[143], ppf, L, s);
   }
   function tyvar_loc(f, str){return tyvar(f, str[1]);}
   function string_quot(f, x){return caml_call3(pp, f, c, x);}
   function class_params_def(ctxt, f, l){
    if(! l) return 0;
    function a(a, b){return type_param(ctxt, a, b);}
    var b = 0, c = 0;
    return caml_call4
            (pp, f, N, function(d, e){return list(M, c, b, a, d, e);}, l);
   }
   function type_with_label(ctxt, f, param){
    var c = param[2], label = param[1];
    if(typeof label === "number") return core_type1(ctxt, f, c);
    if(0 === label[0]){
     var s = label[1];
     return caml_call5
             (pp, f, O, s, function(a, b){return core_type1(ctxt, a, b);}, c);
    }
    var s$0 = label[1];
    return caml_call5
            (pp, f, P, s$0, function(a, b){return core_type1(ctxt, a, b);}, c);
   }
   function core_type(ctxt, f, x$0){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        var x = x$0;
        e:
        for(;;){
         if(0 !== x[4]) break a;
         var match = x[1];
         if(typeof match === "number") break;
         switch(match[0]){
           case 1:
            break b;
           case 6:
            break c;
           case 8:
            var sl = match[1];
            if(sl) break d;
            var ct$1 = match[2];
            x = ct$1;
            break;
           default: break e;
         }
        }
        return caml_call4
                (pp, f, Q, function(a, b){return core_type1(ctxt, a, b);}, x);
       }
       var ct$0 = match[2];
       return caml_call6
               (pp,
                f,
                W,
                function(f, l){
                 return caml_call4
                         (pp,
                          f,
                          V,
                          function(f, l){
                           if(! l) return 0;
                           var a = 0, b = 0;
                           return caml_call4
                                   (pp,
                                    f,
                                    U,
                                    function(c, d){return list(T, b, a, tyvar_loc, c, d);},
                                    l);
                          },
                          l);
                },
                sl,
                function(a, b){return core_type(ctxt, a, b);},
                ct$0);
      }
      var s = match[2], ct = match[1];
      return caml_call6
              (pp,
               f,
               S,
               function(a, b){return core_type1(ctxt, a, b);},
               ct,
               tyvar_loc,
               s);
     }
     var ct2 = match[3], ct1 = match[2], l = match[1];
     return caml_call6
             (pp,
              f,
              R,
              function(a, b){return type_with_label(ctxt, a, b);},
              [0, l, ct1],
              function(a, b){return core_type(ctxt, a, b);},
              ct2);
    }
    return caml_call6
            (pp,
             f,
             X,
             function(a, b){return core_type(ctxt, a, b);},
             [0, x[1], x[2], x[3], 0],
             function(a, b){return attributes(ctxt, a, b);},
             x[4]);
   }
   function core_type1(ctxt, f, x){
    if(0 !== x[4]) return core_type(ctxt, f, x);
    var match = x[1];
    if(typeof match === "number") return caml_call2(pp, f, Y);
    switch(match[0]){
      case 0:
       var s = match[1]; return tyvar(f, s);
      case 2:
       var
        l = match[1],
        a = function(a, b){return core_type1(ctxt, a, b);},
        b = 0,
        d = 0;
       return caml_call4
               (pp, f, _, function(c, e){return list(Z, d, b, a, c, e);}, l);
      case 3:
       var l$0 = match[2], li = match[1];
       return caml_call6
               (pp,
                f,
                ad,
                function(f, l){
                 if(! l) return 0;
                 if(l[2])
                  return list
                          (ab,
                           aa,
                           $,
                           function(a, b){return core_type(ctxt, a, b);},
                           f,
                           l);
                 var x = l[1];
                 return caml_call4
                         (pp,
                          f,
                          ac,
                          function(a, b){return core_type1(ctxt, a, b);},
                          x);
                },
                l$0,
                longident_loc,
                li);
      case 4:
       var
        o = match[2],
        l$1 = match[1],
        core_field_type =
          function(f, x){
           var match = x[1];
           if(0 === match[0]){
            var ct = match[2], l = match[1];
            return caml_call7
                    (pp,
                     f,
                     ae,
                     l[1],
                     function(a, b){return core_type(ctxt, a, b);},
                     ct,
                     function(a, b){return attributes(ctxt, a, b);},
                     x[3]);
           }
           var ct$0 = match[1];
           return caml_call4
                   (pp,
                    f,
                    af,
                    function(a, b){return core_type(ctxt, a, b);},
                    ct$0);
          },
        field_var =
          function(f, param){
           return param
                   ? l$1 ? caml_call2(pp, f, ag) : caml_call2(pp, f, ah)
                   : 0;
          },
        g = 0,
        h = 0;
       return caml_call6
               (pp,
                f,
                aj,
                function(a, b){return list(ai, h, g, core_field_type, a, b);},
                l$1,
                field_var,
                o);
      case 5:
       var
        l$2 = match[2],
        li$0 = match[1],
        i = function(a, b){return core_type(ctxt, a, b);};
       return caml_call6
               (pp,
                f,
                an,
                function(a, b){return list(am, al, ak, i, a, b);},
                l$2,
                longident_loc,
                li$0);
      case 7:
       var low = match[3], closed = match[2], l$3 = match[1];
       a:
       {
        if(l$3 && 0 !== l$3[1][1][0]){var first_is_inherit = 1; break a;}
        var first_is_inherit = 0;
       }
       var
        type_variant_helper =
          function(f, x){
           var match = x[1];
           if(0 === match[0]){
            var ctl = match[3], l = match[1];
            return caml_call8
                    (pp,
                     f,
                     aq,
                     function(ctxt, param){
                      var txt = param[1];
                      return caml_call3(pp, ctxt, c, txt);
                     },
                     l,
                     function(f, l){
                      if(! l) return 0;
                      function a(a, b){return core_type(ctxt, a, b);}
                      var b = 0, c = 0;
                      return caml_call4
                              (pp,
                               f,
                               ap,
                               function(d, e){return list(ao, c, b, a, d, e);},
                               ctl);
                     },
                     ctl,
                     function(a, b){return attributes(ctxt, a, b);},
                     x[3]);
           }
           var ct = match[1];
           return core_type(ctxt, f, ct);
          };
       return caml_call6
               (pp,
                f,
                av,
                function(f, l){
                 if(! l) return closed ? caml_call2(pp, f, au) : 0;
                 var a = 0, b = 0;
                 function c(c, d){
                  return list(as, b, a, type_variant_helper, c, d);
                 }
                 var
                  d =
                    closed
                     ? cst$6
                     : low ? cst$7 : first_is_inherit ? cst$8 : cst$9;
                 return caml_call5(pp, f, at, d, c, l);
                },
                l$3,
                function(f, low){
                 if(low){
                  var xs = low[1];
                  if(xs){
                   var a = 0, b = 0, c = 0;
                   return caml_call4
                           (pp,
                            f,
                            ar,
                            function(d, e){return list(c, b, a, string_quot, d, e);},
                            xs);
                  }
                 }
                 return 0;
                },
                low);
      case 9:
       var
        match$0 = match[1],
        cstrs = match$0[2],
        lid = match$0[1],
        aux =
          function(f, param){
           var ct = param[2], s = param[1];
           return caml_call6
                   (pp,
                    f,
                    aw,
                    longident_loc,
                    s,
                    function(a, b){return core_type(ctxt, a, b);},
                    ct);
          };
       if(! cstrs) return caml_call4(pp, f, az, longident_loc, lid);
       var j = 0, k = 0;
       return caml_call6
               (pp,
                f,
                ay,
                longident_loc,
                lid,
                function(a, b){return list(ax, k, j, aux, a, b);},
                cstrs);
      case 10:
       var ct = match[2], li$1 = match[1];
       return caml_call6
               (pp,
                f,
                aA,
                longident_loc,
                li$1,
                function(a, b){return core_type(ctxt, a, b);},
                ct);
      case 11:
       var e = match[1]; return extension(ctxt, f, e);
      default:
       return paren
               (0, 0, 1, function(a, b){return core_type(ctxt, a, b);}, f, x);
    }
   }
   function pattern$1(counter, ctxt, f, x){
    if(0 !== x[4])
     return caml_call6
             (pp,
              f,
              aC,
              function(a, b){return pattern(ctxt, a, b);},
              [0, x[1], x[2], x[3], 0],
              function(a, b){return attributes(ctxt, a, b);},
              x[4]);
    var match = x[1];
    if(typeof match !== "number" && 1 === match[0]){
     var s = match[2], p = match[1];
     return caml_call6
             (pp,
              f,
              aB,
              function(a, b){return pattern(ctxt, a, b);},
              p,
              protect_ident,
              s[1]);
    }
    var x$0 = x, acc = 0;
    for(;;){
     var a = x$0[1];
     if(typeof a === "number") break;
     if(9 !== a[0]) break;
     if(x$0[4]) break;
     var p2 = a[2], p1 = a[1], acc$0 = [0, p2, acc];
     x$0 = p1;
     acc = acc$0;
    }
    var orpats = [0, x$0, acc];
    if(orpats[2]){
     var b = function(a, b){return pattern1(ctxt, a, b);}, c = 0, d = 0;
     return caml_call4
             (pp,
              f,
              aE,
              function(a, e){return list(aD, d, c, b, a, e);},
              orpats);
    }
    var x$1 = orpats[1];
    if(counter >= 50)
     return caml_trampoline_return(pattern1$0, [0, ctxt, f, x$1]);
    var counter$0 = counter + 1 | 0;
    return pattern1$0(counter$0, ctxt, f, x$1);
   }
   function pattern(ctxt, f, x){
    return caml_trampoline(pattern$1(0, ctxt, f, x));
   }
   function pattern1$0(counter, ctxt, f, x){
    function pattern_list_helper(f, p){
     var a = p[1];
     if(typeof a !== "number" && 5 === a[0]){
      var e = a[1][1];
      if(0 === e[0] && e[1] === cst$61){
       var g = a[2];
       if(g){
        var h = g[1];
        if(! h[1]){
         var b = h[2][1];
         if(typeof b !== "number" && 4 === b[0]){
          var c = b[1];
          if(c){
           var d = c[2];
           if(d && ! d[2] && ! p[4]){
            var pat2 = d[1], pat1 = c[1];
            return caml_call6
                    (pp,
                     f,
                     aF,
                     function(a, b){return simple_pattern(ctxt, a, b);},
                     pat1,
                     pattern_list_helper,
                     pat2);
           }
          }
         }
        }
       }
      }
     }
     return pattern1(ctxt, f, p);
    }
    if(0 !== x[4]){
     if(counter >= 50)
      return caml_trampoline_return(pattern$1, [0, ctxt, f, x]);
     var counter$2 = counter + 1 | 0;
     return pattern$1(counter$2, ctxt, f, x);
    }
    var match = x[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 5:
        var li = match[1], txt = li[1];
        a:
        if(0 === txt[0]){
         var a = txt[1];
         if(a !== cst$70 && a !== cst$71) break a;
         if(counter >= 50)
          return caml_trampoline_return(simple_pattern$0, [0, ctxt, f, x]);
         var counter$0 = counter + 1 | 0;
         return simple_pattern$0(counter$0, ctxt, f, x);
        }
        var po = match[2];
        if(caml_equal(txt, aG))
         return caml_call4(pp, f, aH, pattern_list_helper, x);
        if(! po) return caml_call4(pp, f, aL, longident_loc, li);
        var match$0 = po[1], vl = match$0[1];
        if(vl){
         var x$0 = match$0[2], b = 0, c = 0;
         return caml_call8
                 (pp,
                  f,
                  aJ,
                  longident_loc,
                  li,
                  function(a, d){return list(aI, c, b, string_loc, a, d);},
                  vl,
                  function(a, b){return simple_pattern(ctxt, a, b);},
                  x$0);
        }
        var x$1 = match$0[2];
        return caml_call6
                (pp,
                 f,
                 aK,
                 longident_loc,
                 li,
                 function(a, b){return simple_pattern(ctxt, a, b);},
                 x$1);
       case 6:
        var match$1 = match[2];
        if(match$1){
         var p = match$1[1], l = match[1];
         return caml_call5
                 (pp,
                  f,
                  aM,
                  l,
                  function(a, b){return simple_pattern(ctxt, a, b);},
                  p);
        }
        break;
     }
    if(counter >= 50)
     return caml_trampoline_return(simple_pattern$0, [0, ctxt, f, x]);
    var counter$1 = counter + 1 | 0;
    return simple_pattern$0(counter$1, ctxt, f, x);
   }
   function pattern1(ctxt, f, x){
    return caml_trampoline(pattern1$0(0, ctxt, f, x));
   }
   function simple_pattern$0(counter, ctxt, f, x){
    if(0 !== x[4]){
     if(counter >= 50)
      return caml_trampoline_return(pattern$1, [0, ctxt, f, x]);
     var counter$0 = counter + 1 | 0;
     return pattern$1(counter$0, ctxt, f, x);
    }
    var match = x[1];
    if(typeof match === "number") return caml_call2(pp, f, aN);
    switch(match[0]){
      case 0:
       var txt = match[1][1]; return protect_ident(f, txt);
      case 2:
       var c = match[1]; return caml_call4(pp, f, aO, constant, c);
      case 3:
       var c2 = match[2], c1 = match[1];
       return caml_call6(pp, f, aP, constant, c1, constant, c2);
      case 4:
       var
        l = match[1],
        h = function(a, b){return pattern1(ctxt, a, b);},
        i = 0,
        j = 0;
       return caml_call4
               (pp, f, aR, function(a, b){return list(aQ, j, i, h, a, b);}, l);
      case 5:
       var b = match[1][1];
       if(0 === b[0]){
        var x$0 = b[1];
        if(x$0 !== cst$70 && x$0 !== cst$71) break;
        if(! match[2]) return caml_call3(pp, f, aS, x$0);
       }
       break;
      case 6:
       if(! match[2]){var l$0 = match[1]; return caml_call3(pp, f, aT, l$0);}
       break;
      case 7:
       var
        closed = match[2],
        l$1 = match[1],
        longident_x_pattern =
          function(f, param){
           var p = param[2], li = param[1], b = li[1];
           if(0 === b[0]){
            var a = p[1];
            if(typeof a !== "number" && 0 === a[0] && ! p[4]){
             var txt = a[1][1], s = b[1];
             if(s === txt) return caml_call4(pp, f, aV, longident_loc, li);
            }
           }
           return caml_call6
                   (pp,
                    f,
                    aU,
                    longident_loc,
                    li,
                    function(a, b){return pattern1(ctxt, a, b);},
                    p);
          };
       if(closed){
        var k = 0, m = 0;
        return caml_call4
                (pp,
                 f,
                 aX,
                 function(a, b){
                  return list(aW, m, k, longident_x_pattern, a, b);
                 },
                 l$1);
       }
       var n = 0, o = 0;
       return caml_call4
               (pp,
                f,
                aZ,
                function(a, b){
                 return list(aY, o, n, longident_x_pattern, a, b);
                },
                l$1);
      case 8:
       var
        l$2 = match[1],
        q = function(a, b){return pattern1(ctxt, a, b);},
        r = 0,
        t = 0;
       return caml_call4
               (pp,
                f,
                a1,
                function(a, b){return list(a0, t, r, q, a, b);},
                l$2);
      case 10:
       var ct = match[2], p = match[1];
       return caml_call6
               (pp,
                f,
                a2,
                function(a, b){return pattern1(ctxt, a, b);},
                p,
                function(a, b){return core_type(ctxt, a, b);},
                ct);
      case 11:
       var li = match[1]; return caml_call4(pp, f, a3, longident_loc, li);
      case 12:
       var p$0 = match[1];
       return caml_call4
               (pp,
                f,
                a4,
                function(a, b){return simple_pattern(ctxt, a, b);},
                p$0);
      case 13:
       var match$0 = match[1][1];
       if(! match$0) return caml_call2(pp, f, a6);
       var s = match$0[1];
       return caml_call3(pp, f, a5, s);
      case 14:
       var p$1 = match[1];
       return caml_call4
               (pp, f, a7, function(a, b){return pattern1(ctxt, a, b);}, p$1);
      case 15:
       var e = match[1]; return extension(ctxt, f, e);
      case 16:
       var p$2 = match[2], lid = match[1], a = p$2[1];
       a:
       {
        b:
        if(typeof a !== "number"){
         switch(a[0]){
           case 5:
            var d = a[1][1];
            if(0 !== d[0]) break b;
            var g = d[1];
            if(g !== cst$70 && g !== cst$71) break b;
            if(a[2]) break b;
            break;
           case 7:
           case 8: break;
           default: break b;
         }
         var with_paren = 0;
         break a;
        }
        var with_paren = 1;
       }
       var u = function(a, b){return pattern1(ctxt, a, b);}, v = 0, w = 0;
       return caml_call6
               (pp,
                f,
                a8,
                longident_loc,
                lid,
                function(a, b){return paren(w, v, with_paren, u, a, b);},
                p$2);
    }
    return paren(0, 0, 1, function(a, b){return pattern(ctxt, a, b);}, f, x);
   }
   function simple_pattern(ctxt, f, x){
    return caml_trampoline(simple_pattern$0(0, ctxt, f, x));
   }
   function label_exp(ctxt, f, param){
    var p = param[3], opt = param[2], l = param[1];
    if(typeof l === "number")
     return caml_call4
             (pp,
              f,
              a9,
              function(a, b){return simple_pattern(ctxt, a, b);},
              p);
    if(0 === l[0]){
     var l$0 = l[1], b = p[1];
     if(typeof b !== "number" && 0 === b[0] && ! p[4]){
      var txt = b[1][1];
      if(txt === l$0) return caml_call3(pp, f, a$, l$0);
     }
     return caml_call5
             (pp,
              f,
              a_,
              l$0,
              function(a, b){return simple_pattern(ctxt, a, b);},
              p);
    }
    var rest = l[1], c = p[1];
    if(typeof c !== "number" && 0 === c[0] && ! p[4]){
     var txt$0 = c[1][1];
     if(txt$0 === rest){
      if(! opt) return caml_call3(pp, f, bd, rest);
      var o$0 = opt[1];
      return caml_call5
              (pp, f, bc, rest, function(b, c){return a(ctxt, b, c);}, o$0);
     }
    }
    if(! opt)
     return caml_call5
             (pp,
              f,
              bb,
              rest,
              function(a, b){return simple_pattern(ctxt, a, b);},
              p);
    var o = opt[1];
    return caml_call7
            (pp,
             f,
             ba,
             rest,
             function(a, b){return pattern1(ctxt, a, b);},
             p,
             function(b, c){return a(ctxt, b, c);},
             o);
   }
   function sugar_expr(ctxt, f, e){
    if(0 !== e[4]) return 0;
    var match = e[1];
    if(typeof match !== "number" && 4 === match[0]){
     var g = match[1], b = g[1];
     if(typeof b !== "number" && 0 === b[0] && ! g[4]){
      var args = match[2], id = b[1][1];
      if
       (caml_call2
         (Stdlib_List[33],
          function(param){var lab = param[1]; return 0 === lab ? 1 : 0;},
          args)){
       var
        print_indexop =
          function
          (a,
           path_prefix,
           assign,
           left,
           sep,
           right,
           print_index,
           indices,
           rem_args){
           function print_path(ppf, param){
            if(! param) return 0;
            var m = param[1];
            return caml_call4(pp, ppf, be, print_longident, m);
           }
           if(assign){
            if(rem_args && ! rem_args[2]){
             var v = rem_args[1], b = 0, c = 0, d = [0, sep];
             caml_call12
              (pp,
               f,
               bf,
               function(a, b){return simple_expr(ctxt, a, b);},
               a,
               print_path,
               path_prefix,
               left,
               function(a, e){return list(d, c, b, print_index, a, e);},
               indices,
               right,
               function(a, b){return simple_expr(ctxt, a, b);},
               v);
             return 1;
            }
           }
           else if(! rem_args){
            var e = 0, g = 0, h = [0, sep];
            caml_call10
             (pp,
              f,
              bg,
              function(a, b){return simple_expr(ctxt, a, b);},
              a,
              print_path,
              path_prefix,
              left,
              function(a, b){return list(h, g, e, print_index, a, b);},
              indices,
              right);
            return 1;
           }
           return 0;
          },
        match$0 = caml_call2(Stdlib_List[20], function(a){return a[2];}, args);
       a:
       {
        switch(id[0]){
          case 0:
           var s = id[1];
           if(s !== cst$82 || ! match$0)
            var s$0 = s;
           else{
            if(! match$0[2]){
             var e$0 = match$0[1];
             caml_call4
              (pp,
               f,
               bj,
               function(a, b){return simple_expr(ctxt, a, b);},
               e$0);
             return 1;
            }
            var s$0 = s;
           }
           break;
          case 1:
           var path = id[1], func = id[2];
           b:
           {
            if(func !== "get" && func !== cst_set) break b;
            if(match$0){
             var
              other_args = match$0[2],
              a$1 = match$0[1],
              assign$0 = func === cst_set ? 1 : 0,
              p = 0,
              print =
                function(a, b, c, d, e, f){
                 return print_indexop(a$1, p, assign$0, a, b, c, d, e, f);
                };
             switch(path[0]){
               case 0:
                var match$3 = path[1];
                if(match$3 !== "Array"){
                 if(match$3 === "String" && other_args){
                  var rest$0 = other_args[2], i$1 = other_args[1];
                  return print
                          (cst$13,
                           bk,
                           cst$12,
                           function(b, c){return a(ctxt, b, c);},
                           [0, i$1, 0],
                           rest$0);
                 }
                }
                else if(other_args){
                 var rest$1 = other_args[2], i$2 = other_args[1];
                 return print
                         (cst$15,
                          bl,
                          cst$14,
                          function(b, c){return a(ctxt, b, c);},
                          [0, i$2, 0],
                          rest$1);
                }
                break;
               case 1:
                var h = path[1];
                if(0 === h[0] && h[1] === "Bigarray"){
                 var match$4 = path[2];
                 if(match$4 !== "Array1"){
                  if(match$4 !== "Array2"){
                   if(match$4 !== "Array3"){
                    if(match$4 === "Genarray" && other_args){
                     var j = other_args[1], c = j[1];
                     if(typeof c !== "number" && 13 === c[0] && ! j[4]){
                      var rest$2 = other_args[2], indexes = c[1];
                      return print
                              (cst$17,
                               bm,
                               cst$16,
                               function(a, b){return simple_expr(ctxt, a, b);},
                               indexes,
                               rest$2);
                     }
                    }
                   }
                   else if(other_args){
                    var d = other_args[2];
                    if(d){
                     var match$5 = d[2];
                     if(match$5){
                      var
                       rest$3 = match$5[2],
                       i3 = match$5[1],
                       i2 = d[1],
                       i1 = other_args[1];
                      return print
                              (cst$19,
                               bn,
                               cst$18,
                               function(a, b){return simple_expr(ctxt, a, b);},
                               [0, i1, [0, i2, [0, i3, 0]]],
                               rest$3);
                     }
                    }
                   }
                  }
                  else if(other_args){
                   var match$6 = other_args[2];
                   if(match$6){
                    var
                     rest$4 = match$6[2],
                     i2$0 = match$6[1],
                     i1$0 = other_args[1];
                    return print
                            (cst$21,
                             bo,
                             cst$20,
                             function(a, b){return simple_expr(ctxt, a, b);},
                             [0, i1$0, [0, i2$0, 0]],
                             rest$4);
                   }
                  }
                 }
                 else if(other_args){
                  var rest$5 = other_args[2], i1$1 = other_args[1];
                  return print
                          (cst$23,
                           bp,
                           cst$22,
                           function(a, b){return simple_expr(ctxt, a, b);},
                           [0, i1$1, 0],
                           rest$5);
                 }
                }
                break;
             }
             return 0;
            }
           }
           var s$0 = id[2];
           break;
          default: break a;
        }
        if(match$0){
         var match$1 = match$0[2];
         if(match$1){
          var rest = match$1[2], i = match$1[1], a$0 = match$0[1];
          if(first_is(46, s$0)){
           var
            multi_indices = caml_call2(Stdlib_String[15], s$0, 59),
            match$2 = i[1];
           b:
           {
            if(typeof match$2 !== "number" && 13 === match$2[0]){
             var l = match$2[1];
             if(multi_indices){var i$0 = l; break b;}
            }
            var i$0 = [0, i, 0];
           }
           var
            assign = last_is(45, s$0),
            n = caml_ml_string_length(s$0),
            kind =
              assign
               ? caml_string_get(s$0, n - 3 | 0)
               : caml_string_get(s$0, n - 1 | 0);
           if(41 === kind)
            var right$0 = right, left = 40;
           else if(93 === kind)
            var right$0 = cst$10, left = 91;
           else{
            if(125 !== kind)
             throw caml_maybe_attach_backtrace([0, Assert_failure, bi], 1);
            var right$0 = cst$11, left = 123;
           }
           if(1 === id[0])
            var m = id[1], path_prefix = [0, m];
           else
            var path_prefix = 0;
           var
            k = 1 + caml_call2(Stdlib_String[36], s$0, left) | 0,
            left$0 = caml_call3(Stdlib_String[16], s$0, 0, k),
            o =
              multi_indices
               ? function(b, c){return a(ctxt, b, c);}
               : function(a, b){return simple_expr(ctxt, a, b);};
           return print_indexop
                   (a$0,
                    path_prefix,
                    assign,
                    left$0,
                    bh,
                    right$0,
                    o,
                    i$0,
                    rest);
          }
         }
        }
       }
       return 0;
      }
     }
    }
    return 0;
   }
   function b(counter, ctxt$0, f, x$0){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            for(;;){
                             if(0 !== x$0[4]) break a;
                             var match = x$0[1];
                             if(typeof match === "number") return caml_call2(pp, f, bq);
                             z:
                             {
                              switch(match[0]){
                                case 4:
                                 break b;
                                case 8:
                                 var match$2 = match[2];
                                 if(! match$2) break z;
                                 var eo$0 = match$2[1], li = match[1];
                                 if(is_simple_construct(view_expr(x$0))) break z;
                                 break c;
                                case 9:
                                 var match$4 = match[2]; if(match$4) break e; break z;
                                case 12:
                                 break f;
                                case 21:
                                 var li$1 = match[1];
                                 return caml_call4(pp, f, bS, longident_loc, li$1);
                                case 22:
                                 break g;
                                case 23:
                                 break h;
                                case 26:
                                 break i;
                                case 27:
                                 break j;
                                case 28:
                                 break k;
                                case 34:
                                 var e$11 = match[1]; return extension(ctxt$0, f, e$11);
                                case 14: break;
                                case 3:
                                case 5:
                                case 6:
                                case 15:
                                case 30:
                                 if(ctxt$0[1] || ctxt$0[2]) break l; break;
                                case 2:
                                case 24:
                                case 25:
                                case 32:
                                case 33:
                                 if(ctxt$0[2]) break y; break;
                                default: break z;
                              }
                              if(typeof match === "number") break m;
                              switch(match[0]){
                                case 3:
                                 break n;
                                case 5:
                                 break o;
                                case 6:
                                 break p;
                                case 24:
                                 break q;
                                case 25:
                                 break r;
                                case 30:
                                 break s;
                                case 32:
                                 break t;
                                case 33:
                                 break u;
                                case 14:
                                case 15:
                                 if(ctxt$0[3]) break v;
                                 if(typeof match !== "number")
                                  switch(match[0]){case 14: break w;case 15: break x;}
                                 break;
                                default: break m;
                              }
                             }
                             if(0 === x$0[4]) break d;
                            }
                            return paren
                                    (0,
                                     0,
                                     1,
                                     function(b, c){return a(reset_ctxt, b, c);},
                                     f,
                                     x$0);
                           }
                           var acc = 0, v = x$0;
                           for(;;){
                            var b = v[1];
                            if(typeof b === "number") break;
                            if(15 !== b[0]) break;
                            if(v[4]) break;
                            var e2$0 = b[2], e1$0 = b[1], acc$0 = [0, e1$0, acc];
                            acc = acc$0;
                            v = e2$0;
                           }
                           var
                            lst = caml_call1(Stdlib_List[10], [0, v, acc]),
                            t = under_semi(ctxt$0),
                            u = function(b, c){return a(t, b, c);},
                            w = 0,
                            y = 0;
                           return caml_call4
                                   (pp,
                                    f,
                                    bz,
                                    function(a, b){return list(by, y, w, u, a, b);},
                                    lst);
                          }
                          var
                           eo = match[3],
                           e2 = match[2],
                           e1 = match[1],
                           n = [0, ctxt$0[1], ctxt$0[2], 1, ctxt$0[4]],
                           expression_under_ifthenelse =
                             function(b, c){return a(n, b, c);};
                          return caml_call8
                                  (pp,
                                   f,
                                   fmt,
                                   expression_under_ifthenelse,
                                   e1,
                                   expression_under_ifthenelse,
                                   e2,
                                   function(f, eo){
                                    if(! eo) return 0;
                                    var x = eo[1], b = under_semi(ctxt$0);
                                    return caml_call4
                                            (pp, f, bx, function(c, d){return a(b, c, d);}, x);
                                   },
                                   eo);
                         }
                         return paren
                                 (0,
                                  0,
                                  1,
                                  function(b, c){return a(reset_ctxt, b, c);},
                                  f,
                                  x$0);
                        }
                        var
                         match$0 = match[1],
                         body$0 = match$0[3],
                         ands = match$0[2],
                         let$ = match$0[1],
                         A = function(a, b){return binding_op(ctxt$0, a, b);},
                         B = 0,
                         C = 0;
                        return caml_call8
                                (pp,
                                 f,
                                 bF,
                                 function(a, b){return binding_op(ctxt$0, a, b);},
                                 let$,
                                 function(a, b){return list(bE, C, B, A, a, b);},
                                 ands,
                                 function(b, c){return a(ctxt$0, b, c);},
                                 body$0);
                       }
                       var e$5 = match[2], o = match[1], z = o[1];
                       return caml_call7
                               (pp,
                                f,
                                bD,
                                override(o[2]),
                                function(a, b){return module_expr(ctxt$0, a, b);},
                                z,
                                function(b, c){return a(ctxt$0, b, c);},
                                e$5);
                      }
                      var e$4 = match[2], lid = match[1];
                      return caml_call5
                              (pp,
                               f,
                               bC,
                               lid[1],
                               function(b, c){return a(ctxt$0, b, c);},
                               e$4);
                     }
                     var e$3 = match[2], cd = match[1];
                     return caml_call6
                             (pp,
                              f,
                              bB,
                              function(a, b){return extension_constructor(ctxt$0, a, b);},
                              cd,
                              function(b, c){return a(ctxt$0, b, c);},
                              e$3);
                    }
                    var e$2 = match[3], me = match[2], s = match[1];
                    return caml_call7
                            (pp,
                             f,
                             bA,
                             value(s[1], cst$25),
                             function(a, b){return module_expr(reset_ctxt, a, b);},
                             me,
                             function(b, c){return a(ctxt$0, b, c);},
                             e$2);
                   }
                   var l$2 = match[2], e$1 = match[1];
                   return caml_call6
                           (pp,
                            f,
                            bw,
                            function(b, c){return a(reset_ctxt, b, c);},
                            e$1,
                            function(a, b){return case_list(ctxt$0, a, b);},
                            l$2);
                  }
                  var l$1 = match[2], e$0 = match[1];
                  return caml_call6
                          (pp,
                           f,
                           bv,
                           function(b, c){return a(reset_ctxt, b, c);},
                           e$0,
                           function(a, b){return case_list(ctxt$0, a, b);},
                           l$1);
                 }
                 var body = match[3], c = match[2], params = match[1];
                 if(params)
                  return caml_call4
                          (pp,
                           f,
                           bs,
                           function(f, param){
                            return function_params_then_body
                                    (ctxt$0, f, params, c, body, cst$24);
                           },
                           0);
                 if(c){
                  var c$0 = c[1];
                  return caml_call6
                          (pp,
                           f,
                           bt,
                           function(a, b){return function_body(ctxt$0, a, b);},
                           body,
                           function(a, b){return type_constraint(ctxt$0, a, b);},
                           c$0);
                 }
                 var
                  should_paren = 0 === body[0] ? 0 : ctxt$0[4],
                  ctxt = should_paren ? reset_ctxt : ctxt$0,
                  p = function(a, b){return function_body(ctxt, a, b);},
                  q = 0,
                  r = 0;
                 return caml_call4
                         (pp,
                          f,
                          bu,
                          function(a, b){return paren(r, q, should_paren, p, a, b);},
                          body);
                }
                var e = match[3], l$0 = match[2], rf = match[1];
                return caml_call6
                        (pp,
                         f,
                         br,
                         function(a, b){return bindings(reset_ctxt, a, b);},
                         [0, rf, l$0],
                         function(b, c){return a(ctxt$0, b, c);},
                         e);
               }
               return paren
                       (0,
                        0,
                        1,
                        function(b, c){return a(reset_ctxt, b, c);},
                        f,
                        x$0);
              }
              var match$5 = match[2], e$10 = match[1];
              if(! match$5)
               return caml_call4
                       (pp,
                        f,
                        b0,
                        function(a, b){return simple_expr(ctxt$0, a, b);},
                        e$10);
              var ct = match$5[1];
              return caml_call6
                      (pp,
                       f,
                       bZ,
                       function(a, b){return simple_expr(ctxt$0, a, b);},
                       e$10,
                       function(a, b){return core_type(ctxt$0, a, b);},
                       ct);
             }
             var e$9 = match[1];
             return caml_call4
                     (pp,
                      f,
                      bY,
                      function(a, b){return simple_expr(ctxt$0, a, b);},
                      e$9);
            }
            var e$8 = match[1];
            return caml_call4
                    (pp,
                     f,
                     bX,
                     function(a, b){return simple_expr(ctxt$0, a, b);},
                     e$8);
           }
           var
            l$5 = match[1],
            string_x_expression =
              function(f, param){
               var e = param[2], s = param[1];
               return caml_call5
                       (pp,
                        f,
                        bU,
                        s[1],
                        function(b, c){return a(ctxt$0, b, c);},
                        e);
              },
            L = 0,
            M = 0;
           return caml_call4
                   (pp,
                    f,
                    bW,
                    function(a, b){
                     return list(bV, M, L, string_x_expression, a, b);
                    },
                    l$5);
          }
          var e$7 = match[2], s$3 = match[1];
          return caml_call5
                  (pp,
                   f,
                   bT,
                   s$3[1],
                   function(b, c){return a(ctxt$0, b, c);},
                   e$7);
         }
         var e2$1 = match[3], li$0 = match[2], e1$1 = match[1];
         return caml_call8
                 (pp,
                  f,
                  bR,
                  function(a, b){return simple_expr(ctxt$0, a, b);},
                  e1$1,
                  longident_loc,
                  li$0,
                  function(a, b){return simple_expr(ctxt$0, a, b);},
                  e2$1);
        }
        var eo$1 = match$4[1], l$4 = match[1];
        return caml_call5
                (pp,
                 f,
                 bQ,
                 l$4,
                 function(a, b){return simple_expr(ctxt$0, a, b);},
                 eo$1);
       }
       var match$6 = x$0[1];
       if(typeof match$6 !== "number" && 29 === match$6[0]){
        var cs = match$6[1];
        return caml_call4
                (pp,
                 f,
                 b8,
                 function(a, b){return class_structure(ctxt$0, a, b);},
                 cs);
       }
       if(counter >= 50)
        return caml_trampoline_return(expression2$0, [0, ctxt$0, f, x$0]);
       var counter$0 = counter + 1 | 0;
       return expression2$0(counter$0, ctxt$0, f, x$0);
      }
      var match$3 = view_expr(x$0);
      if(typeof match$3 === "number"){
       if(812216871 === match$3)
        return caml_call6
                (pp,
                 f,
                 bN,
                 longident_loc,
                 li,
                 function(a, b){return simple_expr(ctxt$0, a, b);},
                 eo$0);
      }
      else{
       var variant$0 = match$3[1];
       if(-1044071951 === variant$0){
        var ls = match$3[2];
        return list
                (bP,
                 0,
                 0,
                 function(a, b){return simple_expr(ctxt$0, a, b);},
                 f,
                 ls);
       }
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, bO], 1);
     }
     var l$3 = match[2], e$6 = match[1], i = 1 - sugar_expr(ctxt$0, f, x$0);
     if(! i) return i;
     var d = e$6[1];
     b:
     {
      if(typeof d !== "number" && 0 === d[0]){
       var h = d[1][1];
       if(0 === h[0] && ! e$6[4]){
        var l = h[1], match$1 = fixity_of_string(l);
        break b;
       }
      }
      var match$1 = -453122489;
     }
     if(typeof match$1 !== "number"){
      var variant = match$1[1];
      if(-784100624 === variant){
       var s$0 = match$1[2];
       if(l$3){
        var arg1 = l$3[1];
        if(typeof arg1[1] === "number"){
         var g = l$3[2];
         if(g){
          var arg2 = g[1];
          if(typeof arg2[1] === "number" && ! g[2])
           return caml_call7
                   (pp,
                    f,
                    bJ,
                    function(a, b){
                     return label_x_expression_param(reset_ctxt, a, b);
                    },
                    arg1,
                    s$0,
                    function(a, b){
                     return label_x_expression_param(ctxt$0, a, b);
                    },
                    arg2);
         }
        }
       }
       var
        D = function(a, b){return label_x_expression_param(ctxt$0, a, b);},
        E = 0,
        F = 0,
        G = 0;
       return caml_call6
               (pp,
                f,
                bI,
                function(a, b){return simple_expr(ctxt$0, a, b);},
                e$6,
                function(a, b){return list(G, F, E, D, a, b);},
                l$3);
      }
      if(-481604174 === variant){
       var s$1 = match$1[2];
       if(caml_call2(Stdlib_List[37], s$1, bK)){
        b:
        {
         if(l$3){
          var j = l$3[1][2][1];
          if(typeof j !== "number" && 1 === j[0] && ! l$3[2]){var k = 0; break b;}
         }
         var k = 1;
        }
        var
         s$2 =
           k
            ? caml_call3
              (Stdlib_String[16], s$1, 1, caml_ml_string_length(s$1) - 1 | 0)
            : s$1;
       }
       else
        var s$2 = s$1;
       if(l$3){
        var m = l$3[1];
        if(typeof m[1] === "number" && ! l$3[2]){
         var x = m[2];
         return caml_call5
                 (pp,
                  f,
                  bM,
                  s$2,
                  function(a, b){return simple_expr(ctxt$0, a, b);},
                  x);
        }
       }
       var
        H = function(a, b){return label_x_expression_param(ctxt$0, a, b);},
        I = 0,
        J = 0,
        K = 0;
       return caml_call6
               (pp,
                f,
                bL,
                function(a, b){return simple_expr(ctxt$0, a, b);},
                e$6,
                function(a, b){return list(K, J, I, H, a, b);},
                l$3);
      }
     }
     return caml_call4
             (pp,
              f,
              bH,
              function(f, param){
               var l = param[2], e = param[1];
               function a(a, b){
                return label_x_expression_param(reset_ctxt, a, b);
               }
               var b = 0, c = 0, d = 0;
               return caml_call6
                       (pp,
                        f,
                        bG,
                        function(a, b){return expression2(ctxt$0, a, b);},
                        e,
                        function(e, f){return list(d, c, b, a, e, f);},
                        l);
              },
              [0, e$6, l$3]);
    }
    return caml_call6
            (pp,
             f,
             b1,
             function(b, c){return a(ctxt$0, b, c);},
             [0, x$0[1], x$0[2], x$0[3], 0],
             function(a, b){return attributes(ctxt$0, a, b);},
             x$0[4]);
   }
   function a(ctxt, f, x){return caml_trampoline(b(0, ctxt, f, x));}
   function function_body(ctxt, f, function_body){
    if(0 === function_body[0]){
     var body = function_body[1];
     return a(ctxt, f, body);
    }
    var attrs = function_body[3], cases = function_body[1];
    return caml_call6
            (pp,
             f,
             b3,
             function(a, b){return item_attributes(ctxt, a, b);},
             attrs,
             function(a, b){return case_list(ctxt, a, b);},
             cases);
   }
   function type_constraint(ctxt, f, constraint){
    if(0 === constraint[0]){
     var ty = constraint[1];
     return caml_call4
             (pp, f, b4, function(a, b){return core_type(ctxt, a, b);}, ty);
    }
    var ty2 = constraint[2], ty1 = constraint[1];
    return caml_call6
            (pp,
             f,
             b5,
             function(f, a){
              var first = first$0[1];
              if(! a) return 0;
              var x = a[1];
              caml_call2(pp, f, first);
              core_type(ctxt, f, x);
              return caml_call2(pp, f, last);
             },
             ty1,
             function(a, b){return core_type(ctxt, a, b);},
             ty2);
   }
   function function_params_then_body
   (ctxt, f, params, constraint, body, delimiter){
    var a = [0, ctxt[1], ctxt[2], ctxt[3], 1];
    function b(f, param){
     var match = param[2];
     if(0 === match[0]){
      var c = match[3], b = match[2], a = match[1];
      return label_exp(ctxt, f, [0, a, b, c]);
     }
     var ty = match[1];
     return caml_call4(pp, f, b2, protect_ident, ty[1]);
    }
    var c = 0, d = 0;
    return caml_call9
            (pp,
             f,
             b7,
             function(a, e){return list(b6, d, c, b, a, e);},
             params,
             function(f, a){
              if(! a) return 0;
              var x = a[1];
              caml_call2(pp, f, first);
              type_constraint(ctxt, f, x);
              return caml_call2(pp, f, last);
             },
             constraint,
             delimiter,
             function(b, c){return function_body(a, b, c);},
             body);
   }
   function expression2$0(counter, ctxt, f, x){
    if(0 === x[4]){
     var match = x[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 11:
         var li = match[2], e = match[1];
         return caml_call6
                 (pp,
                  f,
                  b9,
                  function(a, b){return simple_expr(ctxt, a, b);},
                  e,
                  longident_loc,
                  li);
        case 20:
         var s = match[2], e$0 = match[1];
         return caml_call5
                 (pp,
                  f,
                  b_,
                  function(a, b){return simple_expr(ctxt, a, b);},
                  e$0,
                  s[1]);
      }
     if(counter >= 50)
      return caml_trampoline_return(simple_expr$0, [0, ctxt, f, x]);
     var counter$0 = counter + 1 | 0;
     return simple_expr$0(counter$0, ctxt, f, x);
    }
    if(counter >= 50) return caml_trampoline_return(b, [0, ctxt, f, x]);
    var counter$1 = counter + 1 | 0;
    return b(counter$1, ctxt, f, x);
   }
   function expression2(ctxt, f, x){
    return caml_trampoline(expression2$0(0, ctxt, f, x));
   }
   function simple_expr$0(counter, ctxt, f, x){
    if(0 !== x[4]){
     if(counter >= 50) return caml_trampoline_return(b, [0, ctxt, f, x]);
     var counter$0 = counter + 1 | 0;
     return b(counter$0, ctxt, f, x);
    }
    var match = x[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 0:
        var li = match[1]; return longident_loc(f, li);
       case 1:
        var c = match[1]; return constant(f, c);
       case 7:
        var
         l = match[1],
         d = function(a, b){return simple_expr(ctxt, a, b);},
         g = 0,
         h = 0;
        return caml_call4
                (pp,
                 f,
                 ca,
                 function(a, b){return list(b$, h, g, d, a, b);},
                 l);
       case 8:
        if(is_simple_construct(view_expr(x))){
         var match$0 = view_expr(x);
         if(typeof match$0 === "number"){
          if(5493713 === match$0) return caml_call2(pp, f, cb);
          if(405183496 === match$0) return caml_call2(pp, f, cc);
         }
         else{
          var variant = match$0[1];
          if(-944563106 === variant){
           var
            xs = match$0[2],
            i = under_semi(ctxt),
            j = function(b, c){return a(i, b, c);},
            k = 0,
            m = 0;
           return caml_call4
                   (pp,
                    f,
                    cf,
                    function(a, b){return list(ce, m, k, j, a, b);},
                    xs);
          }
          if(947848242 === variant){
           var x$0 = match$0[2];
           return print_longident(f, x$0);
          }
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, cd], 1);
        }
        break;
       case 9:
        if(! match[2]){var l$0 = match[1]; return caml_call3(pp, f, cg, l$0);}
        break;
       case 10:
        var
         eo = match[2],
         l$1 = match[1],
         longident_x_expression =
           function(f, param){
            var e = param[2], li = param[1], a = e[1];
            if(typeof a !== "number" && 0 === a[0] && ! e[4]){
             var txt = a[1][1];
             if(caml_equal(li[1], txt))
              return caml_call4(pp, f, ci, longident_loc, li);
            }
            return caml_call6
                    (pp,
                     f,
                     ch,
                     longident_loc,
                     li,
                     function(a, b){return simple_expr(ctxt, a, b);},
                     e);
           },
         n = 0,
         o = 0;
        return caml_call6
                (pp,
                 f,
                 ck,
                 function(f, a){
                  var last = last$0[1];
                  if(! a) return 0;
                  var x = a[1];
                  caml_call2(pp, f, first);
                  simple_expr(ctxt, f, x);
                  return caml_call2(pp, f, last);
                 },
                 eo,
                 function(a, b){
                  return list(cj, o, n, longident_x_expression, a, b);
                 },
                 l$1);
       case 13:
        var
         l$2 = match[1],
         p = under_semi(ctxt),
         q = function(a, b){return simple_expr(p, a, b);},
         r = 0,
         t = 0;
        return caml_call4
                (pp,
                 f,
                 cm,
                 function(a, b){return list(cl, t, r, q, a, b);},
                 l$2);
       case 16:
        var e2 = match[2], e1 = match[1];
        return caml_call6
                (pp,
                 f,
                 fmt$0,
                 function(b, c){return a(ctxt, b, c);},
                 e1,
                 function(b, c){return a(ctxt, b, c);},
                 e2);
       case 17:
        var
         e3 = match[5],
         df = match[4],
         e2$0 = match[3],
         e1$0 = match[2],
         s = match[1],
         expression = function(b, c){return a(ctxt, b, c);};
        return caml_call12
                (pp,
                 f,
                 fmt$1,
                 function(a, b){return pattern(ctxt, a, b);},
                 s,
                 expression,
                 e1$0,
                 direction_flag,
                 df,
                 expression,
                 e2$0,
                 expression,
                 e3);
       case 18:
        var ct = match[2], e = match[1];
        return caml_call6
                (pp,
                 f,
                 cn,
                 function(b, c){return a(ctxt, b, c);},
                 e,
                 function(a, b){return core_type(ctxt, a, b);},
                 ct);
       case 19:
        var ct$0 = match[3], cto1 = match[2], e$0 = match[1];
        return caml_call8
                (pp,
                 f,
                 co,
                 function(b, c){return a(ctxt, b, c);},
                 e$0,
                 function(f, a){
                  var first = first$1[1], last = last$1[1];
                  if(! a) return 0;
                  var x = a[1];
                  caml_call2(pp, f, first);
                  core_type(ctxt, f, x);
                  return caml_call2(pp, f, last);
                 },
                 cto1,
                 function(a, b){return core_type(ctxt, a, b);},
                 ct$0);
       case 31:
        var me = match[1];
        return caml_call4
                (pp,
                 f,
                 cp,
                 function(a, b){return module_expr(ctxt, a, b);},
                 me);
     }
    return paren(0, 0, 1, function(b, c){return a(ctxt, b, c);}, f, x);
   }
   function simple_expr(ctxt, f, x){
    return caml_trampoline(simple_expr$0(0, ctxt, f, x));
   }
   function attributes(ctxt, f, l){
    return caml_call2
            (Stdlib_List[18], function(a){return attribute(ctxt, f, a);}, l);
   }
   function item_attributes(ctxt, f, l){
    return caml_call2
            (Stdlib_List[18],
             function(a){return item_attribute(ctxt, f, a);},
             l);
   }
   function attribute(ctxt, f, a){
    return caml_call5
            (pp,
             f,
             cq,
             a[1][1],
             function(a, b){return payload(ctxt, a, b);},
             a[2]);
   }
   function item_attribute(ctxt, f, a){
    return caml_call5
            (pp,
             f,
             cr,
             a[1][1],
             function(a, b){return payload(ctxt, a, b);},
             a[2]);
   }
   function floating_attribute(ctxt, f, a){
    return caml_call5
            (pp,
             f,
             cs,
             a[1][1],
             function(a, b){return payload(ctxt, a, b);},
             a[2]);
   }
   function value_description(ctxt, f, x){
    return caml_call6
            (pp,
             f,
             cu,
             function(a, b){return core_type(ctxt, a, b);},
             x[2],
             function(f, x){
              var a = 0 !== x[3] ? 1 : 0;
              if(! a) return a;
              var b = 0, c = 0, d = 0;
              return caml_call4
                      (pp,
                       f,
                       ct,
                       function(a, e){return list(d, c, b, constant_string, a, e);},
                       x[3]);
             },
             x);
   }
   function extension(ctxt, f, param){
    var e = param[2], s = param[1];
    return caml_call5
            (pp, f, cv, s[1], function(a, b){return payload(ctxt, a, b);}, e);
   }
   function item_extension(ctxt, f, param){
    var e = param[2], s = param[1];
    return caml_call5
            (pp, f, cw, s[1], function(a, b){return payload(ctxt, a, b);}, e);
   }
   function exception_declaration(ctxt, f, x){
    return caml_call6
            (pp,
             f,
             cx,
             function(a, b){return extension_constructor(ctxt, a, b);},
             x[1],
             function(a, b){return item_attributes(ctxt, a, b);},
             x[3]);
   }
   function class_type_field(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var ct = match[1];
       return caml_call6
               (pp,
                f,
                cy,
                function(a, b){return class_type(ctxt, a, b);},
                ct,
                function(a, b){return item_attributes(ctxt, a, b);},
                x[3]);
      case 1:
       var
        match$0 = match[1],
        ct$0 = match$0[4],
        vf = match$0[3],
        mf = match$0[2],
        s = match$0[1];
       return caml_call11
               (pp,
                f,
                cz,
                mutable_flag,
                mf,
                virtual_flag,
                vf,
                s[1],
                function(a, b){return core_type(ctxt, a, b);},
                ct$0,
                function(a, b){return item_attributes(ctxt, a, b);},
                x[3]);
      case 2:
       var
        match$1 = match[1],
        ct$1 = match$1[4],
        vf$0 = match$1[3],
        pf = match$1[2],
        s$0 = match$1[1];
       return caml_call11
               (pp,
                f,
                cA,
                private_flag,
                pf,
                virtual_flag,
                vf$0,
                s$0[1],
                function(a, b){return core_type(ctxt, a, b);},
                ct$1,
                function(a, b){return item_attributes(ctxt, a, b);},
                x[3]);
      case 3:
       var match$2 = match[1], ct2 = match$2[2], ct1 = match$2[1];
       return caml_call8
               (pp,
                f,
                cB,
                function(a, b){return core_type(ctxt, a, b);},
                ct1,
                function(a, b){return core_type(ctxt, a, b);},
                ct2,
                function(a, b){return item_attributes(ctxt, a, b);},
                x[3]);
      case 4:
       var a = match[1]; return floating_attribute(ctxt, f, a);
      default:
       var e = match[1];
       item_extension(ctxt, f, e);
       return item_attributes(ctxt, f, x[3]);
    }
   }
   function class_signature(ctxt, f, param){
    var l = param[2], ct = param[1];
    function a(a, b){return class_type_field(ctxt, a, b);}
    var b = 0, c = 0;
    return caml_call6
            (pp,
             f,
             cE,
             function(f, ct){
              if(typeof ct[1] === "number" && ! ct[4]) return 0;
              return caml_call4
                      (pp,
                       f,
                       cD,
                       function(a, b){return core_type(ctxt, a, b);},
                       ct);
             },
             ct,
             function(d, e){return list(cC, c, b, a, d, e);},
             l);
   }
   function class_type(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var l = match[2], li = match[1];
       return caml_call8
               (pp,
                f,
                cH,
                function(f, l){
                 if(! l) return 0;
                 function a(a, b){return core_type(ctxt, a, b);}
                 var b = 0, c = 0;
                 return caml_call4
                         (pp,
                          f,
                          cG,
                          function(d, e){return list(cF, c, b, a, d, e);},
                          l);
                },
                l,
                longident_loc,
                li,
                function(a, b){return attributes(ctxt, a, b);},
                x[3]);
      case 1:
       var cs = match[1];
       class_signature(ctxt, f, cs);
       return attributes(ctxt, f, x[3]);
      case 2:
       var cl = match[3], co = match[2], l$0 = match[1];
       return caml_call6
               (pp,
                f,
                cI,
                function(a, b){return type_with_label(ctxt, a, b);},
                [0, l$0, co],
                function(a, b){return class_type(ctxt, a, b);},
                cl);
      case 3:
       var e = match[1];
       extension(ctxt, f, e);
       return attributes(ctxt, f, x[3]);
      default:
       var e$0 = match[2], o = match[1], a = o[1];
       return caml_call7
               (pp,
                f,
                cJ,
                override(o[2]),
                longident_loc,
                a,
                function(a, b){return class_type(ctxt, a, b);},
                e$0);
    }
   }
   function class_type_declaration_list(ctxt, f, l){
    function class_type_declaration(kwd, f, x){
     var txt = x[3][1], ls = x[2];
     return caml_call12
             (pp,
              f,
              cK,
              kwd,
              virtual_flag,
              x[1],
              function(a, b){return class_params_def(ctxt, a, b);},
              ls,
              txt,
              function(a, b){return class_type(ctxt, a, b);},
              x[4],
              function(a, b){return item_attributes(ctxt, a, b);},
              x[6]);
    }
    if(! l) return 0;
    var x = l[1];
    if(! l[2]) return class_type_declaration(cst_class_type$0, f, x);
    var xs = l[2];
    function a(a, b){return class_type_declaration(cst_and, a, b);}
    var b = 0, c = 0;
    return caml_call6
            (pp,
             f,
             cM,
             function(a, b){
              return class_type_declaration(cst_class_type, a, b);
             },
             x,
             function(d, e){return list(cL, c, b, a, d, e);},
             xs);
   }
   function class_field(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var so = match[3], ce = match[2], ovf = match[1], d = x[3];
       return caml_call9
               (pp,
                f,
                cO,
                override(ovf),
                function(a, b){return class_expr(ctxt, a, b);},
                ce,
                function(f, so){
                 if(! so) return 0;
                 var s = so[1];
                 return caml_call3(pp, f, cN, s[1]);
                },
                so,
                function(a, b){return item_attributes(ctxt, a, b);},
                d);
      case 1:
       var b = match[1], match$0 = b[3], mf = b[2], s = b[1];
       if(0 === match$0[0]){
        var ct = match$0[1];
        return caml_call9
                (pp,
                 f,
                 cP,
                 mutable_flag,
                 mf,
                 s[1],
                 function(a, b){return core_type(ctxt, a, b);},
                 ct,
                 function(a, b){return item_attributes(ctxt, a, b);},
                 x[3]);
       }
       var e = match$0[2], ovf$0 = match$0[1], g = x[3], h = s[1];
       return caml_call10
               (pp,
                f,
                cQ,
                override(ovf$0),
                mutable_flag,
                mf,
                h,
                function(b, c){return a(ctxt, b, c);},
                e,
                function(a, b){return item_attributes(ctxt, a, b);},
                g);
      case 2:
       var c = match[1], match$1 = c[3], pf = c[2], s$0 = c[1];
       if(0 === match$1[0]){
        var ct$0 = match$1[1];
        return caml_call9
                (pp,
                 f,
                 cR,
                 private_flag,
                 pf,
                 s$0[1],
                 function(a, b){return core_type(ctxt, a, b);},
                 ct$0,
                 function(a, b){return item_attributes(ctxt, a, b);},
                 x[3]);
       }
       var
        e$0 = match$1[2],
        ovf$1 = match$1[1],
        bind =
          function(e){
           return binding
                   (ctxt,
                    f,
                    [0,
                     [0, [0, s$0], Astlib_Location[4], 0, 0],
                     e,
                     0,
                     0,
                     Astlib_Location[4]]);
          },
        i = x[3];
       return caml_call9
               (pp,
                f,
                cT,
                override(ovf$1),
                private_flag,
                pf,
                function(f, param){
                 var b = param[1];
                 if(typeof b !== "number" && 28 === b[0]){
                  var c = b[2], e = b[1];
                  if(c){
                   if(! param[4]){
                    var ct = c[1];
                    return caml_call7
                            (pp,
                             f,
                             cS,
                             s$0[1],
                             function(a, b){return core_type(ctxt, a, b);},
                             ct,
                             function(b, c){return a(ctxt, b, c);},
                             e);
                   }
                  }
                  else if(! param[4]) return bind(e);
                 }
                 return bind(e$0);
                },
                e$0,
                function(a, b){return item_attributes(ctxt, a, b);},
                i);
      case 3:
       var match$2 = match[1], ct2 = match$2[2], ct1 = match$2[1];
       return caml_call8
               (pp,
                f,
                cU,
                function(a, b){return core_type(ctxt, a, b);},
                ct1,
                function(a, b){return core_type(ctxt, a, b);},
                ct2,
                function(a, b){return item_attributes(ctxt, a, b);},
                x[3]);
      case 4:
       var e$1 = match[1];
       return caml_call6
               (pp,
                f,
                cV,
                function(b, c){return a(ctxt, b, c);},
                e$1,
                function(a, b){return item_attributes(ctxt, a, b);},
                x[3]);
      case 5:
       var a$0 = match[1]; return floating_attribute(ctxt, f, a$0);
      default:
       var e$2 = match[1];
       item_extension(ctxt, f, e$2);
       return item_attributes(ctxt, f, x[3]);
    }
   }
   function class_structure(ctxt, f, param){
    var l = param[2], p = param[1];
    function a(a, b){return class_field(ctxt, a, b);}
    var b = 0, c = 0, d = 0;
    return caml_call6
            (pp,
             f,
             cY,
             function(f, p){
              var match = p[1];
              return typeof match === "number"
                      ? 0
                      : 10
                        === match[0]
                        ? caml_call4
                          (pp, f, cX, function(a, b){return pattern(ctxt, a, b);}, p)
                        : caml_call4
                          (pp, f, cW, function(a, b){return pattern(ctxt, a, b);}, p);
             },
             p,
             function(e, f){return list(d, c, b, a, e, f);},
             l);
   }
   function class_expr(ctxt, f, x){
    if(0 !== x[3])
     return caml_call6
             (pp,
              f,
              c7,
              function(a, b){return class_expr(ctxt, a, b);},
              [0, x[1], x[2], 0],
              function(a, b){return attributes(ctxt, a, b);},
              x[3]);
    var match = x[1];
    switch(match[0]){
      case 0:
       var l = match[2], li = match[1];
       return caml_call6
               (pp,
                f,
                c1,
                function(f, l){
                 var a = 0 !== l ? 1 : 0;
                 if(! a) return a;
                 function b(a, b){return core_type(ctxt, a, b);}
                 var c = 0, d = 0;
                 return caml_call4
                         (pp,
                          f,
                          c0,
                          function(a, e){return list(cZ, d, c, b, a, e);},
                          l);
                },
                l,
                longident_loc,
                li);
      case 1:
       var cs = match[1]; return class_structure(ctxt, f, cs);
      case 2:
       var e = match[4], p = match[3], eo = match[2], l$0 = match[1];
       return caml_call6
               (pp,
                f,
                c2,
                function(a, b){return label_exp(ctxt, a, b);},
                [0, l$0, eo, p],
                function(a, b){return class_expr(ctxt, a, b);},
                e);
      case 3:
       var
        l$1 = match[2],
        ce = match[1],
        a = function(a, b){return label_x_expression_param(ctxt, a, b);},
        b = 0,
        c = 0,
        d = 0;
       return caml_call6
               (pp,
                f,
                c3,
                function(a, b){return class_expr(ctxt, a, b);},
                ce,
                function(e, f){return list(d, c, b, a, e, f);},
                l$1);
      case 4:
       var ce$0 = match[3], l$2 = match[2], rf = match[1];
       return caml_call6
               (pp,
                f,
                c4,
                function(a, b){return bindings(ctxt, a, b);},
                [0, rf, l$2],
                function(a, b){return class_expr(ctxt, a, b);},
                ce$0);
      case 5:
       var ct = match[2], ce$1 = match[1];
       return caml_call6
               (pp,
                f,
                c5,
                function(a, b){return class_expr(ctxt, a, b);},
                ce$1,
                function(a, b){return class_type(ctxt, a, b);},
                ct);
      case 6:
       var e$0 = match[1]; return extension(ctxt, f, e$0);
      default:
       var e$1 = match[2], o = match[1], g = o[1];
       return caml_call7
               (pp,
                f,
                c6,
                override(o[2]),
                longident_loc,
                g,
                function(a, b){return class_expr(ctxt, a, b);},
                e$1);
    }
   }
   function module_type$1(counter, ctxt, f, x$0){
    a:
    {
     b:
     {
      var x = x$0;
      c:
      for(;;){
       if(0 !== x[3]) break a;
       var a = x[1];
       switch(a[0]){
         case 2:
          break b;
         case 3:
          var mt = a[1]; if(a[2]) break c; x = mt; break;
         default:
          if(counter >= 50)
           return caml_trampoline_return(module_type1$0, [0, ctxt, f, x]);
          var counter$0 = counter + 1 | 0;
          return module_type1$0(counter$0, ctxt, f, x);
       }
      }
      var
       l = a[2],
       b = function(a, b){return with_constraint(ctxt, a, b);},
       c = 0,
       d = 0;
      return caml_call6
              (pp,
               f,
               da,
               function(a, b){return module_type1(ctxt, a, b);},
               mt,
               function(a, e){return list(c$, d, c, b, a, e);},
               l);
     }
     var match = a[1];
     if(! match){
      var mt2$0 = a[2];
      return caml_call4
              (pp,
               f,
               c_,
               function(a, b){return module_type(ctxt, a, b);},
               mt2$0);
     }
     var mt2 = a[2], mt1 = match[2], s = match[1], match$0 = s[1];
     if(! match$0)
      return caml_call6
              (pp,
               f,
               c9,
               function(a, b){return module_type1(ctxt, a, b);},
               mt1,
               function(a, b){return module_type(ctxt, a, b);},
               mt2);
     var name = match$0[1];
     return caml_call7
             (pp,
              f,
              c8,
              name,
              function(a, b){return module_type(ctxt, a, b);},
              mt1,
              function(a, b){return module_type(ctxt, a, b);},
              mt2);
    }
    return caml_call6
            (pp,
             f,
             db,
             function(a, b){return module_type(ctxt, a, b);},
             [0, x[1], x[2], 0],
             function(a, b){return attributes(ctxt, a, b);},
             x[3]);
   }
   function module_type(ctxt, f, x){
    return caml_trampoline(module_type$1(0, ctxt, f, x));
   }
   function with_constraint(ctxt, f, param){
    switch(param[0]){
      case 0:
       var
        td = param[2],
        ls = td[2],
        li = param[1],
        ls$0 = caml_call2(Stdlib_List[20], function(a){return a[1];}, ls),
        a = function(a, b){return core_type(ctxt, a, b);};
       return caml_call8
               (pp,
                f,
                df,
                function(b, c){return list(de, dd, dc, a, b, c);},
                ls$0,
                longident_loc,
                li,
                function(a, b){return type_declaration(ctxt, a, b);},
                td);
      case 1:
       var li2 = param[2], li$0 = param[1];
       return caml_call6(pp, f, dg, longident_loc, li$0, longident_loc, li2);
      case 2:
       var mty = param[2], li$1 = param[1];
       return caml_call6
               (pp,
                f,
                dh,
                longident_loc,
                li$1,
                function(a, b){return module_type(ctxt, a, b);},
                mty);
      case 3:
       var mty$0 = param[2], li$2 = param[1];
       return caml_call6
               (pp,
                f,
                di,
                longident_loc,
                li$2,
                function(a, b){return module_type(ctxt, a, b);},
                mty$0);
      case 4:
       var
        td$0 = param[2],
        ls$1 = td$0[2],
        li$3 = param[1],
        ls$2 = caml_call2(Stdlib_List[20], function(a){return a[1];}, ls$1),
        b = function(a, b){return core_type(ctxt, a, b);};
       return caml_call8
               (pp,
                f,
                dm,
                function(a, c){return list(dl, dk, dj, b, a, c);},
                ls$2,
                longident_loc,
                li$3,
                function(a, b){return type_declaration(ctxt, a, b);},
                td$0);
      default:
       var li2$0 = param[2], li$4 = param[1];
       return caml_call6(pp, f, dn, longident_loc, li$4, longident_loc, li2$0);
    }
   }
   function module_type1$0(counter, ctxt, f, x){
    if(0 === x[3]){
     var match = x[1];
     switch(match[0]){
       case 0:
        var li = match[1]; return caml_call4(pp, f, dp, longident_loc, li);
       case 1:
        var
         s = match[1],
         a = function(a, b){return signature_item(ctxt, a, b);},
         b = 0,
         c = 0,
         d = 0;
        return caml_call4
                (pp, f, dq, function(e, f){return list(d, c, b, a, e, f);}, s);
       case 4:
        var me = match[1];
        return caml_call4
                (pp,
                 f,
                 dr,
                 function(a, b){return module_expr(ctxt, a, b);},
                 me);
       case 5:
        var e = match[1]; return extension(ctxt, f, e);
       case 6:
        var li$0 = match[1];
        return caml_call4(pp, f, ds, longident_loc, li$0);
       default:
        return paren
                (0,
                 0,
                 1,
                 function(a, b){return module_type(ctxt, a, b);},
                 f,
                 x);
     }
    }
    if(counter >= 50)
     return caml_trampoline_return(module_type$1, [0, ctxt, f, x]);
    var counter$0 = counter + 1 | 0;
    return module_type$1(counter$0, ctxt, f, x);
   }
   function module_type1(ctxt, f, x){
    return caml_trampoline(module_type1$0(0, ctxt, f, x));
   }
   function signature(ctxt, f, x){
    return list
            (dt,
             0,
             0,
             function(a, b){return signature_item(ctxt, a, b);},
             f,
             x);
   }
   function signature_item(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var vd = match[1], intro = 0 === vd[3] ? cst_val : cst_external;
       return caml_call9
               (pp,
                f,
                du,
                intro,
                protect_ident,
                vd[1][1],
                function(a, b){return value_description(ctxt, a, b);},
                vd,
                function(a, b){return item_attributes(ctxt, a, b);},
                vd[4]);
      case 1:
       var l = match[2], rf = match[1];
       return type_def_list(ctxt, f, [0, rf, 1, l]);
      case 2:
       var l$0 = match[1]; return type_def_list(ctxt, f, [0, 1, 0, l$0]);
      case 3:
       var te = match[1]; return type_extension(ctxt, f, te);
      case 4:
       var ed = match[1]; return exception_declaration(ctxt, f, ed);
      case 5:
       var pmd = match[1], b = pmd[2], c = b[1];
       if(6 === c[0] && ! b[3]){
        var alias = c[1], h = pmd[3];
        return caml_call7
                (pp,
                 f,
                 dw,
                 value(pmd[1][1], cst$27),
                 longident_loc,
                 alias,
                 function(a, b){return item_attributes(ctxt, a, b);},
                 h);
       }
       var d = pmd[3], g = pmd[2];
       return caml_call7
               (pp,
                f,
                dv,
                value(pmd[1][1], cst$26),
                function(a, b){return module_type(ctxt, a, b);},
                g,
                function(a, b){return item_attributes(ctxt, a, b);},
                d);
      case 6:
       var pms = match[1];
       return caml_call7
               (pp,
                f,
                dx,
                pms[1][1],
                longident_loc,
                pms[2],
                function(a, b){return item_attributes(ctxt, a, b);},
                pms[3]);
      case 7:
       var decls = match[1], opt$0 = 0, l$1 = decls;
       for(;;){
        var first = opt$0 ? opt$0[1] : 1;
        if(! l$1) return 0;
        var tl = l$1[2], pmd$0 = l$1[1];
        if(first){
         var i = pmd$0[3], j = pmd$0[2];
         caml_call7
          (pp,
           f,
           dy,
           value(pmd$0[1][1], cst$28),
           function(a, b){return module_type1(ctxt, a, b);},
           j,
           function(a, b){return item_attributes(ctxt, a, b);},
           i);
         opt$0 = opt;
         l$1 = tl;
        }
        else{
         var k = pmd$0[3], m = pmd$0[2];
         caml_call7
          (pp,
           f,
           dz,
           value(pmd$0[1][1], cst$29),
           function(a, b){return module_type1(ctxt, a, b);},
           m,
           function(a, b){return item_attributes(ctxt, a, b);},
           k);
         opt$0 = opt;
         l$1 = tl;
        }
       }
       break;
      case 8:
       var
        match$0 = match[1],
        attrs = match$0[3],
        md = match$0[2],
        s = match$0[1];
       return caml_call7
               (pp,
                f,
                dB,
                s[1],
                function(f, md){
                 if(! md) return 0;
                 var mt = md[1];
                 caml_call2(Stdlib_Format[32], f, 0);
                 return caml_call4
                         (pp,
                          f,
                          dA,
                          function(a, b){return module_type(ctxt, a, b);},
                          mt);
                },
                md,
                function(a, b){return item_attributes(ctxt, a, b);},
                attrs);
      case 9:
       var
        match$1 = match[1],
        attrs$0 = match$1[3],
        md$0 = match$1[2],
        s$0 = match$1[1];
       if(! md$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, dD], 1);
       var md$1 = md$0[1];
       return caml_call7
               (pp,
                f,
                dC,
                s$0[1],
                function(a, b){return module_type(ctxt, a, b);},
                md$1,
                function(a, b){return item_attributes(ctxt, a, b);},
                attrs$0);
      case 10:
       var od = match[1], n = od[4], o = od[1];
       return caml_call7
               (pp,
                f,
                dE,
                override(od[2]),
                longident_loc,
                o,
                function(a, b){return item_attributes(ctxt, a, b);},
                n);
      case 11:
       var incl = match[1];
       return caml_call6
               (pp,
                f,
                dF,
                function(a, b){return module_type(ctxt, a, b);},
                incl[1],
                function(a, b){return item_attributes(ctxt, a, b);},
                incl[3]);
      case 12:
       var
        l$2 = match[1],
        class_description =
          function(kwd, f, x){
           var txt = x[3][1], ls = x[2];
           return caml_call12
                   (pp,
                    f,
                    dG,
                    kwd,
                    virtual_flag,
                    x[1],
                    function(a, b){return class_params_def(ctxt, a, b);},
                    ls,
                    txt,
                    function(a, b){return class_type(ctxt, a, b);},
                    x[4],
                    function(a, b){return item_attributes(ctxt, a, b);},
                    x[6]);
          };
       if(! l$2) return 0;
       var x$0 = l$2[1];
       if(! l$2[2]) return class_description(cst_class$0, f, x$0);
       var
        xs = l$2[2],
        p = function(a, b){return class_description(cst_and$0, a, b);},
        q = 0,
        r = 0;
       return caml_call6
               (pp,
                f,
                dI,
                function(a, b){return class_description(cst_class, a, b);},
                x$0,
                function(a, b){return list(dH, r, q, p, a, b);},
                xs);
      case 13:
       var l$3 = match[1]; return class_type_declaration_list(ctxt, f, l$3);
      case 14:
       var a = match[1]; return floating_attribute(ctxt, f, a);
      default:
       var a$0 = match[2], e = match[1];
       item_extension(ctxt, f, e);
       return item_attributes(ctxt, f, a$0);
    }
   }
   function module_expr(ctxt, f, x){
    if(0 !== x[3])
     return caml_call6
             (pp,
              f,
              dS,
              function(a, b){return module_expr(ctxt, a, b);},
              [0, x[1], x[2], 0],
              function(a, b){return attributes(ctxt, a, b);},
              x[3]);
    var match = x[1];
    switch(match[0]){
      case 0:
       var li = match[1]; return caml_call4(pp, f, dJ, longident_loc, li);
      case 1:
       var
        s = match[1],
        b = function(a, b){return structure_item(ctxt, a, b);},
        c = 0,
        d = 0;
       return caml_call4
               (pp, f, dL, function(a, e){return list(dK, d, c, b, a, e);}, s);
      case 2:
       var match$0 = match[1];
       if(match$0){
        var me = match[2], mt = match$0[2], s$0 = match$0[1];
        return caml_call7
                (pp,
                 f,
                 dM,
                 value(s$0[1], cst$30),
                 function(a, b){return module_type(ctxt, a, b);},
                 mt,
                 function(a, b){return module_expr(ctxt, a, b);},
                 me);
       }
       var me$0 = match[2];
       return caml_call4
               (pp,
                f,
                dN,
                function(a, b){return module_expr(ctxt, a, b);},
                me$0);
      case 3:
       var me2 = match[2], me1 = match[1];
       return caml_call6
               (pp,
                f,
                dO,
                function(a, b){return module_expr(ctxt, a, b);},
                me1,
                function(a, b){return module_expr(ctxt, a, b);},
                me2);
      case 4:
       var me1$0 = match[1];
       return caml_call4
               (pp,
                f,
                dP,
                function(a, b){return module_expr(ctxt, a, b);},
                me1$0);
      case 5:
       var mt$0 = match[2], me$1 = match[1];
       return caml_call6
               (pp,
                f,
                dQ,
                function(a, b){return module_expr(ctxt, a, b);},
                me$1,
                function(a, b){return module_type(ctxt, a, b);},
                mt$0);
      case 6:
       var e = match[1];
       return caml_call4(pp, f, dR, function(b, c){return a(ctxt, b, c);}, e);
      default: var e$0 = match[1]; return extension(ctxt, f, e$0);
    }
   }
   function structure(ctxt, f, x){
    return list
            (dT,
             0,
             0,
             function(a, b){return structure_item(ctxt, a, b);},
             f,
             x);
   }
   function payload(ctxt, f, param){
    switch(param[0]){
      case 0:
       var x = param[1];
       if(x){
        var b = x[1][1];
        if(0 === b[0] && ! x[2]){
         var attrs = b[2], e = b[1];
         return caml_call6
                 (pp,
                  f,
                  dU,
                  function(b, c){return a(ctxt, b, c);},
                  e,
                  function(a, b){return item_attributes(ctxt, a, b);},
                  attrs);
        }
       }
       return structure(ctxt, f, x);
      case 1:
       var x$0 = param[1];
       caml_call2(pp, f, dV);
       return signature(ctxt, f, x$0);
      case 2:
       var x$1 = param[1];
       caml_call2(pp, f, dW);
       return core_type(ctxt, f, x$1);
      default:
       var match = param[2], x$2 = param[1];
       if(match){
        var e$0 = match[1];
        caml_call2(pp, f, dX);
        pattern(ctxt, f, x$2);
        caml_call2(pp, f, dY);
        return a(ctxt, f, e$0);
       }
       caml_call2(pp, f, dZ);
       return pattern(ctxt, f, x$2);
    }
   }
   function binding(ctxt, f, param){
    var x = param[2], p = param[1];
    function pp_print_pexp_function(f, x){
     if(0 !== x[4])
      return caml_call4(pp, f, d2, function(b, c){return a(ctxt, b, c);}, x);
     var match = x[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 3:
         var body = match[3], c = match[2], params = match[1];
         return function_params_then_body(ctxt, f, params, c, body, cst$31);
        case 30:
         var e = match[2], str = match[1];
         return caml_call5(pp, f, d1, str[1], pp_print_pexp_function, e);
      }
     return caml_call4(pp, f, d0, function(b, c){return a(ctxt, b, c);}, x);
    }
    function tyvars_str(tyvars){
     return caml_call2(Stdlib_List[20], function(v){return v[1];}, tyvars);
    }
    if(0 !== x[4]){
     var j = p[1];
     if(typeof j !== "number" && 10 === j[0]){
      var pat$0 = j[1], n = pat$0[1];
      if(typeof n !== "number" && 0 === n[0]){
       var typ = j[2], o = typ[1];
       if(typeof o !== "number" && 8 === o[0] && ! p[4])
        return caml_call8
                (pp,
                 f,
                 d$,
                 function(a, b){return simple_pattern(ctxt, a, b);},
                 pat$0,
                 function(a, b){return core_type(ctxt, a, b);},
                 typ,
                 function(b, c){return a(ctxt, b, c);},
                 x);
      }
     }
     return caml_call6
             (pp,
              f,
              d_,
              function(a, b){return pattern(ctxt, a, b);},
              p,
              function(b, c){return a(ctxt, b, c);},
              x);
    }
    var g = p[1];
    a:
    {
     if(typeof g !== "number" && 10 === g[0]){
      var pat = g[1], l = pat[1];
      if(typeof l !== "number" && 0 === l[0]){
       var h = g[2][1];
       if(typeof h !== "number" && 8 === h[0] && ! p[4]){
        var
         rt = h[2],
         args_tyvars = h[1],
         gadt_pattern = [0, [0, pat, args_tyvars, rt]];
        break a;
       }
      }
     }
     var gadt_pattern = 0;
    }
    a:
    {
     b:
     {
      var tyvars = 0, e = x;
      c:
      for(;;){
       var c = e[1];
       if(typeof c === "number") break b;
       switch(c[0]){
         case 18:
          break c;
         case 30:
          if(e[4]) break b;
          var e$1 = c[2], tyvar = c[1], tyvars$0 = [0, tyvar, tyvars];
          tyvars = tyvars$0;
          e = e$1;
          break;
         default: break b;
       }
      }
      if(! e[4]){
       var
        ct = c[2],
        e$0 = c[1],
        gadt_exp = [0, [0, caml_call1(Stdlib_List[10], tyvars), e$0, ct]];
       break a;
      }
     }
     var gadt_exp = 0;
    }
    a:
    {
     if(gadt_pattern && gadt_exp){
      var
       k = gadt_exp[1],
       e_ct = k[3],
       e$2 = k[2],
       var_names$0 = k[1],
       match = gadt_pattern[1],
       pt_ct = match[3],
       pt_tyvars = match[2],
       p$0 = match[1],
       q = tyvars_str(var_names$0);
      if(caml_equal(tyvars_str(pt_tyvars), q)){
       var
        check_variable =
          function(vl, loc, v){
           var a = caml_call2(Stdlib_List[37], v, vl);
           return a
                   ? caml_call1(Astlib_Location[7].call(null, [0, loc], d), v)
                   : a;
          },
        var_names =
          caml_call2(Stdlib_List[20], function(v){return v[1];}, var_names$0),
        loop =
          function(t){
           var match = t[1];
           if(typeof match === "number")
            var desc = 0;
           else
            switch(match[0]){
              case 0:
               var x = match[1];
               check_variable(var_names, t[2], x);
               var desc = [0, x];
               break;
              case 1:
               var
                core_type = match[3],
                core_type$0 = match[2],
                label = match[1],
                b = loop(core_type),
                desc = [1, label, loop(core_type$0), b];
               break;
              case 2:
               var
                lst = match[1],
                desc = [2, caml_call2(Stdlib_List[20], loop, lst)];
               break;
              case 3:
               var longident = match[1], a = longident[1];
               if(0 === a[0] && ! match[2]){
                var s = a[1];
                if(caml_call2(Stdlib_List[37], s, var_names)){var desc = [0, s]; break;}
               }
               var
                lst$0 = match[2],
                desc =
                  [3, longident, caml_call2(Stdlib_List[20], loop, lst$0)];
               break;
              case 4:
               var
                o = match[2],
                lst$1 = match[1],
                desc =
                  [4,
                   caml_call2(Stdlib_List[20], loop_object_field, lst$1),
                   o];
               break;
              case 5:
               var
                lst$2 = match[2],
                longident$0 = match[1],
                desc =
                  [5, longident$0, caml_call2(Stdlib_List[20], loop, lst$2)];
               break;
              case 6:
               var string = match[2], core_type$1 = match[1];
               check_variable(var_names, t[2], string[1]);
               var desc = [6, loop(core_type$1), string];
               break;
              case 7:
               var
                lbl_lst_option = match[3],
                flag = match[2],
                row_field_list = match[1],
                desc =
                  [7,
                   caml_call2(Stdlib_List[20], loop_row_field, row_field_list),
                   flag,
                   lbl_lst_option];
               break;
              case 8:
               var core_type$2 = match[2], string_lst = match[1];
               caml_call2
                (Stdlib_List[18],
                 function(v){return check_variable(var_names, t[2], v[1]);},
                 string_lst);
               var desc = [8, string_lst, loop(core_type$2)];
               break;
              case 9:
               var
                match$0 = match[1],
                lst$3 = match$0[2],
                longident$1 = match$0[1],
                desc =
                  [9,
                   [0,
                    longident$1,
                    caml_call2
                     (Stdlib_List[20],
                      function(param){
                       var typ = param[2], n = param[1];
                       return [0, n, loop(typ)];
                      },
                      lst$3)]];
               break;
              case 10:
               var ct = match[2], s$0 = match[1], desc = [10, s$0, loop(ct)];
               break;
              default:
               var
                match$1 = match[1],
                arg = match$1[2],
                s$1 = match$1[1],
                desc = [11, [0, s$1, arg]];
            }
           return [0, desc, t[2], t[3], t[4]];
          },
        loop_row_field =
          function(field){
           var match = field[1];
           if(0 === match[0])
            var
             lst = match[3],
             flag = match[2],
             label = match[1],
             prf_desc =
               [0, label, flag, caml_call2(Stdlib_List[20], loop, lst)];
           else
            var t = match[1], prf_desc = [1, loop(t)];
           return [0, prf_desc, field[2], field[3]];
          },
        loop_object_field =
          function(field){
           var match = field[1];
           if(0 === match[0])
            var
             t = match[2],
             label = match[1],
             pof_desc = [0, label, loop(t)];
           else
            var t$0 = match[1], pof_desc = [1, loop(t$0)];
           return [0, pof_desc, field[2], field[3]];
          },
        ety = loop(e_ct);
       if(caml_equal(ety, pt_ct)){
        var match$0 = [0, [0, p$0, pt_tyvars, e_ct, e$2]];
        break a;
       }
       var match$0 = 0;
       break a;
      }
     }
     var match$0 = 0;
    }
    if(match$0){
     var b = match$0[1], p$1 = b[1];
     if(b[2]){
      var
       e$3 = b[4],
       ct$0 = b[3],
       tyvars$1 = b[2],
       r = tyvars_str(tyvars$1),
       s = Stdlib_Format[13],
       t = 0,
       u = 0;
      return caml_call10
              (pp,
               f,
               d4,
               function(a, b){return simple_pattern(ctxt, a, b);},
               p$1,
               function(a, b){return list(d3, u, t, s, a, b);},
               r,
               function(a, b){return core_type(ctxt, a, b);},
               ct$0,
               function(b, c){return a(ctxt, b, c);},
               e$3);
     }
     var e$4 = b[4], ct$1 = b[3];
     return caml_call8
             (pp,
              f,
              d5,
              function(a, b){return simple_pattern(ctxt, a, b);},
              p$1,
              function(a, b){return core_type(ctxt, a, b);},
              ct$1,
              function(b, c){return a(ctxt, b, c);},
              e$4);
    }
    var i = p[1];
    if(typeof i !== "number")
     switch(i[0]){
       case 0:
        if(! p[4])
         return caml_call6
                 (pp,
                  f,
                  d7,
                  function(a, b){return simple_pattern(ctxt, a, b);},
                  p,
                  pp_print_pexp_function,
                  x);
        break;
       case 10:
        if(! p[4]){
         var ty = i[2], p$2 = i[1], m = ty[1];
         if(typeof m !== "number" && 8 === m[0] && ! ty[4])
          return caml_call8
                  (pp,
                   f,
                   d9,
                   function(a, b){return simple_pattern(ctxt, a, b);},
                   p$2,
                   function(a, b){return core_type(ctxt, a, b);},
                   ty,
                   function(b, c){return a(ctxt, b, c);},
                   x);
         return caml_call8
                 (pp,
                  f,
                  d8,
                  function(a, b){return simple_pattern(ctxt, a, b);},
                  p$2,
                  function(a, b){return core_type(ctxt, a, b);},
                  ty,
                  function(b, c){return a(ctxt, b, c);},
                  x);
        }
        break;
     }
    return caml_call6
            (pp,
             f,
             d6,
             function(a, b){return pattern(ctxt, a, b);},
             p,
             function(b, c){return a(ctxt, b, c);},
             x);
   }
   function bindings(ctxt, f, param){
    var l = param[2], rf = param[1];
    function binding$0(kwd, rf, f, x){
     return caml_call9
             (pp,
              f,
              ea,
              kwd,
              rec_flag,
              rf,
              function(a, b){return binding(ctxt, a, b);},
              x,
              function(a, b){return item_attributes(ctxt, a, b);},
              x[4]);
    }
    if(! l) return 0;
    var x = l[1];
    if(! l[2]) return binding$0(cst_let$0, rf, f, x);
    var xs = l[2], a = 0;
    function b(b, c){return binding$0(cst_and$1, a, b, c);}
    var c = 0, d = 0;
    return caml_call6
            (pp,
             f,
             ec,
             function(a, b){return binding$0(cst_let, rf, a, b);},
             x,
             function(a, e){return list(eb, d, c, b, a, e);},
             xs);
   }
   function binding_op(ctxt, f, x){
    var pat = x[2], match = x[3], b = pat[1];
    if(typeof b !== "number" && 0 === b[0] && ! pat[4]){
     var c = match[1];
     if(typeof c !== "number" && 0 === c[0]){
      var d = c[1][1], pvar = b[1][1];
      if(0 === d[0] && ! match[4]){
       var evar = d[1];
       if(pvar === evar) return caml_call4(pp, f, ee, x[1][1], evar);
      }
     }
    }
    return caml_call7
            (pp,
             f,
             ed,
             x[1][1],
             function(a, b){return pattern(ctxt, a, b);},
             pat,
             function(b, c){return a(ctxt, b, c);},
             match);
   }
   function structure_item(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var attrs = match[2], e = match[1];
       return caml_call6
               (pp,
                f,
                ef,
                function(b, c){return a(ctxt, b, c);},
                e,
                function(a, b){return item_attributes(ctxt, a, b);},
                attrs);
      case 1:
       var l = match[2], rf = match[1];
       return caml_call4
               (pp,
                f,
                eg,
                function(a, b){return bindings(ctxt, a, b);},
                [0, rf, l]);
      case 2:
       var vd = match[1];
       return caml_call8
               (pp,
                f,
                eh,
                protect_ident,
                vd[1][1],
                function(a, b){return value_description(ctxt, a, b);},
                vd,
                function(a, b){return item_attributes(ctxt, a, b);},
                vd[4]);
      case 3:
       var rf$0 = match[1];
       if(! match[2])
        throw caml_maybe_attach_backtrace([0, Assert_failure, ei], 1);
       var l$0 = match[2];
       return type_def_list(ctxt, f, [0, rf$0, 1, l$0]);
      case 4:
       var te = match[1]; return type_extension(ctxt, f, te);
      case 5:
       var ed = match[1]; return exception_declaration(ctxt, f, ed);
      case 6:
       var
        x$0 = match[1],
        module_helper =
          function(me$1){
           var me = me$1;
           for(;;){
            var a = me[1];
            if(2 === a[0] && ! me[3]){
             var me$0 = a[2], arg_opt = a[1];
             if(arg_opt){
              var mt = arg_opt[2], s = arg_opt[1];
              caml_call5
               (pp,
                f,
                ej,
                value(s[1], cst$32),
                function(a, b){return module_type(ctxt, a, b);},
                mt);
              me = me$0;
              continue;
             }
             caml_call2(pp, f, ek);
             me = me$0;
             continue;
            }
            return me;
           }
          },
        b = x$0[3],
        c = x$0[2];
       return caml_call7
               (pp,
                f,
                en,
                value(x$0[1][1], cst$33),
                function(f, me){
                 var me$0 = module_helper(me), a = me$0[1];
                 if(5 === a[0]){
                  var mt = a[2], me$1 = a[1];
                  if(mt[1][0] < 2 && ! me$0[3])
                   return caml_call6
                           (pp,
                            f,
                            em,
                            function(a, b){return module_type(ctxt, a, b);},
                            mt,
                            function(a, b){return module_expr(ctxt, a, b);},
                            me$1);
                 }
                 return caml_call4
                         (pp,
                          f,
                          el,
                          function(a, b){return module_expr(ctxt, a, b);},
                          me$0);
                },
                c,
                function(a, b){return item_attributes(ctxt, a, b);},
                b);
      case 7:
       var
        decls = match[1],
        aux =
          function(f, pmb){
           var match = pmb[2][1];
           if(5 === match[0]){
            var typ = match[2], expr = match[1], c = pmb[3];
            return caml_call9
                    (pp,
                     f,
                     ep,
                     value(pmb[1][1], cst$35),
                     function(a, b){return module_type(ctxt, a, b);},
                     typ,
                     function(a, b){return module_expr(ctxt, a, b);},
                     expr,
                     function(a, b){return item_attributes(ctxt, a, b);},
                     c);
           }
           var a = pmb[3], b = pmb[2];
           return caml_call7
                   (pp,
                    f,
                    eo,
                    value(pmb[1][1], cst$34),
                    function(a, b){return module_expr(ctxt, a, b);},
                    b,
                    function(a, b){return item_attributes(ctxt, a, b);},
                    a);
          };
       if(! decls)
        throw caml_maybe_attach_backtrace([0, Assert_failure, es], 1);
       var pmb = decls[1], match$0 = pmb[2][1];
       if(5 === match$0[0]){
        var l2$0 = decls[2], typ = match$0[2], expr = match$0[1], h = pmb[3];
        return caml_call11
                (pp,
                 f,
                 er,
                 value(pmb[1][1], cst$37),
                 function(a, b){return module_type(ctxt, a, b);},
                 typ,
                 function(a, b){return module_expr(ctxt, a, b);},
                 expr,
                 function(a, b){return item_attributes(ctxt, a, b);},
                 h,
                 function(f, l2){
                  return caml_call2
                          (Stdlib_List[18], function(a){return aux(f, a);}, l2);
                 },
                 l2$0);
       }
       var l2 = decls[2], d = pmb[3], g = pmb[2];
       return caml_call9
               (pp,
                f,
                eq,
                value(pmb[1][1], cst$36),
                function(a, b){return module_expr(ctxt, a, b);},
                g,
                function(a, b){return item_attributes(ctxt, a, b);},
                d,
                function(f, l2){
                 return caml_call2
                         (Stdlib_List[18], function(a){return aux(f, a);}, l2);
                },
                l2);
      case 8:
       var
        match$1 = match[1],
        attrs$0 = match$1[3],
        md = match$1[2],
        s = match$1[1];
       return caml_call7
               (pp,
                f,
                eu,
                s[1],
                function(f, md){
                 if(! md) return 0;
                 var mt = md[1];
                 caml_call2(Stdlib_Format[32], f, 0);
                 return caml_call4
                         (pp,
                          f,
                          et,
                          function(a, b){return module_type(ctxt, a, b);},
                          mt);
                },
                md,
                function(a, b){return item_attributes(ctxt, a, b);},
                attrs$0);
      case 9:
       var od = match[1], i = od[4], j = od[1];
       return caml_call7
               (pp,
                f,
                ev,
                override(od[2]),
                function(a, b){return module_expr(ctxt, a, b);},
                j,
                function(a, b){return item_attributes(ctxt, a, b);},
                i);
      case 10:
       var
        l$1 = match[1],
        class_constraint =
          function(f, ct){
           return caml_call4
                   (pp,
                    f,
                    ew,
                    function(a, b){return class_type(ctxt, a, b);},
                    ct);
          },
        class_declaration =
          function(kwd, f, x){
           var txt = x[3][1], ls = x[2], cl$3 = x[4], acc = 0, cl = cl$3;
           for(;;){
            var a = cl[1];
            if(2 !== a[0]) break;
            if(cl[3]) break;
            var
             cl$0 = a[4],
             p = a[3],
             eo = a[2],
             l = a[1],
             acc$0 = [0, [0, l, eo, p], acc];
            acc = acc$0;
            cl = cl$0;
           }
           var args = caml_call1(Stdlib_List[10], acc), b = cl[1];
           a:
           {
            if(5 === b[0] && ! cl[3]){
             var ct = b[2], cl$2 = b[1], cl$1 = cl$2, constr = [0, ct];
             break a;
            }
            var cl$1 = cl, constr = 0;
           }
           function c(a, b){return label_exp(ctxt, a, b);}
           var d = 0, e = 0, g = 0;
           return caml_call16
                   (pp,
                    f,
                    ex,
                    kwd,
                    virtual_flag,
                    x[1],
                    function(a, b){return class_params_def(ctxt, a, b);},
                    ls,
                    txt,
                    function(a, b){return list(g, e, d, c, a, b);},
                    args,
                    function(f, a){
                     var first$0 = first, last$0 = last;
                     if(! a) return 0;
                     var x = a[1];
                     caml_call2(pp, f, first$0);
                     class_constraint(f, x);
                     return caml_call2(pp, f, last$0);
                    },
                    constr,
                    function(a, b){return class_expr(ctxt, a, b);},
                    cl$1,
                    function(a, b){return item_attributes(ctxt, a, b);},
                    x[6]);
          };
       if(! l$1) return 0;
       var x$1 = l$1[1];
       if(! l$1[2]) return class_declaration(cst_class$2, f, x$1);
       var
        xs = l$1[2],
        k = function(a, b){return class_declaration(cst_and$2, a, b);},
        m = 0,
        n = 0;
       return caml_call6
               (pp,
                f,
                ez,
                function(a, b){return class_declaration(cst_class$1, a, b);},
                x$1,
                function(a, b){return list(ey, n, m, k, a, b);},
                xs);
      case 11:
       var l$2 = match[1]; return class_type_declaration_list(ctxt, f, l$2);
      case 12:
       var incl = match[1];
       return caml_call6
               (pp,
                f,
                eA,
                function(a, b){return module_expr(ctxt, a, b);},
                incl[1],
                function(a, b){return item_attributes(ctxt, a, b);},
                incl[3]);
      case 13:
       var a$0 = match[1]; return floating_attribute(ctxt, f, a$0);
      default:
       var a$1 = match[2], e$0 = match[1];
       item_extension(ctxt, f, e$0);
       return item_attributes(ctxt, f, a$1);
    }
   }
   function type_param(ctxt, f, param){
    var match = param[2], b = match[2], a = match[1], ct = param[1];
    function d(a, b){return core_type(ctxt, a, b);}
    var e = b ? cst$4 : cst$5;
    switch(a){
      case 0:
       var c = cst$1; break;
      case 1:
       var c = cst$2; break;
      default: var c = cst$3;
    }
    return caml_call6(pp, f, eB, c, e, d, ct);
   }
   function type_params(ctxt, f, l){
    if(! l) return 0;
    function a(a, b){return type_param(ctxt, a, b);}
    return caml_call4
            (pp, f, eF, function(b, c){return list(eE, eD, eC, a, b, c);}, l);
   }
   function type_def_list(ctxt, f, param){
    var l = param[3], exported = param[2], rf = param[1];
    function type_decl(kwd, rf, f, x){
     a:
     {
      if(0 === x[4] && 0 === x[6]){var eq = cst$38; break a;}
      var eq = exported ? cst$39 : cst$40;
     }
     return caml_call13
             (pp,
              f,
              eG,
              kwd,
              nonrec_flag,
              rf,
              function(a, b){return type_params(ctxt, a, b);},
              x[2],
              x[1][1],
              eq,
              function(a, b){return type_declaration(ctxt, a, b);},
              x,
              function(a, b){return item_attributes(ctxt, a, b);},
              x[7]);
    }
    if(! l) throw caml_maybe_attach_backtrace([0, Assert_failure, eJ], 1);
    var x = l[1];
    if(! l[2]) return type_decl(cst_type$0, rf, f, x);
    var xs = l[2], a = 1;
    function b(b, c){return type_decl(cst_and$3, a, b, c);}
    var c = 0, d = 0;
    return caml_call6
            (pp,
             f,
             eI,
             function(a, b){return type_decl(cst_type, rf, a, b);},
             x,
             function(a, e){return list(eH, d, c, b, a, e);},
             xs);
   }
   function record_declaration(ctxt, f, lbls){
    function type_record_field(f, pld){
     return caml_call9
             (pp,
              f,
              eK,
              mutable_flag,
              pld[2],
              pld[1][1],
              function(a, b){return core_type(ctxt, a, b);},
              pld[3],
              function(a, b){return attributes(ctxt, a, b);},
              pld[5]);
    }
    var a = 0, b = 0;
    return caml_call4
            (pp,
             f,
             eM,
             function(c, d){return list(eL, b, a, type_record_field, c, d);},
             lbls);
   }
   function type_declaration(ctxt, f, x){
    function priv(f){return x[5] ? 0 : caml_call2(pp, f, eN);}
    function manifest(f){
     var match = x[6];
     if(! match) return 0;
     var y = match[1];
     return 0 === x[4]
             ? caml_call5
               (pp,
                f,
                eO,
                priv,
                function(a, b){return core_type(ctxt, a, b);},
                y)
             : caml_call4
               (pp, f, eP, function(a, b){return core_type(ctxt, a, b);}, y);
    }
    function constructor_declaration$0(f, pcd){
     caml_call2(pp, f, eQ);
     return constructor_declaration
             (ctxt, f, [0, pcd[1][1], pcd[2], pcd[3], pcd[4], pcd[6]]);
    }
    function repr(f){
     function intro(f){return 0 === x[6] ? 0 : caml_call2(pp, f, eR);}
     var match = x[4];
     if(typeof match === "number")
      return 0 === match ? 0 : caml_call4(pp, f, eS, intro, priv);
     if(0 === match[0]){
      var
       xs = match[1],
       variants =
         function(fmt, xs){
          if(0 === xs) return caml_call2(pp, fmt, eT);
          var a = 0, b = 0;
          return caml_call4
                  (pp,
                   fmt,
                   eV,
                   function(c, d){
                    return list(eU, b, a, constructor_declaration$0, c, d);
                   },
                   xs);
         };
      return caml_call6(pp, f, eW, intro, priv, variants, xs);
     }
     var l = match[1];
     return caml_call6
             (pp,
              f,
              eX,
              intro,
              priv,
              function(a, b){return record_declaration(ctxt, a, b);},
              l);
    }
    function constraints(f){
     return caml_call2
             (Stdlib_List[18],
              function(param){
               var ct2 = param[2], ct1 = param[1];
               return caml_call6
                       (pp,
                        f,
                        eY,
                        function(a, b){return core_type(ctxt, a, b);},
                        ct1,
                        function(a, b){return core_type(ctxt, a, b);},
                        ct2);
              },
              x[3]);
    }
    return caml_call5(pp, f, eZ, manifest, repr, constraints);
   }
   function type_extension(ctxt, f, x){
    function extension_constructor$0(f, x){
     return caml_call4
             (pp,
              f,
              e0,
              function(a, b){return extension_constructor(ctxt, a, b);},
              x);
    }
    var a = 0, b = 0;
    return caml_call12
            (pp,
             f,
             e6,
             function(f, l){
              if(! l) return 0;
              function a(a, b){return type_param(ctxt, a, b);}
              return caml_call4
                      (pp,
                       f,
                       e5,
                       function(b, c){return list(e4, e3, e2, a, b, c);},
                       l);
             },
             x[2],
             longident_loc,
             x[1],
             private_flag,
             x[4],
             function(c, d){
              return list(e1, b, a, extension_constructor$0, c, d);
             },
             x[3],
             function(a, b){return item_attributes(ctxt, a, b);},
             x[6]);
   }
   function constructor_declaration(ctxt, f, param){
    var
     attrs = param[5],
     res = param[4],
     args = param[3],
     vars = param[2],
     name = param[1],
     name$0 = name !== cst$61 ? name : cst$41;
    function pp_vars(f, vs){
     if(! vs) return 0;
     var a = 0, b = 0;
     return caml_call4
             (pp,
              f,
              e8,
              function(c, d){return list(e7, b, a, tyvar_loc, c, d);},
              vs);
    }
    if(! res)
     return caml_call7
             (pp,
              f,
              fe,
              name$0,
              function(f, param){
               if(0 !== param[0]){
                var l$0 = param[1];
                return caml_call4
                        (pp,
                         f,
                         fd,
                         function(a, b){return record_declaration(ctxt, a, b);},
                         l$0);
               }
               var l = param[1];
               if(! l) return 0;
               function a(a, b){return core_type1(ctxt, a, b);}
               var b = 0, c = 0;
               return caml_call4
                       (pp,
                        f,
                        fc,
                        function(d, e){return list(fb, c, b, a, d, e);},
                        l);
              },
              args,
              function(a, b){return attributes(ctxt, a, b);},
              attrs);
    var r = res[1];
    return caml_call9
            (pp,
             f,
             fa,
             name$0,
             pp_vars,
             vars,
             function(f, param){
              if(0 !== param[0]){
               var l$0 = param[1];
               return caml_call6
                       (pp,
                        f,
                        e$,
                        function(a, b){return record_declaration(ctxt, a, b);},
                        l$0,
                        function(a, b){return core_type1(ctxt, a, b);},
                        r);
              }
              var l = param[1];
              if(! l) return core_type1(ctxt, f, r);
              function a(a, b){return core_type1(ctxt, a, b);}
              var b = 0, c = 0;
              return caml_call6
                      (pp,
                       f,
                       e_,
                       function(d, e){return list(e9, c, b, a, d, e);},
                       l,
                       function(a, b){return core_type1(ctxt, a, b);},
                       r);
             },
             args,
             function(a, b){return attributes(ctxt, a, b);},
             attrs);
   }
   function extension_constructor(ctxt, f, x){
    var match = x[2];
    if(0 === match[0]){
     var r = match[3], l = match[2], v = match[1];
     return constructor_declaration(ctxt, f, [0, x[1][1], v, l, r, x[4]]);
    }
    var li = match[1];
    return caml_call7
            (pp,
             f,
             ff,
             x[1][1],
             longident_loc,
             li,
             function(a, b){return attributes(ctxt, a, b);},
             x[4]);
   }
   function case_list(ctxt, f, l){
    function aux(f, param){
     var
      pc_rhs = param[3],
      pc_guard = param[2],
      pc_lhs = param[1],
      b = [0, 1, ctxt[2], ctxt[3], ctxt[4]];
     return caml_call8
             (pp,
              f,
              fg,
              function(a, b){return pattern(ctxt, a, b);},
              pc_lhs,
              function(f, a$0){
               var first = first$2[1];
               if(! a$0) return 0;
               var x = a$0[1];
               caml_call2(pp, f, first);
               a(ctxt, f, x);
               return caml_call2(pp, f, last);
              },
              pc_guard,
              function(c, d){return a(b, c, d);},
              pc_rhs);
    }
    return list(fh, 0, 0, aux, f, l);
   }
   function label_x_expression_param(ctxt, f, param){
    var e = param[2], l = param[1], a = e[1];
    a:
    {
     if(typeof a !== "number" && 0 === a[0]){
      var b = a[1][1];
      if(0 === b[0] && ! e[4]){
       var l$0 = b[1], simple_name = [0, l$0];
       break a;
      }
     }
     var simple_name = 0;
    }
    if(typeof l === "number") return expression2(ctxt, f, e);
    if(0 === l[0]){
     var lbl = l[1];
     return caml_equal([0, lbl], simple_name)
             ? caml_call3(pp, f, fi, lbl)
             : caml_call5
               (pp,
                f,
                fj,
                lbl,
                function(a, b){return simple_expr(ctxt, a, b);},
                e);
    }
    var str = l[1];
    return caml_equal([0, str], simple_name)
            ? caml_call3(pp, f, fk, str)
            : caml_call5
              (pp,
               f,
               fl,
               str,
               function(a, b){return simple_expr(ctxt, a, b);},
               e);
   }
   function directive_argument(f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var s = match[1]; return caml_call3(pp, f, fm, s);
      case 1:
       var match$0 = match[2], n = match[1];
       if(! match$0) return caml_call3(pp, f, fo, n);
       var m = match$0[1];
       return caml_call4(pp, f, fn, n, m);
      case 2:
       var li = match[1]; return caml_call4(pp, f, fp, print_longident, li);
      default:
       var b = match[1];
       return caml_call3(pp, f, fq, caml_call1(Stdlib[30], b));
    }
   }
   function toplevel_phrase(f, x){
    if(0 === x[0]){
     var
      s = x[1],
      b = function(a, b){return structure_item(reset_ctxt, a, b);},
      c = 0,
      d = 0,
      e = 0;
     return caml_call4
             (pp, f, fr, function(a, f){return list(e, d, c, b, a, f);}, s);
    }
    var a = x[1], match = a[2], pdir_name = a[1];
    if(! match) return caml_call3(pp, f, ft, pdir_name[1]);
    var pdir_arg = match[1];
    return caml_call5(pp, f, fs, pdir_name[1], directive_argument, pdir_arg);
   }
   function expression(f, x){
    return caml_call4
            (pp, f, fu, function(b, c){return a(reset_ctxt, b, c);}, x);
   }
   function string_of_expression(x){
    caml_call1(Stdlib_Format[125], 0);
    var f = Stdlib_Format[123];
    expression(f, x);
    return caml_call1(Stdlib_Format[125], 0);
   }
   function string_of_structure(x){
    caml_call1(Stdlib_Format[125], 0);
    var f = Stdlib_Format[123];
    structure(reset_ctxt, f, x);
    return caml_call1(Stdlib_Format[125], 0);
   }
   function top_phrase(f, x){
    caml_call2(Stdlib_Format[45], f, 0);
    toplevel_phrase(f, x);
    caml_call2(pp, f, fv);
    return caml_call2(Stdlib_Format[45], f, 0);
   }
   function core_type$0(a, b){return core_type(reset_ctxt, a, b);}
   function pattern$0(a, b){return pattern(reset_ctxt, a, b);}
   function signature$0(a, b){return signature(reset_ctxt, a, b);}
   function structure$0(a, b){return structure(reset_ctxt, a, b);}
   function class_expr$0(a, b){return class_expr(reset_ctxt, a, b);}
   function class_field$0(a, b){return class_field(reset_ctxt, a, b);}
   function class_type$0(a, b){return class_type(reset_ctxt, a, b);}
   function class_signature$0(a, b){return class_signature(reset_ctxt, a, b);}
   function class_type_field$0(a, b){
    return class_type_field(reset_ctxt, a, b);
   }
   function module_expr$0(a, b){return module_expr(reset_ctxt, a, b);}
   function module_type$0(a, b){return module_type(reset_ctxt, a, b);}
   function signature_item$0(a, b){return signature_item(reset_ctxt, a, b);}
   function structure_item$0(a, b){return structure_item(reset_ctxt, a, b);}
   function type_declaration$0(a, b){
    return type_declaration(reset_ctxt, a, b);
   }
   function binding$0(a, b){return binding(reset_ctxt, a, b);}
   function payload$0(a, b){return payload(reset_ctxt, a, b);}
   var
    Astlib_Pprintast =
      [0,
       toplevel_phrase,
       expression,
       string_of_expression,
       top_phrase,
       core_type$0,
       pattern$0,
       signature$0,
       structure$0,
       string_of_structure,
       binding$0,
       print_longident,
       payload$0,
       class_expr$0,
       class_field$0,
       class_type$0,
       class_signature$0,
       class_type_field$0,
       module_expr$0,
       module_type$0,
       signature_item$0,
       structure_item$0,
       type_declaration$0];
   runtime.caml_register_global(504, Astlib_Pprintast, "Astlib__Pprintast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Parse
//# unitInfo: Requires: Parse
//# shape: Astlib__Parse:[N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Parse = global_data.Parse,
    implementation = Parse[1],
    interface$ = Parse[2],
    toplevel_phrase = Parse[3],
    use_file = Parse[4],
    core_type = Parse[5],
    expression = Parse[6],
    pattern = Parse[7],
    Astlib_Parse =
      [0,
       implementation,
       interface$,
       toplevel_phrase,
       use_file,
       core_type,
       expression,
       pattern];
   runtime.caml_register_global(1, Astlib_Parse, "Astlib__Parse");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_503
//# shape: Astlib__Ast_503:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M035",
    ast_intf_magic_number = "Caml1999N035",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_503 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_503, "Astlib__Ast_503");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_503_502
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_503_502:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    cst_ppxlib_migration_ppat_effe = "ppxlib.migration.ppat_effect";
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var
        fun_body = param[3],
        typ_constraint = param[2],
        params = param[1],
        params$0 = caml_call2(Stdlib_List[20], copy_function_param, params),
        typ_constraint$0 =
          Astlib_Stdlib0[2][1].call
           (null, copy_type_constraint, typ_constraint),
        fun_body$0 = copy_function_body(fun_body);
       return [3, params$0, typ_constraint$0, fun_body$0];
      case 4:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$0);
       return [4, copy_expression(x0$2), c];
      case 5:
       var
        x1$1 = param[2],
        x0$3 = param[1],
        d = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [5, copy_expression(x0$3), d];
      case 6:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$4), e];
      case 7:
       var x0$5 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_expression, x0$5)];
      case 8:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        f = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$3);
       return [8, copy_loc(copy_Longident_t, x0$6), f];
      case 9:
       var x1$4 = param[2], x0$7 = param[1];
       return [9,
               x0$7,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4)];
      case 10:
       var
        x1$5 = param[2],
        x0$8 = param[1],
        g = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5);
       return [10,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$8),
               g];
      case 11:
       var
        x1$6 = param[2],
        x0$9 = param[1],
        h = copy_loc(copy_Longident_t, x1$6);
       return [11, copy_expression(x0$9), h];
      case 12:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$10 = param[1],
        i = copy_expression(x2$0),
        j = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$10), j, i];
      case 13:
       var x0$11 = param[1];
       return [13, caml_call2(Stdlib_List[20], copy_expression, x0$11)];
      case 14:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$1),
        l = copy_expression(x1$8);
       return [14, copy_expression(x0$12), l, k];
      case 15:
       var x1$9 = param[2], x0$13 = param[1], m = copy_expression(x1$9);
       return [15, copy_expression(x0$13), m];
      case 16:
       var x1$10 = param[2], x0$14 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$14), n];
      case 17:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$15 = param[1],
        o = copy_expression(x4),
        p = copy_direction_flag(x3),
        q = copy_expression(x2$2),
        r = copy_expression(x1$11);
       return [17, copy_pattern(x0$15), r, q, p, o];
      case 18:
       var x1$12 = param[2], x0$16 = param[1], s = copy_core_type(x1$12);
       return [18, copy_expression(x0$16), s];
      case 19:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$17 = param[1],
        t = copy_core_type(x2$3),
        u = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$13);
       return [19, copy_expression(x0$17), u, t];
      case 20:
       var
        x1$14 = param[2],
        x0$18 = param[1],
        loc$2 = x1$14[2],
        txt$2 = x1$14[1];
       return [20, copy_expression(x0$18), [0, txt$2, loc$2]];
      case 21:
       var x0$19 = param[1]; return [21, copy_loc(copy_Longident_t, x0$19)];
      case 22:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        v = copy_expression(x1$15),
        loc$1 = x0$20[2],
        txt$1 = x0$20[1];
       return [22, [0, txt$1, loc$1], v];
      case 23:
       var x0$21 = param[1];
       return [23,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$21)];
      case 24:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x2$4),
        x = copy_module_expr(x1$16),
        loc$0 = x0$22[2],
        txt$0 = x0$22[1];
       return [24,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               x,
               w];
      case 25:
       var x1$17 = param[2], x0$23 = param[1], y = copy_expression(x1$17);
       return [25, copy_extension_constructor(x0$23), y];
      case 26:
       var x0$24 = param[1]; return [26, copy_expression(x0$24)];
      case 27:
       var x0$25 = param[1]; return [27, copy_expression(x0$25)];
      case 28:
       var
        x1$18 = param[2],
        x0$26 = param[1],
        z = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$18);
       return [28, copy_expression(x0$26), z];
      case 29:
       var x0$27 = param[1]; return [29, copy_class_structure(x0$27)];
      case 30:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = copy_expression(x1$19),
        loc = x0$28[2],
        txt = x0$28[1];
       return [30, [0, txt, loc], A];
      case 31:
       var x0$29 = param[1]; return [31, copy_module_expr(x0$29)];
      case 32:
       var x1$20 = param[2], x0$30 = param[1], B = copy_expression(x1$20);
       return [32, copy_open_declaration(x0$30), B];
      case 33:
       var x0$31 = param[1]; return [33, copy_letop(x0$31)];
      default: var x0$32 = param[1]; return [34, copy_extension(x0$32)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_function_param_desc(param){
    if(0 === param[0]){
     var
      p = param[3],
      e = param[2],
      l = param[1],
      a = copy_pattern(p),
      b = Astlib_Stdlib0[2][1].call(null, copy_expression, e);
     return [0, copy_arg_label(l), b, a];
    }
    var x = param[1], loc = x[2], txt = x[1];
    return [1, [0, txt, loc]];
   }
   function copy_function_param(param){
    var pparam_desc = param[2], pparam_loc = param[1];
    return [0, pparam_loc, copy_function_param_desc(pparam_desc)];
   }
   function copy_function_body(param){
    if(0 === param[0]){var e = param[1]; return [0, copy_expression(e)];}
    var
     attributes = param[3],
     loc = param[2],
     cases = param[1],
     a = copy_attributes(attributes);
    return [1, caml_call2(Stdlib_List[20], copy_case, cases), loc, a];
   }
   function copy_type_constraint(param){
    if(0 === param[0]){var t = param[1]; return [0, copy_core_type(t)];}
    var t2 = param[2], t1 = param[1], a = copy_core_type(t2);
    return [1, Astlib_Stdlib0[2][1].call(null, copy_core_type, t1), a];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b =
       Astlib_Stdlib0[2][1].call(null, copy_value_constraint, pvb_constraint),
     c = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), c, b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_loc, ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(loc, param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$2 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, loc$2]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$1 = x1[2], txt$0 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$0, loc$1]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, loc];
                       },
                       x0),
                     a];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], d = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$6),
               d];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], f = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), f];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], g = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), g];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var c = param[2], e = param[1], h = [0, copy_pattern(c), 0];
       return [15,
               [0,
                [0, cst_ppxlib_migration_ppat_effe, loc],
                [3, [0, [4, [0, copy_pattern(e), h]], loc, 0, 0], 0]]];
      case 16:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], i = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), i];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      a = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(param){
                var loc = param[2], txt = param[1];
                return [0, txt, loc];
               },
               locally_abstract_univars),
             a];
    }
    var coercion = param[2], ground = param[1], b = copy_core_type(coercion);
    return [1, Astlib_Stdlib0[2][1].call(null, copy_core_type, ground), b];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1], loc = x1$3[2], txt = x1$3[1];
       return [6, copy_core_type(x0$5), [0, txt, loc]];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      case 10:
       var ty = param[2], x0$9 = param[1], i = copy_core_type(ty);
       return [10, copy_loc(copy_Longident_t, x0$9), i];
      default: var x0$10 = param[1]; return [11, copy_extension(x0$10)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), a];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], c = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), c];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), b];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], c = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), c];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], d = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), d];
      case 4:
       var x1$3 = param[2], x0$3 = param[1], e = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), e];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        f = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), f];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     b = copy_loc(copy_Longident_t, pms_manifest),
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], b, a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            d,
            c,
            b,
            ptyext_loc,
            a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x2),
      b = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
               x0),
             b,
             a];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
         pcd_vars),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], d, c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    var pconst_desc = param[1];
    switch(pconst_desc[0]){
      case 0:
       var x1 = pconst_desc[2], x0 = pconst_desc[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = pconst_desc[1]; return [1, x0$0];
      case 2:
       var x2 = pconst_desc[3], x1$0 = pconst_desc[2], x0$1 = pconst_desc[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = pconst_desc[2], x0$2 = pconst_desc[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], a = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), a];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_503_502 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_function_param_desc,
       copy_function_param,
       copy_function_body,
       copy_type_constraint,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (3, Astlib_Migrate_503_502, "Astlib__Migrate_503_502");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_502_503
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_502_503:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var
        fun_body = param[3],
        typ_constraint = param[2],
        params = param[1],
        params$0 = caml_call2(Stdlib_List[20], copy_function_param, params),
        typ_constraint$0 =
          Astlib_Stdlib0[2][1].call
           (null, copy_type_constraint, typ_constraint),
        fun_body$0 = copy_function_body(fun_body);
       return [3, params$0, typ_constraint$0, fun_body$0];
      case 4:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$0);
       return [4, copy_expression(x0$2), c];
      case 5:
       var
        x1$1 = param[2],
        x0$3 = param[1],
        d = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [5, copy_expression(x0$3), d];
      case 6:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$4), e];
      case 7:
       var x0$5 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_expression, x0$5)];
      case 8:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        f = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$3);
       return [8, copy_loc(copy_Longident_t, x0$6), f];
      case 9:
       var x1$4 = param[2], x0$7 = param[1];
       return [9,
               x0$7,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4)];
      case 10:
       var
        x1$5 = param[2],
        x0$8 = param[1],
        g = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5);
       return [10,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$8),
               g];
      case 11:
       var
        x1$6 = param[2],
        x0$9 = param[1],
        h = copy_loc(copy_Longident_t, x1$6);
       return [11, copy_expression(x0$9), h];
      case 12:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$10 = param[1],
        i = copy_expression(x2$0),
        j = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$10), j, i];
      case 13:
       var x0$11 = param[1];
       return [13, caml_call2(Stdlib_List[20], copy_expression, x0$11)];
      case 14:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$1),
        l = copy_expression(x1$8);
       return [14, copy_expression(x0$12), l, k];
      case 15:
       var x1$9 = param[2], x0$13 = param[1], m = copy_expression(x1$9);
       return [15, copy_expression(x0$13), m];
      case 16:
       var x1$10 = param[2], x0$14 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$14), n];
      case 17:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$15 = param[1],
        o = copy_expression(x4),
        p = copy_direction_flag(x3),
        q = copy_expression(x2$2),
        r = copy_expression(x1$11);
       return [17, copy_pattern(x0$15), r, q, p, o];
      case 18:
       var x1$12 = param[2], x0$16 = param[1], s = copy_core_type(x1$12);
       return [18, copy_expression(x0$16), s];
      case 19:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$17 = param[1],
        t = copy_core_type(x2$3),
        u = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$13);
       return [19, copy_expression(x0$17), u, t];
      case 20:
       var
        x1$14 = param[2],
        x0$18 = param[1],
        loc$2 = x1$14[2],
        txt$2 = x1$14[1];
       return [20, copy_expression(x0$18), [0, txt$2, loc$2]];
      case 21:
       var x0$19 = param[1]; return [21, copy_loc(copy_Longident_t, x0$19)];
      case 22:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        v = copy_expression(x1$15),
        loc$1 = x0$20[2],
        txt$1 = x0$20[1];
       return [22, [0, txt$1, loc$1], v];
      case 23:
       var x0$21 = param[1];
       return [23,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$21)];
      case 24:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x2$4),
        x = copy_module_expr(x1$16),
        loc$0 = x0$22[2],
        txt$0 = x0$22[1];
       return [24,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               x,
               w];
      case 25:
       var x1$17 = param[2], x0$23 = param[1], y = copy_expression(x1$17);
       return [25, copy_extension_constructor(x0$23), y];
      case 26:
       var x0$24 = param[1]; return [26, copy_expression(x0$24)];
      case 27:
       var x0$25 = param[1]; return [27, copy_expression(x0$25)];
      case 28:
       var
        x1$18 = param[2],
        x0$26 = param[1],
        z = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$18);
       return [28, copy_expression(x0$26), z];
      case 29:
       var x0$27 = param[1]; return [29, copy_class_structure(x0$27)];
      case 30:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = copy_expression(x1$19),
        loc = x0$28[2],
        txt = x0$28[1];
       return [30, [0, txt, loc], A];
      case 31:
       var x0$29 = param[1]; return [31, copy_module_expr(x0$29)];
      case 32:
       var x1$20 = param[2], x0$30 = param[1], B = copy_expression(x1$20);
       return [32, copy_open_declaration(x0$30), B];
      case 33:
       var x0$31 = param[1]; return [33, copy_letop(x0$31)];
      default: var x0$32 = param[1]; return [34, copy_extension(x0$32)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_function_param_desc(param){
    if(0 === param[0]){
     var
      p = param[3],
      e = param[2],
      l = param[1],
      a = copy_pattern(p),
      b = Astlib_Stdlib0[2][1].call(null, copy_expression, e);
     return [0, copy_arg_label(l), b, a];
    }
    var x = param[1], loc = x[2], txt = x[1];
    return [1, [0, txt, loc]];
   }
   function copy_function_param(param){
    var pparam_desc = param[2], pparam_loc = param[1];
    return [0, pparam_loc, copy_function_param_desc(pparam_desc)];
   }
   function copy_function_body(param){
    if(0 === param[0]){var e = param[1]; return [0, copy_expression(e)];}
    var
     attributes = param[3],
     loc = param[2],
     cases = param[1],
     a = copy_attributes(attributes);
    return [1, caml_call2(Stdlib_List[20], copy_case, cases), loc, a];
   }
   function copy_type_constraint(param){
    if(0 === param[0]){var t = param[1]; return [0, copy_core_type(t)];}
    var t2 = param[2], t1 = param[1], a = copy_core_type(t2);
    return [1, Astlib_Stdlib0[2][1].call(null, copy_core_type, t1), a];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b =
       Astlib_Stdlib0[2][1].call(null, copy_value_constraint, pvb_constraint),
     c = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), c, b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, loc$1]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$0 = x1[2], txt$0 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$0, loc$0]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], g = copy_constant(x1$0);
       return [3, copy_constant(x0$2), g];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        h =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, loc];
                       },
                       x0),
                     a];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), h];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], i = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$6),
               i];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], j = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), j];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], k = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), k];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc = x0$12[2], txt = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
                loc]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1];
       if(x0$14[1][1] === "ppxlib.migration.ppat_effect"){
        var a = x0$14[2];
        if(3 === a[0]){
         var b = a[1][1];
         if(typeof b !== "number" && 4 === b[0]){
          var d = b[1];
          if(d){
           var f = d[2];
           if(f && ! f[2] && ! a[2]){
            var c = f[1], e = d[1], l = copy_pattern(c);
            return [15, copy_pattern(e), l];
           }
          }
         }
        }
       }
       return [16, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], m = copy_pattern(x1$6);
       return [17, copy_loc(copy_Longident_t, x0$15), m];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      a = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(param){
                var loc = param[2], txt = param[1];
                return [0, txt, loc];
               },
               locally_abstract_univars),
             a];
    }
    var coercion = param[2], ground = param[1], b = copy_core_type(coercion);
    return [1, Astlib_Stdlib0[2][1].call(null, copy_core_type, ground), b];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1], loc = x1$3[2], txt = x1$3[1];
       return [6, copy_core_type(x0$5), [0, txt, loc]];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      case 10:
       var ty = param[2], x0$9 = param[1], i = copy_core_type(ty);
       return [10, copy_loc(copy_Longident_t, x0$9), i];
      default: var x0$10 = param[1]; return [11, copy_extension(x0$10)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), a];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], c = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), c];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), b];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], c = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), c];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], d = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), d];
      case 4:
       var x1$3 = param[2], x0$3 = param[1], e = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), e];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        f = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), f];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     b = copy_loc(copy_Longident_t, pms_manifest),
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], b, a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            d,
            c,
            b,
            ptyext_loc,
            a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x2),
      b = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
               x0),
             b,
             a];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
         pcd_vars),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], d, c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(c){
    switch(c[0]){
      case 0:
       var
        x1 = c[2],
        x0 = c[1],
        pconst_desc =
          [0, x0, Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
       break;
      case 1:
       var x0$0 = c[1], pconst_desc = [1, x0$0]; break;
      case 2:
       var
        x2 = c[3],
        x1$0 = c[2],
        x0$1 = c[1],
        pconst_desc =
          [2,
           x0$1,
           x1$0,
           Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
       break;
      default:
       var
        x1$1 = c[2],
        x0$2 = c[1],
        pconst_desc =
          [3,
           x0$2,
           Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
    return [0, pconst_desc, Astlib_Location[4]];
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], a = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), a];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_502_503 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_function_param_desc,
       copy_function_param,
       copy_function_body,
       copy_type_constraint,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (4, Astlib_Migrate_502_503, "Astlib__Migrate_502_503");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_501
//# shape: Astlib__Ast_501:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M033",
    ast_intf_magic_number = "Caml1999N033",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_501 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_501, "Astlib__Ast_501");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_502_501
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib, Stdlib__List
//# shape: Astlib__Migrate_502_501:[F(2),F(1)*,F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "::", cst$0 = "[]";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    a =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 5.02", 0]]],
       "migration error: %s is not supported before OCaml 5.02"],
    b = [0, 0],
    cst_Invalid_ocaml_ppx_context_ = "Invalid ocaml.ppx.context's load_path",
    c = [0, cst],
    cst_ppxlib_migration_load_path = "ppxlib.migration.load_path",
    cst_ppxlib_migration_stop_taki = "ppxlib.migration.stop_taking",
    cst_module_open_in_types = "module open in types";
   function migration_error(loc, missing_feature){
    return caml_call1
            (Astlib_Location[7].call(null, [0, loc], a), missing_feature);
   }
   function mk_ghost_attr(name){
    return [0, [0, name, Astlib_Location[4]], b, Astlib_Location[4]];
   }
   function concat_list_lit(left, right){
    var a = left[1], b = right[1];
    if(typeof b !== "number" && 8 === b[0]){
     var j = b[1][1];
     if(0 === j[0] && j[1] === cst$0) return left;
    }
    if(typeof a !== "number" && 8 === a[0]){
     var g = a[1], h = g[1];
     if(0 === h[0]){
      var match = h[1];
      if(match !== cst){
       if(match === cst$0) return right;
      }
      else{
       var i = a[2];
       if(i){
        var arg_expr = i[1], d = arg_expr[1];
        if(typeof d !== "number" && 7 === d[0]){
         var e = d[1];
         if(e){
          var f = e[2];
          if(f && ! f[2]){
           var
            tl = f[1],
            hd = e[1],
            loc = g[2],
            k = left[4],
            l = left[3],
            m = left[2],
            n = arg_expr[4],
            o = arg_expr[3],
            p = arg_expr[2];
           return [0,
                   [8,
                    [0, c, loc],
                    [0,
                     [0,
                      [7, [0, hd, [0, concat_list_lit(tl, right), 0]]],
                      p,
                      o,
                      n]]],
                   m,
                   l,
                   k];
          }
         }
        }
       }
      }
     }
    }
    return caml_call1(Stdlib[1], cst_Invalid_ocaml_ppx_context_);
   }
   function migrate_ppx_context_load_path(expr){
    var loc = expr[2], match = expr[1];
    if(typeof match !== "number" && 7 === match[0]){
     var a = match[1];
     if(a){
      var b = a[2];
      if(b && ! b[2]){
       var
        hidden = b[1],
        visible = a[1],
        migration_attr =
          [0,
           [0, cst_ppxlib_migration_load_path, loc],
           [0, [0, [0, [0, expr, 0], loc], 0]],
           loc],
        expr$0 = concat_list_lit(visible, hidden);
       return [0,
               expr$0[1],
               expr$0[2],
               expr$0[3],
               [0, migration_attr, expr[4]]];
      }
     }
    }
    return expr;
   }
   function migrate_ppx_context_fields(fields){
    return caml_call2
            (Stdlib_List[20],
             function(param){
              var expr = param[2], lident_loc = param[1], a = lident_loc[1];
              if(0 === a[0] && a[1] === "load_path")
               return [0, lident_loc, migrate_ppx_context_load_path(expr)];
              return [0, lident_loc, expr];
             },
             fields);
   }
   function migrate_ppx_context_payload(payload){
    if(0 === payload[0]){
     var b = payload[1];
     if(b){
      var stri = b[1], c = stri[1];
      if(0 === c[0]){
       var expr = c[1], a = expr[1];
       if(typeof a !== "number" && 10 === a[0] && ! a[2] && ! b[2]){
        var
         attributes = c[2],
         fields = a[1],
         new_fields = migrate_ppx_context_fields(fields),
         new_expr = [0, [10, new_fields, 0], expr[2], expr[3], expr[4]];
        return [0, [0, [0, [0, new_expr, attributes], stri[2]], 0]];
       }
      }
     }
    }
    return payload;
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var body = param[3], tconstraint = param[2], params = param[1];
       a:
       if(0 === body[0]){
        var expr = body[1], match = expr[1];
        if(typeof match !== "number" && 3 === match[0]){
         var
          attr = mk_ghost_attr(cst_ppxlib_migration_stop_taki),
          expr$3 = copy_expression(expr),
          expr$0 = [0, expr$3[1], expr$3[2], expr$3[3], [0, attr, expr$3[4]]];
         break a;
        }
        var expr$0 = copy_expression(expr);
       }
       else
        var
         attrs = body[3],
         loc = body[2],
         cases = body[1],
         f = copy_attributes(attrs),
         expr$0 =
           [0, [3, caml_call2(Stdlib_List[20], copy_case, cases)], loc, 0, f];
       if(tconstraint){
        var match$0 = tconstraint[1];
        if(0 === match$0[0])
         var
          c = match$0[1],
          d = expr$0[2],
          expr$1 = [0, [19, expr$0, copy_core_type(c)], d, 0, 0];
        else
         var
          c2 = match$0[2],
          c1 = match$0[1],
          c1$0 = Astlib_Stdlib0[2][1].call(null, copy_core_type, c1),
          e = expr$0[2],
          expr$1 = [0, [20, expr$0, c1$0, copy_core_type(c2)], e, 0, 0];
       }
       else
        var expr$1 = expr$0;
       var
        expr$2 =
          caml_call3
           (Stdlib_List[27],
            function(param, expr){
             var match = param[2];
             if(0 === match[0]){
              var
               p = match[3],
               exp0 = match[2],
               lbl = match[1],
               a = copy_pattern(p),
               b = Astlib_Stdlib0[2][1].call(null, copy_expression, exp0),
               pexp_desc = [4, copy_arg_label(lbl), b, a, expr];
              return [0, pexp_desc, [0, param[1][1], expr[2][2], 1], 0, 0];
             }
             var
              x = match[1],
              loc = x[2],
              txt = x[1],
              pexp_desc$0 = [31, [0, txt, loc], expr];
             return [0, pexp_desc$0, [0, param[1][1], expr[2][2], 1], 0, 0];
            },
            params,
            expr$1);
       return expr$2[1];
      case 4:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        g =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$0);
       return [5, copy_expression(x0$2), g];
      case 5:
       var
        x1$1 = param[2],
        x0$3 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [6, copy_expression(x0$3), h];
      case 6:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        i = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [7, copy_expression(x0$4), i];
      case 7:
       var x0$5 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$5)];
      case 8:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$3);
       return [9, copy_loc(copy_Longident_t, x0$6), j];
      case 9:
       var x1$4 = param[2], x0$7 = param[1];
       return [10,
               x0$7,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4)];
      case 10:
       var
        x1$5 = param[2],
        x0$8 = param[1],
        k = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$8),
               k];
      case 11:
       var
        x1$6 = param[2],
        x0$9 = param[1],
        l = copy_loc(copy_Longident_t, x1$6);
       return [12, copy_expression(x0$9), l];
      case 12:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$10 = param[1],
        m = copy_expression(x2$0),
        n = copy_loc(copy_Longident_t, x1$7);
       return [13, copy_expression(x0$10), n, m];
      case 13:
       var x0$11 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$11)];
      case 14:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        o = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$1),
        p = copy_expression(x1$8);
       return [15, copy_expression(x0$12), p, o];
      case 15:
       var x1$9 = param[2], x0$13 = param[1], q = copy_expression(x1$9);
       return [16, copy_expression(x0$13), q];
      case 16:
       var x1$10 = param[2], x0$14 = param[1], r = copy_expression(x1$10);
       return [17, copy_expression(x0$14), r];
      case 17:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$15 = param[1],
        s = copy_expression(x4),
        t = copy_direction_flag(x3),
        u = copy_expression(x2$2),
        v = copy_expression(x1$11);
       return [18, copy_pattern(x0$15), v, u, t, s];
      case 18:
       var x1$12 = param[2], x0$16 = param[1], w = copy_core_type(x1$12);
       return [19, copy_expression(x0$16), w];
      case 19:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$17 = param[1],
        x = copy_core_type(x2$3),
        y = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$13);
       return [20, copy_expression(x0$17), y, x];
      case 20:
       var
        x1$14 = param[2],
        x0$18 = param[1],
        loc$3 = x1$14[2],
        txt$2 = x1$14[1];
       return [21, copy_expression(x0$18), [0, txt$2, loc$3]];
      case 21:
       var x0$19 = param[1]; return [22, copy_loc(copy_Longident_t, x0$19)];
      case 22:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        z = copy_expression(x1$15),
        loc$2 = x0$20[2],
        txt$1 = x0$20[1];
       return [23, [0, txt$1, loc$2], z];
      case 23:
       var x0$21 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$21)];
      case 24:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$22 = param[1],
        A = copy_expression(x2$4),
        B = copy_module_expr(x1$16),
        loc$1 = x0$22[2],
        txt$0 = x0$22[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$1],
               B,
               A];
      case 25:
       var x1$17 = param[2], x0$23 = param[1], C = copy_expression(x1$17);
       return [26, copy_extension_constructor(x0$23), C];
      case 26:
       var x0$24 = param[1]; return [27, copy_expression(x0$24)];
      case 27:
       var x0$25 = param[1]; return [28, copy_expression(x0$25)];
      case 28:
       var
        x1$18 = param[2],
        x0$26 = param[1],
        D = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$18);
       return [29, copy_expression(x0$26), D];
      case 29:
       var x0$27 = param[1]; return [30, copy_class_structure(x0$27)];
      case 30:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        E = copy_expression(x1$19),
        loc$0 = x0$28[2],
        txt = x0$28[1];
       return [31, [0, txt, loc$0], E];
      case 31:
       var x0$29 = param[1]; return [32, copy_module_expr(x0$29)];
      case 32:
       var x1$20 = param[2], x0$30 = param[1], F = copy_expression(x1$20);
       return [33, copy_open_declaration(x0$30), F];
      case 33:
       var x0$31 = param[1]; return [34, copy_letop(x0$31)];
      default: var x0$32 = param[1]; return [35, copy_extension(x0$32)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b =
       Astlib_Stdlib0[2][1].call(null, copy_value_constraint, pvb_constraint),
     c = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), c, b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, loc$1]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$0 = x1[2], txt$0 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$0, loc$0]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, loc];
                       },
                       x0),
                     a];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc = x0$12[2], txt = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
                loc]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], f = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), f];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      a = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(param){
                var loc = param[2], txt = param[1];
                return [0, txt, loc];
               },
               locally_abstract_univars),
             a];
    }
    var coercion = param[2], ground = param[1], b = copy_core_type(coercion);
    return [1, Astlib_Stdlib0[2][1].call(null, copy_core_type, ground), b];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_loc, ptyp_desc), ptyp_loc, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(loc, param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1], f = x1$3[1];
       return [6, copy_core_type(x0$5), f];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        g =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        h = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), h, g];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], i = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               i];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      case 10:
       return migration_error(loc, cst_module_open_in_types);
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), a];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a =
       attr_name[1] !== "ocaml.ppx.context"
        ? copy_payload(attr_payload)
        : copy_payload(migrate_ppx_context_payload(attr_payload)),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], c = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), c];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), b];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], c = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), c];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], d = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), d];
      case 4:
       var x1$3 = param[2], x0$3 = param[1], e = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), e];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        f = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), f];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     b = copy_loc(copy_Longident_t, pms_manifest),
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], b, a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            d,
            c,
            b,
            ptyext_loc,
            a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x2),
      b = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
               x0),
             b,
             a];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
         pcd_vars),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], d, c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], a = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), a];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_502_501 =
      [0,
       migration_error,
       mk_ghost_attr,
       concat_list_lit,
       migrate_ppx_context_load_path,
       migrate_ppx_context_fields,
       migrate_ppx_context_payload,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (16, Astlib_Migrate_502_501, "Astlib__Migrate_502_501");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_501_502
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib, Stdlib__List
//# shape: Astlib__Migrate_501_502:[F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    cst_ppxlib_migration_load_path = "ppxlib.migration.load_path",
    cst_Invalid_ppxlib_migration_l =
      "Invalid ppxlib.migration.load_path payload",
    a = [0, "[]"],
    cst_ppxlib_migration_stop_taki = "ppxlib.migration.stop_taking";
   function extract_attr(name, attrs){
    var acc = 0, param = attrs;
    for(;;){
     if(! param) return [0, 0, caml_call1(Stdlib_List[10], acc)];
     var hd = param[1], q = param[2], attr_payload = hd[2], txt = hd[1][1];
     if(txt === name)
      return [0, [0, attr_payload], caml_call2(Stdlib_List[13], acc, q)];
     var tl = param[2], acc$0 = [0, hd, acc];
     acc = acc$0;
     param = tl;
    }
   }
   function migrate_ppx_context_load_path(expr){
    var
     match = extract_attr(cst_ppxlib_migration_load_path, expr[4]),
     other_attrs = match[2],
     payload = match[1];
    if(! payload){
     var
      pexp_desc = [9, [0, a, expr[2]], 0],
      hidden = [0, pexp_desc, expr[2], expr[3], 0];
     return [0, [8, [0, expr, [0, hidden, 0]]], expr[2], expr[3], other_attrs];
    }
    var match$0 = payload[1];
    if(0 === match$0[0]){
     var b = match$0[1];
     if(b){
      var c = b[1][1];
      if(0 === c[0] && ! c[2] && ! b[2]){var expr$0 = c[1]; return expr$0;}
     }
    }
    return caml_call1(Stdlib[1], cst_Invalid_ppxlib_migration_l);
   }
   function migrate_ppx_context_fields(fields){
    return caml_call2
            (Stdlib_List[20],
             function(param){
              var expr = param[2], lident_loc = param[1], a = lident_loc[1];
              if(0 === a[0] && a[1] === "load_path")
               return [0, lident_loc, migrate_ppx_context_load_path(expr)];
              return [0, lident_loc, expr];
             },
             fields);
   }
   function migrate_ppx_context_payload(payload){
    if(0 === payload[0]){
     var b = payload[1];
     if(b){
      var stri = b[1], c = stri[1];
      if(0 === c[0]){
       var expr = c[1], a = expr[1];
       if(typeof a !== "number" && 11 === a[0] && ! a[2] && ! b[2]){
        var
         attributes = c[2],
         fields = a[1],
         new_fields = migrate_ppx_context_fields(fields),
         new_expr = [0, [11, new_fields, 0], expr[2], expr[3], expr[4]];
        return [0, [0, [0, [0, new_expr, attributes], stri[2]], 0]];
       }
      }
     }
    }
    return payload;
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_loc, pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(loc, param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3,
               0,
               0,
               [1, caml_call2(Stdlib_List[20], copy_case, x0$2), loc, 0]];
      case 4:
       var
        expr = param[4],
        pat = param[3],
        opt_default = param[2],
        arg_label = param[1],
        take_body =
          function(e){
           var match = e[1];
           if(typeof match !== "number" && 3 === match[0]){
            var case_list = match[1], a = copy_attributes(e[4]), b = e[2];
            return [1,
                    caml_call2(Stdlib_List[20], copy_case, case_list),
                    b,
                    a];
           }
           return [0, copy_expression(e)];
          },
        acc$0 = 0,
        arg_label$1 = arg_label,
        opt_default$1 = opt_default,
        pat$1 = pat,
        expr$2 = expr;
       for(;;){
        var
         c = copy_pattern(pat$1),
         d = Astlib_Stdlib0[2][1].call(null, copy_expression, opt_default$1),
         pparam_desc = [0, copy_arg_label(arg_label$1), d, c],
         acc$1 = [0, [0, pat$1[2], pparam_desc], acc$0],
         arg_list = acc$1,
         e = expr$2;
        a:
        for(;;){
         b:
         if(0 === e[4]){
          var match = e[1];
          if(typeof match !== "number")
           switch(match[0]){
             case 4:
              var
               expr$0 = match[4],
               pat$0 = match[3],
               opt_default$0 = match[2],
               arg_label$0 = match[1];
              acc$0 = arg_list;
              arg_label$1 = arg_label$0;
              opt_default$1 = opt_default$0;
              pat$1 = pat$0;
              expr$2 = expr$0;
              break a;
             case 19:
              var
               ct = match[2],
               exp = match[1],
               ct$0 = [0, [0, copy_core_type(ct)]],
               match$0 = [0, , ct$0, take_body(exp)];
              break b;
             case 20:
              var
               c2 = match[3],
               c1 = match[2],
               exp$0 = match[1],
               c1$0 = Astlib_Stdlib0[2][1].call(null, copy_core_type, c1),
               c2$0 = copy_core_type(c2),
               match$0 = [0, , [0, [1, c1$0, c2$0]], take_body(exp$0)];
              break b;
             case 31:
              var
               expr$1 = match[2],
               t = match[1],
               acc = [0, [0, t[2], [1, t]], arg_list];
              arg_list = acc;
              e = expr$1;
              continue;
           }
          var match$0 = [0, , 0, take_body(e)];
         }
         else
          var
           attrs = extract_attr(cst_ppxlib_migration_stop_taki, e[4])[2],
           match$0 =
             [0, , 0, [0, copy_expression([0, e[1], e[2], e[3], attrs])]];
         var body = match$0[3], type_constraint = match$0[2];
         return [3,
                 caml_call1(Stdlib_List[10], arg_list),
                 type_constraint,
                 body];
        }
       }
       break;
      case 5:
       var
        x1$0 = param[2],
        x0$3 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$0);
       return [4, copy_expression(x0$3), f];
      case 6:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [5, copy_expression(x0$4), g];
      case 7:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), h];
      case 8:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_expression, x0$6)];
      case 9:
       var
        x1$3 = param[2],
        x0$7 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$3);
       return [8, copy_loc(copy_Longident_t, x0$7), i];
      case 10:
       var x1$4 = param[2], x0$8 = param[1];
       return [9,
               x0$8,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4)];
      case 11:
       var
        x1$5 = param[2],
        x0$9 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5);
       return [10,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$9),
               j];
      case 12:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        k = copy_loc(copy_Longident_t, x1$6);
       return [11, copy_expression(x0$10), k];
      case 13:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$11 = param[1],
        l = copy_expression(x2$0),
        m = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), m, l];
      case 14:
       var x0$12 = param[1];
       return [13, caml_call2(Stdlib_List[20], copy_expression, x0$12)];
      case 15:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$13 = param[1],
        n = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$1),
        o = copy_expression(x1$8);
       return [14, copy_expression(x0$13), o, n];
      case 16:
       var x1$9 = param[2], x0$14 = param[1], p = copy_expression(x1$9);
       return [15, copy_expression(x0$14), p];
      case 17:
       var x1$10 = param[2], x0$15 = param[1], q = copy_expression(x1$10);
       return [16, copy_expression(x0$15), q];
      case 18:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$16 = param[1],
        r = copy_expression(x4),
        s = copy_direction_flag(x3),
        u = copy_expression(x2$2),
        v = copy_expression(x1$11);
       return [17, copy_pattern(x0$16), v, u, s, r];
      case 19:
       var x1$12 = param[2], x0$17 = param[1], w = copy_core_type(x1$12);
       return [18, copy_expression(x0$17), w];
      case 20:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$18 = param[1],
        x = copy_core_type(x2$3),
        y = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$13);
       return [19, copy_expression(x0$18), y, x];
      case 21:
       var
        x1$14 = param[2],
        x0$19 = param[1],
        loc$3 = x1$14[2],
        txt$2 = x1$14[1];
       return [20, copy_expression(x0$19), [0, txt$2, loc$3]];
      case 22:
       var x0$20 = param[1]; return [21, copy_loc(copy_Longident_t, x0$20)];
      case 23:
       var
        x1$15 = param[2],
        x0$21 = param[1],
        z = copy_expression(x1$15),
        loc$2 = x0$21[2],
        txt$1 = x0$21[1];
       return [22, [0, txt$1, loc$2], z];
      case 24:
       var x0$22 = param[1];
       return [23,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$22)];
      case 25:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$23 = param[1],
        A = copy_expression(x2$4),
        B = copy_module_expr(x1$16),
        loc$1 = x0$23[2],
        txt$0 = x0$23[1];
       return [24,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$1],
               B,
               A];
      case 26:
       var x1$17 = param[2], x0$24 = param[1], C = copy_expression(x1$17);
       return [25, copy_extension_constructor(x0$24), C];
      case 27:
       var x0$25 = param[1]; return [26, copy_expression(x0$25)];
      case 28:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 29:
       var
        x1$18 = param[2],
        x0$27 = param[1],
        D = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$18);
       return [28, copy_expression(x0$27), D];
      case 30:
       var x0$28 = param[1]; return [29, copy_class_structure(x0$28)];
      case 31:
       var
        x1$19 = param[2],
        x0$29 = param[1],
        E = copy_expression(x1$19),
        loc$0 = x0$29[2],
        txt = x0$29[1];
       return [30, [0, txt, loc$0], E];
      case 32:
       var x0$30 = param[1]; return [31, copy_module_expr(x0$30)];
      case 33:
       var x1$20 = param[2], x0$31 = param[1], F = copy_expression(x1$20);
       return [32, copy_open_declaration(x0$31), F];
      case 34:
       var x0$32 = param[1]; return [33, copy_letop(x0$32)];
      default: var x0$33 = param[1]; return [34, copy_extension(x0$33)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b =
       Astlib_Stdlib0[2][1].call(null, copy_value_constraint, pvb_constraint),
     c = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), c, b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, loc$1]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$0 = x1[2], txt$0 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$0, loc$0]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, loc];
                       },
                       x0),
                     a];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc = x0$12[2], txt = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
                loc]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], f = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), f];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      a = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(param){
                var loc = param[2], txt = param[1];
                return [0, txt, loc];
               },
               locally_abstract_univars),
             a];
    }
    var coercion = param[2], ground = param[1], b = copy_core_type(coercion);
    return [1, Astlib_Stdlib0[2][1].call(null, copy_core_type, ground), b];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1], f = [0, x1$3, x0$5[2]];
       return [6, copy_core_type(x0$5), f];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        g =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        h = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), h, g];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], i = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               i];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [11, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), a];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a =
       attr_name[1] !== "ocaml.ppx.context"
        ? copy_payload(attr_payload)
        : copy_payload(migrate_ppx_context_payload(attr_payload)),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], c = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), c];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), b];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], c = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), c];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], d = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), d];
      case 4:
       var x1$3 = param[2], x0$3 = param[1], e = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), e];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        f = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), f];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     b = copy_loc(copy_Longident_t, pms_manifest),
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], b, a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            d,
            c,
            b,
            ptyext_loc,
            a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x2),
      b = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
               x0),
             b,
             a];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
         pcd_vars),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], d, c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], a = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), a];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_501_502 =
      [0,
       extract_attr,
       migrate_ppx_context_load_path,
       migrate_ppx_context_fields,
       migrate_ppx_context_payload,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (9, Astlib_Migrate_501_502, "Astlib__Migrate_501_502");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_414
//# shape: Astlib__Ast_414:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M031",
    ast_intf_magic_number = "Caml1999N031",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_414 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_414, "Astlib__Ast_414");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_500
//# unitInfo: Requires: Astlib__Ast_414
//# shape: Astlib__Ast_500:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M032",
    ast_intf_magic_number = "Caml1999N032",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_500 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_500, "Astlib__Ast_500");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_501_500
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_501_500:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(1),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    a = [0, 0],
    cst_ppxlib_migration_keep_stru = "ppxlib.migration.keep_structure",
    b = [1, 0];
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = copy_location(pdir_loc),
     b = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, copy_location(loc)], b, a];
   }
   function copy_directive_argument(param){
    var
     pdira_loc = param[2],
     pdira_desc = param[1],
     a = copy_location(pdira_loc);
    return [0, copy_directive_argument_desc(pdira_desc), a];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack),
     c = copy_location(pexp_loc);
    return [0, copy_expression_desc(pexp_desc), c, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        k = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), k];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        l = copy_expression(x2$1),
        m = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), m, l];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        n = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        o = copy_expression(x1$9);
       return [15, copy_expression(x0$14), o, n];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], p = copy_expression(x1$10);
       return [16, copy_expression(x0$15), p];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], q = copy_expression(x1$11);
       return [17, copy_expression(x0$16), q];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        r = copy_expression(x4),
        s = copy_direction_flag(x3$0),
        t = copy_expression(x2$3),
        u = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), u, t, s, r];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], v = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), v];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        w = copy_core_type(x2$4),
        x = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), x, w];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$2 = x1$15[2],
        txt$2 = x1$15[1],
        G = [0, txt$2, copy_location(loc$2)];
       return [21, copy_expression(x0$20), G];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        y = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, copy_location(loc$1)], y];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, copy_location(loc)], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        z = copy_expression(x2$5),
        A = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1],
        F = copy_location(loc$0);
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                F],
               A,
               z];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], B = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), B];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        C = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), C];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        D = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, copy_location(loc)], D];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], E = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), E];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_location(pbop_loc),
     b = copy_expression(pbop_exp),
     c = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1];
    function merge_loc(left, right){return [0, left[1], right[2], 0];}
    function ghost_loc(loc){return [0, loc[1], loc[2], 1];}
    function ghost_constraint(pat, typ){
     var ppat_loc = ghost_loc(merge_loc(pat[2], typ[2]));
     return [0, [10, pat, typ], ppat_loc, 0, 0];
    }
    var
     pvb_pat$0 = copy_pattern(pvb_pat),
     pvb_expr$0 = copy_expression(pvb_expr);
    function constrain_pat(pat, typ, expr){
     var typ$0 = copy_core_type(typ), pvb_pat = ghost_constraint(pat, typ$0);
     return [0, pvb_pat, pvb_expr$0];
    }
    a:
    if(pvb_constraint){
     var match = pvb_constraint[1];
     if(0 === match[0]){
      var locally_abstract_univars = match[1];
      b:
      {
       if(! locally_abstract_univars){
        var typ$2 = match[2], d = typ$2[1];
        if(typeof d !== "number" && 8 === d[0]){
         var e = pvb_pat$0[1];
         if(typeof e === "number") break b;
         if(0 !== e[0]) break b;
         if(pvb_pat$0[4]) break b;
         var
          f = constrain_pat(pvb_pat$0, typ$2, pvb_expr$0),
          pvb_expr$1 = f[2],
          pvb_pat$1 = f[1];
         break a;
        }
       }
       var b = pvb_pat$0[1];
       if(typeof b !== "number" && 0 === b[0] && ! pvb_pat$0[4]){
        var
         typ$0 = match[2],
         typ$1 = copy_core_type(typ$0),
         pexp_loc = merge_loc(pvb_pat$0[2], pvb_expr$0[2]),
         ptyp_loc =
           locally_abstract_univars
            ? ghost_loc(pexp_loc)
            : ghost_loc(typ$1[2]),
         h = typ$1[3],
         var_names =
           caml_call2
            (Stdlib_List[20],
             function(v){return v[1];},
             locally_abstract_univars),
         loop =
           function(t){
            var match = t[1];
            if(typeof match === "number")
             var desc = 0;
            else
             switch(match[0]){
               case 0:
                var x = match[1], desc = [0, x]; break;
               case 1:
                var
                 core_type = match[3],
                 core_type$0 = match[2],
                 label = match[1],
                 b = loop(core_type),
                 desc = [1, label, loop(core_type$0), b];
                break;
               case 2:
                var
                 lst = match[1],
                 desc = [2, caml_call2(Stdlib_List[20], loop, lst)];
                break;
               case 3:
                var longident = match[1], a = longident[1];
                if(0 === a[0] && ! match[2]){
                 var s = a[1];
                 if(caml_call2(Stdlib_List[37], s, var_names)){var desc = [0, s]; break;}
                }
                var
                 lst$0 = match[2],
                 desc =
                   [3, longident, caml_call2(Stdlib_List[20], loop, lst$0)];
                break;
               case 4:
                var
                 o = match[2],
                 lst$1 = match[1],
                 desc =
                   [4,
                    caml_call2(Stdlib_List[20], loop_object_field, lst$1),
                    o];
                break;
               case 5:
                var
                 lst$2 = match[2],
                 longident$0 = match[1],
                 desc =
                   [5, longident$0, caml_call2(Stdlib_List[20], loop, lst$2)];
                break;
               case 6:
                var
                 string = match[2],
                 core_type$1 = match[1],
                 desc = [6, loop(core_type$1), string];
                break;
               case 7:
                var
                 lbl_lst_option = match[3],
                 flag = match[2],
                 row_field_list = match[1],
                 desc =
                   [7,
                    caml_call2(Stdlib_List[20], loop_row_field, row_field_list),
                    flag,
                    lbl_lst_option];
                break;
               case 8:
                var
                 core_type$2 = match[2],
                 string_lst = match[1],
                 desc = [8, string_lst, loop(core_type$2)];
                break;
               case 9:
                var
                 match$0 = match[1],
                 lst$3 = match$0[2],
                 longident$1 = match$0[1],
                 desc =
                   [9,
                    [0,
                     longident$1,
                     caml_call2
                      (Stdlib_List[20],
                       function(param){
                        var typ = param[2], n = param[1];
                        return [0, n, loop(typ)];
                       },
                       lst$3)]];
                break;
               default:
                var
                 match$1 = match[1],
                 arg = match$1[2],
                 s$0 = match$1[1],
                 desc = [10, [0, s$0, arg]];
             }
            return [0, desc, t[2], t[3], t[4]];
           },
         loop_row_field =
           function(field){
            var match = field[1];
            if(0 === match[0])
             var
              lst = match[3],
              flag = match[2],
              label = match[1],
              prf_desc =
                [0, label, flag, caml_call2(Stdlib_List[20], loop, lst)];
            else
             var t = match[1], prf_desc = [1, loop(t)];
            return [0, prf_desc, field[2], field[3]];
           },
         loop_object_field =
           function(field){
            var match = field[1];
            if(0 === match[0])
             var
              t = match[2],
              label = match[1],
              pof_desc = [0, label, loop(t)];
            else
             var t$0 = match[1], pof_desc = [1, loop(t$0)];
            return [0, pof_desc, field[2], field[3]];
           },
         typ_poly =
           [0, [8, locally_abstract_univars, loop(typ$1)], ptyp_loc, h, 0],
         ppat_loc = ghost_loc(merge_loc(pvb_pat$0[2], typ$1[2])),
         a = ghost_constraint(pvb_pat$0, typ_poly),
         pvb_pat$2 = [0, a[1], ppat_loc, a[3], a[4]],
         i = caml_call1(Stdlib_List[10], locally_abstract_univars),
         pvb_expr$2 =
           caml_call3
            (Stdlib_List[26],
             function(expr, var$){
              return [0, [31, var$, expr], pexp_loc, expr[3], 0];
             },
             [0, [19, pvb_expr$0, typ$1], pexp_loc, pvb_expr$0[3], 0],
             i),
         pvb_expr$1 = pvb_expr$2,
         pvb_pat$1 = pvb_pat$2;
        break a;
       }
      }
      if(locally_abstract_univars)
       var pvb_expr$1 = pvb_expr$0, pvb_pat$1 = pvb_pat$0;
      else
       var
        typ = match[2],
        c = constrain_pat(pvb_pat$0, typ, pvb_expr$0),
        pvb_expr$1 = c[2],
        pvb_pat$1 = c[1];
     }
     else
      var
       coercion = match[2],
       ground = match[1],
       coercion$0 = copy_core_type(coercion),
       ptyp_loc$0 = ghost_loc(coercion$0[2]),
       typ$3 = [0, [8, 0, coercion$0], ptyp_loc$0, coercion$0[3], 0],
       pvb_pat$3 = ghost_constraint(pvb_pat$0, typ$3),
       ground$0 = Astlib_Stdlib0[2][1].call(null, copy_core_type, ground),
       pexp_loc$0 = merge_loc(pvb_pat$3[2], pvb_expr$0[2]),
       pvb_expr$3 =
         [0,
          [20, pvb_expr$0, ground$0, coercion$0],
          pexp_loc$0,
          pvb_expr$0[3],
          0],
       pvb_expr$1 = pvb_expr$3,
       pvb_pat$1 = pvb_pat$3;
    }
    else
     var pvb_expr$1 = pvb_expr$0, pvb_pat$1 = pvb_pat$0;
    var g = copy_location(pvb_loc);
    return [0, pvb_pat$1, pvb_expr$1, copy_attributes(pvb_attributes), g];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack),
     c = copy_location(ppat_loc);
    return [0, copy_pattern_desc(ppat_desc), c, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, copy_location(loc$1)]];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        loc$0 = x1[2],
        txt$0 = x1[1],
        h = [0, txt$0, copy_location(loc$0)];
       return [1, copy_pattern(x0$0), h];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, copy_location(loc)];
                       },
                       x0),
                     a];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var
        x0$12 = param[1],
        loc = x0$12[2],
        txt = x0$12[1],
        g = copy_location(loc);
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
                g]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], f = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack),
     c = copy_location(ptyp_loc);
    return [0, copy_core_type_desc(ptyp_desc), c, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, copy_location(loc)];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), a];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes),
     b = copy_location(prf_loc);
    return [0, copy_row_field_desc(prf_desc), b, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, copy_location(loc)], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes),
     b = copy_location(pof_loc);
    return [0, copy_object_field_desc(pof_desc), b, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_location(attr_loc),
     b = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, copy_location(loc)], b, a];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var
     pstr_loc = param[2],
     pstr_desc = param[1],
     a = copy_location(pstr_loc);
    return [0, copy_structure_item_desc(pstr_desc), a];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes),
     b = copy_location(pcl_loc);
    return [0, copy_class_expr_desc(pcl_desc), b, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes),
     b = copy_location(pcf_loc);
    return [0, copy_class_field_desc(pcf_desc), b, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var loc = x[2], txt = x[1];
             return [0, txt, copy_location(loc)];
            },
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, copy_location(loc$0)], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, copy_location(loc)], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_location(pmb_loc),
     b = copy_attributes(pmb_attributes),
     c = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1],
     d = copy_location(loc);
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             d],
            c,
            b,
            a];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     loc = copy_location(pmod_loc),
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(loc, pmod_desc), loc, a];
   }
   function copy_module_expr_desc(loc, param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], e = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), e];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        x1$1 = copy_module_expr(x1$0),
        c = x1$1[1];
       if(1 === c[0] && ! c[1])
        var
         d = x1$1[2],
         loc$0 = [0, d[1], d[2], 1],
         pmod_attributes =
           [0,
            [0, [0, cst_ppxlib_migration_keep_stru, loc$0], a, loc$0],
            x1$1[3]],
         x1$2 = [0, x1$1[1], x1$1[2], pmod_attributes];
       else
        var x1$2 = x1$1;
       return [3, copy_module_expr(x0$2), x1$2];
      case 4:
       var x0$3 = param[1], empty_struct = [0, b, loc, 0];
       return [3, copy_module_expr(x0$3), empty_struct];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], f = copy_module_type(x1$3);
       return [4, copy_module_expr(x0$4), f];
      case 6:
       var x0$5 = param[1]; return [5, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [6, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1],
     b = copy_location(loc);
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             b],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes),
     b = copy_location(pmty_loc);
    return [0, copy_module_type_desc(pmty_desc), b, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), b];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], c = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), c];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], d = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), d];
      case 4:
       var x1$3 = param[2], x0$3 = param[1], e = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), e];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        f = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), f];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var
     psig_loc = param[2],
     psig_desc = param[1],
     a = copy_location(psig_loc);
    return [0, copy_signature_item_desc(psig_desc), a];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes),
     b = copy_location(pcty_loc);
    return [0, copy_class_type_desc(pcty_desc), b, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes),
     b = copy_location(pctf_loc);
    return [0, copy_class_type_field_desc(pctf_desc), b, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, copy_location(loc$0)], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, copy_location(loc)], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, copy_location(loc)], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = copy_location(pci_loc),
     c = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     e = [0, txt, copy_location(loc)],
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), d, e, c, b, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes),
     b = copy_location(pincl_loc);
    return [0, caml_call1(f0, pincl_mod), b, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_location(popen_loc),
     c = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), c, b, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_location(pmtd_loc),
     b = copy_attributes(pmtd_attributes),
     c = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_location(pms_loc),
     b = copy_attributes(pms_attributes),
     c = copy_loc(copy_Longident_t, pms_manifest),
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_location(pmd_loc),
     b = copy_attributes(pmd_attributes),
     c = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1],
     d = copy_location(loc);
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             d],
            c,
            b,
            a];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes),
     b = copy_location(ptyexn_loc);
    return [0, copy_extension_constructor(ptyexn_constructor), b, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_location(ptyext_loc),
     c = copy_private_flag(ptyext_private),
     d =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params);
    return [0, copy_loc(copy_Longident_t, ptyext_path), e, d, c, b, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_location(pext_loc),
     c = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x2),
      b = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){
                var loc = x[2], txt = x[1];
                return [0, txt, copy_location(loc)];
               },
               x0),
             b,
             a];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_location(ptype_loc),
     b = copy_attributes(ptype_attributes),
     c = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     d = copy_private_flag(ptype_private),
     e = copy_type_kind(ptype_kind),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x2 = x[3],
           x1 = x[2],
           x0 = x[1],
           a = copy_location(x2),
           b = copy_core_type(x1);
          return [0, copy_core_type(x0), b, a];
         },
         ptype_cstrs),
     g =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, copy_location(loc)], g, f, e, d, c, b, a];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = copy_location(pcd_loc),
     c = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     d = copy_constructor_arguments(pcd_args),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var loc = x[2], txt = x[1];
          return [0, txt, copy_location(loc)];
         },
         pcd_vars),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, copy_location(loc)], e, d, c, b, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_location(pld_loc),
     c = copy_core_type(pld_type),
     d = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, copy_location(loc)], d, c, b, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_location(pval_loc),
     b = copy_attributes(pval_attributes),
     c = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     d = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, copy_location(loc)], d, c, b, a];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, copy_location(loc)], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2);
       return [2, x0$1, copy_location(x1$0), a];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], a = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), a];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1], a = copy_location(loc);
    return [0, caml_call1(f0, txt), a];
   }
   function copy_location(param){
    var
     loc_ghost = param[3],
     loc_end = param[2],
     loc_start = param[1],
     a = copy_position(loc_end);
    return [0, copy_position(loc_start), a, loc_ghost];
   }
   function copy_position(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1];
    return [0, pos_fname, pos_lnum, pos_bol, pos_cnum];
   }
   var
    Astlib_Migrate_501_500 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_position];
   runtime.caml_register_global
    (5, Astlib_Migrate_501_500, "Astlib__Migrate_501_500");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_500_501
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_500_501:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(1),F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    a = [0, "astlib/migrate_500_501.ml", 290, 10];
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = copy_location(pdir_loc),
     b = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, copy_location(loc)], b, a];
   }
   function copy_directive_argument(param){
    var
     pdira_loc = param[2],
     pdira_desc = param[1],
     a = copy_location(pdira_loc);
    return [0, copy_directive_argument_desc(pdira_desc), a];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack),
     c = copy_location(pexp_loc);
    return [0, copy_expression_desc(pexp_desc), c, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        k = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), k];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        l = copy_expression(x2$1),
        m = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), m, l];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        n = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        o = copy_expression(x1$9);
       return [15, copy_expression(x0$14), o, n];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], p = copy_expression(x1$10);
       return [16, copy_expression(x0$15), p];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], q = copy_expression(x1$11);
       return [17, copy_expression(x0$16), q];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        r = copy_expression(x4),
        s = copy_direction_flag(x3$0),
        t = copy_expression(x2$3),
        u = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), u, t, s, r];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], v = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), v];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        w = copy_core_type(x2$4),
        x = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), x, w];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$2 = x1$15[2],
        txt$2 = x1$15[1],
        G = [0, txt$2, copy_location(loc$2)];
       return [21, copy_expression(x0$20), G];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        y = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, copy_location(loc$1)], y];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, copy_location(loc)], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        z = copy_expression(x2$5),
        A = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1],
        F = copy_location(loc$0);
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                F],
               A,
               z];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], B = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), B];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        C = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), C];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        D = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, copy_location(loc)], D];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], E = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), E];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_location(pbop_loc),
     b = copy_expression(pbop_exp),
     c = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1];
    function tyvars_str(tyvars){
     return caml_call2(Stdlib_List[20], function(v){return v[1];}, tyvars);
    }
    function resugarable_value_binding(p, e){
     var c = p[1];
     a:
     {
      b:
      if(typeof c !== "number" && 10 === c[0]){
       var pat$0 = c[1], f = pat$0[1];
       if(typeof f !== "number" && 0 === f[0]){
        var ty_ext = c[2], d = ty_ext[1];
        if(typeof d !== "number" && 8 === d[0]){
         if(p[4]) break b;
         var rt$0 = d[2], args_tyvars = d[1], match$2 = rt$0[1];
         c:
         {
          if(typeof match$2 !== "number" && 8 === match$2[0]){var g = 0; break c;}
          var g = 1;
         }
         if(! g) throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
         var
          ty = args_tyvars ? ty_ext : rt$0,
          value_pattern = [0, 4298439, [0, pat$0, args_tyvars, rt$0, ty]];
         break a;
        }
       }
       if(! p[4]){
        var rt = c[2], value_pattern = [0, -498624518, [0, pat$0, rt]];
        break a;
       }
      }
      var value_pattern = 870530776;
     }
     a:
     {
      b:
      {
       var tyvars = 0, e$0 = e;
       c:
       for(;;){
        var b = e$0[1];
        if(typeof b === "number") break b;
        switch(b[0]){
          case 19:
           break c;
          case 31:
           if(e$0[4]) break b;
           var e$2 = b[2], tyvar = b[1], tyvars$0 = [0, tyvar, tyvars];
           tyvars = tyvars$0;
           e$0 = e$2;
           break;
          default: break b;
        }
       }
       if(! e$0[4]){
        var
         ct = b[2],
         e$1 = b[1],
         value_exp = [0, [0, caml_call1(Stdlib_List[10], tyvars), e$1, ct]];
        break a;
       }
      }
      var value_exp = 0;
     }
     if(typeof value_pattern !== "number"){
      var variant = value_pattern[1];
      if(-498624518 === variant){
       var match = value_pattern[2], ct$0 = match[2], pat = match[1];
       return [0, -498624518, [0, pat, ct$0, e]];
      }
      if(4298439 === variant){
       var match$0 = value_pattern[2], p$0 = match$0[1];
       if(value_exp){
        var
         match$1 = value_exp[1],
         e_ct = match$1[3],
         inner_e = match$1[2],
         var_names$0 = match$1[1],
         extern_ct = match$0[4],
         pt_ct = match$0[3],
         pt_tyvars = match$0[2],
         h = tyvars_str(var_names$0);
        if(caml_equal(tyvars_str(pt_tyvars), h)){
         var
          var_names =
            caml_call2
             (Stdlib_List[20], function(v){return v[1];}, var_names$0),
          loop =
            function(t){
             var match = t[1];
             if(typeof match === "number")
              var desc = 0;
             else
              switch(match[0]){
                case 0:
                 var x = match[1], desc = [0, x]; break;
                case 1:
                 var
                  core_type = match[3],
                  core_type$0 = match[2],
                  label = match[1],
                  b = loop(core_type),
                  desc = [1, label, loop(core_type$0), b];
                 break;
                case 2:
                 var
                  lst = match[1],
                  desc = [2, caml_call2(Stdlib_List[20], loop, lst)];
                 break;
                case 3:
                 var longident = match[1], a = longident[1];
                 if(0 === a[0] && ! match[2]){
                  var s = a[1];
                  if(caml_call2(Stdlib_List[37], s, var_names)){var desc = [0, s]; break;}
                 }
                 var
                  lst$0 = match[2],
                  desc =
                    [3, longident, caml_call2(Stdlib_List[20], loop, lst$0)];
                 break;
                case 4:
                 var
                  o = match[2],
                  lst$1 = match[1],
                  desc =
                    [4,
                     caml_call2(Stdlib_List[20], loop_object_field, lst$1),
                     o];
                 break;
                case 5:
                 var
                  lst$2 = match[2],
                  longident$0 = match[1],
                  desc =
                    [5, longident$0, caml_call2(Stdlib_List[20], loop, lst$2)];
                 break;
                case 6:
                 var
                  string = match[2],
                  core_type$1 = match[1],
                  desc = [6, loop(core_type$1), string];
                 break;
                case 7:
                 var
                  lbl_lst_option = match[3],
                  flag = match[2],
                  row_field_list = match[1],
                  desc =
                    [7,
                     caml_call2(Stdlib_List[20], loop_row_field, row_field_list),
                     flag,
                     lbl_lst_option];
                 break;
                case 8:
                 var
                  core_type$2 = match[2],
                  string_lst = match[1],
                  desc = [8, string_lst, loop(core_type$2)];
                 break;
                case 9:
                 var
                  match$0 = match[1],
                  lst$3 = match$0[2],
                  longident$1 = match$0[1],
                  desc =
                    [9,
                     [0,
                      longident$1,
                      caml_call2
                       (Stdlib_List[20],
                        function(param){
                         var typ = param[2], n = param[1];
                         return [0, n, loop(typ)];
                        },
                        lst$3)]];
                 break;
                default:
                 var
                  match$1 = match[1],
                  arg = match$1[2],
                  s$0 = match$1[1],
                  desc = [10, [0, s$0, arg]];
              }
             return [0, desc, t[2], t[3], t[4]];
            },
          loop_row_field =
            function(field){
             var match = field[1];
             if(0 === match[0])
              var
               lst = match[3],
               flag = match[2],
               label = match[1],
               prf_desc =
                 [0, label, flag, caml_call2(Stdlib_List[20], loop, lst)];
             else
              var t = match[1], prf_desc = [1, loop(t)];
             return [0, prf_desc, field[2], field[3]];
            },
          loop_object_field =
            function(field){
             var match = field[1];
             if(0 === match[0])
              var
               t = match[2],
               label = match[1],
               pof_desc = [0, label, loop(t)];
             else
              var t$0 = match[1], pof_desc = [1, loop(t$0)];
             return [0, pof_desc, field[2], field[3]];
            },
          ety = loop(e_ct);
         return caml_equal(ety, pt_ct)
                 ? [0, -1058710956, [0, p$0, pt_tyvars, e_ct, inner_e]]
                 : [0, 222180220, [0, p$0, pt_tyvars, extern_ct, e]];
        }
       }
       var extern_ct$0 = match$0[4], pt_tyvars$0 = match$0[2];
       return [0, 222180220, [0, p$0, pt_tyvars$0, extern_ct$0, e]];
      }
     }
     return 870530776;
    }
    function with_constraint(ty_vars, typ){
     var typ$0 = copy_core_type(typ);
     return [0, [0, ty_vars, typ$0]];
    }
    var match = resugarable_value_binding(pvb_pat, pvb_expr);
    a:
    if(typeof match === "number")
     var pvb_constraint = 0, pvb_expr$0 = pvb_expr, pvb_pat$0 = pvb_pat;
    else{
     var variant = match[1];
     if(-498624518 === variant)
      var
       match$0 = match[2],
       pvb_expr$1 = match$0[3],
       typ = match$0[2],
       pvb_pat$1 = match$0[1],
       pvb_constraint$0 = with_constraint(0, typ),
       pvb_constraint = pvb_constraint$0,
       pvb_expr$0 = pvb_expr$1,
       pvb_pat$0 = pvb_pat$1;
     else if(222180220 <= variant){
      var b = match[2], pat = b[1];
      if(b[2])
       var
        expr = b[4],
        ct = b[3],
        pvb_constraint = with_constraint(0, ct),
        pvb_expr$0 = expr,
        pvb_pat$0 = pat;
      else{
       var expr$0 = b[4], ct$0 = b[3], c = expr$0[1];
       if(typeof c !== "number" && 20 === c[0] && ! expr$0[4]){
        var
         coerce = c[3],
         gr = c[2],
         expr$1 = c[1],
         ground = Astlib_Stdlib0[2][1].call(null, copy_core_type, gr),
         coercion = copy_core_type(coerce),
         pvb_constraint$1 = [0, [1, ground, coercion]],
         pvb_constraint = pvb_constraint$1,
         pvb_expr$0 = expr$1,
         pvb_pat$0 = pat;
        break a;
       }
       var
        pvb_constraint = with_constraint(0, ct$0),
        pvb_expr$0 = expr$0,
        pvb_pat$0 = pat;
      }
     }
     else
      var
       match$1 = match[2],
       e = match$1[4],
       typ$0 = match$1[3],
       ty_vars = match$1[2],
       p = match$1[1],
       pvb_constraint = with_constraint(ty_vars, typ$0),
       pvb_expr$0 = e,
       pvb_pat$0 = p;
    }
    var
     d = copy_location(pvb_loc),
     f = copy_attributes(pvb_attributes),
     g = copy_expression(pvb_expr$0);
    return [0, copy_pattern(pvb_pat$0), g, pvb_constraint, f, d];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack),
     c = copy_location(ppat_loc);
    return [0, copy_pattern_desc(ppat_desc), c, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, copy_location(loc$1)]];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        loc$0 = x1[2],
        txt$0 = x1[1],
        h = [0, txt$0, copy_location(loc$0)];
       return [1, copy_pattern(x0$0), h];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, copy_location(loc)];
                       },
                       x0),
                     a];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var
        x0$12 = param[1],
        loc = x0$12[2],
        txt = x0$12[1],
        g = copy_location(loc);
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
                g]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], f = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack),
     c = copy_location(ptyp_loc);
    return [0, copy_core_type_desc(ptyp_desc), c, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, copy_location(loc)];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), a];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes),
     b = copy_location(prf_loc);
    return [0, copy_row_field_desc(prf_desc), b, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, copy_location(loc)], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes),
     b = copy_location(pof_loc);
    return [0, copy_object_field_desc(pof_desc), b, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_location(attr_loc),
     b = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, copy_location(loc)], b, a];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var
     pstr_loc = param[2],
     pstr_desc = param[1],
     a = copy_location(pstr_loc);
    return [0, copy_structure_item_desc(pstr_desc), a];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes),
     b = copy_location(pcl_loc);
    return [0, copy_class_expr_desc(pcl_desc), b, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes),
     b = copy_location(pcf_loc);
    return [0, copy_class_field_desc(pcf_desc), b, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var loc = x[2], txt = x[1];
             return [0, txt, copy_location(loc)];
            },
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, copy_location(loc$0)], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, copy_location(loc)], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_location(pmb_loc),
     b = copy_attributes(pmb_attributes),
     c = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1],
     d = copy_location(loc);
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             d],
            c,
            b,
            a];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes),
     b = copy_location(pmod_loc);
    return [0, copy_module_expr_desc(pmod_desc), b, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], c = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), c];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = x1$0[1];
       a:
       {
        if(1 === a[0] && ! a[1]){
         var acc = 0, param$0 = x1$0[3];
         for(;;){
          if(param$0){
           var hd = param$0[1];
           if(hd[1][1] !== "ppxlib.migration.keep_structure"){
            var tl = param$0[2], acc$0 = [0, hd, acc];
            acc = acc$0;
            param$0 = tl;
            continue;
           }
           var
            q = param$0[2],
            match = [0, caml_call2(Stdlib_List[13], acc, q), 0];
          }
          else
           var match = [0, caml_call1(Stdlib_List[10], acc), 1];
          var
           b = match[2],
           pmod_attributes = match[1],
           is_unit = b,
           x1$1 = [0, x1$0[1], x1$0[2], pmod_attributes];
          break a;
         }
        }
        var is_unit = 0, x1$1 = x1$0;
       }
       if(is_unit) return [4, copy_module_expr(x0$2)];
       var d = copy_module_expr(x1$1);
       return [3, copy_module_expr(x0$2), d];
      case 4:
       var x1$2 = param[2], x0$3 = param[1], e = copy_module_type(x1$2);
       return [5, copy_module_expr(x0$3), e];
      case 5:
       var x0$4 = param[1]; return [6, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [7, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1],
     b = copy_location(loc);
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             b],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes),
     b = copy_location(pmty_loc);
    return [0, copy_module_type_desc(pmty_desc), b, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), b];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], c = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), c];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], d = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), d];
      case 4:
       var x1$3 = param[2], x0$3 = param[1], e = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), e];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        f = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), f];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var
     psig_loc = param[2],
     psig_desc = param[1],
     a = copy_location(psig_loc);
    return [0, copy_signature_item_desc(psig_desc), a];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes),
     b = copy_location(pcty_loc);
    return [0, copy_class_type_desc(pcty_desc), b, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes),
     b = copy_location(pctf_loc);
    return [0, copy_class_type_field_desc(pctf_desc), b, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, copy_location(loc$0)], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, copy_location(loc)], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, copy_location(loc)], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = copy_location(pci_loc),
     c = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     e = [0, txt, copy_location(loc)],
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), d, e, c, b, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes),
     b = copy_location(pincl_loc);
    return [0, caml_call1(f0, pincl_mod), b, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_location(popen_loc),
     c = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), c, b, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_location(pmtd_loc),
     b = copy_attributes(pmtd_attributes),
     c = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_location(pms_loc),
     b = copy_attributes(pms_attributes),
     c = copy_loc(copy_Longident_t, pms_manifest),
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_location(pmd_loc),
     b = copy_attributes(pmd_attributes),
     c = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1],
     d = copy_location(loc);
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             d],
            c,
            b,
            a];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes),
     b = copy_location(ptyexn_loc);
    return [0, copy_extension_constructor(ptyexn_constructor), b, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_location(ptyext_loc),
     c = copy_private_flag(ptyext_private),
     d =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params);
    return [0, copy_loc(copy_Longident_t, ptyext_path), e, d, c, b, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_location(pext_loc),
     c = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, copy_location(loc)], c, b, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x2),
      b = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){
                var loc = x[2], txt = x[1];
                return [0, txt, copy_location(loc)];
               },
               x0),
             b,
             a];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_location(ptype_loc),
     b = copy_attributes(ptype_attributes),
     c = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     d = copy_private_flag(ptype_private),
     e = copy_type_kind(ptype_kind),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x2 = x[3],
           x1 = x[2],
           x0 = x[1],
           a = copy_location(x2),
           b = copy_core_type(x1);
          return [0, copy_core_type(x0), b, a];
         },
         ptype_cstrs),
     g =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, copy_location(loc)], g, f, e, d, c, b, a];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = copy_location(pcd_loc),
     c = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     d = copy_constructor_arguments(pcd_args),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var loc = x[2], txt = x[1];
          return [0, txt, copy_location(loc)];
         },
         pcd_vars),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, copy_location(loc)], e, d, c, b, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_location(pld_loc),
     c = copy_core_type(pld_type),
     d = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, copy_location(loc)], d, c, b, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_location(pval_loc),
     b = copy_attributes(pval_attributes),
     c = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     d = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, copy_location(loc)], d, c, b, a];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, copy_location(loc)], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2);
       return [2, x0$1, copy_location(x1$0), a];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], a = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), a];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1], a = copy_location(loc);
    return [0, caml_call1(f0, txt), a];
   }
   function copy_location(param){
    var
     loc_ghost = param[3],
     loc_end = param[2],
     loc_start = param[1],
     a = copy_position(loc_end);
    return [0, copy_position(loc_start), a, loc_ghost];
   }
   function copy_position(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1];
    return [0, pos_fname, pos_lnum, pos_bol, pos_cnum];
   }
   var
    Astlib_Migrate_500_501 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_position];
   runtime.caml_register_global
    (5, Astlib_Migrate_500_501, "Astlib__Migrate_500_501");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_500_414
//# shape: Astlib__Migrate_500_414:[F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function copy_structure(x){return x;}
   function copy_signature(x){return x;}
   function copy_toplevel_phrase(x){return x;}
   function copy_core_type(x){return x;}
   function copy_expression(x){return x;}
   function copy_pattern(x){return x;}
   function copy_case(x){return x;}
   function copy_type_declaration(x){return x;}
   function copy_type_extension(x){return x;}
   function copy_extension_constructor(x){return x;}
   function copy_class_expr(x){return x;}
   function copy_class_field(x){return x;}
   function copy_class_type(x){return x;}
   function copy_class_signature(x){return x;}
   function copy_class_type_field(x){return x;}
   function copy_module_expr(x){return x;}
   function copy_module_type(x){return x;}
   function copy_signature_item(x){return x;}
   function copy_structure_item(x){return x;}
   var
    Astlib_Migrate_500_414 =
      [0,
       copy_structure,
       copy_signature,
       copy_toplevel_phrase,
       copy_core_type,
       copy_expression,
       copy_pattern,
       copy_case,
       copy_type_declaration,
       copy_type_extension,
       copy_extension_constructor,
       copy_class_expr,
       copy_class_field,
       copy_class_type,
       copy_class_signature,
       copy_class_type_field,
       copy_module_expr,
       copy_module_type,
       copy_signature_item,
       copy_structure_item];
   runtime.caml_register_global
    (0, Astlib_Migrate_500_414, "Astlib__Migrate_500_414");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_414_500
//# shape: Astlib__Migrate_414_500:[F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function copy_structure(x){return x;}
   function copy_signature(x){return x;}
   function copy_toplevel_phrase(x){return x;}
   function copy_core_type(x){return x;}
   function copy_expression(x){return x;}
   function copy_pattern(x){return x;}
   function copy_case(x){return x;}
   function copy_type_declaration(x){return x;}
   function copy_type_extension(x){return x;}
   function copy_extension_constructor(x){return x;}
   function copy_class_expr(x){return x;}
   function copy_class_field(x){return x;}
   function copy_class_type(x){return x;}
   function copy_class_signature(x){return x;}
   function copy_class_type_field(x){return x;}
   function copy_module_expr(x){return x;}
   function copy_module_type(x){return x;}
   function copy_signature_item(x){return x;}
   function copy_structure_item(x){return x;}
   var
    Astlib_Migrate_414_500 =
      [0,
       copy_structure,
       copy_signature,
       copy_toplevel_phrase,
       copy_core_type,
       copy_expression,
       copy_pattern,
       copy_case,
       copy_type_declaration,
       copy_type_extension,
       copy_extension_constructor,
       copy_class_expr,
       copy_class_field,
       copy_class_type,
       copy_class_signature,
       copy_class_type_field,
       copy_module_expr,
       copy_module_type,
       copy_signature_item,
       copy_structure_item];
   runtime.caml_register_global
    (0, Astlib_Migrate_414_500, "Astlib__Migrate_414_500");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_413
//# shape: Astlib__Ast_413:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M030",
    ast_intf_magic_number = "Caml1999N030",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_413 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_413, "Astlib__Ast_413");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_414_413
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_414_413:[F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    a =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 4.13", 0]]],
       "migration error: %s is not supported before OCaml 4.13"],
    cst_type_parameters_in_extensi =
      "type parameters in extension constructors",
    cst_pcd_vars_in_constructor_de = "pcd_vars in constructor declarations";
   function migration_error(loc, missing_feature){
    return caml_call1
            (Astlib_Location[7].call(null, [0, loc], a), missing_feature);
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, pexp_loc_stack, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, loc];
                       },
                       x0),
                     a];
            },
            x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, a];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$6 = x0[2],
        txt$6 = x0[1];
       return [0, [0, txt$6, loc$6], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$5 = x1$0[2],
        txt$5 = x1$0[1],
        loc$4 = x0$0[2],
        txt$4 = x0$0[1];
       return [1, [0, txt$4, loc$4], [0, txt$5, loc$5]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_module_type(x1$1),
        loc$3 = x0$1[2],
        txt$3 = x0$1[1];
       return [2, [0, txt$3, loc$3], b];
      case 3:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        c = copy_module_type(x1$2),
        loc$2 = x0$2[2],
        txt$2 = x0$2[1];
       return [3, [0, txt$2, loc$2], c];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        d = copy_type_declaration(x1$3),
        loc$1 = x0$3[2],
        txt$1 = x0$3[1];
       return [4, [0, txt$1, loc$1], d];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        loc$0 = x1$4[2],
        txt$0 = x1$4[1],
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 !== param[0]){
     var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
     return [1, [0, txt, loc]];
    }
    var x2 = param[3], x1 = param[2], x0 = param[1];
    if(x0){
     var hd = x0[1];
     return migration_error(hd[2], cst_type_parameters_in_extensi);
    }
    var a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x2);
    return [0, copy_constructor_arguments(x1), a];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1];
    if(pcd_vars){
     var hd = pcd_vars[1];
     return migration_error(hd[2], cst_pcd_vars_in_constructor_de);
    }
    var
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_414_413 =
      [0,
       migration_error,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (6, Astlib_Migrate_414_413, "Astlib__Migrate_414_413");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_413_414
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_413_414:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, pexp_loc_stack, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){
                        var loc = x[2], txt = x[1];
                        return [0, txt, loc];
                       },
                       x0),
                     a];
            },
            x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, a];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$6 = x0[2],
        txt$6 = x0[1];
       return [0, [0, txt$6, loc$6], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$5 = x1$0[2],
        txt$5 = x1$0[1],
        loc$4 = x0$0[2],
        txt$4 = x0$0[1];
       return [1, [0, txt$4, loc$4], [0, txt$5, loc$5]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_module_type(x1$1),
        loc$3 = x0$1[2],
        txt$3 = x0$1[1];
       return [2, [0, txt$3, loc$3], b];
      case 3:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        c = copy_module_type(x1$2),
        loc$2 = x0$2[2],
        txt$2 = x0$2[1];
       return [3, [0, txt$2, loc$2], c];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        d = copy_type_declaration(x1$3),
        loc$1 = x0$3[2],
        txt$1 = x0$3[1];
       return [4, [0, txt$1, loc$1], d];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        loc$0 = x1$4[2],
        txt$0 = x1$4[1],
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [11, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, 0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], 0, c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_413_414 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_413_414, "Astlib__Migrate_413_414");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_412
//# shape: Astlib__Ast_412:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M029",
    ast_intf_magic_number = "Caml1999N029",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_412 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_412, "Astlib__Ast_412");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_413_412
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_413_412:[F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    a =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 4.13", 0]]],
       "migration error: %s is not supported before OCaml 4.13"],
    cst_existentials_in_pattern_ma = "existentials in pattern-matching",
    cst_module_type_substitution = "module type substitution",
    cst_destructive_module_type_su = "destructive module type substitution",
    cst_local_module_type_substitu = "local module type substitution";
   function migration_error(loc, missing_feature){
    return caml_call1
            (Astlib_Location[7].call(null, [0, loc], a), missing_feature);
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){
             var x1 = x[2], x0 = x[1];
             if(x0){
              var ty = x0[1];
              migration_error(ty[2], cst_existentials_in_pattern_ma);
             }
             return copy_pattern(x1);
            },
            x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var x1$1 = param[2];
       return migration_error(x1$1[2], cst_module_type_substitution);
      case 3:
       var x1$2 = param[2];
       return migration_error(x1$2[2], cst_destructive_module_type_su);
      case 4:
       var
        x1$3 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$3),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$4 = param[2],
        x0$2 = param[1],
        loc$0 = x1$4[2],
        txt$0 = x1$4[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return migration_error(x0$8[4], cst_local_module_type_substitu);
      case 10:
       var x0$9 = param[1]; return [9, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1]; return [10, copy_include_description(x0$10)];
      case 12:
       var x0$11 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [13, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$14), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_413_412 =
      [0,
       migration_error,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (8, Astlib_Migrate_413_412, "Astlib__Migrate_413_412");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_412_413
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_412_413:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b =
          Astlib_Stdlib0[2][1].call
           (null, function(x){return [0, 0, copy_pattern(x)];}, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [4, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [5, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [10, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [11, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [14, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [15, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           a = copy_injectivity(x1$0),
           b = [0, copy_variance(x0$0), a];
          return [0, copy_core_type(x0), b];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_412_413 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_412_413, "Astlib__Migrate_412_413");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_411
//# shape: Astlib__Ast_411:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M028",
    ast_intf_magic_number = "Caml1999N028",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_411 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_411, "Astlib__Ast_411");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_412_411
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_412_411:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, pexp_loc_stack, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b = Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, a];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], x0$0 = x1[1], a = copy_variance(x0$0);
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], x0$0 = x1[1], a = copy_variance(x0$0);
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], x0$0 = x1[1], a = copy_variance(x0$0);
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_412_411 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_412_411, "Astlib__Migrate_412_411");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_411_412
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_411_412:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, pexp_loc_stack, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b = Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, a];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = [0, copy_variance(x1), 1];
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = [0, copy_variance(x1), 1];
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = [0, copy_variance(x1), 1];
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_411_412 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_411_412, "Astlib__Migrate_411_412");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_410
//# shape: Astlib__Ast_410:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M027",
    ast_intf_magic_number = "Caml1999N027",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_410 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_410, "Astlib__Ast_410");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_411_410
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_411_410:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expr(x){return copy_expression(x);}
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pat(x){return copy_pattern(x);}
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b = Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x0$1 = param[1];
       return [2,
               x0$1,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x2)];
      default:
       var x1$0 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$0)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_411_410 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expr,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_cases,
       copy_value_binding,
       copy_pattern,
       copy_pat,
       copy_pattern_desc,
       copy_core_type,
       copy_typ,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_411_410, "Astlib__Migrate_411_410");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_410_411
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_410_411:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expr(x){return copy_expression(x);}
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        g = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0],
               y,
               x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pat(x){return copy_pattern(x);}
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b = Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13,
               [0,
                Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt$0),
                loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), b];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], c = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), c];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var
     x1 = param[2],
     x0 = param[1],
     a = copy_module_type(x1),
     loc = x0[2],
     txt = x0[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            a];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], a = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        b = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), b];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0,
            [0,
             Astlib_Stdlib0[2][1].call(null, function(x){return x;}, txt),
             loc],
            b,
            a,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var
        x1$0 = param[2],
        x0$1 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$0);
       return [2, x0$1, Astlib_Location[4], a];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_410_411 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expr,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_cases,
       copy_value_binding,
       copy_pattern,
       copy_pat,
       copy_pattern_desc,
       copy_core_type,
       copy_typ,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (3, Astlib_Migrate_410_411, "Astlib__Migrate_410_411");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_409
//# shape: Astlib__Ast_409:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M026",
    ast_intf_magic_number = "Caml1999N026",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_409 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_409, "Astlib__Ast_409");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_410_409
//# unitInfo: Requires: Astlib__Location, Stdlib__List
//# shape: Astlib__Migrate_410_409:[F(2),F(2),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2),F(1)*,F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    cst$0 = "*",
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    a =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 4.10", 0]]],
       "migration error: %s is not supported before OCaml 4.10"],
    cst_anonymous_let_module = "anonymous let module",
    cst_anynymous_unpack = "anynymous unpack",
    cst_anonymous_module_binding = "anonymous module binding",
    cst_anonymous_module_declarati = "anonymous module declaration";
   function migration_error(loc, missing_feature){
    return caml_call1
            (Astlib_Location[7].call(null, [0, loc], a), missing_feature);
   }
   function map_option(f, x){
    if(! x) return 0;
    var x$0 = x[1];
    return [0, caml_call1(f, x$0)];
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = map_option(copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       if(x1) var x = x1[1], a = [0, x]; else var a = 0;
       return [1, x0$0, a];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        b = copy_expression(x2),
        c = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), c, b];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        d = copy_expression(x3),
        e = copy_pattern(x2$0),
        f = map_option(copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), f, e, d];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        g =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), g];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        h = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), h];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        i = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), i];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        j = map_option(copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], j];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10, x0$9, map_option(copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        k = map_option(copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               k];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        l = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], l];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        m = map_option(copy_expression, x2$2),
        n = copy_expression(x1$9);
       return [15, copy_expression(x0$14), n, m];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], o = copy_expression(x1$10);
       return [16, copy_expression(x0$15), o];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], p = copy_expression(x1$11);
       return [17, copy_expression(x0$16), p];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        q = copy_expression(x4),
        r = copy_direction_flag(x3$0),
        s = copy_expression(x2$3),
        t = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), t, s, r, q];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], u = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), u];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        v = copy_core_type(x2$4),
        w = map_option(copy_core_type, x1$14);
       return [20, copy_expression(x0$19), w, v];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        y = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], y];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        z = copy_expression(x2$5),
        A = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       if(txt$0)
        var x = txt$0[1], a = x;
       else
        var a = migration_error(x0$24[2], cst_anonymous_let_module);
       return [25, [0, a, loc$0], A, z];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], B = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), B];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        C = map_option(copy_core_type, x1$19);
       return [29, copy_expression(x0$28), C];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        D = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], D];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], E = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), E];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = map_option(copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], b = copy_constant(x1$0);
       return [3, copy_constant(x0$2), b];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        c = map_option(copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], c];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, map_option(copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], d = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               d];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], e = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), e];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], f = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), f];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       if(txt$0)
        var x = txt$0[1], a = x;
       else
        var a = migration_error(x0$12[2], cst_anynymous_unpack);
       return [13, [0, a, loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        g = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], g];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        b = copy_core_type(x2),
        c = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), c, b];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        d = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], d];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], e = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), e];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        f = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], f];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var x2$0 = param[3], x1$4 = param[2], x0$6 = param[1];
       if(x2$0)
        var x = x2$0[1], a = [0, caml_call2(Stdlib_List[20], copy_label, x)];
       else
        var a = 0;
       var g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, a];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = map_option(copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = map_option(copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var x2 = param[3], x1 = param[2], x0 = param[1];
       if(x2)
        var x = x2[1], loc = x[2], txt = x[1], a = [0, [0, txt, loc]];
       else
        var a = 0;
       var b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [1, [0, [0, txt$1, loc$1], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc$0 = x0$3[2],
        txt$0 = x0$3[1];
       return [2, [0, [0, txt$0, loc$0], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     b = copy_attributes(pmb_attributes),
     c = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    if(txt)
     var x = txt[1], a = x;
    else
     var a = migration_error(pmb_name[2], cst_anonymous_module_binding);
    return [0, [0, a, loc], c, b, pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc = x0[2], txt = x0[1]; return [0, [0, txt, loc]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x1 = param[2],
        x0$1 = param[1],
        match = copy_functor_parameter(x0$1),
        y = match[2],
        x = match[1];
       return [2, x, y, copy_module_expr(x1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), a];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], b = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), b];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return [0, [0, cst$0, Astlib_Location[4]], 0];
    var
     x1 = param[2],
     x0 = param[1],
     b = [0, copy_module_type(x1)],
     loc = x0[2],
     txt = x0[1];
    if(txt) var x = txt[1], a = x; else var a = cst;
    return [0, [0, a, loc], b];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x1 = param[2],
        x0$1 = param[1],
        match = copy_functor_parameter(x0$1),
        y = match[2],
        x = match[1];
       return [2, x, y, copy_module_type(x1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        a = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), a];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = map_option(copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     b = copy_attributes(pmd_attributes),
     c = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    if(txt)
     var x = txt[1], a = x;
    else
     var a = migration_error(pmd_name[2], cst_anonymous_module_declarati);
    return [0, [0, a, loc], c, b, pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], a = map_option(copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = map_option(copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = map_option(copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       if(x1) var x$1 = x1[1], a = [0, x$1]; else var a = 0;
       return [0, x0, a];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       if(x1$0) var x$0 = x1$0[1], b = [0, x$0]; else var b = 0;
       return [2, x0$1, b];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       if(x1$1) var x = x1$1[1], c = [0, x]; else var c = 0;
       return [3, x0$2, c];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_410_409 =
      [0,
       migration_error,
       map_option,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_cases,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_expression,
       copy_pattern,
       copy_core_type];
   runtime.caml_register_global
    (9, Astlib_Migrate_410_409, "Astlib__Migrate_410_409");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_409_410
//# unitInfo: Requires: Stdlib__List
//# shape: Astlib__Migrate_409_410:[F(2),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2),F(1)*,F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "*",
    cst$0 = "_",
    cst_astlib_migrate_409_410_ml = "astlib/migrate_409_410.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    a = [0, cst_astlib_migrate_409_410_ml, 621, 17],
    b = [0, cst_astlib_migrate_409_410_ml, 661, 17];
   function map_option(f, x){
    if(! x) return 0;
    var x$0 = x[1];
    return [0, caml_call1(f, x$0)];
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = map_option(copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       if(x1) var x = x1[1], a = [0, x]; else var a = 0;
       return [1, x0$0, a];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1]; return [3, copy_cases(x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = map_option(copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var x1$2 = param[2], x0$5 = param[1], g = copy_cases(x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], h = copy_cases(x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = map_option(copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10, x0$9, map_option(copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = map_option(copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = map_option(copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = map_option(copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25, [0, [0, txt$0], loc$0], y, x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = map_option(copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = map_option(copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b = map_option(copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, map_option(copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13, [0, [0, txt$0], loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        b = copy_core_type(x2),
        c = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), c, b];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        d = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], d];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], e = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), e];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        f = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], f];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var x2$0 = param[3], x1$4 = param[2], x0$6 = param[1];
       if(x2$0)
        var x = x2$0[1], a = [0, caml_call2(Stdlib_List[20], copy_label, x)];
       else
        var a = 0;
       var g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, a];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = map_option(copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = map_option(copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var x2 = param[3], x1 = param[2], x0 = param[1];
       if(x2)
        var x = x2[1], loc = x[2], txt = x[1], a = [0, [0, txt, loc]];
       else
        var a = 0;
       var b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [1, [0, [0, txt$1, loc$1], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc$0 = x0$3[2],
        txt$0 = x0$3[1];
       return [2, [0, [0, txt$0, loc$0], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0, [0, [0, txt], loc], b, a, pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$1]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        c = copy_module_expr(x2),
        match = x0$1[1];
       a:
       {
        b:
        {
         if(match !== cst){
          if(match === cst$0){
           if(! x1) break b;
           var
            mt$0 = x1[1],
            e = copy_module_type(mt$0),
            loc$0 = x0$1[2],
            b = [0, [0, 0, loc$0], e];
           break a;
          }
         }
         else if(! x1){var b = 0; break a;}
         if(x1){
          var
           mt = x1[1],
           d = copy_module_type(mt),
           loc = x0$1[2],
           txt = x0$1[1],
           b = [0, [0, [0, txt], loc], d];
          break a;
         }
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
       }
       return [2, b, c];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], f = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), f];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], g = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), g];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$2 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, loc$2]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        c = copy_module_type(x2),
        match = x0$1[1];
       a:
       {
        b:
        {
         if(match !== cst){
          if(match === cst$0){
           if(! x1) break b;
           var
            mt$0 = x1[1],
            e = copy_module_type(mt$0),
            loc$1 = x0$1[2],
            a = [0, [0, 0, loc$1], e];
           break a;
          }
         }
         else if(! x1){var a = 0; break a;}
         if(x1){
          var
           mt = x1[1],
           d = copy_module_type(mt),
           loc$0 = x0$1[2],
           txt$0 = x0$1[1],
           a = [0, [0, [0, txt$0], loc$0], d];
          break a;
         }
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
       }
       return [2, a, c];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        f = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), f];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = map_option(copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0, [0, [0, txt], loc], b, a, pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], a = map_option(copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = map_option(copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = map_option(copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       if(x1) var x$1 = x1[1], a = [0, x$1]; else var a = 0;
       return [0, x0, a];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       if(x1$0) var x$0 = x1$0[1], b = [0, x$0]; else var b = 0;
       return [2, x0$1, b];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       if(x1$1) var x = x1$1[1], c = [0, x]; else var c = 0;
       return [3, x0$2, c];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_409_410 =
      [0,
       map_option,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_cases,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_expression,
       copy_pattern,
       copy_core_type];
   runtime.caml_register_global
    (8, Astlib_Migrate_409_410, "Astlib__Migrate_409_410");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_408
//# shape: Astlib__Ast_408:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M025",
    ast_intf_magic_number = "Caml1999N025",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_408 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_408, "Astlib__Ast_408");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_409_408
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_409_408:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_pat(x){return copy_pattern(x);}
   function copy_expr(x){return copy_expression(x);}
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1]; return [3, copy_cases(x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var x1$2 = param[2], x0$5 = param[1], g = copy_cases(x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], h = copy_cases(x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25, [0, txt$0, loc$0], y, x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b = Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13, [0, txt$0, loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0, [0, txt, loc], b, a, pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_module_expr(x2),
        b = Astlib_Stdlib0[2][1].call(null, copy_module_type, x1),
        loc = x0$1[2],
        txt = x0$1[1];
       return [2, [0, txt, loc], b, a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], c = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), d];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, loc$1]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_module_type(x2),
        b = Astlib_Stdlib0[2][1].call(null, copy_module_type, x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [2, [0, txt$0, loc$0], b, a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0, [0, txt, loc], b, a, pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$0)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_409_408 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_typ,
       copy_pat,
       copy_expr,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_cases,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_409_408, "Astlib__Migrate_409_408");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_408_409
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
//# shape: Astlib__Migrate_408_409:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1)*,F(1),F(2),F(1),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2),F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     a = Astlib_Stdlib0[2][1].call(null, copy_directive_argument, pdir_arg),
     loc = pdir_name[2],
     txt = pdir_name[1];
    return [0, [0, txt, loc], a, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_pat(x){return copy_pattern(x);}
   function copy_expr(x){return copy_expression(x);}
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     a = copy_attributes(pexp_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, b, a];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$7 = x0[2], txt$7 = x0[1];
       return [0, [0, txt$7, loc$7]];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_expression(x2),
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), b, a];
      case 3:
       var x0$2 = param[1]; return [3, copy_cases(x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        c = copy_expression(x3),
        d = copy_pattern(x2$0),
        e = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), e, d, c];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        f =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [5, copy_expression(x0$4), f];
      case 6:
       var x1$2 = param[2], x0$5 = param[1], g = copy_cases(x1$2);
       return [6, copy_expression(x0$5), g];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], h = copy_cases(x1$3);
       return [7, copy_expression(x0$6), h];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        i = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$4),
        loc$6 = x0$8[2],
        txt$6 = x0$8[1];
       return [9, [0, txt$6, loc$6], i];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               Astlib_Stdlib0[2][1].call(null, copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        j = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$10),
               j];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        loc$5 = x1$7[2],
        txt$5 = x1$7[1];
       return [12, copy_expression(x0$11), [0, txt$5, loc$5]];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        k = copy_expression(x2$1),
        loc$4 = x1$8[2],
        txt$4 = x1$8[1];
       return [13, copy_expression(x0$12), [0, txt$4, loc$4], k];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        l = Astlib_Stdlib0[2][1].call(null, copy_expression, x2$2),
        m = copy_expression(x1$9);
       return [15, copy_expression(x0$14), m, l];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], n = copy_expression(x1$10);
       return [16, copy_expression(x0$15), n];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], o = copy_expression(x1$11);
       return [17, copy_expression(x0$16), o];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        p = copy_expression(x4),
        q = copy_direction_flag(x3$0),
        r = copy_expression(x2$3),
        s = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), s, r, q, p];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], t = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), t];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        u = copy_core_type(x2$4),
        v = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$14);
       return [20, copy_expression(x0$19), v, u];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        loc$3 = x1$15[2],
        txt$3 = x1$15[1];
       return [21, copy_expression(x0$20), [0, txt$3, loc$3]];
      case 22:
       var x0$21 = param[1], loc$2 = x0$21[2], txt$2 = x0$21[1];
       return [22, [0, txt$2, loc$2]];
      case 23:
       var
        x1$16 = param[2],
        x0$22 = param[1],
        w = copy_expression(x1$16),
        loc$1 = x0$22[2],
        txt$1 = x0$22[1];
       return [23, [0, txt$1, loc$1], w];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_expression(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        x = copy_expression(x2$5),
        y = copy_module_expr(x1$17),
        loc$0 = x0$24[2],
        txt$0 = x0$24[1];
       return [25, [0, txt$0, loc$0], y, x];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], z = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), z];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        A = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1$19);
       return [29, copy_expression(x0$28), A];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var
        x1$20 = param[2],
        x0$30 = param[1],
        B = copy_expression(x1$20),
        loc = x0$30[2],
        txt = x0$30[1];
       return [31, [0, txt, loc], B];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], C = copy_expression(x1$21);
       return [33, copy_open_declaration(x0$32), C];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$ = param[1],
     a = copy_expression(body),
     b = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$), b, a];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     a = copy_expression(pbop_exp),
     b = copy_pattern(pbop_pat),
     loc = pbop_op[2],
     txt = pbop_op[1];
    return [0, [0, txt, loc], b, a, pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     a = copy_expression(pc_rhs),
     b = Astlib_Stdlib0[2][1].call(null, copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), b, a];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     a = copy_attributes(pvb_attributes),
     b = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), b, a, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     a = copy_attributes(ppat_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, b, a];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$4 = x0[2], txt$4 = x0[1];
       return [0, [0, txt$4, loc$4]];
      case 1:
       var x1 = param[2], x0$0 = param[1], loc$3 = x1[2], txt$3 = x1[1];
       return [1, copy_pattern(x0$0), [0, txt$3, loc$3]];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], a = copy_constant(x1$0);
       return [3, copy_constant(x0$2), a];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        b = Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$1),
        loc$2 = x0$4[2],
        txt$2 = x0$4[1];
       return [5, [0, txt$2, loc$2], b];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, Astlib_Stdlib0[2][1].call(null, copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], c = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var
                   x1 = x[2],
                   x0 = x[1],
                   a = copy_pattern(x1),
                   loc = x0[2],
                   txt = x0[1];
                  return [0, [0, txt, loc], a];
                 },
                 x0$6),
               c];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], d = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), d];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], e = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), e];
      case 11:
       var x0$10 = param[1], loc$1 = x0$10[2], txt$1 = x0$10[1];
       return [11, [0, txt$1, loc$1]];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1], loc$0 = x0$12[2], txt$0 = x0$12[1];
       return [13, [0, txt$0, loc$0]];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var
        x1$6 = param[2],
        x0$15 = param[1],
        f = copy_pattern(x1$6),
        loc = x0$15[2],
        txt = x0$15[1];
       return [16, [0, txt, loc], f];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     a = copy_attributes(ptyp_attributes),
     b = caml_call2(Stdlib_List[20], copy_location, ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, b, a];
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        a = copy_core_type(x2),
        b = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), b, a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_core_type, x1$0),
        loc$0 = x0$2[2],
        txt$0 = x0$2[1];
       return [3, [0, txt$0, loc$0], c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), d];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        e = caml_call2(Stdlib_List[20], copy_core_type, x1$2),
        loc = x0$4[2],
        txt = x0$4[1];
       return [5, [0, txt, loc], e];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        f =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        g = copy_closed_flag(x1$4);
       return [7, caml_call2(Stdlib_List[20], copy_row_field, x0$6), g, f];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], h = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var loc = x[2], txt = x[1];
                  return [0, txt, loc];
                 },
                 x0$7),
               h];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     a =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           a = copy_core_type(x1),
           loc = x0[2],
           txt = x0[1];
          return [0, [0, txt, loc], a];
         },
         x1),
     loc = x0[2],
     txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     a = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, a];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      a = caml_call2(Stdlib_List[20], copy_core_type, x2),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], x1, a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     a = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, a];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     a = copy_payload(attr_payload),
     loc = attr_name[2],
     txt = attr_name[1];
    return [0, [0, txt, loc], a, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        a = Astlib_Stdlib0[2][1].call(null, copy_expression, x1);
       return [3, copy_pattern(x0$2), a];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], a = copy_attributes(x1);
       return [0, copy_expression(x0), a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        b = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), b];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_declaration(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_include_declaration(x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], d = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), d];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     a = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, a];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_expr(x3),
        c = copy_pattern(x2),
        d = Astlib_Stdlib0[2][1].call(null, copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), d, c, b];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        e =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], a = copy_expression(x1);
             return [0, copy_arg_label(x0), a];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), e];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        f = copy_class_expr(x2$0),
        g = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), g, f];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], h = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), h];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], i = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), i];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), a];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     a = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, a];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        a =
          Astlib_Stdlib0[2][1].call
           (null,
            function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
            x2),
        b = copy_class_expr(x1);
       return [0, copy_override_flag(x0), b, a];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        c = copy_class_field_kind(x2$0),
        d = copy_mutable_flag(x1$0),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], d, c]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        e = copy_class_field_kind(x2$1),
        f = copy_private_flag(x1$1),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], a = copy_expression(x1);
    return [1, copy_override_flag(x0$0), a];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     a = copy_attributes(pmb_attributes),
     b = copy_module_expr(pmb_expr),
     loc = pmb_name[2],
     txt = pmb_name[1];
    return [0, [0, txt, loc], b, a, pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     a = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, a];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$0 = x0[2], txt$0 = x0[1];
       return [0, [0, txt$0, loc$0]];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_module_expr(x2),
        b = Astlib_Stdlib0[2][1].call(null, copy_module_type, x1),
        loc = x0$1[2],
        txt = x0$1[1];
       return [2, [0, txt, loc], b, a];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], c = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), c];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], d = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), d];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     a = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, a];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1], loc$1 = x0[2], txt$1 = x0[1];
       return [0, [0, txt$1, loc$1]];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        a = copy_module_type(x2),
        b = Astlib_Stdlib0[2][1].call(null, copy_module_type, x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [2, [0, txt$0, loc$0], b, a];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        c = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), c];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1], loc = x0$5[2], txt = x0$5[1];
       return [6, [0, txt, loc]];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = copy_type_declaration(x1),
        loc$4 = x0[2],
        txt$4 = x0[1];
       return [0, [0, txt$4, loc$4], a];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        loc$3 = x1$0[2],
        txt$3 = x1$0[1],
        loc$2 = x0$0[2],
        txt$2 = x0$0[1];
       return [1, [0, txt$2, loc$2], [0, txt$3, loc$3]];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        b = copy_type_declaration(x1$1),
        loc$1 = x0$1[2],
        txt$1 = x0$1[1];
       return [2, [0, txt$1, loc$1], b];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        loc$0 = x1$2[2],
        txt$0 = x1$2[1],
        loc = x0$2[2],
        txt = x0$2[1];
       return [3, [0, txt, loc], [0, txt$0, loc$0]];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), a];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_include_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], b = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), b];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     a = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, a];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        a = caml_call2(Stdlib_List[20], copy_core_type, x1),
        loc = x0[2],
        txt = x0[1];
       return [0, [0, txt, loc], a];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        b = copy_class_type(x2),
        c = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), c, b];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], d = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), d];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), a];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     a = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, a];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        a = copy_core_type(x3),
        b = copy_virtual_flag(x2),
        c = copy_mutable_flag(x1),
        loc$0 = x0$1[2],
        txt$0 = x0$1[1];
       return [1, [0, [0, txt$0, loc$0], c, b, a]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        d = copy_core_type(x3$0),
        e = copy_virtual_flag(x2$0),
        f = copy_private_flag(x1$0),
        loc = x0$3[2],
        txt = x0$3[1];
       return [2, [0, [0, txt, loc], f, e, d]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        g = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), g]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], a = copy_payload(x1), loc = x0[2], txt = x0[1];
    return [0, [0, txt, loc], a];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     a = copy_attributes(pci_attributes),
     b = caml_call1(f0, pci_expr),
     loc = pci_name[2],
     txt = pci_name[1],
     c =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), c, [0, txt, loc], b, pci_loc, a];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     a = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, a];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){var loc = x[2], txt = x[1]; return [0, txt, loc];},
             x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     a = copy_attributes(popen_attributes),
     b = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), b, popen_loc, a];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     a = copy_attributes(pmtd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_module_type, pmtd_type),
     loc = pmtd_name[2],
     txt = pmtd_name[1];
    return [0, [0, txt, loc], b, a, pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     a = copy_attributes(pms_attributes),
     loc$0 = pms_manifest[2],
     txt$0 = pms_manifest[1],
     loc = pms_name[2],
     txt = pms_name[1];
    return [0, [0, txt, loc], [0, txt$0, loc$0], a, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     a = copy_attributes(pmd_attributes),
     b = copy_module_type(pmd_type),
     loc = pmd_name[2],
     txt = pmd_name[1];
    return [0, [0, txt, loc], b, a, pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     a = copy_attributes(ptyexn_attributes);
    return [0, copy_extension_constructor(ptyexn_constructor), ptyexn_loc, a];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     a = copy_attributes(ptyext_attributes),
     b = copy_private_flag(ptyext_private),
     c =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     d =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptyext_params),
     loc = ptyext_path[2],
     txt = ptyext_path[1];
    return [0, [0, txt, loc], d, c, b, ptyext_loc, a];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     a = copy_attributes(pext_attributes),
     b = copy_extension_constructor_kin(pext_kind),
     loc = pext_name[2],
     txt = pext_name[1];
    return [0, [0, txt, loc], b, pext_loc, a];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = Astlib_Stdlib0[2][1].call(null, copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), a];
    }
    var x0$0 = param[1], loc = x0$0[2], txt = x0$0[1];
    return [1, [0, txt, loc]];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     a = copy_attributes(ptype_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, ptype_manifest),
     c = copy_private_flag(ptype_private),
     d = copy_type_kind(ptype_kind),
     e =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], a = copy_core_type(x1);
          return [0, copy_core_type(x0), a, x2];
         },
         ptype_cstrs),
     f =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], a = copy_variance(x1);
          return [0, copy_core_type(x0), a];
         },
         ptype_params),
     loc = ptype_name[2],
     txt = ptype_name[1];
    return [0, [0, txt, loc], f, e, d, c, b, a, ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     a = copy_attributes(pcd_attributes),
     b = Astlib_Stdlib0[2][1].call(null, copy_core_type, pcd_res),
     c = copy_constructor_arguments(pcd_args),
     loc = pcd_name[2],
     txt = pcd_name[1];
    return [0, [0, txt, loc], c, b, pcd_loc, a];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     a = copy_attributes(pld_attributes),
     b = copy_core_type(pld_type),
     c = copy_mutable_flag(pld_mutable),
     loc = pld_name[2],
     txt = pld_name[1];
    return [0, [0, txt, loc], c, b, pld_loc, a];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     a = copy_attributes(pval_attributes),
     b = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     c = copy_core_type(pval_type),
     loc = pval_name[2],
     txt = pval_name[1];
    return [0, [0, txt, loc], c, b, a, pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      a = copy_core_type(x1),
      loc = x0[2],
      txt = x0[1];
     return [0, [0, txt, loc], a];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$0)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               Astlib_Stdlib0[2][1].call(null, function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_408_409 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_typ,
       copy_pat,
       copy_expr,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_cases,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_408_409, "Astlib__Migrate_408_409");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Keyword
//# unitInfo: Requires: Clflags, Stdlib, Stdlib__List, Stdlib__Option, Stdlib__String, Stdlib__Sys
//# shape: Astlib__Keyword:[F(1)*,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Option = global_data.Stdlib__Option,
    Clflags = global_data.Clflags,
    a = [0, 0, 0];
   function is_keyword(param){
    var switch$ = caml_string_compare(param, "lsl");
    if(0 <= switch$){
     if(0 >= switch$) return 1;
     var switch$0 = caml_string_compare(param, "private");
     if(0 <= switch$0){
      if(0 >= switch$0) return 1;
      var switch$1 = caml_string_compare(param, "try");
      if(0 <= switch$1){
       if(0 >= switch$1) return 1;
       if(param === "type") return 1;
       if(param === "val") return 1;
       if(param === "virtual") return 1;
       if(param === "when") return 1;
       if(param === "while") return 1;
       if(param === "with") return 1;
      }
      else{
       if(param === "rec") return 1;
       if(param === "sig") return 1;
       if(param === "struct") return 1;
       if(param === "then") return 1;
       if(param === "to") return 1;
       if(param === "true") return 1;
      }
     }
     else{
      var switch$2 = caml_string_compare(param, "mutable");
      if(0 <= switch$2){
       if(0 >= switch$2) return 1;
       if(param === "new") return 1;
       if(param === "nonrec") return 1;
       if(param === "object") return 1;
       if(param === "of") return 1;
       if(param === "open") return 1;
       if(param === "or") return 1;
      }
      else{
       if(param === "lsr") return 1;
       if(param === "lxor") return 1;
       if(param === "match") return 1;
       if(param === "method") return 1;
       if(param === "mod") return 1;
       if(param === "module") return 1;
      }
     }
    }
    else{
     var switch$3 = caml_string_compare(param, "false");
     if(0 <= switch$3){
      if(0 >= switch$3) return 1;
      var switch$4 = caml_string_compare(param, "include");
      if(0 <= switch$4){
       if(0 >= switch$4) return 1;
       if(param === "inherit") return 1;
       if(param === "initializer") return 1;
       if(param === "land") return 1;
       if(param === "lazy") return 1;
       if(param === "let") return 1;
       if(param === "lor") return 1;
      }
      else{
       if(param === "for") return 1;
       if(param === "fun") return 1;
       if(param === "function") return 1;
       if(param === "functor") return 1;
       if(param === "if") return 1;
       if(param === "in") return 1;
      }
     }
     else{
      var switch$5 = caml_string_compare(param, "do");
      if(0 <= switch$5){
       if(0 >= switch$5) return 1;
       if(param === "done") return 1;
       if(param === "downto") return 1;
       if(param === "else") return 1;
       if(param === "end") return 1;
       if(param === "exception") return 1;
       if(param === "external") return 1;
      }
      else{
       if(param === "and") return 1;
       if(param === "as") return 1;
       if(param === "asr") return 1;
       if(param === "assert") return 1;
       if(param === "begin") return 1;
       if(param === "class") return 1;
       if(param === "constraint") return 1;
      }
     }
    }
    return 0;
   }
   function apply_keyword_edition(cli, param){
    a:
    {
     try{var s$0 = runtime.caml_sys_getenv("OCAMLPARAM");}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var from_ocaml_param = 0;
      break a;
     }
     b:
     if(caml_call2(Stdlib_String[9], s$0, cst))
      var items = 0;
     else{
      var c = runtime.caml_string_get(s$0, 0);
      c:
      {
       if(45 <= c){
        if(60 <= c){if(124 !== c) break c;} else if(58 > c) break c;
       }
       else if(32 !== c && 44 > c) break c;
       var
        d = caml_call2(Stdlib_String[17], c, s$0),
        items = caml_call1(Stdlib_List[7], d);
       break b;
      }
      var items = caml_call2(Stdlib_String[17], 44, s$0);
     }
     var
      fold_settings =
        function(param, item){
         var after_cli = param[2], acc = param[1];
         if(item === "_" && ! acc) return [0, acc, 1];
         var len = runtime.caml_ml_string_length(item);
         if
          (9 <= len
           && caml_call3(Stdlib_String[16], item, 0, 9) === "keywords=")
          return [0,
                  [0, caml_call3(Stdlib_String[16], item, 9, len - 9 | 0)],
                  after_cli];
         return [0, acc, after_cli];
        },
      match = caml_call3(Stdlib_List[26], fold_settings, a, items),
      after_cli = match[2],
      from_ocaml_param$0 = match[1];
     if(from_ocaml_param$0)
      var
       s$1 = from_ocaml_param$0[1],
       from_ocaml_param = [0, [0, s$1, after_cli]];
     else
      var from_ocaml_param = 0;
    }
    a:
    {
     if(cli){
      if(! from_ocaml_param){var keyword_edition = cli; break a;}
      var b = from_ocaml_param[1];
      if(! b[2]){var keyword_edition = cli; break a;}
      var s = b[1];
     }
     else{
      if(! from_ocaml_param){var keyword_edition = 0; break a;}
      var s = from_ocaml_param[1][1];
     }
     var keyword_edition = [0, s];
    }
    if(caml_call1(Stdlib_Option[11], keyword_edition))
     Clflags[160][1] = keyword_edition;
    return 0;
   }
   var Astlib_Keyword = [0, is_keyword, apply_keyword_edition];
   runtime.caml_register_global(66, Astlib_Keyword, "Astlib__Keyword");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Config
//# unitInfo: Requires: Config
//# shape: Astlib__Config:[N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Config = global_data.Config,
    ast_intf_magic_number = Config[30],
    ast_impl_magic_number = Config[31],
    Astlib_Config = [0, ast_intf_magic_number, ast_impl_magic_number];
   runtime.caml_register_global(1, Astlib_Config, "Astlib__Config");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_metadata
//# unitInfo: Requires: Ast_mapper
//# shape: Astlib__Ast_metadata:[N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Ast_mapper = global_data.Ast_mapper,
    tool_name = Ast_mapper[2],
    add_ppx_context_str = Ast_mapper[10],
    add_ppx_context_sig = Ast_mapper[11],
    drop_ppx_context_str = Ast_mapper[12],
    drop_ppx_context_sig = Ast_mapper[13],
    set_cookie = Ast_mapper[14],
    get_cookie = Ast_mapper[15],
    Astlib_Ast_metadata =
      [0,
       add_ppx_context_str,
       drop_ppx_context_str,
       add_ppx_context_sig,
       drop_ppx_context_sig,
       tool_name,
       set_cookie,
       get_cookie];
   runtime.caml_register_global
    (1, Astlib_Ast_metadata, "Astlib__Ast_metadata");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib
//# unitInfo: Requires: Compmisc, Pprintast
//# shape: Astlib:[[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2),F(2),N],F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Compmisc = global_data.Compmisc,
    Pprintast = global_data.Pprintast,
    longident = Pprintast[1],
    constr = Pprintast[2],
    expression = Pprintast[3],
    string_of_expression = Pprintast[4],
    pattern = Pprintast[5],
    core_type = Pprintast[6],
    signature = Pprintast[7],
    structure = Pprintast[8],
    string_of_structure = Pprintast[9],
    module_expr = Pprintast[10],
    toplevel_phrase = Pprintast[11],
    top_phrase = Pprintast[12],
    class_field = Pprintast[13],
    class_type_field = Pprintast[14],
    class_expr = Pprintast[15],
    class_type = Pprintast[16],
    module_type = Pprintast[17],
    binding = Pprintast[20],
    payload = Pprintast[21],
    tyvar_of_name = Pprintast[22],
    tyvar = Pprintast[23],
    Doc = Pprintast[24];
   function structure_item(fmt, t){
    return caml_call2(structure, fmt, [0, t, 0]);
   }
   function signature_item(fmt, t){
    return caml_call2(signature, fmt, [0, t, 0]);
   }
   var
    Unavailable =
      [248,
       "Astlib.Compiler_pprintast.Unavailable",
       runtime.caml_fresh_oo_id(0)],
    Compiler_pprintast =
      [0,
       longident,
       constr,
       expression,
       string_of_expression,
       pattern,
       core_type,
       signature,
       structure,
       string_of_structure,
       module_expr,
       toplevel_phrase,
       top_phrase,
       class_field,
       class_type_field,
       class_expr,
       class_type,
       module_type,
       binding,
       payload,
       tyvar_of_name,
       tyvar,
       Doc,
       structure_item,
       signature_item,
       Unavailable];
   function init_error_reporting_style_usi(param){return caml_call1(Compmisc[4], 0);
   }
   var Astlib = [0, Compiler_pprintast, init_error_reporting_style_usi];
   runtime.caml_register_global(3, Astlib, "Astlib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_407
//# shape: Astlib__Ast_407:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M023",
    ast_intf_magic_number = "Caml1999N023",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_407 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_407, "Astlib__Ast_407");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_406
//# shape: Astlib__Ast_406:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M022",
    ast_intf_magic_number = "Caml1999N022",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_406 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_406, "Astlib__Ast_406");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_405
//# shape: Astlib__Ast_405:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M020",
    ast_intf_magic_number = "Caml1999N018",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_405 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_405, "Astlib__Ast_405");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_404
//# shape: Astlib__Ast_404:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M020",
    ast_intf_magic_number = "Caml1999N018",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_404 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_404, "Astlib__Ast_404");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_403
//# shape: Astlib__Ast_403:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M019",
    ast_intf_magic_number = "Caml1999N018",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_403 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_403, "Astlib__Ast_403");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_402
//# shape: Astlib__Ast_402:[[],[],[N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M016",
    ast_intf_magic_number = "Caml1999N015",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_402 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_402, "Astlib__Ast_402");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
