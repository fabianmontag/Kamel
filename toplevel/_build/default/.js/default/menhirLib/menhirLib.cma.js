// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: MenhirLib
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Lexing, Stdlib__List, Stdlib__Printf, Stdlib__String, Stdlib__Sys
//# shape: MenhirLib:[N,[F(4)*->F(1),F(2)*->F(2),[F(1)*,F(1)*]],[],[],N,N,N,N,N,N,N,N,[],[],N,N,[N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = ":\n",
    cst_At_an_unknown_location = "At an unknown location:\n",
    cst_lib_pack_menhirLib_ml = "lib/pack/menhirLib.ml",
    caml_array_make = runtime.caml_array_make,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    arrow = " -> ",
    dot = ".",
    space = " ",
    newline$0 = "\n",
    cst$1 = "...",
    cst$0 = "???",
    cst = "",
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    CamlinternalLazy = global_data.CamlinternalLazy;
   function take(n, input){
    if(0 !== n && input){
     var xs = input[2], x = input[1], xs$0 = take(n - 1 | 0, xs);
     return xs === xs$0 ? input : [0, x, xs$0];
    }
    return 0;
   }
   function drop(n$1, xs$1){
    var n = n$1, xs = xs$1;
    for(;;){
     if(0 === n) return xs;
     if(! xs) return 0;
     var xs$0 = xs[2], n$0 = n - 1 | 0;
     n = n$0;
     xs = xs$0;
    }
   }
   function uniq1(cmp, x, ys$1){
    var ys = ys$1;
    for(;;){
     if(! ys) return 0;
     var ys$0 = ys[2], y = ys[1];
     if(0 !== caml_call2(cmp, x, y)) return [0, y, uniq1(cmp, y, ys$0)];
     ys = ys$0;
    }
   }
   function uniq(cmp, xs){
    if(! xs) return 0;
    var xs$0 = xs[2], x = xs[1];
    return [0, x, uniq1(cmp, x, xs$0)];
   }
   function weed(cmp, xs){
    return uniq(cmp, caml_call2(Stdlib_List[63], cmp, xs));
   }
   function length(xs){
    var a = caml_obj_tag(xs);
    a:
    if(250 === a)
     var match = xs[1];
    else{
     if(246 !== a && 244 !== a){var match = xs; break a;}
     var match = caml_call1(CamlinternalLazy[2], xs);
    }
    if(! match) return 0;
    var xs$0 = match[2];
    return 1 + length(xs$0) | 0;
   }
   function foldr(f, xs, accu){
    var a = caml_obj_tag(xs);
    a:
    if(250 === a)
     var match = xs[1];
    else{
     if(246 !== a && 244 !== a){var match = xs; break a;}
     var match = caml_call1(CamlinternalLazy[2], xs);
    }
    if(! match) return accu;
    var xs$0 = match[2], x = match[1];
    return caml_call2(f, x, foldr(f, xs$0, accu));
   }
   function traditional2revised(get_raw_token, get_startp, get_endp, parser){
    return function(lexer){
     var lexbuf = caml_call2(Stdlib_Lexing[3], 0, cst);
     function lexer$0(lexbuf){
      var token = caml_call1(lexer, 0);
      lexbuf[11] = caml_call1(get_startp, token);
      lexbuf[12] = caml_call1(get_endp, token);
      return caml_call1(get_raw_token, token);
     }
     return caml_call2(parser, lexer$0, lexbuf);};
   }
   function revised2traditional(make_token, parser){
    return function(lexer, lexbuf){
     function lexer$0(param){
      var token = caml_call1(lexer, lexbuf);
      return caml_call3(make_token, token, lexbuf[11], lexbuf[12]);
     }
     return caml_call1(parser, lexer$0);};
   }
   function traditional2revised$0(parser){
    return traditional2revised
            (function(param){var token = param[1]; return token;},
             function(param){var startp = param[2]; return startp;},
             function(param){var endp = param[3]; return endp;},
             parser);
   }
   function revised2traditional$0(parser){
    return revised2traditional
            (function(token, startp, endp){return [0, token, startp, endp];},
             parser);
   }
   var
    Simplified = [0, traditional2revised$0, revised2traditional$0],
    Convert = [0, traditional2revised, revised2traditional, Simplified],
    IncrementalEngine = [0],
    EngineTypes = [0],
    f = [0, cst_lib_pack_menhirLib_ml, 2103, 6],
    g = [0, [11, "before '", [2, 0, [12, 39, 0]]], "before '%s'"],
    h =
      [0,
       [11, "after '", [2, 0, [11, "' and before '", [2, 0, [12, 39, 0]]]]],
       "after '%s' and before '%s'"],
    i = [0, cst_lib_pack_menhirLib_ml, 2116, 6];
   function update(buffer, x2){
    var match = buffer[1];
    if(typeof match === "number")
     var a = [0, x2];
    else
     var x1 = 0 === match[0] ? match[1] : match[2], a = [1, x1, x2];
    buffer[1] = a;
   }
   function show(f$0, buffer){
    var match = buffer[1];
    if(typeof match === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
    if(0 === match[0]){
     var invalid = match[1], a = caml_call1(f$0, invalid);
     return caml_call2(Stdlib_Printf[4], g, a);
    }
    var
     invalid$0 = match[2],
     valid = match[1],
     b = caml_call1(f$0, invalid$0),
     c = caml_call1(f$0, valid);
    return caml_call3(Stdlib_Printf[4], h, c, b);
   }
   function last(buffer){
    var match = buffer[1];
    if(typeof match === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
    var invalid = 0 === match[0] ? match[1] : match[2];
    return invalid;
   }
   function wrap(lexer){
    var buffer = [0, 0];
    return [0,
            buffer,
            function(lexbuf){
             var token = caml_call1(lexer, lexbuf);
             update(buffer, [0, lexbuf[11], lexbuf[12]]);
             return token;
            }];
   }
   function wrap_supplier(supplier){
    var buffer = [0, 0];
    return [0,
            buffer,
            function(param){
             var
              triple = caml_call1(supplier, 0),
              pos2 = triple[3],
              pos1 = triple[2];
             update(buffer, [0, pos1, pos2]);
             return triple;
            }];
   }
   function extract(text, param){
    var
     pos2 = param[2],
     pos1 = param[1],
     ofs1 = pos1[4],
     ofs2 = pos2[4],
     len = ofs2 - ofs1 | 0;
    try{var a = caml_call3(Stdlib_String[16], text, ofs1, len); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[6]) return cst$0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function sanitize(text){
    return caml_call2
            (Stdlib_String[18], function(c){return 32 <= c ? c : 32;}, text);
   }
   function compress(text){
    var
     b = caml_call1(Stdlib_Bytes[5], text),
     n = runtime.caml_ml_bytes_length(b),
     i = 0,
     j = 0,
     skipping = 0;
    for(;;){
     if(j >= n) return caml_call3(Stdlib_Bytes[8], b, 0, i);
     var j$0 = j + 1 | 0, c = runtime.caml_bytes_get(b, j), a = c - 9 | 0;
     a:
     {
      if(4 < a >>> 0){
       if(23 !== a) break a;
      }
      else if(1 >= a - 2 >>> 0) break a;
      var i$0 = skipping ? i : (caml_bytes_set(b, i, 32), i + 1 | 0);
      i = i$0;
      j = j$0;
      skipping = 1;
      continue;
     }
     caml_bytes_set(b, i, c);
     var i$1 = i + 1 | 0;
     i = i$1;
     j = j$0;
     skipping = 0;
    }
   }
   function shorten(k, text){
    var n = caml_ml_string_length(text);
    if(n <= ((2 * k | 0) + 3 | 0)) return text;
    var
     a = caml_call3(Stdlib_String[16], text, n - k | 0, k),
     b = caml_call2(Stdlib[28], cst$1, a),
     c = caml_call3(Stdlib_String[16], text, 0, k);
    return caml_call2(Stdlib[28], c, b);
   }
   var
    Copy = [248, "MenhirLib.ErrorReports.Copy", runtime.caml_fresh_oo_id(0)],
    j = [0, [11, cst_At_an_unknown_location, 0], cst_At_an_unknown_location],
    k =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, cst$2, 0]]]]]]]]],
       'File "%s", line %d, characters %d-%d:\n'],
    l = [0, cst_lib_pack_menhirLib_ml, 2297, 4],
    m = [0, cst_lib_pack_menhirLib_ml, 2460, 2],
    n = [0, cst_lib_pack_menhirLib_ml, 2609, 4],
    o = [0, cst_lib_pack_menhirLib_ml, 2560, 4],
    p = [0, cst_lib_pack_menhirLib_ml, 2678, 6],
    q = [0, cst_lib_pack_menhirLib_ml, 2852, 10],
    r = [0, cst_lib_pack_menhirLib_ml, 2774, 6],
    s = [0, cst_lib_pack_menhirLib_ml, 2771, 2],
    t = [0, cst_lib_pack_menhirLib_ml, 2936, 2],
    u = [0, cst_lib_pack_menhirLib_ml, 2934, 2],
    v = [0, cst_lib_pack_menhirLib_ml, 2979, 2],
    w = [0, cst_lib_pack_menhirLib_ml, 3004, 2],
    x = [0, cst_lib_pack_menhirLib_ml, 3008, 2],
    y = [0, cst_lib_pack_menhirLib_ml, 3012, 2];
   function expand(f, text){
    var
     n = caml_ml_string_length(text),
     b = caml_call1(Stdlib_Buffer[1], n),
     i = 0;
    for(;;){
     if(i >= n) return caml_call1(Stdlib_Buffer[2], b);
     var i$0 = i + 1 | 0, c = caml_string_get(text, i);
     try{
      if(36 !== c) throw caml_maybe_attach_backtrace(Copy, 1);
      var j = [0, i$0];
      for(;;){
       if(j[1] < n){
        var
         c$0 = caml_string_get(text, j[1]),
         a = 48 <= c$0 ? 1 : 0,
         d = a ? c$0 <= 57 ? 1 : 0 : a;
        if(d){j[1]++; continue;}
       }
       if(i$0 === j[1]) throw caml_maybe_attach_backtrace(Copy, 1);
       var
        k =
          runtime.caml_int_of_string
           (caml_call3(Stdlib_String[16], text, i$0, j[1] - i$0 | 0)),
        e = caml_call1(f, k);
       caml_call2(Stdlib_Buffer[16], b, e);
       var g = j[1];
       i = g;
       break;
      }
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Copy) throw caml_maybe_attach_backtrace(exn, 0);
      caml_call2(Stdlib_Buffer[12], b, c);
      i = i$0;
     }
    }
   }
   function init(filename, lexbuf){
    lexbuf[12] = [0, filename, 1, 0, 0];
    return lexbuf;
   }
   function read(filename){
    var
     c = caml_call1(Stdlib[79], filename),
     a = caml_call1(Stdlib[92], c),
     text = caml_call2(Stdlib[86], c, a);
    caml_call1(Stdlib[93], c);
    var lexbuf = caml_call2(Stdlib_Lexing[3], 0, text);
    return [0, text, init(filename, lexbuf)];
   }
   function newline(lexbuf){
    var pos = lexbuf[12];
    lexbuf[12] = [0, pos[1], pos[2] + 1 | 0, pos[4], pos[4]];
    return 0;
   }
   function range(range){
    var
     pos2$0 = range[2],
     pos1$0 = range[1],
     pos2 = range[2],
     pos1 = range[1],
     a = pos1 === Stdlib_Lexing[1] ? 1 : 0,
     b = a || (pos2 === Stdlib_Lexing[1] ? 1 : 0);
    if(b) return caml_call1(Stdlib_Printf[4], j);
    var
     file = pos1$0[1],
     line = pos1$0[2],
     char1 = pos1$0[4] - pos1$0[3] | 0,
     char2 = pos2$0[4] - pos1$0[3] | 0;
    return caml_call5(Stdlib_Printf[4], k, file, line, char1, char2);
   }
   function tabulate(is_eof, lexer){
    var tokens = 0;
    for(;;){
     var token = caml_call1(lexer, 0), tokens$0 = [0, token, tokens];
     if(caml_call1(is_eof, token)) break;
     tokens = tokens$0;
    }
    var
     a = caml_call1(Stdlib_List[10], tokens$0),
     tokens$1 = caml_call1(Stdlib_Array[11], a),
     i = [0, 0];
    function lexer$0(param){
     if(i[1] >= tokens$1.length - 1)
      throw caml_maybe_attach_backtrace([0, Assert_failure, l], 1);
     var token = tokens$1[i[1] + 1];
     i[1] = i[1] + 1 | 0;
     return token;
    }
    return lexer$0;
   }
   function make(x){return [0, x, caml_array_make(16384, x), 0];}
   function ensure(a, i){
    if(0 > i) throw caml_maybe_attach_backtrace([0, Assert_failure, m], 1);
    var table = a[2], length$1 = table.length - 1;
    if(length$1 <= i){
     var length$2 = 2 * length$1 | 0, length = length$2, b = a[1];
     for(;;){
      if(i < length){
       var table$0 = caml_array_make(length, b);
       caml_call5(Stdlib_Array[9], table, 0, table$0, 0, length$1);
       a[2] = table$0;
       break;
      }
      var length$0 = 2 * length | 0;
      length = length$0;
     }
    }
   }
   function get(a, i){ensure(a, i); return a[2][i + 1];}
   function set(a, i, x){
    ensure(a, i);
    a[2][i + 1] = x;
    var b = a[3] <= i ? 1 : 0, c = b ? (a[3] = i + 1 | 0, 0) : b;
    return c;
   }
   function extent(a){return a[3];}
   function domain(a){return caml_call3(Stdlib_Array[6], a[2], 0, a[3]);}
   function pack(a){
    var
     m = a.length - 1,
     k =
       caml_call3
        (Stdlib_Array[18],
         function(k$1, v){
          if(0 <= v){
           var k = 1, max = 2;
           for(;;){
            if(0 >= max){var a = k; break;}
            if(v < max){var a = k; break;}
            var max$0 = caml_mul(max, max), k$0 = 2 * k | 0;
            k = k$0;
            max = max$0;
           }
          }
          else
           var a = Stdlib_Sys[9];
          return caml_call2(Stdlib[17], k$1, a);
         },
         1,
         a);
    if(8 < k){
     if(0 !== (k % 8 | 0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, n], 1);
     var
      w = k / 8 | 0,
      n$0 = caml_mul(m, w),
      s = caml_create_bytes(n$0),
      b = m - 1 | 0,
      f = 0;
     if(b >= 0){
      var i = f;
      for(;;){
       var v = [0, caml_check_bound(a, i)[i + 1]], g = 1;
       if(w >= 1){
        var x = g;
        for(;;){
         caml_bytes_set
          (s,
           caml_mul(i + 1 | 0, w) - x | 0,
           caml_call1(Stdlib_Char[1], v[1] & 255));
         v[1] = v[1] >>> 8 | 0;
         var l = x + 1 | 0;
         if(w === x) break;
         x = l;
        }
       }
       var h = i + 1 | 0;
       if(b === i) break;
       i = h;
      }
     }
     return [0, k, caml_call1(Stdlib_Bytes[44], s)];
    }
    if(0 !== caml_mod(8, k))
     throw caml_maybe_attach_backtrace([0, Assert_failure, o], 1);
    var
     w$0 = caml_div(8, k),
     n$1 =
       0 === caml_mod(m, w$0) ? caml_div(m, w$0) : caml_div(m, w$0) + 1 | 0,
     s$0 = caml_create_bytes(n$1),
     i$0 = [0, 0],
     d = n$1 - 1 | 0,
     p = 0;
    if(d >= 0){
     var j = p;
     for(;;){
      var c = [0, 0], q = 1;
      if(w$0 >= 1){
       var x$0 = q;
       for(;;){
        var ii = i$0[1];
        if(ii === m)
         var e = 0;
        else{
         var v$0 = caml_check_bound(a, ii)[ii + 1];
         i$0[1] = ii + 1 | 0;
         var e = v$0;
        }
        c[1] = c[1] << k | e;
        var t = x$0 + 1 | 0;
        if(w$0 === x$0) break;
        x$0 = t;
       }
      }
      caml_bytes_set(s$0, j, caml_call1(Stdlib_Char[1], c[1]));
      var r = j + 1 | 0;
      if(d === j) break;
      j = r;
     }
    }
    return [0, k, caml_call1(Stdlib_Bytes[44], s$0)];
   }
   function get1(s, i){
    var
     i$0 = i >>> 3 | 0,
     c$1 = caml_string_unsafe_get(s, i$0),
     c = c$1 >>> (caml_call1(Stdlib[21], i) & 7) | 0,
     c$0 = c & 1;
    return c$0;
   }
   function get$0(param, i){
    var s = param[2], k = param[1], switcher = k - 1 | 0;
    if(15 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return get1(s, i);
       case 1:
        var
         i$3 = i >>> 2 | 0,
         c = caml_string_unsafe_get(s, i$3),
         c$0 = c >>> (2 * (caml_call1(Stdlib[21], i) & 3) | 0) | 0,
         c$1 = c$0 & 3;
        return c$1;
       case 3:
        var
         i$4 = i >>> 1 | 0,
         c$4 = caml_string_unsafe_get(s, i$4),
         c$2 = c$4 >>> (4 * (caml_call1(Stdlib[21], i) & 1) | 0) | 0,
         c$3 = c$2 & 15;
        return c$3;
       case 7:
        return caml_string_unsafe_get(s, i);
       case 15:
        var j$0 = 2 * i | 0, i$5 = j$0 + 1 | 0;
        return (caml_string_unsafe_get(s, j$0) << 8)
               + caml_string_unsafe_get(s, i$5)
               | 0;
     }
    if(32 !== k) throw caml_maybe_attach_backtrace([0, Assert_failure, p], 1);
    var j = 4 * i | 0, i$0 = j + 3 | 0, i$1 = j + 2 | 0, i$2 = j + 1 | 0;
    return (((((caml_string_unsafe_get(s, j) << 8)
           + caml_string_unsafe_get(s, i$2)
           | 0)
           << 8)
           + caml_string_unsafe_get(s, i$1)
           | 0)
           << 8)
           + caml_string_unsafe_get(s, i$0)
           | 0;
   }
   function unflatten1(param, i, j){
    var data = param[2], n = param[1];
    return get1(data, caml_mul(n, i) + j | 0);
   }
   function decode(displacement){
    return 0 === (displacement & 1)
            ? displacement >>> 1 | 0
            : - (displacement >>> 1 | 0) | 0;
   }
   function compress$0(equal, insignificant, dummy, m, n, t){
    if(t.length - 1 !== m)
     throw caml_maybe_attach_backtrace([0, Assert_failure, s], 1);
    var a = m - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      if(caml_check_bound(t, i)[i + 1].length - 1 !== n)
       throw caml_maybe_attach_backtrace([0, Assert_failure, r], 1);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    function sparse(i, line){
     var j$2 = n - 1 | 0, j = j$2, rank = 0, row = 0;
     for(;;){
      if(0 > j) return [0, i, rank, row];
      var x = caml_check_bound(line, j)[j + 1];
      if(caml_call1(insignificant, x)){var j$0 = j - 1 | 0; j = j$0;}
      else{
       var
        row$0 = [0, [0, j, x], row],
        rank$0 = 1 + rank | 0,
        j$1 = j - 1 | 0;
       j = j$1;
       rank = rank$0;
       row = row$0;
      }
     }
    }
    var rows = caml_call2(Stdlib_Array[16], sparse, t);
    caml_call2
     (Stdlib_Array[37],
      function(a, param){
       var rank2 = param[2], rank1 = a[2];
       return runtime.caml_int_compare(rank2, rank1);
      },
      rows);
    var displacement = caml_array_make(m, 0), data = make(dummy);
    caml_call2
     (Stdlib_Array[12],
      function(param$1){
       var row$1 = param$1[3], i = param$1[1];
       if(row$1){
        var j$0 = row$1[1][1], k$1 = - j$0 | 0, k = k$1;
        a:
        for(;;){
         var d = data[3], param = row$1;
         for(;;){
          if(param){
           var row = param[2], match = param[1], x = match[2], j = match[1];
           if(0 > (k + j | 0))
            throw caml_maybe_attach_backtrace([0, Assert_failure, q], 1);
           if(d <= (k + j | 0))
            var a = 1;
           else{
            var y = get(data, k + j | 0);
            if(caml_call1(insignificant, y)){param = row; continue;}
            if(caml_call2(equal, x, y)){param = row; continue;}
            var a = 0;
           }
          }
          else
           var a = 1;
          if(a){var displacement$0 = k; break a;}
          var k$0 = k + 1 | 0;
          k = k$0;
          break;
         }
        }
       }
       else
        var displacement$0 = 0;
       var param$0 = row$1;
       for(;;){
        if(! param$0){
         var
          b =
            0 <= displacement$0
             ? displacement$0 << 1
             : ((- displacement$0 | 0) << 1) + 1 | 0;
         caml_check_bound(displacement, i)[i + 1] = b;
         return 0;
        }
        var
         row$0 = param$0[2],
         match$0 = param$0[1],
         x$0 = match$0[2],
         j$1 = match$0[1];
        set(data, displacement$0 + j$1 | 0, x$0);
        param$0 = row$0;
       }
      },
      rows);
    return [0, displacement, domain(data)];
   }
   function get$1(param, i, j){
    var data = param[2], displacement = param[1];
    if(0 <= i && i < displacement.length - 1){
     var k = decode(caml_check_bound(displacement, i)[i + 1]);
     if(0 <= (k + j | 0) && (k + j | 0) < data.length - 1){
      var a = k + j | 0;
      return caml_check_bound(data, a)[a + 1];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, t], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, u], 1);
   }
   function getget(get_displacement, get_data, param, i, j){
    var
     data = param[2],
     displacement = param[1],
     k = decode(caml_call2(get_displacement, displacement, i));
    return caml_call2(get_data, data, k + j | 0);
   }
   function make$0(a){
    var
     n = a.length - 1,
     size = [0, 0],
     entry =
       caml_call2
        (Stdlib_Array[1],
         n + 1 | 0,
         function(i){
          var s = size[1];
          if(i < n)
           size[1] = s + (caml_check_bound(a, i)[i + 1].length - 1) | 0;
          return s;
         }),
     b = size[1];
    if(caml_check_bound(entry, n)[n + 1] !== b)
     throw caml_maybe_attach_backtrace([0, Assert_failure, v], 1);
    var
     i = [0, 0],
     j = [0, 0],
     data =
       caml_call2
        (Stdlib_Array[1],
         size[1],
         function(param){
          for(;;){
           var b = i[1], e = caml_check_bound(a, b)[b + 1].length - 1;
           if(j[1] !== e){
            var
             c = j[1],
             d = i[1],
             x = caml_check_bound(caml_check_bound(a, d)[d + 1], c)[c + 1];
            j[1] = j[1] + 1 | 0;
            return x;
           }
           i[1] = i[1] + 1 | 0;
           j[1] = 0;
          }
         });
    return [0, data, entry];
   }
   function length$0(param){var entry = param[2]; return entry.length - 1;}
   function row_length(param, i){
    var
     entry = param[2],
     a = i + 1 | 0,
     b = caml_check_bound(entry, i)[i + 1];
    return caml_check_bound(entry, a)[a + 1] - b | 0;
   }
   function row_length_via(get_entry, i){
    var a = caml_call1(get_entry, i);
    return caml_call1(get_entry, i + 1 | 0) - a | 0;
   }
   function read$0(la, i, j){
    var entry = la[2], data = la[1];
    if(0 <= j && j < row_length(la, i)){
     var a = caml_check_bound(entry, i)[i + 1] + j | 0;
     return caml_check_bound(data, a)[a + 1];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, w], 1);
   }
   function read_via(get_data, get_entry, i, j){
    if(0 <= j && j < row_length_via(get_entry, i))
     return caml_call1(get_data, caml_call1(get_entry, i) + j | 0);
    throw caml_maybe_attach_backtrace([0, Assert_failure, x], 1);
   }
   function write(la, i, j, v){
    var entry = la[2], data = la[1];
    if(0 <= j && j < row_length(la, i)){
     var a = caml_check_bound(entry, i)[i + 1] + j | 0;
     caml_check_bound(data, a)[a + 1] = v;
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, y], 1);
   }
   function read_interval_via(get_data, i, j){
    if(i === j) return 0;
    var a = read_interval_via(get_data, i + 1 | 0, j);
    return [0, caml_call1(get_data, i), a];
   }
   function read_row_via(get_data, get_entry, i){
    var a = caml_call1(get_entry, i + 1 | 0);
    return read_interval_via(get_data, caml_call1(get_entry, i), a);
   }
   function read_row(param, i){
    var entry = param[2], data = param[1];
    return read_row_via
            (function(a){return caml_check_bound(data, a)[a + 1];},
             function(a){return caml_check_bound(entry, a)[a + 1];},
             i);
   }
   var TableFormat = [0], InspectionTableFormat = [0];
   function Symbols(T){return [0];}
   var
    StaticVersion = [0, 0],
    D = [0, cst_lib_pack_menhirLib_ml, 3613, 4],
    E = [0, cst_lib_pack_menhirLib_ml, 3662, 8],
    F = [0, cst_lib_pack_menhirLib_ml, 3680, 8],
    G = [0, cst_lib_pack_menhirLib_ml, 3701, 10],
    H = [0, cst_lib_pack_menhirLib_ml, 3723, 4],
    I =
      [0, [11, "State ", [4, 0, 0, 0, [11, cst$2, [10, 0]]]], "State %d:\n%!"],
    J =
      [0,
       [11,
        "Shifting (",
        [2, 0, [11, ") to state ", [4, 0, 0, 0, [12, 10, [10, 0]]]]]],
       "Shifting (%s) to state %d\n%!"],
    K = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
    L =
      [0,
       [11,
        "Lookahead token is now ",
        [2,
         0,
         [11,
          " (",
          [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ")\n", [10, 0]]]]]]]],
       "Lookahead token is now %s (%d-%d)\n%!"],
    M =
      [0,
       [11, "Initiating error handling\n", [10, 0]],
       "Initiating error handling\n%!"],
    N =
      [0,
       [11, "Resuming error handling\n", [10, 0]],
       "Resuming error handling\n%!"],
    O =
      [0,
       [11, "Handling error in state ", [4, 0, 0, 0, [12, 10, [10, 0]]]],
       "Handling error in state %d\n%!"],
    z = [0, cst_lib_pack_menhirLib_ml, 3313, 4],
    A = [0, cst_lib_pack_menhirLib_ml, 3332, 4],
    B = [0, cst_lib_pack_menhirLib_ml, 3338, 4],
    C = [0, cst_lib_pack_menhirLib_ml, 3425, 4],
    cst_feed_outgoing_transition_d =
      "feed: outgoing transition does not exist",
    cst_Current_LR_1_state = "Current LR(1) state: ",
    cst_some_initial_state = "<some initial state>",
    a = [0, cst_lib_pack_menhirLib_ml, 1471, 4],
    b = [0, cst_lib_pack_menhirLib_ml, 1486, 4],
    cst_offer_expects_InputNeeded = "offer expects InputNeeded",
    cst_resume_expects_HandlingErr =
      "resume expects HandlingError | Shifting | AboutToReduce",
    c = [0, cst_lib_pack_menhirLib_ml, 1801, 4],
    d = [0, cst_lib_pack_menhirLib_ml, 1828, 8],
    e = [0, cst_lib_pack_menhirLib_ml, 2016, 6],
    cst_force_reduction_this_reduc =
      "force_reduction: this reduction is not permitted in this state",
    MenhirLib =
      [0,
       [0, take, drop, uniq, weed, length, foldr],
       Convert,
       IncrementalEngine,
       EngineTypes,
       [0,
        function(T){
         var
          number = T[1],
          production_index = T[7],
          find_production = T[8],
          Error = T[18],
          log = T[21],
          Log = T[22];
         function run(env, please_discard){
          if(log) caml_call1(Log[1], env[4]);
          return please_discard ? [0, env] : check_for_default_reduction(env);
         }
         function check_for_default_reduction(env){
          return caml_call4
                  (T[9], env[4], announce_reduce, check_for_error_token, env);
         }
         function check_for_error_token(env){
          if(! env[1]){
           var
            token = env[2][1],
            a = caml_call1(T[3], token),
            b = caml_call1(T[2], token);
           return caml_call7
                   (T[10], env[4], b, a, shift, announce_reduce, initiate, env);
          }
          if(log) caml_call1(Log[6], 0);
          return [3, env];
         }
         function shift(env, please_discard, terminal, value, s){
          if(log) caml_call2(Log[2], terminal, s);
          var
           match = env[2],
           endp = match[3],
           startp = match[2],
           stack = [0, env[4], value, startp, endp, env[3]],
           new_env = [0, env[1], env[2], stack, s];
          return [1, env, new_env, please_discard];
         }
         function announce_reduce(env, prod){
          if(! caml_call1(T[17], prod)) return [2, env, prod];
          if(log) caml_call1(Log[3], prod);
          var v = env[3][2];
          return [4, v];
         }
         function reduce(env, prod){
          if(log) caml_call1(Log[3], prod);
          var
           stack = caml_call2(T[19], prod, env),
           current = caml_call2(T[14], stack[1], prod),
           env$0 = [0, env[1], env[2], stack, current];
          return run(env$0, 0);
         }
         function initiate(env){
          if(log) caml_call1(Log[5], 0);
          var env$0 = [0, 1, env[2], env[3], env[4]];
          return [3, env$0];
         }
         function start(s, initial){
          var empty = [];
          runtime.caml_update_dummy
           (empty, [0, s, T[5], initial, initial, empty]);
          var env = [0, 0, [0, 0, initial, initial], empty, s];
          return run(env, 1);
         }
         function offer(param){
          if(typeof param !== "number" && 0 === param[0]){
           var env = param[1];
           return function(triple){
            if(log){
             var
              endp = triple[3],
              startp = triple[2],
              token = triple[1],
              a = caml_call1(T[2], token);
             caml_call3(Log[4], a, startp, endp);
            }
            var env$0 = [0, 0, triple, env[3], env[4]];
            return check_for_default_reduction(env$0);};
          }
          return caml_call1(Stdlib[1], cst_offer_expects_InputNeeded);
         }
         function resume(opt, checkpoint){
          var strategy = opt ? opt[1] : -822677911;
          if(typeof checkpoint !== "number")
           switch(checkpoint[0]){
             case 1:
              var please_discard = checkpoint[3], env = checkpoint[2];
              return run(env, please_discard);
             case 2:
              var prod = checkpoint[2], env$0 = checkpoint[1];
              return reduce(env$0, prod);
             case 3:
              var env$1 = checkpoint[1];
              if(env$1[1])
               return caml_call7
                       (T[10],
                        env$1[4],
                        T[4],
                        T[5],
                        function(env, please_discard$0, terminal, value, s){
                         if(caml_equal(terminal, T[4]) && caml_equal(value, T[5])){
                          if(log) caml_call1(Log[7], env[4]);
                          var
                           please_discard =
                             -798940232 <= strategy ? 0 : please_discard$0;
                          return shift(env, please_discard, terminal, value, s);
                         }
                         throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
                        },
                        function(env, prod){
                         if(log) caml_call1(Log[7], env[4]);
                         return -798940232 <= strategy
                                 ? announce_reduce(env, prod)
                                 : reduce(env, prod);
                        },
                        function(env$0){
                         if(-798940232 <= strategy) return 0;
                         var cell = env$0[3], next = cell[5];
                         if(next === cell) return 0;
                         var env = [0, env$0[1], env$0[2], next, cell[1]];
                         return [3, env];
                        },
                        env$1);
              throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
           }
          return caml_call1(Stdlib[1], cst_resume_expects_HandlingErr);
         }
         function lexer_lexbuf_to_supplier(lexer, lexbuf){
          return function(param){
           var
            token = caml_call1(lexer, lexbuf),
            startp = lexbuf[11],
            endp = lexbuf[12];
           return [0, token, startp, endp];};
         }
         function loop(opt$2, read, checkpoint$2){
          var opt = opt$2, checkpoint = checkpoint$2;
          for(;;){
           var strategy = opt ? opt[1] : -822677911;
           if(typeof checkpoint === "number")
            throw caml_maybe_attach_backtrace(Error, 1);
           switch(checkpoint[0]){
             case 0:
              var
               triple = caml_call1(read, 0),
               checkpoint$0 = caml_call1(offer(checkpoint), triple),
               opt$0 = [0, strategy];
              opt = opt$0;
              checkpoint = checkpoint$0;
              break;
             case 4:
              var v = checkpoint[1]; return v;
             default:
              var
               checkpoint$1 = resume([0, strategy], checkpoint),
               opt$1 = [0, strategy];
              opt = opt$1;
              checkpoint = checkpoint$1;
           }
          }
         }
         function entry(strategy, s, lexer, lexbuf){
          var initial = lexbuf[12], a = start(s, initial);
          return loop
                  ([0, strategy], lexer_lexbuf_to_supplier(lexer, lexbuf), a);
         }
         function loop_handle(succeed, fail, read, checkpoint$2){
          var checkpoint = checkpoint$2;
          for(;;){
           if(typeof checkpoint !== "number")
            switch(checkpoint[0]){
              case 0:
               var
                triple = caml_call1(read, 0),
                checkpoint$0 = caml_call1(offer(checkpoint), triple);
               checkpoint = checkpoint$0;
               continue;
              case 4:
               var v = checkpoint[1]; return caml_call1(succeed, v);
              case 3: break;
              default:
               var checkpoint$1 = resume(0, checkpoint);
               checkpoint = checkpoint$1;
               continue;
            }
           return caml_call1(fail, checkpoint);
          }
         }
         function loop_handle_undo(succeed, fail, read, checkpoint$2){
          a:
          {
           if(typeof checkpoint$2 !== "number" && 0 === checkpoint$2[0]){var a = 1; break a;}
           var a = 0;
          }
          if(! a)
           throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
          var param = [0, checkpoint$2, checkpoint$2];
          for(;;){
           var checkpoint = param[2], inputneeded = param[1];
           if(typeof checkpoint !== "number")
            switch(checkpoint[0]){
              case 0:
               var
                triple = caml_call1(read, 0),
                checkpoint$0 = caml_call1(offer(checkpoint), triple);
               param = [0, checkpoint, checkpoint$0];
               continue;
              case 4:
               var v = checkpoint[1]; return caml_call1(succeed, v);
              case 3: break;
              default:
               var checkpoint$1 = resume(0, checkpoint);
               param = [0, inputneeded, checkpoint$1];
               continue;
            }
           return caml_call2(fail, inputneeded, checkpoint);
          }
         }
         function shifts(checkpoint$1){
          var checkpoint = checkpoint$1;
          for(;;){
           if(typeof checkpoint !== "number")
            switch(checkpoint[0]){
              case 1:
               var env = checkpoint[1]; return [0, env];
              case 2:
               var checkpoint$0 = resume(0, checkpoint);
               checkpoint = checkpoint$0;
               continue;
              case 3:
               return 0;
            }
           throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
          }
         }
         function acceptable(checkpoint, token, pos){
          var
           triple = [0, token, pos, pos],
           checkpoint$0 = caml_call1(offer(checkpoint), triple);
          return shifts(checkpoint$0) ? 1 : 0;
         }
         function f(cell, current){
          return [246,
                  function(param){
                   var next = cell[5];
                   if(next === cell) return 0;
                   var element = [0, current, cell[2], cell[3], cell[4]];
                   return [0, element, f(next, cell[1])];
                  }];
         }
         function stack(env){return f(env[3], env[4]);}
         function top(env){
          var cell = env[3], next = cell[5];
          return next === cell
                  ? 0
                  : [0, [0, env[4], cell[2], cell[3], cell[4]]];
         }
         function equal(env1, env2){
          var a = env1[3] === env2[3] ? 1 : 0;
          if(a)
           var
            c = caml_call1(number, env2[4]),
            b = caml_call1(number, env1[4]) === c ? 1 : 0;
          else
           var b = a;
          return b;
         }
         function current_state_number(env){
          return caml_call1(number, env[4]);
         }
         function positions(param){
          var match = param[2], endp = match[3], startp = match[2];
          return [0, startp, endp];
         }
         function state_has_default_reduction(state){
          return caml_call4
                  (T[9],
                   state,
                   function(env, prod){return 1;},
                   function(env){return 0;},
                   0);
         }
         function env_has_default_reduction(env){
          return state_has_default_reduction(env[4]);
         }
         function pop(env){
          var cell = env[3], next = cell[5];
          return next === cell ? 0 : [0, [0, env[1], env[2], next, cell[1]]];
         }
         function force_reduction(prod, env){
          if(! caml_call2(T[20], env[4], prod))
           return caml_call1(Stdlib[1], cst_force_reduction_this_reduc);
          if(caml_call1(T[17], prod))
           throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
          var
           stack = caml_call2(T[19], prod, env),
           current = caml_call2(T[14], stack[1], prod);
          return [0, env[1], env[2], stack, current];
         }
         function input_needed(env){return [0, env];}
         function pop_many(i$1, env$1){
          var i = i$1, env = env$1;
          for(;;){
           if(0 === i) return [0, env];
           var match = pop(env);
           if(! match) return 0;
           var env$0 = match[1], i$0 = i - 1 | 0;
           i = i$0;
           env = env$0;
          }
         }
         function get(i, env){
          var match = pop_many(i, env);
          if(! match) return 0;
          var env$0 = match[1];
          return top(env$0);
         }
         return [0,
                 Error,
                 entry,
                 offer,
                 resume,
                 lexer_lexbuf_to_supplier,
                 loop,
                 loop_handle,
                 loop_handle_undo,
                 shifts,
                 acceptable,
                 number,
                 production_index,
                 find_production,
                 stack,
                 top,
                 pop_many,
                 get,
                 current_state_number,
                 equal,
                 positions,
                 env_has_default_reduction,
                 state_has_default_reduction,
                 pop,
                 force_reduction,
                 input_needed,
                 start];
        }],
       [0,
        wrap,
        wrap_supplier,
        show,
        last,
        extract,
        sanitize,
        compress,
        shorten,
        expand],
       [0, init, read, newline, range, tabulate],
       [0,
        function(I, User){
         function print_symbols(i$1, symbols$1){
          var i = i$1, symbols = symbols$1;
          for(;;)
           if(0 === i){
            caml_call1(User[1], dot);
            caml_call1(User[1], space);
            i = -1;
           }
           else{
            if(! symbols) return 0;
            var symbols$0 = symbols[2], symbol = symbols[1];
            caml_call1(User[2], symbol);
            caml_call1(User[1], space);
            var i$0 = i - 1 | 0;
            i = i$0;
            symbols = symbols$0;
           }
         }
         function print_element_as_symbol(element){
          var s = element[1], a = [0, caml_call1(I[29], s)];
          return caml_call1(User[2], a);
         }
         var match = User[3];
         if(match)
          var print_element = match[1], print_element$0 = print_element;
         else
          var print_element$0 = print_element_as_symbol;
         function print_stack(env){
          var
           match = caml_call1(I[13], env),
           match$0 = caml_call1(I[21], env);
          if(match && match$0){
           var env$0 = match$0[1], element = match[1];
           print_stack(env$0);
           caml_call1(User[1], space);
           return caml_call1(print_element$0, element);
          }
         }
         function print_stack$0(env){
          print_stack(env);
          return caml_call1(User[1], newline$0);
         }
         function print_item(param){
          var i = param[2], prod = param[1], a = caml_call1(I[31], prod);
          caml_call1(User[2], a);
          caml_call1(User[1], arrow);
          print_symbols(i, caml_call1(I[32], prod));
          return caml_call1(User[1], newline$0);
         }
         function print_symbols$0(symbols){return print_symbols(-1, symbols);}
         function print_production(prod){return print_item([0, prod, -1]);}
         function print_current_state(env){
          caml_call1(User[1], cst_Current_LR_1_state);
          var match = caml_call1(I[13], env);
          if(match){
           var
            current = match[1][1],
            a = caml_call1(I[9], current),
            b = caml_call1(Stdlib[33], a);
           caml_call1(User[1], b);
           caml_call1(User[1], newline$0);
           var c = caml_call1(I[30], current);
           return caml_call2(Stdlib_List[18], print_item, c);
          }
          caml_call1(User[1], cst_some_initial_state);
          return caml_call1(User[1], newline$0);
         }
         function print_env(env){
          print_stack$0(env);
          print_current_state(env);
          return caml_call1(User[1], newline$0);
         }
         return [0,
                 print_symbols$0,
                 print_element_as_symbol,
                 print_stack$0,
                 print_item,
                 print_production,
                 print_current_state,
                 print_env];
        }],
       [0, make, get, set, extent, domain],
       [0, pack, get$0, get1, unflatten1],
       [0, compress$0, get$1, getget],
       [0,
        make$0,
        read$0,
        write,
        length$0,
        row_length,
        read_row,
        row_length_via,
        read_via,
        read_row_via],
       TableFormat,
       InspectionTableFormat,
       [0,
        Symbols,
        function(TT, IT, ET, E){
         function read_packed_linearized(param, i){
          var entry = param[2], data = param[1];
          return read_row_via
                  (function(a){return get$0(data, a);},
                   function(a){return get$0(entry, a);},
                   i);
         }
         function decode_symbol(symbol){
          if(0 >= symbol)
           throw caml_maybe_attach_backtrace([0, Assert_failure, z], 1);
          var kind = symbol & 1, symbol$0 = symbol >>> 1 | 0;
          return 0 === kind
                  ? caml_call1(IT[1], symbol$0 - 1 | 0)
                  : caml_call1(IT[2], symbol$0);
         }
         function n2i(nt){
          var answer = TT[9] + nt | 0;
          if(caml_equal(caml_call1(IT[2], answer), [0, [1, nt]]))
           return answer;
          throw caml_maybe_attach_backtrace([0, Assert_failure, A], 1);
         }
         function t2i(t){
          if(caml_equal(caml_call1(IT[1], t), [0, [0, t]])) return t;
          throw caml_maybe_attach_backtrace([0, Assert_failure, B], 1);
         }
         function compare_terminals(t1, t2){
          var a = t2i(t2);
          return t2i(t1) - a | 0;
         }
         function compare_nonterminals(nt1, nt2){
          var a = n2i(nt2);
          return n2i(nt1) - a | 0;
         }
         function compare_symbols(symbol1, symbol2){
          var a = symbol1[1];
          if(0 === a[0]){
           var match = symbol2[1], t1 = a[1];
           if(0 !== match[0]) return -1;
           var t2 = match[1];
           return compare_terminals(t1, t2);
          }
          var match$0 = symbol2[1], nt1 = a[1];
          if(0 === match$0[0]) return 1;
          var nt2 = match$0[1];
          return compare_nonterminals(nt1, nt2);
         }
         function compare_productions(prod1, prod2){return prod1 - prod2 | 0;}
         function compare_items(a, param){
          var
           index2 = param[2],
           prod2 = param[1],
           index1 = a[2],
           prod1 = a[1],
           c = prod1 - prod2 | 0;
          return 0 === c ? index1 - index2 | 0 : c;
         }
         function incoming_symbol(s){
          var
           core = get$0(IT[4], s),
           symbol = decode_symbol(get$0(IT[6], core)),
           symbol$0 = symbol[1];
          return symbol$0;
         }
         function lhs(prod){
          var a = get$0(TT[7], prod);
          return caml_call1(IT[2], a);
         }
         function rhs(prod){
          var a = read_packed_linearized(IT[3], prod);
          return caml_call2(Stdlib_List[20], decode_symbol, a);
         }
         function export$(t){return [0, t >>> 10 | 0, t % 1024 | 0];}
         function items(s){
          var core = get$0(IT[4], s), a = read_packed_linearized(IT[5], core);
          return caml_call2(Stdlib_List[20], export$, a);
         }
         function decode_bool(i){
          if(0 !== i && 1 !== i)
           throw caml_maybe_attach_backtrace([0, Assert_failure, C], 1);
          return 1 === i ? 1 : 0;
         }
         function nullable(nt){
          var a = n2i(nt);
          return decode_bool(get1(IT[7], a));
         }
         function first(nt, t){
          var a = t2i(t), b = n2i(nt);
          return decode_bool(unflatten1(IT[8], b, a));
         }
         function xfirst(symbol, t){
          var match = symbol[1];
          if(0 === match[0]){
           var t$0 = match[1];
           return 0 === compare_terminals(t, t$0) ? 1 : 0;
          }
          var nt = match[1];
          return first(nt, t);
         }
         function foreach_terminal(f, accu){
          var n = TT[5][1], accu$1 = accu, i$0 = 0;
          for(;;){
           if(i$0 === n) return accu$1;
           var
            accu$0 = caml_call2(f, caml_call1(IT[1], i$0), accu$1),
            i = i$0 + 1 | 0;
           accu$1 = accu$0;
           i$0 = i;
          }
         }
         function foreach_terminal_but_error(f, accu){
          var n = TT[5][1], accu$1 = accu, i$0 = 0;
          for(;;){
           if(i$0 === n) return accu$1;
           var
            accu$0 =
              i$0 === TT[2]
               ? accu$1
               : caml_call2(f, caml_call1(IT[1], i$0), accu$1),
            i = i$0 + 1 | 0;
           accu$1 = accu$0;
           i$0 = i;
          }
         }
         function feed_failure(param){
          return caml_call1(Stdlib[1], cst_feed_outgoing_transition_d);
         }
         function reduce(env, prod){return feed_failure(0);}
         function initiate(env){return feed_failure(0);}
         function feed(symbol, startp, semv, endp, env){
          if(0 === symbol[0]){
           var
            terminal = symbol[1],
            terminal$0 = t2i(terminal),
            source$0 = env[4];
           return caml_call7
                   (ET[10],
                    source$0,
                    terminal$0,
                    semv,
                    function(env, please_discard, terminal, semv, target){
                     var stack = [0, source$0, semv, startp, endp, env[3]];
                     return [0, env[1], env[2], stack, target];
                    },
                    reduce,
                    initiate,
                    env);
          }
          var
           nt = symbol[1],
           nt$0 = n2i(nt),
           source = env[4],
           match = caml_call2(ET[15], source, nt$0);
          if(! match) return feed_failure(0);
          var
           target = match[1],
           stack = [0, source, semv, startp, endp, env[3]];
          return [0, env[1], env[2], stack, target];
         }
         return [0,
                 compare_terminals,
                 compare_nonterminals,
                 compare_symbols,
                 compare_productions,
                 compare_items,
                 incoming_symbol,
                 items,
                 lhs,
                 rhs,
                 nullable,
                 first,
                 xfirst,
                 foreach_terminal,
                 foreach_terminal_but_error,
                 feed];
        }],
       [0,
        function(T){
         function number(s){return s;}
         var token2terminal = T[1], token2value = T[3], error_terminal = T[2];
         function foreach_terminal(f, accu){
          var n = T[5][1], accu$1 = accu, i$0 = 0;
          for(;;){
           if(i$0 === n) return accu$1;
           var accu$0 = caml_call2(f, i$0, accu$1), i = i$0 + 1 | 0;
           accu$1 = accu$0;
           i$0 = i;
          }
         }
         function non_start_production(i){
          if(T[9] <= i && (i - T[9] | 0) < T[10].length - 1) return;
          throw caml_maybe_attach_backtrace([0, Assert_failure, D], 1);
         }
         function production_index(i){non_start_production(i); return i;}
         function find_production(i){non_start_production(i); return i;}
         function default_reduction(state, defred, nodefred, env){
          var code = get$0(T[4], state);
          if(0 === code) return caml_call1(nodefred, env);
          var prod = code - 1 | 0;
          return caml_call2(defred, env, prod);
         }
         function is_start(prod){return prod < T[9] ? 1 : 0;}
         function action(state, terminal, value, shift, reduce, fail, env){
          var c = unflatten1(T[5], state, terminal);
          if(1 === c){
           var
            table = T[6],
            action = getget(get$0, get$0, table, state, terminal),
            opcode = action & 3,
            param = action >>> 2 | 0;
           if(2 > opcode) return caml_call2(reduce, env, param);
           var please_discard = 2 === opcode ? 1 : 0;
           return caml_call5
                   (shift, env, please_discard, terminal, value, param);
          }
          if(0 === c) return caml_call1(fail, env);
          throw caml_maybe_attach_backtrace([0, Assert_failure, E], 1);
         }
         function maybe_shift_t(state, terminal){
          var c = unflatten1(T[5], state, terminal);
          if(1 === c){
           var
            table = T[6],
            action = getget(get$0, get$0, table, state, terminal),
            opcode = action & 3;
           if(2 > opcode) return 0;
           var state$0 = action >>> 2 | 0;
           return [0, state$0];
          }
          if(0 === c) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, F], 1);
         }
         function may_reduce_prod(state, terminal, prod){
          var code = get$0(T[4], state);
          if(0 !== code){
           var prod$1 = code - 1 | 0;
           return prod === prod$1 ? 1 : 0;
          }
          var c = unflatten1(T[5], state, terminal);
          if(1 === c){
           var
            table = T[6],
            action = getget(get$0, get$0, table, state, terminal),
            opcode = action & 3;
           if(2 <= opcode) return 0;
           var prod$0 = action >>> 2 | 0;
           return prod === prod$0 ? 1 : 0;
          }
          if(0 === c) return 0;
          throw caml_maybe_attach_backtrace([0, Assert_failure, G], 1);
         }
         function goto_nt(state, nt){
          var table = T[8], code = getget(get$0, get$0, table, state, nt);
          return code - 1 | 0;
         }
         function lhs(prod){return get$0(T[7], prod);}
         function goto_prod(state, prod){return goto_nt(state, lhs(prod));}
         function maybe_goto_nt(state, nt){
          var table = T[8], code = getget(get$0, get$0, table, state, nt);
          if(0 <= code) return 0 === code ? 0 : [0, code - 1 | 0];
          throw caml_maybe_attach_backtrace([0, Assert_failure, H], 1);
         }
         var Error = T[11];
         function semantic_action(prod){
          var a = prod - T[9] | 0;
          return caml_check_bound(T[10], a)[a + 1];
         }
         function may_reduce(state, prod){
          var code = get$0(T[4], state);
          if(0 !== code){
           var prod$0 = code - 1 | 0;
           return prod === prod$0 ? 1 : 0;
          }
          var n = T[5][1], accu$0 = 0, i$0 = 0;
          for(;;){
           if(i$0 === n) return accu$0;
           var
            accu =
              accu$0
              ||
               action
                (state,
                 i$0,
                 0,
                 function(d, c, b, a, param){return 0;},
                 function(param, prod$0){return prod === prod$0 ? 1 : 0;},
                 function(param){return 0;},
                 0),
            i = i$0 + 1 | 0;
           accu$0 = accu;
           i$0 = i;
          }
         }
         var error_value = 0, log = T[12] ? 1 : 0;
         function state(state){
          return T[12]
                  ? caml_call3(Stdlib_Printf[1], Stdlib[40], I, state)
                  : 0;
         }
         function shift(terminal, state){
          var match = T[12];
          if(! match) return 0;
          var
           terminals = match[1][1],
           a = caml_check_bound(terminals, terminal)[terminal + 1];
          return caml_call4(Stdlib_Printf[1], Stdlib[40], J, a, state);
         }
         function reduce_or_accept(prod){
          var match = T[12];
          if(! match) return 0;
          var
           productions = match[1][2],
           a = caml_check_bound(productions, prod)[prod + 1];
          return caml_call3(Stdlib_Printf[1], Stdlib[40], K, a);
         }
         function lookahead_token(token, startp, endp){
          var match = T[12];
          if(! match) return 0;
          var
           terminals = match[1][1],
           a = endp[4],
           b = startp[4],
           c = caml_check_bound(terminals, token)[token + 1];
          return caml_call5(Stdlib_Printf[1], Stdlib[40], L, c, b, a);
         }
         function initiating_error_handling(param){
          return T[12] ? caml_call2(Stdlib_Printf[1], Stdlib[40], M) : 0;
         }
         function resuming_error_handling(param){
          return T[12] ? caml_call2(Stdlib_Printf[1], Stdlib[40], N) : 0;
         }
         function handling_error(state){
          return T[12]
                  ? caml_call3(Stdlib_Printf[1], Stdlib[40], O, state)
                  : 0;
         }
         var
          Log =
            [0,
             state,
             shift,
             reduce_or_accept,
             lookahead_token,
             initiating_error_handling,
             resuming_error_handling,
             handling_error];
         return [0,
                 number,
                 token2terminal,
                 token2value,
                 error_terminal,
                 error_value,
                 foreach_terminal,
                 production_index,
                 find_production,
                 default_reduction,
                 action,
                 maybe_shift_t,
                 may_reduce_prod,
                 goto_nt,
                 goto_prod,
                 maybe_goto_nt,
                 lhs,
                 is_start,
                 Error,
                 semantic_action,
                 may_reduce,
                 log,
                 Log];
        }],
       StaticVersion];
   runtime.caml_register_global(68, MenhirLib, "MenhirLib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
