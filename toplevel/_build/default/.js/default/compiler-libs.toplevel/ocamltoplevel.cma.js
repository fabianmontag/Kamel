// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Genprintval
//# unitInfo: Requires: Btype, Ctype, Datarepr, Env, Format_doc, Ident, Lexer, Misc, Oprint, Out_type, Parse, Path, Predef, Printtyp, Stdlib, Stdlib__Bytes, Stdlib__Hashtbl, Stdlib__Lexing, Stdlib__List, Stdlib__Obj, Stdlib__Printexc, Syntaxerr, Types
//# unitInfo: Force_link: true
//# shape: Genprintval:[F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_abstr = "<abstr>",
    cst_cycle = "<cycle>",
    cst_variant = "<variant>",
    cst_Assert_failure = "Assert_failure",
    cst_toplevel_genprintval_ml = "toplevel/genprintval.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    Btype = global_data.Btype,
    Types = global_data.Types,
    Stdlib = global_data.Stdlib,
    Ctype = global_data.Ctype,
    Predef = global_data.Predef,
    Path = global_data.Path,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Env = global_data.Env,
    Datarepr = global_data.Datarepr,
    Assert_failure = global_data.Assert_failure,
    Ident = global_data.Ident,
    Out_type = global_data.Out_type,
    Misc = global_data.Misc,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Parse = global_data.Parse,
    Syntaxerr = global_data.Syntaxerr,
    Lexer = global_data.Lexer,
    Printtyp = global_data.Printtyp,
    Format_doc = global_data.Format_doc,
    Oprint = global_data.Oprint,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    cst_print_int64 = "print_int64",
    cst_print_nativeint = "print_nativeint",
    cst_print_int32 = "print_int32",
    cst_print_char = "print_char",
    cst_print_float = "print_float",
    cst_print_int = "print_int",
    a =
      [0,
       [11,
        "<printer ",
        [15, [11, " raised an exception: ", [2, 0, [12, 62, 0]]]]],
       "<printer %a raised an exception: %s>"],
    cst_abstract = "abstract",
    b = [12, cst_cycle],
    cst_Printval_outval_of_value = "Printval.outval_of_value",
    c = [12, "<poly>"],
    d = [12, "<fun>"],
    e = [12, cst_abstr],
    f = [12, "<unknown constructor>"],
    g = [12, cst_abstr],
    h = [0, cst_toplevel_genprintval_ml, 417, 33],
    i = [12, cst_cycle],
    j = [8, 0],
    k = [0, 0],
    l = [12, "<lazy>"],
    m = [12, "<obj>"],
    n = [12, cst_variant],
    o = [12, cst_variant],
    p = [12, "<module>"],
    q = [0, cst_toplevel_genprintval_ml, 542, 19],
    r = [12, "<extension>"],
    s = [0, cst_toplevel_genprintval_ml, 579, 17],
    t =
      [0,
       [11, "<internal error: incorrect arity for '", [15, [11, "'>", 0]]],
       "<internal error: incorrect arity for '%a'>"],
    Genprintval =
      [0,
       function(O, EVP){
        function equal(b, a){return b === a ? 1 : 0;}
        function hash(x){
         try{var a = caml_call1(Stdlib_Hashtbl[28], x); return a;}
         catch(exn){return 0;}
        }
        var ObjTbl = caml_call1(Stdlib_Hashtbl[26], [0, equal, hash]);
        function outval_of_untyped_exception_ar(obj, start_offset){
         if(start_offset >= caml_call1(O[5], obj)) return 0;
         var list = [0, 0], a = caml_call1(O[5], obj) - 1 | 0;
         if(a >= start_offset){
          var i = start_offset;
          for(;;){
           var arg = caml_call2(O[6], obj, i);
           if(caml_call1(O[3], arg)){
            var b = Stdlib_Obj[15];
            if(caml_call1(O[4], arg) === b){
             var c = list[1], d = Stdlib[19];
             list[1] = [0, [11, caml_call1(O[2], arg), d, 0], c];
            }
            else{
             var f = Stdlib_Obj[16];
             if(caml_call1(O[4], arg) === f){
              var g = list[1];
              list[1] = [0, [3, caml_call1(O[2], arg)], g];
             }
             else{
              var h = list[1];
              list[1] = [0, [2, [2, caml_call1(Out_type[41][1], cst)], 0], h];
             }
            }
           }
           else{var j = list[1]; list[1] = [0, [4, caml_call1(O[2], arg)], j];
           }
           var e = i + 1 | 0;
           if(a === i) break;
           i = e;
          }
         }
         return caml_call1(Stdlib_List[10], list[1]);
        }
        function outval_of_untyped_exception(bucket){
         if(0 !== caml_call1(O[4], bucket)){
          var
           d = caml_call2(O[6], bucket, 0),
           e = caml_call1(O[2], d),
           name$0 = caml_call1(Out_type[41][1], e);
          return [2, [2, name$0], 0];
         }
         var
          a = caml_call2(O[6], bucket, 0),
          b = caml_call2(O[6], a, 0),
          name = caml_call1(O[2], b);
         a:
         {
          b:
          {
           if
            (name !== "Match_failure"
             &&
              name !== cst_Assert_failure
              && name !== "Undefined_recursive_module")
            break b;
           if(2 === caml_call1(O[5], bucket)){
            var c = caml_call2(O[6], bucket, 1);
            if(0 === caml_call1(O[4], c)){
             var
              args =
                outval_of_untyped_exception_ar(caml_call2(O[6], bucket, 1), 0);
             break a;
            }
           }
          }
          var args = outval_of_untyped_exception_ar(bucket, 1);
         }
         return [2, [2, caml_call1(Out_type[41][1], name)], args];
        }
        var
         v = [0, Predef[16], function(x){return [6, caml_call1(O[2], x)];}],
         w = [0, [0, [0, caml_call1(Ident[12], cst_print_int64)], v], 0],
         x = [0, Predef[14], function(x){return [7, caml_call1(O[2], x)];}],
         y = [0, [0, [0, caml_call1(Ident[12], cst_print_nativeint)], x], w],
         z = [0, Predef[15], function(x){return [5, caml_call1(O[2], x)];}],
         A = [0, [0, [0, caml_call1(Ident[12], cst_print_int32)], z], y],
         B = [0, Predef[2], function(x){return [1, caml_call1(O[2], x)];}],
         C = [0, [0, [0, caml_call1(Ident[12], cst_print_char)], B], A],
         D = [0, Predef[5], function(x){return [3, caml_call1(O[2], x)];}],
         E = [0, [0, [0, caml_call1(Ident[12], cst_print_float)], D], C],
         F = [0, Predef[1], function(x){return [4, caml_call1(O[2], x)];}],
         printers =
           [0, [0, [0, [0, caml_call1(Ident[12], cst_print_int)], F], E]];
        function exn_printer(path, ppf, exn){
         var b = caml_call1(Stdlib_Printexc[1], exn);
         return caml_call5(Format_doc[9], ppf, a, Printtyp[5][4], path, b);
        }
        function out_exn(path, exn){
         return [9, function(ppf){return exn_printer(path, ppf, exn);}];
        }
        function user_printer(path, f, ppf, x){
         return caml_call2
                 (Format_doc[6],
                  function(ppf){
                   try{var a = caml_call2(f, ppf, x); return a;}
                   catch(exn$0){
                    var exn = caml_wrap_exception(exn$0);
                    return caml_call4
                            (Format_doc[4], exn_printer, path, ppf, exn);
                   }
                  },
                  ppf);
        }
        function install_printer(path, ty, fn){
         function printer(obj){
          return [9, function(ppf){return user_printer(path, fn, ppf, obj);}];
         }
         printers[1] = [0, [0, path, [0, ty, printer]], printers[1]];
         return 0;
        }
        function install_generic_printer(function_path, constr_path, fn){
         printers[1] =
          [0, [0, function_path, [1, constr_path, fn]], printers[1]];
         return 0;
        }
        function install_generic_printer$0(function_path, ty_path, fn){
         function build(gp, depth){
          if(0 === gp[0]){
           var
            fn = gp[1],
            out_printer =
              function(obj){
               function printer(ppf){
                return user_printer(function_path, fn, ppf, obj);
               }
               return [9, printer];
              };
           return [0, out_printer];
          }
          var fn$0 = gp[1];
          function print_val(fn_arg){
           function print_arg(ppf, o){
            var a = caml_call2(fn_arg, depth + 1 | 0, o);
            return caml_call2(Oprint[2][1], ppf, a);
           }
           return build(caml_call1(fn$0, print_arg), depth);
          }
          return [1, print_val];
         }
         printers[1] =
          [0,
           [0, function_path, [1, ty_path, function(a){return build(fn, a);}]],
           printers[1]];
         return 0;
        }
        function remove_printer(path){
         function remove(param){
          if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var rem = param[2], printer = param[1], p = printer[1];
          return caml_call2(Path[1], p, path)
                  ? rem
                  : [0, printer, remove(rem)];
         }
         printers[1] = remove(printers[1]);
         return 0;
        }
        function tree_of_qualified(find, env, ty_path, name){
         switch(ty_path[0]){
           case 1:
            var p = ty_path[1];
            a:
            {
             try{
              var
               c =
                 caml_call2(find, [0, caml_call1(Out_type[41][2], name)], env),
               val = caml_call1(Types[9], c);
             }
             catch(exn$0){
              var exn = caml_wrap_exception(exn$0);
              if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
              var a = 0;
              break a;
             }
             if(typeof val !== "number" && 3 === val[0]){
              var
               ty_path$0 = val[1],
               a = caml_call2(Path[1], ty_path, ty_path$0);
              break a;
             }
             var a = 0;
            }
            if(a) return [2, name];
            var b = caml_call1(Out_type[41][2], name);
            return [1, caml_call2(Out_type[4], 0, p), b];
           case 2:
            return caml_call2(Out_type[4], 0, ty_path);
           default: return [2, name];
         }
        }
        function u(lid, env){return caml_call2(Env[69], lid, env)[2];}
        var
         id = caml_call1(Ident[12], cst_abstract),
         abstract_type = caml_call1(Btype[12], [3, [0, id], 0, [0, 0]]);
        function G(lid, env){return caml_call2(Env[70], lid, env)[2];}
        function outval_of_value
        (max_steps, max_depth, check_depth, env, obj, ty){
         var
          printer_steps = [0, max_steps],
          nested_values = caml_call1(ObjTbl[1], 8);
         function nest_gen(err, f, depth, repr, ty){
          if(caml_call1(O[3], repr)){
           var a = Stdlib_Obj[13];
           if(a > caml_call1(O[4], repr)){
            if(caml_call2(ObjTbl[11], nested_values, repr)) return err;
            caml_call3(ObjTbl[5], nested_values, repr, 0);
            var ret = caml_call3(f, depth, repr, ty);
            caml_call2(ObjTbl[6], nested_values, repr);
            return ret;
           }
          }
          return caml_call3(f, depth, repr, ty);
         }
         function nest(f){
          return function(a, c, d){return nest_gen(b, f, a, c, d);};
         }
         function tree_of_val(depth$1, obj, ty$2){
          a:
          {
           var depth = depth$1, ty = ty$2;
           b:
           for(;;){
            printer_steps[1]--;
            if(0 <= printer_steps[1] && 0 <= depth)
             try{
              var G = caml_call1(find_printer(depth, env, ty), obj);
              return G;
             }
             catch(exn$0){
              var exn = caml_wrap_exception(exn$0);
              if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
              var match = caml_call1(Types[9], ty);
              if(typeof match !== "number")
               switch(match[0]){
                 case 1:
                  return d;
                 case 2:
                  var ty_list = match[1];
                  return [13, tree_of_val_list(0, depth, obj, ty_list)];
                 case 3:
                  break a;
                 case 4:
                  return m;
                 case 8:
                  break b;
                 case 10:
                  var ty$1 = match[1], depth$0 = depth - 1 | 0;
                  depth = depth$0;
                  ty = ty$1;
                  continue;
                 case 11:
                  return p;
                 case 0:
                 case 9:
                  return c;
               }
              return caml_call1(Misc[1], cst_Printval_outval_of_value);
             }
            return 0;
           }
           var row = match[1];
           if(caml_call1(O[3], obj)){
            var
             E = caml_call2(O[6], obj, 0),
             tag$0 = caml_call1(O[2], E),
             param = caml_call1(Types[24], row);
            for(;;){
             if(! param) return n;
             var
              fields = param[2],
              match$9 = param[1],
              f$0 = match$9[2],
              l$1 = match$9[1];
             if(caml_call1(Btype[28], l$1) === tag$0){
              var match$10 = caml_call1(Types[32], f$0);
              if(typeof match$10 !== "number"){
               if(0 === match$10[0]){
                var w = match$10[1];
                if(! w){param = fields; continue;}
                var ty$0 = w[1];
               }
               else{
                var b = match$10[2];
                if(! b){param = fields; continue;}
                if(b[2]){param = fields; continue;}
                var ty$0 = b[1];
               }
               var
                F = caml_call2(O[6], obj, 1),
                args = nest(tree_of_val)(depth - 1 | 0, F, ty$0);
               return [14, l$1, [0, args]];
              }
              param = fields;
             }
             else
              param = fields;
            }
           }
           else{
            var
             tag$1 = caml_call1(O[2], obj),
             param$0 = caml_call1(Types[24], row);
            for(;;){
             if(! param$0) return o;
             var fields$0 = param$0[2], l$2 = param$0[1][1];
             if(caml_call1(Btype[28], l$2) === tag$1) return [14, l$2, 0];
             param$0 = fields$0;
            }
           }
          }
          var
           ty_list$0 = match[2],
           path = match[1],
           y = caml_call2(Ctype[75], env, ty),
           match$0 = caml_call1(Types[9], y);
          if(typeof match$0 !== "number" && 3 === match$0[0]){
           var match$6 = match$0[2], path$0 = match$0[1];
           if(match$6){
            if(! match$6[2]){
             var ty_arg = match$6[1];
             if(caml_call2(Path[1], path$0, Predef[30])){
              if(! caml_call1(O[3], obj)) return j;
              var match$7 = caml_call3(check_depth, depth, obj, ty);
              if(match$7){var x$0 = match$7[1]; return x$0;}
              var
               tree_of_conses =
                 function(tree_list, depth, obj, ty_arg){
                  if(0 <= printer_steps[1] && 0 <= depth){
                   if(! caml_call1(O[3], obj)) return tree_list;
                   var
                    a = caml_call2(O[6], obj, 0),
                    tree = nest(tree_of_val)(depth - 1 | 0, a, ty_arg),
                    next_obj = caml_call2(O[6], obj, 1),
                    b = [0, tree, tree_list];
                   return nest_gen
                           ([0, i, [0, tree, tree_list]],
                            function(a, c, d){return tree_of_conses(b, a, c, d);},
                            depth,
                            next_obj,
                            ty_arg);
                  }
                  return [0, 0, tree_list];
                 },
               A = tree_of_conses(0, depth, obj, ty_arg);
              return [8, caml_call1(Stdlib_List[10], A)];
             }
             if(caml_call2(Path[1], path$0, Predef[29])){
              var length = caml_call1(O[5], obj);
              if(0 >= length) return k;
              var match$8 = caml_call3(check_depth, depth, obj, ty);
              if(match$8){var x$1 = match$8[1]; return x$1;}
              var tree_list = 0, i$0 = 0;
              for(;;){
               a:
               {
                if(0 <= printer_steps[1] && 0 <= depth){
                 if(i$0 < length){
                  var
                   B = caml_call2(O[6], obj, i$0),
                   tree = nest(tree_of_val)(depth - 1 | 0, B, ty_arg),
                   i$1 = i$0 + 1 | 0,
                   tree_list$0 = [0, tree, tree_list];
                  tree_list = tree_list$0;
                  i$0 = i$1;
                  continue;
                 }
                 var q = tree_list;
                 break a;
                }
                var q = [0, 0, tree_list];
               }
               return [0, caml_call1(Stdlib_List[10], q)];
              }
             }
             if(caml_call2(Path[1], path$0, Predef[35])){
              var obj_tag = caml_call1(O[4], obj);
              if(obj_tag === Stdlib_Obj[8]) return l;
              var
               forced_obj =
                 obj_tag === Stdlib_Obj[12] ? caml_call2(O[6], obj, 0) : obj,
               v =
                 obj_tag === Stdlib_Obj[12]
                  ? nest(tree_of_val)(depth, forced_obj, ty_arg)
                  : tree_of_val(depth, forced_obj, ty_arg);
              return [15, v];
             }
            }
           }
           else{
            if(caml_call2(Path[1], path$0, Predef[22])){
             var C = printer_steps[1];
             return [11, caml_call1(O[2], obj), C, 0];
            }
            if(caml_call2(Path[1], path$0, Predef[23])){
             var
              D = caml_call1(O[2], obj),
              s = caml_call1(Stdlib_Bytes[6], D);
             return [11, s, printer_steps[1], 1];
            }
           }
          }
          try{
           var decl = caml_call2(Env[12], path, env), match$1 = decl[3];
           if(typeof match$1 === "number")
            var a = tree_of_extension(path, ty_list$0, depth, obj);
           else
            switch(match$1[0]){
              case 0:
               var match$2 = decl[5];
               if(match$2)
                var
                 body = match$2[1],
                 a =
                   tree_of_val
                    (depth,
                     obj,
                     instantiate_type(env, decl[1], ty_list$0, body));
               else
                var a = g;
               break;
              case 1:
               var
                rep = match$1[2],
                lbl_list = match$1[1],
                match$3 = caml_call3(check_depth, depth, obj, ty);
               if(match$3)
                var x = match$3[1], a = x;
               else{
                a:
                {
                 if(typeof rep !== "number" && 2 === rep[0]){var pos = 1; break a;}
                 var pos = 0;
                }
                a:
                {
                 if(typeof rep !== "number" && 0 === rep[0]){var unbx = 1; break a;}
                 var unbx = 0;
                }
                var
                 a =
                   tree_of_record_fields
                    (depth,
                     env,
                     path,
                     decl[1],
                     ty_list$0,
                     lbl_list,
                     pos,
                     obj,
                     unbx);
               }
               break;
              default:
               var
                rep$0 = match$1[2],
                constr_list = match$1[1],
                unbx$0 = 1 === rep$0 ? 1 : 0,
                tag =
                  unbx$0
                   ? 0
                   : caml_call1
                      (O[3], obj)
                     ? [1, caml_call1(O[4], obj)]
                     : [0, caml_call1(O[2], obj)],
                match$4 = caml_call2(Datarepr[5], tag, constr_list),
                cd_res = match$4[3],
                cd_args = match$4[2],
                cd_id = match$4[1];
               a:
               {
                if(cd_res){
                 var t = cd_res[1], match$5 = caml_call1(Types[9], t);
                 if(typeof match$5 !== "number" && 3 === match$5[0]){
                  var params = match$5[2], type_params = params;
                  break a;
                 }
                 throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
                }
                var type_params = decl[1];
               }
               if(0 === cd_args[0])
                var
                 l$0 = cd_args[1],
                 ty_args = instantiate_types(env, type_params, ty_list$0, l$0),
                 a =
                   tree_of_constr_with_args
                    (function(a){return tree_of_qualified(u, env, path, a);},
                     caml_call1(Ident[16], cd_id),
                     0,
                     0,
                     depth,
                     obj,
                     ty_args,
                     unbx$0);
               else
                var
                 lbls = cd_args[1],
                 r =
                   tree_of_record_fields
                    (depth,
                     env,
                     path,
                     type_params,
                     ty_list$0,
                     lbls,
                     0,
                     obj,
                     unbx$0),
                 z = caml_call1(Ident[16], cd_id),
                 a =
                   [2,
                    tree_of_qualified
                     (u, env, path, caml_call1(Out_type[41][1], z)),
                    [0, r, 0]];
            }
           return a;
          }
          catch(exn){
           var exn$0 = caml_wrap_exception(exn);
           if(exn$0 === Stdlib[8]) return e;
           if(exn$0 === Datarepr[4]) return f;
           throw caml_maybe_attach_backtrace(exn$0, 0);
          }
         }
         function tree_of_record_fields
         (depth, env, path, type_params, ty_list, lbl_list, pos, obj, unboxed){
          function tree_of_fields(pos, param){
           if(! param) return 0;
           var
            remainder = param[2],
            match = param[1],
            ld_type = match[3],
            ld_id = match[1],
            ty_arg = instantiate_type(env, type_params, ty_list, ld_type),
            name = caml_call1(Ident[16], ld_id),
            lid =
              0 === pos
               ? tree_of_qualified
                 (G, env, path, caml_call1(Out_type[41][1], name))
               : [2, caml_call1(Out_type[41][1], name)];
           if(unboxed)
            var v = tree_of_val(depth - 1 | 0, obj, ty_arg);
           else{
            var a = O[7];
            if(caml_call1(O[4], obj) === a)
             var b = caml_call2(O[8], obj, pos), fld = caml_call1(O[1], b);
            else
             var fld = caml_call2(O[6], obj, pos);
            var v = nest(tree_of_val)(depth - 1 | 0, fld, ty_arg);
           }
           return [0, [0, lid, v], tree_of_fields(pos + 1 | 0, remainder)];
          }
          return [10, tree_of_fields(pos, lbl_list)];
         }
         function tree_of_val_list(start, depth, obj, ty_list){
          function tree_list(i, param){
           if(! param) return 0;
           var
            ty_list = param[2],
            ty = param[1],
            a = caml_call2(O[6], obj, i),
            tree = nest(tree_of_val)(depth - 1 | 0, a, ty);
           return [0, tree, tree_list(i + 1 | 0, ty_list)];
          }
          return tree_list(start, ty_list);
         }
         function tree_of_constr_with_args
         (tree_of_cstr,
          cstr_name,
          inlined,
          start,
          depth,
          obj,
          ty_args,
          unboxed){
          var
           lid =
             caml_call1(tree_of_cstr, caml_call1(Out_type[41][1], cstr_name));
          a:
          {
           if(! inlined && ! unboxed){
            var args = tree_of_val_list(start, depth, obj, ty_args);
            break a;
           }
           if(ty_args && ! ty_args[2]){
            var
             ty = ty_args[1],
             args = [0, tree_of_val(depth - 1 | 0, obj, ty), 0];
            break a;
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, q], 1);
          }
          return [2, lid, args];
         }
         function tree_of_extension(type_path, ty_list, depth, bucket){
          var
           slot =
             0 === caml_call1(O[4], bucket)
              ? caml_call2(O[6], bucket, 0)
              : bucket,
           a = caml_call2(O[6], slot, 0),
           name = caml_call1(O[2], a);
          try{
           try{
            var
             b = caml_call2(Stdlib_Lexing[3], 0, name),
             lid = caml_call1(Parse[10], b);
           }
           catch(exn){
            var exn$0 = caml_wrap_exception(exn);
            if(exn$0[1] !== Syntaxerr[1] && exn$0[1] !== Lexer[4])
             throw caml_maybe_attach_backtrace(exn$0, 0);
            throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           }
           var cstr = caml_call2(Env[69], lid, env), match$0 = cstr[6];
           if(typeof match$0 !== "number" && 2 === match$0[0]){
            var
             path = match$0[1],
             addr = caml_call2(Env[29], path, env),
             c = caml_call1(EVP[1], addr);
            if(1 - caml_call2(EVP[3], slot, c))
             throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            var match$1 = caml_call1(Types[9], cstr[2]);
            if(typeof match$1 !== "number" && 3 === match$1[0]){
             var
              type_params = match$1[2],
              args = instantiate_types(env, type_params, ty_list, cstr[4]),
              d =
                tree_of_constr_with_args
                 (function(x){return [2, x];},
                  name,
                  0 !== cstr[13] ? 1 : 0,
                  1,
                  depth,
                  bucket,
                  args,
                  0);
             return d;
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, s], 1);
           }
           throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          }
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(exn !== Stdlib[8] && exn !== EVP[2])
            throw caml_maybe_attach_backtrace(exn, 0);
           var match = caml_call3(check_depth, depth, bucket, ty);
           if(! match)
            return caml_call2(Path[1], type_path, Predef[27])
                    ? outval_of_untyped_exception(bucket)
                    : r;
           var x = match[1];
           return x;
          }
         }
         function instantiate_type(env, type_params, ty_list, ty){
          try{
           var a = caml_call5(Ctype[71], 0, env, type_params, ty, ty_list);
           return a;
          }
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(exn === Ctype[8]) return abstract_type;
           throw caml_maybe_attach_backtrace(exn, 0);
          }
         }
         function instantiate_types(env, type_params, ty_list, args){
          return caml_call2
                  (Stdlib_List[20],
                   function(a){
                    return instantiate_type(env, type_params, ty_list, a);
                   },
                   args);
         }
         function find_printer(depth, env, ty){
          var param = printers[1];
          for(;;){
           if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           var match = param[1][2];
           if(0 === match[0]){
            var remainder = param[2], printer = match[2], sch = match[1];
            if(caml_call4(Ctype[90], env, 0, sch, ty)) return printer;
            param = remainder;
           }
           else{
            var
             remainder$0 = param[2],
             fn = match[2],
             path = match[1],
             a = caml_call2(Ctype[75], env, ty),
             match$0 = caml_call1(Types[9], a);
            if(typeof match$0 === "number" || ! (3 === match$0[0]))
             param = remainder$0;
            else{
             var args = match$0[2], p = match$0[1];
             if(caml_call2(Path[1], p, path)) break;
             param = remainder$0;
            }
           }
          }
          try{
           var b = apply_generic_printer(path, caml_call1(fn, depth), args);
           return b;
          }
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           return function(obj){return out_exn(path, exn);};
          }
         }
         function apply_generic_printer(path, printer$1, args$1){
          a:
          {
           var printer = printer$1, args = args$1;
           for(;;){
            if(0 === printer[0]) break;
            if(! args) break a;
            var args$0 = args[2], arg = args[1], fn$0 = printer[1];
            let arg$0 = arg;
            var
             printer$0 =
               caml_call1
                (fn$0,
                 function(depth, obj){return tree_of_val(depth, obj, arg$0);});
            printer = printer$0;
            args = args$0;
           }
           if(! args){
            var fn = printer[1];
            return function(obj){
             try{var a = caml_call1(fn, obj); return a;}
             catch(exn$0){
              var exn = caml_wrap_exception(exn$0);
              return out_exn(path, exn);
             }};
           }
          }
          return function(obj){
           function printer(ppf){
            return caml_call4(Format_doc[9], ppf, t, Printtyp[5][4], path);
           }
           return [9, printer];};
         }
         return nest(tree_of_val)(max_depth, obj, ty);
        }
        return [0,
                install_printer,
                install_generic_printer,
                install_generic_printer$0,
                remove_printer,
                outval_of_untyped_exception,
                outval_of_value];
       }];
   runtime.caml_register_global(56, Genprintval, "Genprintval");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Topcommon
//# unitInfo: Requires: Ast_helper, Clflags, Compenv, Compmisc, Config, Dll, Env, Format_doc, Genprintval, Lexer, Load_path, Location, Misc, Oprint, Parse, Path, Pparse, Pprintast, Predef, Printast, Stdlib, Stdlib__Arg, Stdlib__Buffer, Stdlib__Filename, Stdlib__Format, Stdlib__Gc, Stdlib__Hashtbl, Stdlib__List, Stdlib__Obj, Stdlib__Option, Stdlib__Printexc, Stdlib__Sys, Symtable, Unit_info
//# unitInfo: Force_link: true
//# shape: Topcommon:[F(3),F(1),N,F(1),F(2),F(1),F(1)*,N,N,N,N,N,N,N,N,N,N,N,F(1),F(3),F(1),F(1),F(1),F(3),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1),N,F(2),N,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst_literal = " literal",
    cst$6 = "@,",
    cst_a = "a ",
    cst_a_a_literal = "a %a literal",
    cst_an_identifier = "an identifier",
    cst_no_argument = "no argument",
    cst_string$1 = "string",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial =
      [17,
       [0, cst$6, 0, 0],
       [11, "or by passing it as an argument to the toplevel?", 0]],
    cst$4 = cst$5,
    cst = cst$5,
    cst$0 = "# ",
    cst$1 = cst$5,
    cst$2 = "* ",
    cst$3 = "  ",
    Symtable = global_data.Symtable,
    Location = global_data.Location,
    Format_doc = global_data.Format_doc,
    Stdlib = global_data.Stdlib,
    Load_path = global_data.Load_path,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Misc = global_data.Misc,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Compmisc = global_data.Compmisc,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Option = global_data.Stdlib__Option,
    Clflags = global_data.Clflags,
    Config = global_data.Config,
    Compenv = global_data.Compenv,
    Dll = global_data.Dll,
    Lexer = global_data.Lexer,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Pparse = global_data.Pparse,
    Printast = global_data.Printast,
    Pprintast = global_data.Pprintast,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Predef = global_data.Predef,
    Env = global_data.Env,
    Path = global_data.Path,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Genprintval = global_data.Genprintval,
    Unit_info = global_data.Unit_info,
    Ast_helper = global_data.Ast_helper,
    Parse = global_data.Parse,
    Oprint = global_data.Oprint,
    parse_toplevel_phrase = [0, Parse[3]],
    parse_use_file = [0, Parse[4]],
    print_location = Location[24],
    print_error = Location[33],
    print_warning = Location[40],
    input_name = Location[13];
   function parse_mod_use_file(name, lb){
    var
     modname = caml_call1(Unit_info[4], name),
     a = caml_call1(parse_use_file[1], lb),
     b =
       caml_call2
        (Stdlib_List[20],
         function(param){
          if(0 !== param[0]) return 0;
          var s = param[1];
          return s;
         },
         a),
     items = caml_call1(Stdlib_List[14], b),
     c = caml_call3(Ast_helper[12][4], 0, 0, items),
     d = caml_call1(Location[11], [0, modname]),
     e = caml_call6(Ast_helper[18][1], 0, 0, 0, 0, d, c);
    return [0, [0, [0, caml_call2(Ast_helper[14][8], 0, e), 0]], 0];
   }
   var
    max_printer_depth = [0, 100],
    max_printer_steps = [0, 300],
    print_out_value = Oprint[2],
    print_out_type = Oprint[4],
    print_out_class_type = Oprint[7],
    print_out_module_type = Oprint[8],
    print_out_type_extension = Oprint[12],
    print_out_sig_item = Oprint[9],
    print_out_signature = Oprint[10],
    print_out_phrase = Oprint[13];
   function find_eval_phrase(str){
    var match = str[1];
    a:
    if(match){
     var b = match[1], a = b[1];
     switch(a[0]){
       case 0:
        if(match[2]) break a; var loc = b[2], attrs = a[2], e = a[1]; break;
       case 1:
        if(a[1]) break a;
        var c = a[2];
        if(! c) break a;
        var d = c[1];
        if(typeof d[1][1] !== "number") break a;
        if(c[2]) break a;
        if(match[2]) break a;
        var loc = b[2], attrs = d[4], e = d[2];
        break;
       default: break a;
     }
     return [0, [0, e, attrs, loc]];
    }
    return 0;
   }
   var
    toplevel_env = [0, Env[1]],
    backtrace = [0, 0],
    Undefined_global =
      [248, "Topcommon.Undefined_global", caml_fresh_oo_id(0)],
    toplevel_startup_hook = [0, function(param){return 0;}],
    Startup = [248, "Topcommon.Startup", caml_fresh_oo_id(0)],
    After_setup = [248, "Topcommon.After_setup", caml_fresh_oo_id(0)],
    hooks = [0, 0];
   function add_hook(f){hooks[1] = [0, f, hooks[1]]; return 0;}
   add_hook
    (function(param){
      return param === Startup ? caml_call1(toplevel_startup_hook[1], 0) : 0;
     });
   var cst_ocaml = "ocaml", a = [0, 1];
   function run_hooks(hook){
    return caml_call2
            (Stdlib_List[18],
             function(f){return caml_call1(f, hook);},
             hooks[1]);
   }
   function record_backtrace(param){
    var
     a = caml_call1(Stdlib_Printexc[8], 0),
     b = a ? (backtrace[1] = [0, caml_call1(Stdlib_Printexc[6], 0)], 0) : a;
    return b;
   }
   function preprocess_phrase(ppf, phr){
    if(0 === phr[0])
     var
      str = phr[1],
      str$0 = caml_call3(Pparse[8], a, cst_ocaml, str),
      phr$0 = [0, str$0];
    else
     var phr$0 = phr;
    if(Clflags[72][1]) caml_call2(Printast[3], ppf, phr$0);
    if(Clflags[71][1]) caml_call2(Pprintast[12], ppf, phr$0);
    return phr$0;
   }
   var
    phrase_buffer = caml_call1(Stdlib_Buffer[1], 1024),
    first_line = [0, 1],
    got_eof = [0, 0];
   function read_input_default(prompt, buffer, len){
    caml_call2(Stdlib[66], Stdlib[39], prompt);
    caml_call1(Stdlib[63], Stdlib[39]);
    var i = [0, 0];
    try{
     for(;;){
      if(len <= i[1]) throw caml_maybe_attach_backtrace(Stdlib[3], 1);
      var c = caml_call1(Stdlib[82], Stdlib[38]);
      runtime.caml_bytes_set(buffer, i[1], c);
      caml_call2(Stdlib_Buffer[12], phrase_buffer, c);
      i[1]++;
      if(10 === c) throw caml_maybe_attach_backtrace(Stdlib[3], 1);
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return [0, i[1], 1];
     if(exn === Stdlib[3]) return [0, i[1], 0];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    read_interactive_input = [0, read_input_default],
    comment_prompt_override = [0, 0],
    cst_camlp4 = "+camlp4",
    cst_OCAMLTOP_INCLUDE_PATH = "OCAMLTOP_INCLUDE_PATH";
   function refill_lexbuf(buffer, len){
    if(got_eof[1]){got_eof[1] = 0; return 0;}
    var
     prompt =
       Clflags[46][1]
        ? cst
        : first_line
           [1]
          ? cst$0
          : Clflags
              [47]
             [1]
            ? cst$1
            : caml_call1
               (Lexer[5], 0)
              ? cst$2
              : comment_prompt_override[1] ? cst$2 : cst$3;
    first_line[1] = 0;
    var
     match = caml_call3(read_interactive_input[1], prompt, buffer, len),
     eof = match[2],
     len$0 = match[1];
    if(! eof) return len$0;
    caml_call1(Location[16], 0);
    if(0 < len$0) got_eof[1] = 1;
    return len$0;
   }
   function set_paths(a, opt, param){
    var
     auto_include = a ? a[1] : Compmisc[6],
     dir = opt ? opt[1] : cst$4,
     expand = caml_call1(Misc[20], Config[3]),
     match = caml_call1(Load_path[9], 0),
     hidden = match[2],
     visible = match[1],
     b = [0, visible, [0, [0, caml_call1(expand, cst_camlp4), 0], 0]],
     c = caml_call1(Stdlib_List[10], Compenv[12][1]),
     d = [0, caml_call2(Stdlib_List[20], expand, c), b],
     e = caml_call1(Stdlib_List[10], Clflags[14][1]),
     f = [0, caml_call2(Stdlib_List[20], expand, e), d],
     g = caml_call1(Stdlib_List[10], Compenv[11][1]),
     h = [0, [0, dir, 0], [0, caml_call2(Stdlib_List[20], expand, g), f]],
     visible$0 = caml_call1(Stdlib_List[14], h),
     i = caml_call1(Stdlib_List[10], Clflags[15][1]),
     j = [0, caml_call2(Stdlib_List[20], expand, i), [0, hidden, 0]],
     hidden$0 = caml_call1(Stdlib_List[14], j);
    caml_call3(Load_path[6], auto_include, visible$0, hidden$0);
    var k = caml_call2(Stdlib[37], visible$0, hidden$0);
    return caml_call1(Dll[6], k);
   }
   function update_search_path_from_env(param){
    var
     env = caml_call1(Stdlib_Sys[2], cst_OCAMLTOP_INCLUDE_PATH),
     arg = Misc[21],
     extra_paths =
       caml_call3
        (Stdlib_Option[8],
         0,
         function(eta){return caml_call2(arg, 0, eta);},
         env),
     a = caml_call2(Stdlib_List[13], extra_paths, Clflags[14][1]);
    Clflags[14][1] = a;
    return 0;
   }
   function initialize_toplevel_env(param){
    toplevel_env[1] = caml_call1(Compmisc[2], 0);
    return 0;
   }
   function override_sys_argv(new_argv){
    runtime.caml_sys_modify_argv(new_argv);
    Stdlib_Arg[12][1] = 0;
    return 0;
   }
   function is_command_like_name(s){
    var b = 0 === runtime.caml_ml_string_length(s) ? 1 : 0;
    if(b)
     var a = b;
    else{
     var c = 45 === runtime.caml_string_get(s, 0) ? 1 : 0;
     if(c)
      var a = c;
     else
      var
       d = caml_call1(Stdlib_Filename[13], s) !== s ? 1 : 0,
       a = d || (caml_call1(Stdlib_Filename[10], s) !== cst$5 ? 1 : 0);
    }
    return 1 - a;
   }
   var
    directive_table = caml_call2(Stdlib_Hashtbl[1], 0, 23),
    directive_info_table = caml_call2(Stdlib_Hashtbl[1], 0, 23);
   function add_directive(name, dir_fun, dir_info){
    caml_call3(Stdlib_Hashtbl[5], directive_table, name, dir_fun);
    return caml_call3(Stdlib_Hashtbl[5], directive_info_table, name, dir_info);
   }
   function get_directive(name){
    return caml_call2(Stdlib_Hashtbl[7], directive_table, name);
   }
   function get_directive_info(name){
    return caml_call2(Stdlib_Hashtbl[7], directive_info_table, name);
   }
   function all_directive_names(param){
    return caml_call3
            (Stdlib_Hashtbl[14],
             function(dir, param, acc){return [0, dir, acc];},
             directive_table,
             0);
   }
   var
    inline_code = caml_call1(Format_doc[3], Misc[60][4]),
    b = [0, [11, cst_an_identifier, 0], cst_an_identifier],
    c = [0, [11, cst_no_argument, 0], cst_no_argument],
    cst_bool = "bool",
    d = [0, [11, cst_a, [15, [11, cst_literal, 0]]], cst_a_a_literal],
    cst_string = cst_string$1,
    e = [0, [11, "an ", [15, [11, cst_literal, 0]]], "an %a literal"],
    cst_string$0 = cst_string$1,
    f = [0, [11, cst_a, [15, [11, cst_literal, 0]]], cst_a_a_literal],
    g =
      [0,
       [11,
        "Directive ",
        [15,
         [11, " expects ", [15, [11, ", got ", [15, [12, 46, [17, 4, 0]]]]]]]],
       "Directive %a expects %a, got %a.@."],
    h =
      [0,
       [11,
        "Wrong integer literal for directive ",
        [15, [12, 46, [17, 4, 0]]]],
       "Wrong integer literal for directive %a.@."],
    i =
      [0,
       [11,
        "Integer literal exceeds the range of representable integers for directive ",
        [15, [12, 46, [17, 4, 0]]]],
       "Integer literal exceeds the range of representable integers for directive %a.@."],
    j =
      [0,
       [11, "Unknown directive ", [15, [12, 46, 0]]],
       "Unknown directive %a."],
    k = [0, [17, 4, 0], "@."],
    l =
      [0,
       [17,
        4,
        [11,
         "Hint: ",
         [18,
          [1, [0, 0, cst$5]],
          [11,
           "This means that the interface of a module is loaded, but its implementation is not.",
           [17, [0, cst$6, 0, 0], 0]]]]],
       "@.Hint: @[This means that the interface of a module is loaded, but its implementation is not.@,"],
    m = [0, ".cma", [0, ".cmo", 0]],
    n = [0, [11, '#load "', [2, 0, [12, 34, 0]]], '#load "%s"'],
    o =
      [0,
       [11,
        "Found ",
        [15,
         [12,
          32,
          [17,
           [0, cst$6, 0, 0],
           [11,
            "in the load paths. ",
            [17,
             [0, cst$6, 0, 0],
             [11,
              "Did you mean to load it using ",
              [17, [0, cst$6, 0, 0], [15, [12, 32, partial]]]]]]]]]],
       "Found %a @,in the load paths. @,Did you mean to load it using @,%a @,or by passing it as an argument to the toplevel?"],
    p = [0, [17, 0, 0], "@]"],
    cst_load = "#load",
    q =
      [0,
       [11,
        "Did you mean to load a compiled implementation of the module ",
        [17,
         [0, cst$6, 0, 0],
         [11,
          "using ",
          [15, [11, " or by passing it as an argument to the toplevel?", 0]]]]],
       "Did you mean to load a compiled implementation of the module @,using %a or by passing it as an argument to the toplevel?"];
   function try_run_directive(ppf, dir_name, pdir_arg){
    var match = get_directive(dir_name);
    if(! match){
     caml_call4(Stdlib_Format[143], ppf, j, inline_code, dir_name);
     var directives = all_directive_names(0);
     caml_call3
      (Format_doc[3],
       Misc[58],
       ppf,
       function(param){return caml_call2(Misc[57], directives, dir_name);});
     caml_call2(Stdlib_Format[143], ppf, k);
     return 0;
    }
    var d$0 = match[1];
    switch(d$0[0]){
      case 0:
       if(! pdir_arg){var f$0 = d$0[1]; caml_call1(f$0, 0); return 1;} break;
      case 1:
       if(pdir_arg){
        var match$0 = pdir_arg[1][1];
        if(0 === match$0[0]){
         var s = match$0[1], f$1 = d$0[1];
         caml_call1(f$1, s);
         return 1;
        }
       }
       break;
      case 2:
       if(pdir_arg){
        var a = pdir_arg[1][1];
        if(1 === a[0]){
         var n = a[1], f$2 = d$0[1];
         if(a[2]){
          caml_call4(Stdlib_Format[143], ppf, h, inline_code, dir_name);
          return 0;
         }
         try{var n$0 = caml_call1(Misc[37][1], n);}
         catch(exn){
          caml_call4(Stdlib_Format[143], ppf, i, inline_code, dir_name);
          return 0;
         }
         caml_call1(f$2, n$0);
         return 1;
        }
       }
       break;
      case 3:
       if(pdir_arg){
        var match$1 = pdir_arg[1][1];
        if(2 === match$1[0]){
         var lid = match$1[1], f$3 = d$0[1];
         caml_call1(f$3, lid);
         return 1;
        }
       }
       break;
      default:
       if(pdir_arg){
        var match$2 = pdir_arg[1][1];
        if(3 === match$2[0]){
         var b$0 = match$2[1], f$4 = d$0[1];
         caml_call1(f$4, b$0);
         return 1;
        }
       }
    }
    switch(d$0[0]){
      case 0:
       var dir_type = 870530776; break;
      case 1:
       var dir_type = -976970511; break;
      case 2:
       var dir_type = 3654863; break;
      case 3:
       var dir_type = -895044912; break;
      default: var dir_type = 737456202;
    }
    if(pdir_arg)
     switch(pdir_arg[1][1][0]){
       case 0:
        var arg_type = -976970511; break;
       case 1:
        var arg_type = 3654863; break;
       case 2:
        var arg_type = -895044912; break;
       default: var arg_type = 737456202;
     }
    else
     var arg_type = 870530776;
    function pp_type(ppf, param){
     return -895044912 === param
             ? caml_call2(Stdlib_Format[143], ppf, b)
             : 737456202
               <= param
               ? 870530776
                 <= param
                 ? caml_call2(Stdlib_Format[143], ppf, c)
                 : caml_call4
                   (Stdlib_Format[143], ppf, d, inline_code, cst_bool)
               : 3654863
                 <= param
                 ? caml_call4
                   (Stdlib_Format[143], ppf, e, inline_code, cst_string)
                 : caml_call4
                   (Stdlib_Format[143], ppf, f, inline_code, cst_string$0);
    }
    caml_call8
     (Stdlib_Format[143],
      ppf,
      g,
      inline_code,
      dir_name,
      pp_type,
      dir_type,
      pp_type,
      arg_type);
    return 0;
   }
   function loading_hint_printer(ppf, cu){
    var global = [0, cu];
    caml_call2(Symtable[32], ppf, [0, global]);
    function find_with_ext(ext){
     try{
      var
       a = caml_call2(Stdlib[28], cu, ext),
       b = [0, caml_call1(Load_path[11], a)];
      return b;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    caml_call2(Format_doc[9], ppf, l);
    var match = caml_call2(Stdlib_List[42], find_with_ext, m);
    if(match){
     var
      path = match[1],
      load =
        function(ppf, path){return caml_call3(Format_doc[9], ppf, n, path);},
      a = caml_call1(Stdlib_Filename[13], path),
      b = caml_call1(Misc[60][3], load);
     caml_call6(Format_doc[9], ppf, o, Misc[60][4], path, b, a);
    }
    else
     caml_call4(Format_doc[9], ppf, q, Misc[60][4], cst_load);
    return caml_call2(Format_doc[9], ppf, p);
   }
   caml_call1
    (Location[55],
     function(param){
      var tag = param[1];
      if(tag === Symtable[30]){
       var a = param[2];
       if(0 === a[0]){
        var b = a[1];
        if(0 === b[0])
         return [0, caml_call2(Location[54], loading_hint_printer, b[1])];
       }
      }
      return 0;
     });
   var
    cst_Cannot_find_address_for = "Cannot find address for: ",
    cst_Error = "Error",
    Topcommon =
      [0,
       set_paths,
       update_search_path_from_env,
       toplevel_env,
       initialize_toplevel_env,
       preprocess_phrase,
       record_backtrace,
       find_eval_phrase,
       max_printer_depth,
       max_printer_steps,
       print_out_value,
       print_out_type,
       print_out_class_type,
       print_out_module_type,
       print_out_type_extension,
       print_out_sig_item,
       print_out_signature,
       print_out_phrase,
       Undefined_global,
       function(E){
        function eval_address(param){
         if(0 === param[0]){var id = param[1]; return caml_call1(E[1], id);}
         var pos = param[2], p = param[1];
         return eval_address(p)[pos + 1];
        }
        function eval_path(find, env, path){
         try{var addr = caml_call2(find, path, env);}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
          var
           a = caml_call2(Path[8], 0, path),
           b = caml_call2(Stdlib[28], cst_Cannot_find_address_for, a);
          return caml_call1(Misc[1], b);
         }
         return eval_address(addr);
        }
        function eval_module_path(env, path){
         return eval_path(Env[27], env, path);
        }
        function eval_value_path(env, path){
         return eval_path(Env[26], env, path);
        }
        function eval_extension_path(env, path){return eval_path(Env[29], env, path);
        }
        function eval_class_path(env, path){
         return eval_path(Env[28], env, path);
        }
        var Error = [248, cst_Error, caml_fresh_oo_id(0)];
        function eval_address$0(addr){
         try{var a = eval_address(addr); return a;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0), tag = exn[1];
          if(tag === Undefined_global)
           throw caml_maybe_attach_backtrace(Error, 1);
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        }
        function same_value(v1, v2){return v1 === v2 ? 1 : 0;}
        var
         Printer =
           Genprintval[1].call
            (null,
             [0,
              function(a){return a;},
              function(a){return a;},
              Stdlib_Obj[1],
              runtime.caml_obj_tag,
              function(a){return a.length - 1;},
              function(b, a){return b[a + 1];},
              Stdlib_Obj[17],
              Stdlib_Obj[2]],
             [0, eval_address$0, Error, same_value]);
        function print_untyped_exception(ppf, obj){
         var a = caml_call1(Printer[5], obj);
         return caml_call2(print_out_value[1], ppf, a);
        }
        function outval_of_value(env, obj, ty){
         return caml_call6
                 (Printer[6],
                  max_printer_steps[1],
                  max_printer_depth[1],
                  function(b, a, param){return 0;},
                  env,
                  obj,
                  ty);
        }
        function print_value(env, obj, ppf, ty){
         var a = outval_of_value(env, obj, ty);
         return caml_call2(print_out_value[1], ppf, a);
        }
        function print_exception_outcome(ppf, exn){
         if(runtime.caml_equal(exn, Stdlib[9])) runtime.caml_gc_full_major(0);
         var outv = outval_of_value(toplevel_env[1], exn, Predef[8]);
         caml_call2(print_out_phrase[1], ppf, [2, [0, exn, outv]]);
         var a = caml_call1(Stdlib_Printexc[8], 0);
         if(a){
          var match = backtrace[1];
          if(match){
           var b = match[1];
           caml_call1(Stdlib_Format[14], b);
           backtrace[1] = 0;
           return 0;
          }
          var c = 0;
         }
         else
          var c = a;
         return c;
        }
        var
         install_printer = Printer[1],
         install_generic_printer = Printer[2],
         install_generic_printer$0 = Printer[3],
         remove_printer = Printer[4];
        return [0,
                eval_address,
                eval_module_path,
                eval_value_path,
                eval_extension_path,
                eval_class_path,
                Printer,
                print_value,
                print_untyped_exception,
                print_exception_outcome,
                outval_of_value,
                install_printer,
                install_generic_printer,
                install_generic_printer$0,
                remove_printer];
       },
       add_directive,
       get_directive,
       get_directive_info,
       all_directive_names,
       try_run_directive,
       directive_table,
       directive_info_table,
       parse_toplevel_phrase,
       parse_use_file,
       print_location,
       print_error,
       print_warning,
       input_name,
       phrase_buffer,
       first_line,
       got_eof,
       read_interactive_input,
       toplevel_startup_hook,
       Startup,
       After_setup,
       add_hook,
       run_hooks,
       override_sys_argv,
       is_command_like_name,
       backtrace,
       parse_mod_use_file,
       comment_prompt_override,
       refill_lexbuf];
   runtime.caml_register_global(69, Topcommon, "Topcommon");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Topeval
//# unitInfo: Requires: Bytegen, Clflags, Compmisc, Config, Dll, Emitcode, Env, Ident, Includemod, Load_path, Location, Meta, Misc, Out_type, Persistent_env, Predef, Printinstr, Printlambda, Printtyp, Printtyped, Shape, Shape_reduce, Simplif, Stdlib, Stdlib__Bigarray, Stdlib__Format, Stdlib__Gc, Stdlib__In_channel, Stdlib__List, Stdlib__Printexc, Stdlib__Sys, Symtable, Topcommon, Translmod, Typecore, Typemod, Warnings
//# unitInfo: Force_link: true
//# shape: Topeval:[F(1),F(2),N,F(3),N,[F(1)],N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(3),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_a = "%a@.",
    cst_hv_0 = "<hv 0>",
    cst = "@ ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [17, 4, 0],
    implementation_label = "",
    Stdlib = global_data.Stdlib,
    Load_path = global_data.Load_path,
    Misc = global_data.Misc,
    Stdlib_Format = global_data.Stdlib__Format,
    Dll = global_data.Dll,
    Symtable = global_data.Symtable,
    Config = global_data.Config,
    Stdlib_List = global_data.Stdlib__List,
    Compmisc = global_data.Compmisc,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Env = global_data.Env,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_In_channel = global_data.Stdlib__In_channel,
    Topcommon = global_data.Topcommon,
    Persistent_env = global_data.Persistent_env,
    Warnings = global_data.Warnings,
    Out_type = global_data.Out_type,
    Typecore = global_data.Typecore,
    Typemod = global_data.Typemod,
    Clflags = global_data.Clflags,
    Printtyped = global_data.Printtyped,
    Includemod = global_data.Includemod,
    Shape_reduce = global_data.Shape_reduce,
    Shape = global_data.Shape,
    Translmod = global_data.Translmod,
    Printtyp = global_data.Printtyp,
    Predef = global_data.Predef,
    Location = global_data.Location,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Printlambda = global_data.Printlambda,
    Simplif = global_data.Simplif,
    Bytegen = global_data.Bytegen,
    Printinstr = global_data.Printinstr,
    Emitcode = global_data.Emitcode,
    Ident = global_data.Ident,
    toplevel_value_bindings = [0, Misc[14][4][65][1]],
    cst_unbound_at_toplevel = " unbound at toplevel";
   function getvalue(name){
    try{
     var
      b = caml_call2(Misc[14][4][65][17], name, toplevel_value_bindings[1]);
     return b;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var a = caml_call2(Stdlib[28], name, cst_unbound_at_toplevel);
     return caml_call1(Misc[1], a);
    }
   }
   function setvalue(name, v){
    toplevel_value_bindings[1] =
     caml_call3(Misc[14][4][65][2], name, v, toplevel_value_bindings[1]);
    return 0;
   }
   function eval_ident(id){
    if(caml_call1(Ident[23], id)){
     var
      name = caml_call1(Ident[16], id),
      global = caml_call1(Ident[19], id) ? [0, name] : [1, name];
     try{var a = caml_call1(Symtable[16], global); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag = exn[1];
      if(tag === Symtable[30] && 0 === exn[2][0])
       throw caml_maybe_attach_backtrace([0, Topcommon[18], name], 1);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    var name$0 = caml_call1(Translmod[9], id);
    try{
     var
      b = caml_call2(Misc[14][4][65][17], name$0, toplevel_value_bindings[1]);
     return b;
    }
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     if(exn$0 === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Topcommon[18], name$0], 1);
     throw caml_maybe_attach_backtrace(exn$0, 0);
    }
   }
   var
    EvalBase = [0, eval_ident],
    include = Topcommon[19].call(null, EvalBase),
    eval_address = include[1],
    eval_module_path = include[2],
    eval_value_path = include[3],
    eval_extension_path = include[4],
    eval_class_path = include[5],
    Printer = include[6],
    print_value = include[7],
    print_untyped_exception = include[8],
    print_exception_outcome = include[9],
    outval_of_value = include[10],
    install_printer = include[11],
    install_generic_printer = include[12],
    install_generic_printer$0 = include[13],
    remove_printer = include[14],
    may_trace = [0, 0],
    pr_item =
      caml_call1
       (Out_type[40],
        function(env, param){
         if(0 === param[0]){
          var a = param[2];
          if(typeof a[2] === "number"){
           var val_type = a[1], id = param[1];
           return [0,
                   caml_call3
                    (outval_of_value,
                     env,
                     getvalue(caml_call1(Translmod[9], id)),
                     val_type)];
          }
         }
         return 0;
        }),
    a = [0, [15, [17, 4, 0]], cst_a],
    b = [0, [15, [17, 4, 0]], cst_a],
    c = [0, [15, [17, 4, 0]], cst_a],
    e = [1, 0],
    f = [1, 0];
   function d(print_outcome, ppf, phr){
    if(0 !== phr[0]){
     var d = phr[1], pdir_arg = d[2], dir_name = d[1][1];
     return Topcommon[24].call(null, ppf, dir_name, pdir_arg);
    }
    var sstr = phr[1], oldenv = Topcommon[3][1];
    caml_call1(Typecore[18], 0);
    var
     match$2 = caml_call2(Typemod[4], oldenv, sstr),
     newenv = match$2[5],
     shape = match$2[4],
     sn = match$2[3],
     sg = match$2[2],
     str = match$2[1];
    if(Clflags[73][1]) caml_call2(Printtyped[2], ppf, str);
    var sg$0 = caml_call3(Typemod[1][1], newenv, sn, sg);
    caml_call3(Includemod[14], oldenv, sg, sg$0);
    caml_call1(Typecore[19], 0);
    var shape$0 = caml_call2(Shape_reduce[3], Env[1], shape);
    if(Clflags[74][1]) caml_call2(Shape[4], ppf, shape$0);
    var lam = caml_call1(Translmod[5], str);
    caml_call1(Warnings[12], 0);
    try{
     Topcommon[3][1] = newenv;
     if(Clflags[75][1])
      caml_call4(Stdlib_Format[143], ppf, a, Printlambda[4], lam);
     var slam = caml_call1(Simplif[1], lam);
     if(Clflags[76][1])
      caml_call4(Stdlib_Format[143], ppf, b, Printlambda[4], slam);
     var
      match = caml_call1(Bytegen[2], slam),
      can_free = match[2],
      instrs = match[1];
     if(Clflags[82][1])
      caml_call4(Stdlib_Format[143], ppf, c, Printinstr[2], instrs);
     var
      match$0 = caml_call1(Emitcode[2], instrs),
      events = match$0[3],
      reloc = match$0[2],
      code = match$0[1],
      initial_symtable = caml_call1(Symtable[24], 0);
     caml_call2(Symtable[5], code, reloc);
     caml_call1(Symtable[20], reloc);
     caml_call1(Symtable[15], 0);
     var
      initial_bindings = toplevel_value_bindings[1],
      match$1 = runtime.caml_reify_bytecode(code, [0, events], 0),
      closure = match$1[2],
      bytecode = match$1[1];
     a:
     {
      try{may_trace[1] = 1; var retval = caml_call1(closure, 0);}
      catch(x$0){
       var x = caml_wrap_exception(x$0);
       may_trace[1] = 0;
       Topcommon[6].call(null, 0);
       if(can_free) runtime.caml_static_release_bytecode(bytecode);
       toplevel_value_bindings[1] = initial_bindings;
       caml_call1(Symtable[25], initial_symtable);
       var res = [1, x];
       break a;
      }
      may_trace[1] = 0;
      if(can_free) runtime.caml_static_release_bytecode(bytecode);
      var res = [0, retval];
     }
     if(0 === res[0])
      var
       v = res[1],
       out_phr =
         print_outcome
          ? caml_call3
            (Printtyp[6],
             0,
             oldenv,
             function(param){
              if(! str[1]) return e;
              var match = Topcommon[7].call(null, str);
              if(! match) return [1, caml_call2(pr_item, oldenv, sg$0)];
              var
               exp = match[1][1],
               outv = caml_call3(outval_of_value, newenv, v, exp[4]);
              caml_call1(Out_type[9], [0, exp[4], 0]);
              var ty = caml_call2(Out_type[11], 1, exp[4]);
              return [0, outv, ty];
             })
          : f;
     else{
      var exn = res[1];
      Topcommon[3][1] = oldenv;
      if(runtime.caml_equal(exn, Stdlib[9])) runtime.caml_gc_full_major(0);
      var
       outv = caml_call3(outval_of_value, Topcommon[3][1], exn, Predef[8]),
       out_phr = [2, [0, exn, outv]];
     }
     a:
     {
      if(1 === out_phr[0] && ! out_phr[1]) break a;
      caml_call1(Location[26], ppf);
      caml_call2(Topcommon[17][1], ppf, out_phr);
     }
     if(caml_call1(Stdlib_Printexc[8], 0)){
      var match$3 = Topcommon[44][1];
      if(match$3){
       var b$0 = match$3[1];
       caml_call1(Location[26], ppf);
       caml_call2(Stdlib_Format[13], ppf, b$0);
       caml_call2(Stdlib_Format[43], ppf, 0);
       Topcommon[44][1] = 0;
      }
     }
     var g = 2 === out_phr[0] ? 0 : 1;
     return g;
    }
    catch(x){
     var x$0 = caml_wrap_exception(x);
     Topcommon[3][1] = oldenv;
     throw caml_maybe_attach_backtrace(x$0, 0);
    }
   }
   function execute_phrase(print_outcome, ppf, phr){
    try{var a = d(print_outcome, ppf, phr); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call1(Warnings[13], 0);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    Load_failed = [248, "Topeval.Load_failed", runtime.caml_fresh_oo_id(0)],
    g =
      [0,
       [18,
        [1, [0, [11, cst_hv_0, 0], cst_hv_0]],
        [11,
         "The files ",
         [2,
          0,
          [17,
           [0, cst, 1, 0],
           [11,
            "and ",
            [2,
             0,
             [17,
              [0, cst, 1, 0],
              [11, "disagree over interface ", [2, 0, [17, 0, partial]]]]]]]]]],
       "@[<hv 0>The files %s@ and %s@ disagree over interface %s@]@."],
    h =
      [0,
       [11, "Cannot find file ", [2, 0, [12, 46, [17, 4, 0]]]],
       "Cannot find file %s.@."],
    cst_cmo = ".cmo",
    i =
      [0,
       [11,
        "Cannot load required shared library ",
        [2,
         0,
         [12, 46, [17, 4, [11, "Reason: ", [2, 0, [12, 46, [17, 4, 0]]]]]]]],
       "Cannot load required shared library %s.@.Reason: %s.@."],
    j =
      [0,
       [11,
        "File ",
        [2, 0, [11, " is not a bytecode object file.", [17, 4, 0]]]],
       "File %s is not a bytecode object file.@."];
   function load_compunit(ic, filename, ppf, compunit){
    try{caml_call2(Env[125], filename, compunit[5]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Persistent_env[1][9])
      throw caml_maybe_attach_backtrace(exn, 0);
     var auth = exn[4], user = exn[3], name = exn[2];
     caml_call5(Stdlib_Format[143], ppf, g, user, auth, name);
     throw caml_maybe_attach_backtrace(Load_failed, 1);
    }
    caml_call2(Stdlib[90], ic, compunit[2]);
    var
     code =
       caml_call3
        (Stdlib_Bigarray[20][1], 12, Stdlib_Bigarray[16], compunit[3]);
    if(! caml_call4(Stdlib_In_channel[19], ic, code, 0, compunit[3]))
     throw caml_maybe_attach_backtrace(Stdlib[12], 1);
    var initial_symtable = caml_call1(Symtable[24], 0);
    caml_call2(Symtable[5], code, compunit[4]);
    caml_call1(Symtable[15], 0);
    var
     events =
       0 === compunit[9]
        ? [0]
        : (caml_call2
           (Stdlib[90], ic, compunit[9]),
          [0, caml_call1(Stdlib[89], ic)]);
    try{
     may_trace[1] = 1;
     var closure = runtime.caml_reify_bytecode(code, events, 0)[2];
     caml_call1(closure, 0);
     may_trace[1] = 0;
     var a = 0;
     return a;
    }
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     Topcommon[6].call(null, 0);
     may_trace[1] = 0;
     caml_call1(Symtable[25], initial_symtable);
     caml_call2(print_exception_outcome, ppf, exn$0);
     throw caml_maybe_attach_backtrace(Load_failed, 1);
    }
   }
   function load_file(recursive, ppf, name){
    try{var a = [0, caml_call1(Load_path[10], name)], filename = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var filename = 0;
    }
    if(filename){
     var filename$0 = filename[1], ic = caml_call1(Stdlib[80], filename$0);
     return caml_call3
             (Misc[4],
              [0, function(param){return caml_call1(Stdlib[93], ic);}],
              0,
              function(param){
               return really_load_file(recursive, ppf, name, filename$0, ic);
              });
    }
    caml_call3(Stdlib_Format[143], ppf, h, name);
    return 0;
   }
   function really_load_file(recursive, ppf, name, filename, ic){
    var
     buffer =
       caml_call2(Stdlib[86], ic, runtime.caml_ml_string_length(Config[26]));
    try{
     if(buffer === Config[26]){
      var compunit_pos = caml_call1(Stdlib[88], ic);
      caml_call2(Stdlib[90], ic, compunit_pos);
      var cu = caml_call1(Stdlib[89], ic);
      if(recursive)
       caml_call2
        (Stdlib_List[18],
         function(param){
          var reloc = param[1];
          if(1 === reloc[0]){
           var cu = reloc[1];
           if(! caml_call1(Symtable[17], [0, cu])){
            var
             b = caml_call1(Symtable[1][1], cu),
             file = caml_call2(Stdlib[28], b, cst_cmo);
            try{var file$0 = caml_call1(Load_path[11], file);}
            catch(exn$0){
             var exn = caml_wrap_exception(exn$0);
             if(exn === Stdlib[8]) return 0;
             throw caml_maybe_attach_backtrace(exn, 0);
            }
            var a = 1 - load_file(recursive, ppf, file$0);
            if(a) throw caml_maybe_attach_backtrace(Load_failed, 1);
            return a;
           }
          }
          return 0;
         },
         cu[4]);
      load_compunit(ic, filename, ppf, cu);
      var a = 1;
     }
     else if(buffer === Config[27]){
      var toc_pos = caml_call1(Stdlib[88], ic);
      caml_call2(Stdlib[90], ic, toc_pos);
      var lib = caml_call1(Stdlib[89], ic);
      caml_call2
       (Stdlib_List[18],
        function(dllib){
         var name = caml_call1(Dll[1], dllib);
         try{var a = caml_call2(Dll[2], 1, [0, name, 0]); return a;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0), tag = exn[1];
          if(tag !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
          var reason = exn[2];
          caml_call4(Stdlib_Format[143], ppf, i, name, reason);
          throw caml_maybe_attach_backtrace(Load_failed, 1);
         }
        },
        lib[5]);
      caml_call2
       (Stdlib_List[18],
        function(a){return load_compunit(ic, filename, ppf, a);},
        lib[1]);
      var a = 1;
     }
     else{caml_call3(Stdlib_Format[143], ppf, j, name); var a = 0;}
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Load_failed) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function init(param){
    var crc_intfs = caml_call1(Symtable[14], 0);
    caml_call3(Compmisc[1], 0, 0, 0);
    caml_call2(Env[125], Stdlib_Sys[1], crc_intfs);
    return 0;
   }
   var
    Topeval =
      [0,
       getvalue,
       setvalue,
       implementation_label,
       execute_phrase,
       may_trace,
       EvalBase,
       eval_address,
       eval_module_path,
       eval_value_path,
       eval_extension_path,
       eval_class_path,
       Printer,
       print_value,
       print_untyped_exception,
       print_exception_outcome,
       outval_of_value,
       install_printer,
       install_generic_printer,
       install_generic_printer$0,
       remove_printer,
       load_file,
       init];
   runtime.caml_register_global(48, Topeval, "Topeval");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Trace
//# unitInfo: Requires: Asttypes, Ctype, Meta, Misc, Predef, Printtyp, Stdlib, Stdlib__Format, Stdlib__Obj, Topcommon, Topeval, Types
//# unitInfo: Force_link: true
//# shape: Trace:[N,F(1),F(1),F(2),F(4)->F(3),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = " -->",
    cst$1 = " <--",
    cst_raises = " raises",
    cst$4 = "*",
    cst_2 = "<2>",
    cst$2 = "@ ",
    cst_2_a_a = "@[<2>%a -->@ %a@]@.",
    cst_2_a_a_a = "@[<2>%a <--@ %a%a@]@.",
    cst_2_a_raises_a = "@[<2>%a raises@ %a@]@.",
    cst_toplevel_byte_trace_ml = "toplevel/byte/trace.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$4,
    cst$0 = cst$4,
    Topeval = global_data.Topeval,
    Topcommon = global_data.Topcommon,
    Printtyp = global_data.Printtyp,
    Stdlib_Format = global_data.Stdlib__Format,
    Predef = global_data.Predef,
    Ctype = global_data.Ctype,
    Types = global_data.Types,
    Stdlib = global_data.Stdlib,
    Misc = global_data.Misc,
    Assert_failure = global_data.Assert_failure,
    Asttypes = global_data.Asttypes,
    Stdlib_Obj = global_data.Stdlib__Obj,
    traced_functions = [0, 0],
    a = [0, cst_toplevel_byte_trace_ml, 47, 2],
    b = [0, cst_toplevel_byte_trace_ml, 51, 2],
    c = [0, [2, 0, [12, 58, 0]], "%s:"],
    d =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [11, cst_raises, [17, [0, cst$2, 1, 0], [15, [17, 0, [17, 4, 0]]]]]]],
       cst_2_a_raises_a],
    e =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [11, cst$1, [17, [0, cst$2, 1, 0], [15, [15, [17, 0, [17, 4, 0]]]]]]]],
       cst_2_a_a_a],
    f =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [11, cst$3, [17, [0, cst$2, 1, 0], [15, [17, 0, [17, 4, 0]]]]]]],
       cst_2_a_a],
    cst_Trace_instrument_result = "Trace.instrument_result";
   function is_traced(clos){
    var param = traced_functions[1];
    for(;;){
     if(! param) return 0;
     var rem = param[2], tf = param[1];
     if(tf[2] === clos) return [0, tf[1]];
     param = rem;
    }
   }
   function get_code_pointer(cls){
    var
     t = caml_obj_tag(cls),
     b = t === Stdlib_Obj[9] ? 1 : 0,
     c = b || (t === Stdlib_Obj[11] ? 1 : 0);
    if(c) return runtime.caml_obj_raw_field(cls, 0);
    throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
   }
   function set_code_pointer(cls, ptr){
    var
     t = caml_obj_tag(cls),
     a = t === Stdlib_Obj[9] ? 1 : 0,
     c = a || (t === Stdlib_Obj[11] ? 1 : 0);
    if(c) return runtime.caml_obj_set_raw_field(cls, 0, ptr);
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   }
   function print_label(ppf, l){
    var a = 0 !== l ? 1 : 0;
    if(! a) return a;
    var b = caml_call1(Asttypes[1], l);
    return caml_call3(Stdlib_Format[143], ppf, c, b);
   }
   function instrument_result(env, name, ppf, clos_typ){
    var
     a = caml_call2(Ctype[75], env, clos_typ),
     match = caml_call1(Types[9], a);
    if(typeof match !== "number" && 1 === match[0]){
     var t2 = match[3], t1 = match[2], l = match[1];
     switch(name[0]){
       case 0:
        var s = name[1], starred_name = [0, caml_call2(Stdlib[28], s, cst)];
        break;
       case 1:
        var
         s$0 = name[2],
         lid = name[1],
         starred_name = [1, lid, caml_call2(Stdlib[28], s$0, cst$0)];
        break;
       default:
        var starred_name = caml_call1(Misc[1], cst_Trace_instrument_result);
     }
     var trace_res = instrument_result(env, starred_name, ppf, t2);
     return function(clos_val){
      return function(arg){
       if(! Topeval[5][1]) return caml_call1(clos_val, arg);
       Topeval[5][1] = 0;
       try{
        var c = caml_call2(Topeval[13], Topcommon[3][1], arg);
        caml_call8
         (Stdlib_Format[143],
          ppf,
          e,
          Printtyp[7],
          starred_name,
          print_label,
          l,
          c,
          t1);
        Topeval[5][1] = 1;
        var res = caml_call1(clos_val, arg);
        Topeval[5][1] = 0;
        var g = caml_call2(Topeval[13], Topcommon[3][1], res);
        caml_call6
         (Stdlib_Format[143], ppf, f, Printtyp[7], starred_name, g, t2);
        Topeval[5][1] = 1;
        var h = trace_res(res);
        return h;
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        Topeval[5][1] = 0;
        var a = Predef[8], b = caml_call2(Topeval[13], Topcommon[3][1], exn);
        caml_call6
         (Stdlib_Format[143], ppf, d, Printtyp[7], starred_name, b, a);
        Topeval[5][1] = 1;
        throw caml_maybe_attach_backtrace(exn, 0);
       }};};
    }
    return function(v){return v;};
   }
   var
    Dummy = [248, "Trace.Dummy", runtime.caml_fresh_oo_id(0)],
    g = [0, cst_toplevel_byte_trace_ml, 144, 9],
    h =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [11, cst_raises, [17, [0, cst$2, 1, 0], [15, [17, 0, [17, 4, 0]]]]]]],
       cst_2_a_raises_a],
    i =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [11, cst$1, [17, [0, cst$2, 1, 0], [15, [15, [17, 0, [17, 4, 0]]]]]]]],
       cst_2_a_a_a],
    j =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [11, cst$3, [17, [0, cst$2, 1, 0], [15, [17, 0, [17, 4, 0]]]]]]],
       cst_2_a_a],
    k = [0, cst_toplevel_byte_trace_ml, 119, 24],
    cst_Trace_find_traced_closure = "Trace.find_traced_closure";
   function instrument_closure(env, name, ppf, clos_typ){
    var
     a = caml_call2(Ctype[75], env, clos_typ),
     match = caml_call1(Types[9], a);
    if(typeof match !== "number" && 1 === match[0]){
     var
      t2 = match[3],
      t1 = match[2],
      l = match[1],
      trace_res = instrument_result(env, name, ppf, t2);
     return function(actual_code, closure, arg){
      if(! Topeval[5][1])
       try{
        var
         a = runtime.caml_invoke_traced_function(actual_code, closure, arg);
        return a;
       }
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Dummy)
         throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
      Topeval[5][1] = 0;
      try{
       var d = caml_call2(Topeval[13], Topcommon[3][1], arg);
       caml_call8
        (Stdlib_Format[143], ppf, i, Printtyp[7], name, print_label, l, d, t1);
       Topeval[5][1] = 1;
       var
        res = runtime.caml_invoke_traced_function(actual_code, closure, arg);
       Topeval[5][1] = 0;
       var e = caml_call2(Topeval[13], Topcommon[3][1], res);
       caml_call6(Stdlib_Format[143], ppf, j, Printtyp[7], name, e, t2);
       Topeval[5][1] = 1;
       var f = trace_res(res);
       return f;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       Topeval[5][1] = 0;
       var b = Predef[8], c = caml_call2(Topeval[13], Topcommon[3][1], exn);
       caml_call6(Stdlib_Format[143], ppf, h, Printtyp[7], name, c, b);
       Topeval[5][1] = 1;
       throw caml_maybe_attach_backtrace(exn, 0);
      }};
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
   }
   function print_trace(clos, arg){
    var param = traced_functions[1];
    for(;;){
     if(param){
      var rem = param[2], f = param[1];
      if(f[2] !== clos){param = rem; continue;}
      var f$0 = f;
     }
     else
      var f$0 = caml_call1(Misc[1], cst_Trace_find_traced_closure);
     return caml_call3(f$0[4], f$0[3], clos, arg);
    }
   }
   var
    Trace =
      [0,
       traced_functions,
       is_traced,
       get_code_pointer,
       set_code_pointer,
       instrument_closure,
       print_trace];
   runtime.caml_register_global(28, Trace, "Trace");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Toploop
//# unitInfo: Requires: Btype, CamlinternalLazy, Clflags, Compenv, Compmisc, Config, Env, Format_doc, Lexer, Load_path, Location, Misc, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Filename, Stdlib__Format, Stdlib__Fun, Stdlib__In_channel, Stdlib__Lazy, Stdlib__Lexing, Stdlib__List, Stdlib__Option, Stdlib__Printexc, Stdlib__Printf, Stdlib__String, Stdlib__Sys, Topcommon, Topeval, Typetexp, Warnings
//# unitInfo: Force_link: true
//# shape: Toploop:[F(1),F(2),F(1)*,F(3),F(1),F(3),F(3),F(1),F(1),F(1),N,N,N,F(1),N,F(3),F(2),F(2),F(2),F(2),F(2),F(2),N,N,N,N,F(1),F(2),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),N,F(1),N,N,F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst_ocamlinit = ".ocamlinit",
    cst_toplevel$1 = "//toplevel//",
    cst_Interrupted = "Interrupted.",
    cst_Interrupted$0 = "Interrupted.@.",
    cst_ocaml$1 = "ocaml",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_get = runtime.caml_string_get,
    caml_sys_file_exists = runtime.caml_sys_file_exists,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$5,
    cst$4 = " - ",
    cst_HOME = "HOME",
    ocamlinit = cst_ocamlinit,
    cst$1 = cst$5,
    cst$2 = cst$5,
    cst$0 = cst$5,
    cst = cst$5,
    Stdlib = global_data.Stdlib,
    Location = global_data.Location,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Option = global_data.Stdlib__Option,
    Topcommon = global_data.Topcommon,
    Env = global_data.Env,
    Typetexp = global_data.Typetexp,
    Compenv = global_data.Compenv,
    Topeval = global_data.Topeval,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Format = global_data.Stdlib__Format,
    Clflags = global_data.Clflags,
    Misc = global_data.Misc,
    Format_doc = global_data.Format_doc,
    Config = global_data.Config,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Btype = global_data.Btype,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Warnings = global_data.Warnings,
    Lexer = global_data.Lexer,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Compmisc = global_data.Compmisc,
    Load_path = global_data.Load_path,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_In_channel = global_data.Stdlib__In_channel,
    Stdlib_String = global_data.Stdlib__String,
    set_paths = Topcommon[1],
    toplevel_env = Topcommon[3],
    initialize_toplevel_env = Topcommon[4],
    preprocess_phrase = Topcommon[5],
    record_backtrace = Topcommon[6],
    max_printer_depth = Topcommon[8],
    max_printer_steps = Topcommon[9],
    print_out_value = Topcommon[10],
    print_out_type = Topcommon[11],
    print_out_class_type = Topcommon[12],
    print_out_module_type = Topcommon[13],
    print_out_type_extension = Topcommon[14],
    print_out_sig_item = Topcommon[15],
    print_out_signature = Topcommon[16],
    print_out_phrase = Topcommon[17],
    add_directive = Topcommon[20],
    get_directive = Topcommon[21],
    get_directive_info = Topcommon[22],
    all_directive_names = Topcommon[23],
    directive_table = Topcommon[25],
    directive_info_table = Topcommon[26],
    parse_toplevel_phrase = Topcommon[27],
    parse_use_file = Topcommon[28],
    print_location = Topcommon[29],
    print_error = Topcommon[30],
    print_warning = Topcommon[31],
    input_name = Topcommon[32],
    phrase_buffer = Topcommon[33],
    first_line = Topcommon[34],
    read_interactive_input = Topcommon[36],
    toplevel_startup_hook = Topcommon[37],
    Startup = Topcommon[38],
    After_setup = Topcommon[39],
    add_hook = Topcommon[40],
    run_hooks = Topcommon[41],
    override_sys_argv = Topcommon[42],
    parse_mod_use_file = Topcommon[45],
    comment_prompt_override = Topcommon[46],
    refill_lexbuf = Topcommon[47],
    getvalue = Topeval[1],
    setvalue = Topeval[2],
    execute_phrase = Topeval[4],
    may_trace = Topeval[5],
    eval_module_path = Topeval[8],
    eval_value_path = Topeval[9],
    eval_extension_path = Topeval[10],
    eval_class_path = Topeval[11],
    print_value = Topeval[13],
    print_untyped_exception = Topeval[14],
    print_exception_outcome = Topeval[15],
    install_printer = Topeval[17],
    install_generic_printer = Topeval[18],
    install_generic_printer$0 = Topeval[19],
    remove_printer = Topeval[20],
    load_file = Topeval[21],
    use_print_results = [0, 1],
    c = [0, [11, cst_Interrupted, [17, 4, 0]], cst_Interrupted$0],
    cst_toploop_ml = "_toploop.ml",
    cst_ocaml = cst_ocaml$1,
    d = [0, [2, 0, [11, " > ", [2, 0, 0]]], "%s > %s"],
    cst_command_output = "(command-output)",
    e =
      [0,
       [11, "Command exited with code ", [4, 0, 0, 0, [12, 46, [17, 4, 0]]]],
       "Command exited with code %d.@."],
    cst_stdin = "(stdin)",
    f =
      [0,
       [11, "Cannot find file ", [2, 0, [12, 46, [17, 4, 0]]]],
       "Cannot find file %s.@."],
    cst_command_line_input = "(command-line input)";
   function filename_of_input(param){
    if(typeof param !== "number" && 0 === param[0]){var name = param[1]; return name;}
    return cst;
   }
   function use_lexbuf(ppf, wrap_in_module, lb, modpath, filename){
    caml_call1(Warnings[13], 0);
    caml_call2(Location[4], lb, filename);
    caml_call1(Lexer[3], lb);
    return caml_call2
            (Misc[46],
             [0,
              [0, Location[13], filename],
              [0, [0, Location[14], [0, lb]], 0]],
             function(param){
              try{
               var
                a =
                  wrap_in_module
                   ? parse_mod_use_file(modpath, lb)
                   : caml_call1(parse_use_file[1], lb);
               caml_call2
                (Stdlib_List[18],
                 function(ph){
                  var
                   ph$0 = preprocess_phrase(ppf, ph),
                   a = 1 - execute_phrase(use_print_results[1], ppf, ph$0);
                  if(a) throw caml_maybe_attach_backtrace(Stdlib[3], 1);
                  return a;
                 },
                 a);
               var b = 1;
               return b;
              }
              catch(x$0){
               var x = caml_wrap_exception(x$0);
               return x === Stdlib[3]
                       ? 0
                       : x
                         === Stdlib_Sys[44]
                         ? (caml_call2(Stdlib_Format[143], ppf, c), 0)
                         : (caml_call2(Location[60], ppf, x), 0);
              }
             });
   }
   function a(ppf, wrap_in_module, modpath, filepath, filename){
    var
     source =
       caml_call2(Stdlib_In_channel[5], filepath, Stdlib_In_channel[14]),
     lexbuf = caml_call2(Stdlib_Lexing[3], 0, source);
    return use_lexbuf(ppf, wrap_in_module, lexbuf, modpath, filename);
   }
   function use_output(ppf, command){
    var fn = caml_call3(Stdlib_Filename[16], 0, cst_ocaml, cst_toploop_ml);
    return caml_call3
            (Misc[4],
             [0,
              function(param){
               try{var a = runtime.caml_sys_remove(fn); return a;}
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0), tag = exn[1];
                if(tag === Stdlib[11]) return 0;
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              }],
             0,
             function(param){
              var
               b = caml_call1(Stdlib_Filename[21], fn),
               n =
                 caml_call4
                  (Stdlib_Printf[10],
                   runtime.caml_sys_system_command,
                   d,
                   command,
                   b);
              return 0 === n
                      ? a(ppf, 0, cst$0, fn, cst_command_output)
                      : (caml_call3(Stdlib_Format[143], ppf, e, n), 0);
             });
   }
   function b(ppf, wrap_in_module, input){
    if(typeof input === "number"){
     var lexbuf = caml_call2(Stdlib_Lexing[2], 0, Stdlib[38]);
     return use_lexbuf(ppf, wrap_in_module, lexbuf, cst$1, cst_stdin);
    }
    if(0 !== input[0]){
     var value = input[1], lexbuf$0 = caml_call2(Stdlib_Lexing[3], 0, value);
     return use_lexbuf
             (ppf, wrap_in_module, lexbuf$0, cst$2, cst_command_line_input);
    }
    var name = input[1];
    try{var filename = caml_call1(Load_path[10], name);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     caml_call3(Stdlib_Format[143], ppf, f, name);
     return 0;
    }
    return a(ppf, wrap_in_module, name, filename, filename);
   }
   function mod_use_input(ppf, input){return b(ppf, 1, input);}
   function use_input(ppf, input){return b(ppf, 0, input);}
   function use_file(ppf, name){return use_input(ppf, [0, name]);}
   function use_silently(ppf, input){
    return caml_call2
            (Misc[46],
             [0, [0, use_print_results, 0], 0],
             function(param){return use_input(ppf, input);});
   }
   var g = 0;
   function load_file$0(a, b){return load_file(g, a, b);}
   function run_script(ppf, filename, args){
    Clflags[20][1] = 1;
    override_sys_argv(args);
    var
     filename$0 = filename_of_input(filename),
     a = [0, caml_call1(Stdlib_Filename[14], filename$0)];
    caml_call3(Compmisc[1], 0, a, 0);
    Stdlib_Sys[3][1] = 0;
    run_hooks(After_setup);
    if(typeof filename === "number" || ! (0 === filename[0]))
     var explicit_name = filename;
    else
     var
      name = filename[1],
      explicit_name =
        name !== cst$5
         ? caml_call1
            (Stdlib_Filename[6], name)
           ? [0, caml_call2(Stdlib_Filename[4], Stdlib_Filename[1], name)]
           : filename
         : filename;
    return use_silently(ppf, explicit_name);
   }
   var
    l =
      [0,
       [11, "Uncaught exception: ", [2, 0, [12, 10, 0]]],
       "Uncaught exception: %s\n"],
    cst_help = "#help;;",
    j =
      [0,
       [11,
        "OCaml version ",
        [2,
         0,
         [2,
          0,
          [2,
           0,
           [17,
            4,
            [11, "Enter ", [15, [11, " for help.", [17, 4, [17, 4, 0]]]]]]]]]],
       "OCaml version %s%s%s@.Enter %a for help.@.@."],
    cst_toplevel = cst_toplevel$1,
    cst_toplevel$0 = cst_toplevel$1,
    k = [0, [11, cst_Interrupted, [17, 4, 0]], cst_Interrupted$0],
    i =
      [0,
       [11, 'Init file not found: "', [2, 0, [11, '".', [17, 4, 0]]]],
       'Init file not found: "%s".@.'],
    cst_XDG_CONFIG_DIRS = "XDG_CONFIG_DIRS",
    h = [0, "/etc/xdg", 0],
    cst_config = ".config",
    cst_XDG_CONFIG_HOME = "XDG_CONFIG_HOME",
    cst_init_ml = "init.ml",
    cst_ocaml$0 = cst_ocaml$1,
    cst_The_ocamltoplevel_cma_libr =
      "The ocamltoplevel.cma library from compiler-libs cannot be loaded inside the OCaml toplevel",
    cst_Toploop_PPerror = "Toploop.PPerror";
   if(Stdlib_Sys[3][1]) caml_call1(Stdlib[1], cst_The_ocamltoplevel_cma_libr);
   Stdlib_Sys[3][1] = 1;
   Topeval[22].call(null, 0);
   function split_path_win32(path){
    var buf = caml_call1(Stdlib_Buffer[1], 256);
    function get_contents(param){
     var s = caml_call1(Stdlib_Buffer[2], buf);
     caml_call1(Stdlib_Buffer[8], buf);
     return s;
    }
    function add_segment(segment_begin, i){
     return caml_call4
             (Stdlib_Buffer[18],
              buf,
              path,
              segment_begin,
              i - segment_begin | 0);
    }
    var
     len = runtime.caml_ml_string_length(path),
     segment_begin = 0,
     terminator = 59,
     i = 0;
    for(;;){
     if(len <= i) return [0, get_contents(add_segment(segment_begin, i)), 0];
     var ch = caml_string_get(path, i);
     if(ch === terminator){
      add_segment(segment_begin, i);
      if(59 === ch) break;
      var i$1 = i + 1 | 0, segment_begin$1 = i + 1 | 0;
      segment_begin = segment_begin$1;
      terminator = 59;
      i = i$1;
     }
     else if(34 === ch){
      add_segment(segment_begin, i);
      var i$2 = i + 1 | 0, segment_begin$2 = i + 1 | 0;
      segment_begin = segment_begin$2;
      terminator = 34;
      i = i$2;
     }
     else{var i$3 = i + 1 | 0; i = i$3;}
    }
    var
     block = [0, get_contents(0), 24029],
     i$0 = i + 1 | 0,
     segment_begin$0 = i + 1 | 0,
     dst = block,
     offset = 1,
     segment_begin$3 = segment_begin$0,
     terminator$0 = 59,
     i$4 = i$0;
    for(;;){
     if(len <= i$4){
      dst[offset + 1] =
       [0, get_contents(add_segment(segment_begin$3, i$4)), 0];
      return block;
     }
     var ch$0 = caml_string_get(path, i$4);
     if(ch$0 === terminator$0){
      add_segment(segment_begin$3, i$4);
      if(59 === ch$0){
       var dst$0 = [0, get_contents(0), 24029];
       dst[offset + 1] = dst$0;
       var i$5 = i$4 + 1 | 0, segment_begin$4 = i$4 + 1 | 0;
       dst = dst$0;
       offset = 1;
       segment_begin$3 = segment_begin$4;
       terminator$0 = 59;
       i$4 = i$5;
      }
      else{
       var i$6 = i$4 + 1 | 0, segment_begin$5 = i$4 + 1 | 0;
       segment_begin$3 = segment_begin$5;
       terminator$0 = 59;
       i$4 = i$6;
      }
     }
     else if(34 === ch$0){
      add_segment(segment_begin$3, i$4);
      var i$7 = i$4 + 1 | 0, segment_begin$6 = i$4 + 1 | 0;
      segment_begin$3 = segment_begin$6;
      terminator$0 = 34;
      i$4 = i$7;
     }
     else{var i$8 = i$4 + 1 | 0; i$4 = i$8;}
    }
   }
   var
    split_path =
      Stdlib_Sys[7] ? split_path_win32 : caml_call1(Stdlib_String[17], 58),
    PPerror = [248, cst_Toploop_PPerror, runtime.caml_fresh_oo_id(0)];
   function look_ahead(print_warnings, lb){
    var
     a = lb[12],
     b = lb[11],
     c = caml_call1(Stdlib_Array[7], lb[10]),
     d = lb[9],
     e = lb[8],
     f = lb[7],
     g = lb[6],
     h = lb[5],
     i = lb[4],
     j = lb[3],
     shadow =
       [0,
        function(newlb){newlb[9] = 1; return 0;},
        caml_call1(Stdlib_Bytes[4], lb[2]),
        j,
        i,
        h,
        g,
        f,
        e,
        d,
        c,
        b,
        a];
    return caml_call2
            (Misc[46],
             [0,
              [0, Lexer[8], print_warnings],
              [0, [0, Location[34], function(param){return Location[30];}], 0]],
             function(param){return caml_call1(Lexer[2], shadow);});
   }
   function process_phrase(ppf, snap, phr){
    snap[1] = caml_call1(Btype[54], 0);
    caml_call1(Warnings[13], 0);
    var phr$0 = preprocess_phrase(ppf, phr);
    caml_call1(Env[116], 0);
    execute_phrase(1, ppf, phr$0);
    return 0;
   }
   function loop(ppf){
    caml_call1(Misc[60][8], Clflags[162][1]);
    Clflags[20][1] = 1;
    Location[39][1] = ppf;
    if(1 - Clflags[50][1]){
     var
      c = caml_call1(Format_doc[3], Misc[60][4]),
      d = Topeval[3],
      g = Topeval[3] === cst$5 ? cst$3 : cst$4;
     caml_call7(Stdlib_Format[143], ppf, j, Config[1], g, d, c, cst_help);
    }
    var lb = caml_call2(Stdlib_Lexing[4], 0, refill_lexbuf);
    caml_call2(Location[4], lb, cst_toplevel);
    Location[13][1] = cst_toplevel$0;
    Location[14][1] = [0, lb];
    Location[15][1] = [0, phrase_buffer];
    caml_call1(Stdlib_Sys[45], 1);
    run_hooks(After_setup);
    if(! Clflags[49][1]){
     var match = Clflags[48][1];
     if(match){
      var f = match[1];
      if(caml_sys_file_exists(f))
       use_silently(ppf, [0, f]);
      else
       caml_call3(Stdlib_Format[143], ppf, i, f);
     }
     else{
      if(caml_sys_file_exists(cst_ocamlinit))
       var match$0 = [0, ocamlinit];
      else
       var
        init_ml = caml_call2(Stdlib_Filename[4], cst_ocaml$0, cst_init_ml),
        getenv =
          function(var$){
           var v = caml_call1(Stdlib_Sys[2], var$);
           if(v && v[1] === cst$5) return 0;
           return v;
          },
        is_absolute = caml_call1(Stdlib_Fun[4], Stdlib_Filename[5]),
        exists_in_dir =
          function(file, dir){
           var file$0 = caml_call2(Stdlib_Filename[4], dir, file);
           return caml_sys_file_exists(file$0) ? [0, file$0] : 0;
          },
        windows_xdg_defaults =
          caml_call1(Stdlib_Lazy[6], runtime.caml_xdg_defaults),
        check_xdg_config_home =
          function(param){
           var match = getenv(cst_XDG_CONFIG_HOME);
           if(match){
            var dir = match[1];
            if(caml_call1(is_absolute, dir))
             return exists_in_dir(init_ml, dir);
           }
           if(Stdlib_Sys[7]){
            var a = caml_obj_tag(windows_xdg_defaults);
            a:
            if(250 === a)
             var match$0 = windows_xdg_defaults[1];
            else{
             if(246 !== a && 244 !== a){
              var match$0 = windows_xdg_defaults;
              break a;
             }
             var
              match$0 = caml_call1(CamlinternalLazy[2], windows_xdg_defaults);
            }
            if(match$0)
             var dir$0 = match$0[1], default$ = [0, dir$0];
            else
             var default$ = 0;
           }
           else
            var
             b = getenv(cst_HOME),
             default$ =
               caml_call2
                (Stdlib_Option[7],
                 function(dir){
                  return caml_call2(Stdlib_Filename[4], dir, cst_config);
                 },
                 b);
           return caml_call2
                   (Stdlib_Option[5],
                    default$,
                    function(a){return exists_in_dir(init_ml, a);});
          },
        check_xdg_config_dirs =
          function(param){
           var match = getenv(cst_XDG_CONFIG_DIRS);
           if(match)
            var
             entry = match[1],
             b = caml_call1(split_path, entry),
             dirs_from_env = caml_call2(Stdlib_List[44], is_absolute, b);
           else
            var dirs_from_env = 0;
           a:
           if(0 === dirs_from_env)
            if(Stdlib_Sys[7]){
             var a = caml_obj_tag(windows_xdg_defaults);
             if(250 === a)
              var search = windows_xdg_defaults[1];
             else{
              if(246 !== a && 244 !== a){
               var search = windows_xdg_defaults;
               break a;
              }
              var
               search = caml_call1(CamlinternalLazy[2], windows_xdg_defaults);
             }
            }
            else
             var search = h;
           else
            var search = dirs_from_env;
           return caml_call2
                   (Stdlib_List[42],
                    function(a){return exists_in_dir(init_ml, a);},
                    search);
          },
        check_home =
          function(param){
           var a = getenv(cst_HOME);
           return caml_call2
                   (Stdlib_Option[5],
                    a,
                    function(a){return exists_in_dir(ocamlinit, a);});
          },
        match$0 =
          caml_call2
           (Stdlib_List[42],
            function(f){return caml_call1(f, 0);},
            [0,
             check_xdg_config_home,
             [0, check_xdg_config_dirs, [0, check_home, 0]]]);
      if(match$0){var file = match$0[1]; use_silently(ppf, [0, file]);}
     }
    }
    for(;;){
     var snap = [0, caml_call1(Btype[54], 0)];
     try{
      caml_call1(Stdlib_Lexing[15], lb);
      caml_call1(Stdlib_Buffer[9], phrase_buffer);
      caml_call1(Location[17], 0);
      first_line[1] = 1;
      a:
      {
       b:
       {
        var phrs = 0;
        for(;;){
         try{var phr = caml_call1(parse_toplevel_phrase[1], lb);}
         catch(e$0){var e = caml_wrap_exception(e$0); break;}
         if(10 === caml_bytes_get(lb[2], lb[6]))
          var a = 1;
         else
          for(;;){
           if(! lb[9] && 10 !== caml_bytes_get(lb[2], lb[3] - 1 | 0)){caml_call1(lb[1], lb); continue;}
           try{var val = look_ahead(0, lb);}
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn[1] === Lexer[4]){
             var b = exn[2];
             if(typeof b !== "number" && b[0] - 3 >>> 0 < 2){
              caml_call2
               (Misc[46],
                [0, [0, comment_prompt_override, 1], 0],
                function(param){return caml_call1(lb[1], lb);});
              continue;
             }
            }
            var a = 0;
            break;
           }
           if(typeof val === "number" && 78 === val){var a = 1; break;}
           var a = 0;
           break;
          }
         if(a) break b;
         var phrs$0 = [0, phr, phrs];
         phrs = phrs$0;
        }
        if(e === Stdlib[3]) throw caml_maybe_attach_backtrace(PPerror, 1);
        caml_call2(Location[60], ppf, e);
        var phrs$1 = 0;
        break a;
       }
       look_ahead(1, lb);
       var phrs$1 = caml_call1(Stdlib_List[10], [0, phr, phrs]);
      }
      if(phrs$1){
       var rest = phrs$1[2], phr$0 = phrs$1[1];
       process_phrase(ppf, snap, phr$0);
       if(0 !== rest){
        let rest$0 = rest, snap$0 = snap;
        var
         process =
           function(ph){
            caml_call1(Location[17], 0);
            return process_phrase(ppf, snap$0, ph);
           };
        let process$0 = process;
        caml_call2
         (Misc[46],
          [0, [0, Location[34], function(param){return Location[30];}], 0],
          function(param){
           return caml_call2(Stdlib_List[18], process$0, rest$0);
          });
       }
      }
     }
     catch(x$0){
      var x = caml_wrap_exception(x$0);
      if(x === Stdlib[12])
       throw caml_maybe_attach_backtrace([0, Compenv[1], 0], 1);
      if(x === Stdlib_Sys[44]){
       caml_call2(Stdlib_Format[143], ppf, k);
       caml_call1(Btype[55], snap[1]);
      }
      else if(x !== PPerror){
       caml_call2(Location[60], ppf, x);
       caml_call1(Btype[55], snap[1]);
      }
     }
    }
   }
   var preload_objects = [0, 0];
   function prepare(ppf, input, param){
    var
     dir =
       caml_call2
        (Stdlib_Option[7],
         function(inp){
          var a = filename_of_input(inp);
          return caml_call1(Stdlib_Filename[14], a);
         },
         input);
    Topcommon[1].call(null, 0, dir, 0);
    try{initialize_toplevel_env(0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Env[131] && exn[1] !== Typetexp[10])
      throw caml_maybe_attach_backtrace(exn, 0);
     caml_call2(Location[60], ppf, exn);
     throw caml_maybe_attach_backtrace([0, Compenv[1], 2], 1);
    }
    try{
     var
      c = caml_call2(Stdlib[37], preload_objects[1], Compenv[15][1]),
      objects = caml_call1(Stdlib_List[10], c),
      d = 0,
      e = Topeval[21],
      res =
        caml_call2
         (Stdlib_List[33], function(a){return e(d, ppf, a);}, objects);
     Topcommon[41].call(null, Topcommon[38]);
     return res;
    }
    catch(x$1){
     var x = caml_wrap_exception(x$1);
     try{caml_call2(Location[60], ppf, x); var b = 0; return b;}
     catch(x){
      var
       x$0 = caml_wrap_exception(x),
       a = caml_call1(Stdlib_Printexc[1], x$0);
      caml_call3(Stdlib_Format[143], ppf, l, a);
      return 0;
     }
    }
   }
   var
    Toploop =
      [0,
       getvalue,
       setvalue,
       filename_of_input,
       set_paths,
       loop,
       run_script,
       add_directive,
       get_directive,
       get_directive_info,
       all_directive_names,
       directive_table,
       directive_info_table,
       toplevel_env,
       initialize_toplevel_env,
       print_exception_outcome,
       execute_phrase,
       preprocess_phrase,
       use_input,
       use_output,
       use_silently,
       mod_use_input,
       use_file,
       eval_module_path,
       eval_value_path,
       eval_extension_path,
       eval_class_path,
       record_backtrace,
       load_file$0,
       print_value,
       print_untyped_exception,
       install_printer,
       install_generic_printer,
       install_generic_printer$0,
       remove_printer,
       max_printer_depth,
       max_printer_steps,
       parse_toplevel_phrase,
       parse_use_file,
       print_location,
       print_error,
       print_warning,
       input_name,
       print_out_value,
       print_out_type,
       print_out_class_type,
       print_out_module_type,
       print_out_type_extension,
       print_out_sig_item,
       print_out_signature,
       print_out_phrase,
       read_interactive_input,
       toplevel_startup_hook,
       Startup,
       After_setup,
       add_hook,
       run_hooks,
       may_trace,
       override_sys_argv,
       split_path,
       preload_objects,
       prepare];
   runtime.caml_register_global(67, Toploop, "Toploop");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Topprinters
//# unitInfo: Requires: Ctype, Ident, Predef, Types
//# unitInfo: Force_link: true
//# shape: Topprinters:[F(2),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ident = global_data.Ident,
    Ctype = global_data.Ctype,
    Types = global_data.Types,
    Predef = global_data.Predef;
   function type_arrow(ta, tb){
    var a = [1, 0, ta, tb, caml_call1(Types[3], 0)];
    return caml_call1(Ctype[31], a);
   }
   var
    type_unit = Predef[7],
    cst_Stdlib_Format = "Stdlib__Format",
    cst_formatter = "formatter";
   function printer_type_old(alpha){return type_arrow(alpha, type_unit);}
   function printer_type_new(alpha){
    var
     a = type_arrow(alpha, type_unit),
     format = [0, caml_call1(Ident[13], cst_Stdlib_Format)];
    return type_arrow(caml_call2(Ctype[37], [1, format, cst_formatter], 0), a);
   }
   var Topprinters = [0, type_arrow, printer_type_new, printer_type_old];
   runtime.caml_register_global(6, Topprinters, "Topprinters");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Topdirs
//# unitInfo: Requires: Ast_helper, Btype, Clflags, Compenv, Config, Ctype, Dll, Env, Ident, Load_path, Location, Misc, Out_type, Path, Predef, Printtyp, Stdlib, Stdlib__Arg, Stdlib__Filename, Stdlib__Format, Stdlib__Hashtbl, Stdlib__List, Stdlib__Option, Stdlib__String, Stdlib__Sys, Topeval, Toploop, Topprinters, Types, Warnings
//# unitInfo: Force_link: true
//# shape: Topdirs:[F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),N,N,N,N,N,N,N,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_hov_2 = "<hov 2>",
    cst_Undocumented = "Undocumented",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$2,
    section = cst_Undocumented,
    cst = "...",
    section_general = "General",
    section_run = "Loading code",
    section_env = "Environment queries",
    section_print = "Pretty-printing",
    section_trace = "Tracing",
    section_options = "Compiler options",
    section_undocumented = cst_Undocumented,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Toploop = global_data.Toploop,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Clflags = global_data.Clflags,
    Env = global_data.Env,
    Out_type = global_data.Out_type,
    Path = global_data.Path,
    Ident = global_data.Ident,
    Btype = global_data.Btype,
    Types = global_data.Types,
    Predef = global_data.Predef,
    Ctype = global_data.Ctype,
    Printtyp = global_data.Printtyp,
    Location = global_data.Location,
    Ast_helper = global_data.Ast_helper,
    Warnings = global_data.Warnings,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Topprinters = global_data.Topprinters,
    Topeval = global_data.Topeval,
    Load_path = global_data.Load_path,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Config = global_data.Config,
    Misc = global_data.Misc,
    Dll = global_data.Dll,
    Compenv = global_data.Compenv,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function action_on_suberror(b){
    var a = 1 - b, c = a ? 1 - Stdlib_Sys[3][1] : a;
    if(c) throw caml_maybe_attach_backtrace([0, Compenv[1], 125], 1);
    return c;
   }
   var
    after =
      [0,
       section_print,
       [0, section_trace, [0, section_options, [0, section_undocumented, 0]]]],
    before = [0, section_general, [0, section_run, [0, section_env, 0]]];
   function dir_quit(param){
    throw caml_maybe_attach_backtrace([0, Compenv[1], 0], 1);
   }
   Toploop[7].call
    (null, "quit", [0, dir_quit], [0, section_general, "Exit the toplevel."]);
   function dir_directory(s){
    var d = caml_call2(Misc[20], Config[3], s);
    caml_call1(Dll[6], [0, d, 0]);
    var dir = caml_call2(Load_path[4][1], 0, d);
    caml_call1(Load_path[15], dir);
    var
     a = Toploop[13][1],
     b = caml_call1(Env[97], dir),
     c =
       caml_call3
        (Misc[14][4][64][24],
         function(name, env){
          var a = caml_call1(Ident[13], name);
          return caml_call2(Env[96], a, env);
         },
         b,
         a);
    Toploop[13][1] = c;
    return 0;
   }
   Toploop[7].call
    (null,
     "directory",
     [1, dir_directory],
     [0,
      section_run,
      "Add the given directory to search path for source and compiled files."]);
   var cst_cmi = ".cmi";
   function dir_remove_directory(s){
    var d = caml_call2(Misc[20], Config[3], s);
    function keep(id){
     try{
      var
       a = caml_call1(Ident[16], id),
       b = caml_call2(Stdlib[28], a, cst_cmi),
       fn = caml_call1(Load_path[11], b);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) return 1;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     return caml_call1(Stdlib_Filename[14], fn) !== d ? 1 : 0;
    }
    var a = caml_call2(Env[98], keep, Toploop[13][1]);
    Toploop[13][1] = a;
    caml_call1(Load_path[2], s);
    return caml_call1(Dll[7], [0, d, 0]);
   }
   Toploop[7].call
    (null,
     "remove_directory",
     [1, dir_remove_directory],
     [0, section_run, "Remove the given directory from the search path."]);
   function dir_show_dirs(param){
    var a = caml_call1(Load_path[8], 0);
    return caml_call2(Stdlib_List[18], Stdlib[46], a);
   }
   Toploop[7].call
    (null,
     "show_dirs",
     [0, dir_show_dirs],
     [0, section_run, "List directories currently in the search path."]);
   function dir_cd(s){return runtime.caml_sys_chdir(s);}
   Toploop[7].call
    (null,
     "cd",
     [1, dir_cd],
     [0, section_run, "Change the current working directory."]);
   function with_error_fmt(f, x){
    var a = Stdlib_Sys[3][1] ? Stdlib_Format[116] : Stdlib_Format[118];
    return caml_call2(f, a, x);
   }
   function dir_load(ppf, name){
    return action_on_suberror(Topeval[21].call(null, 0, ppf, name));
   }
   Toploop[7].call
    (null,
     "load",
     [1, function(a){return with_error_fmt(dir_load, a);}],
     [0, section_run, "Load in memory a bytecode object, produced by ocamlc."]);
   Toploop[7].call
    (null,
     "load_rec",
     [1,
      function(name){
       var ppf = Stdlib_Sys[3][1] ? Stdlib_Format[116] : Stdlib_Format[118];
       return action_on_suberror(Topeval[21].call(null, 1, ppf, name));
      }],
     [0, section_run, "As #load, but loads dependencies recursively."]);
   var a = 0, b = Topeval[21];
   function load_file(c, d){return b(a, c, d);}
   function dir_use(ppf, name){
    return action_on_suberror(Toploop[18].call(null, ppf, [0, name]));
   }
   function dir_use_output(ppf, name){
    return action_on_suberror(Toploop[19].call(null, ppf, name));
   }
   Toploop[7].call
    (null,
     "use",
     [1, function(a){return with_error_fmt(dir_use, a);}],
     [0,
      section_run,
      "Read, compile and execute source phrases from the given file."]);
   Toploop[7].call
    (null,
     "use_output",
     [1, function(a){return with_error_fmt(dir_use_output, a);}],
     [0,
      section_run,
      "Execute a command and read, compile and execute source phrases from its output."]);
   Toploop[7].call
    (null,
     "mod_use",
     [1,
      function(name){
       var ppf = Stdlib_Sys[3][1] ? Stdlib_Format[116] : Stdlib_Format[118];
       return action_on_suberror(Toploop[21].call(null, ppf, [0, name]));
      }],
     [0,
      section_run,
      "Usage is identical to #use but #mod_use wraps the contents in a module."]);
   var
    c = [0, 0],
    d =
      [0,
       [11, "Unbound value ", [15, [12, 46, [17, 4, 0]]]],
       "Unbound value %a.@."],
    e =
      [0,
       [15, [11, " has the wrong type for a printing function.", [17, 4, 0]]],
       "%a has the wrong type for a printing function.@."],
    f =
      [0,
       [11,
        "The printer named ",
        [15, [11, " is not installed.", [17, 4, 0]]]],
       "The printer named %a is not installed.@."],
    g = [0, 0];
   function match_simple_printer_type(desc, is_old_style){
    var make_printer_type = is_old_style ? Topprinters[3] : Topprinters[2];
    try{
     var
      ty_arg =
        caml_call2
         (Ctype[11],
          0,
          function(param){
           var
            ty_arg = caml_call2(Ctype[33], 0, 0),
            a = caml_call2(Ctype[58], 0, desc[1]),
            b = make_printer_type(ty_arg);
           caml_call3(Ctype[82], Toploop[13][1], b, a);
           return ty_arg;
          });
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Ctype[1]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return is_old_style ? [0, [0, ty_arg]] : [0, [1, ty_arg]];
   }
   function find_printer(lid){
    try{var val = caml_call2(Env[63], lid, Toploop[13][1]);}
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     if(exn$0 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$0, 0);
     var
      report =
        function(ppf){
         return caml_call4(Stdlib_Format[143], ppf, d, Printtyp[7], lid);
        };
     return [1, report];
    }
    var
     desc = val[2],
     path$0 = val[1],
     res = match_simple_printer_type(desc, 0);
    if(res)
     var match$6 = res;
    else{
     var res$0 = match_simple_printer_type(desc, 1);
     if(res$0)
      var match$6 = res$0;
     else{
      var ty$1 = desc[1], last = 0, ty$0 = ty$1;
      for(;;){
       var
        ty = caml_call2(Ctype[75], Toploop[13][1], ty$0),
        match = caml_call1(Types[9], ty);
       a:
       {
        if(typeof match !== "number" && 1 === match[0]){
         var r = match[3], l = match[2], lbl = match[1];
         if(! caml_call1(Btype[56], lbl)){
          var match$0 = [0, [0, l, r]];
          break a;
         }
        }
        var match$0 = 0;
       }
       if(! match$0) break;
       var next = match$0[1], rest = next[2], last$0 = [0, next];
       last = last$0;
       ty$0 = rest;
      }
      var
       match$1 = caml_call2(Stdlib_Option[7], function(a){return a[1];}, last);
      a:
      if(match$1){
       var
        tgt = match$1[1],
        tgt$0 = caml_call2(Ctype[75], Toploop[13][1], tgt),
        match$2 = caml_call1(Types[9], tgt$0);
       if(typeof match$2 !== "number" && 3 === match$2[0]){
        var args = match$2[2];
        if(args){
         var path = match$2[1];
         if(caml_call2(Ctype[92], Toploop[13][1], args)){var match$3 = [0, [0, path, args]]; break a;}
        }
       }
       var match$3 = 0;
      }
      else
       var match$3 = 0;
      if(match$3){
       var
        match$4 = match$3[1],
        params = match$4[2],
        ty_path = match$4[1],
        make_printer_type = Topprinters[2];
       a:
       {
        try{
         var
          args$0 =
            caml_call2
             (Ctype[11],
              0,
              function(param){
               var
                args =
                  caml_call2
                   (Stdlib_List[20],
                    function(param){return caml_call2(Ctype[33], 0, 0);},
                    params),
                ty_target = caml_call1(Ctype[31], [3, ty_path, args, [0, 0]]),
                printer_args_ty =
                  caml_call2
                   (Stdlib_List[20],
                    function(ty_var){return make_printer_type(ty_var);},
                    args),
                a = make_printer_type(ty_target),
                ty_expected =
                  caml_call3
                   (Stdlib_List[27], Topprinters[1], printer_args_ty, a),
                b = caml_call2(Ctype[58], 0, desc[1]);
               caml_call3(Ctype[82], Toploop[13][1], ty_expected, b);
               return args;
              });
        }
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0), tag = exn[1];
         if(tag !== Ctype[1]) throw caml_maybe_attach_backtrace(exn, 0);
         var match$5 = 0;
         break a;
        }
        var match$5 = caml_call2(Ctype[92], Toploop[13][1], args$0) ? c : 0;
       }
       var
        match$6 =
          match$5 ? [0, [2, ty_path, caml_call1(Stdlib_List[1], params)]] : 0;
      }
      else
       var match$6 = 0;
     }
    }
    if(match$6){var kind = match$6[1]; return [0, [0, path$0, kind]];}
    function report$0(ppf){
     return caml_call4(Stdlib_Format[143], ppf, e, Printtyp[7], lid);
    }
    return [1, report$0];
   }
   function dir_install_printer(ppf, lid){
    var match = find_printer(lid);
    if(0 === match[0]){
     var
      match$0 = match[1],
      kind = match$0[2],
      path = match$0[1],
      v = caml_call2(Toploop[24], Toploop[13][1], path);
     switch(kind[0]){
       case 0:
        var ty_arg = kind[1];
        return caml_call3
                (Toploop[31],
                 path,
                 ty_arg,
                 function(formatter, repr){return caml_call1(v, repr);});
       case 1:
        var ty_arg$0 = kind[1];
        return caml_call3
                (Toploop[31],
                 path,
                 ty_arg$0,
                 function(formatter, repr){
                  return caml_call2(v, formatter, repr);
                 });
       default:
        var
         arity = kind[2],
         ty_path = kind[1],
         build =
           function(v, n){
            return 0 === n
                    ? [0,
                      function(formatter, repr){
                       return caml_call2(v, formatter, repr);
                      }]
                    : [1,
                      function(fn){return build(caml_call1(v, fn), n - 1 | 0);}];
           },
         a = build(v, arity);
        return caml_call3(Toploop[33], path, ty_path, a);
     }
    }
    var report = match[1];
    return report(ppf);
   }
   function dir_remove_printer(ppf, lid){
    var match = find_printer(lid);
    if(0 !== match[0]){var report$1 = match[1]; return report$1(ppf);}
    var path = match[1][1];
    try{caml_call1(Toploop[34], path); var match$0 = g;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var
      report =
        function(ppf){
         return caml_call4(Stdlib_Format[143], ppf, f, Printtyp[9], path);
        },
      match$0 = [1, report];
    }
    if(0 === match$0[0]) return 0;
    var report$0 = match$0[1];
    return report$0(ppf);
   }
   Toploop[7].call
    (null,
     "install_printer",
     [3, function(a){return with_error_fmt(dir_install_printer, a);}],
     [0, section_print, "Registers a printer for values of a certain type."]);
   Toploop[7].call
    (null,
     "remove_printer",
     [3, function(a){return with_error_fmt(dir_remove_printer, a);}],
     [0,
      section_print,
      "Remove the named function from the table of toplevel printers."]);
   var
    h = [0, [2, 0, [12, 46, [17, 4, 0]]], "%s.@."],
    i = [0, 0],
    j =
      [0,
       [18, [1, [0, 0, cst$2]], [11, "Unknown element.", [17, 0, [17, 4, 0]]]],
       "@[Unknown element.@]@."],
    k = [0, [18, [1, [0, 0, cst$2]], [15, [17, 0, [17, 4, 0]]]], "@[%a@]@."],
    l = [0, [11, "Invalid path ", [15, [17, 4, 0]]], "Invalid path %a@."];
   function parse_warnings(ppf, iserr, s){
    try{
     var
      a = caml_call2(Warnings[2], iserr, s),
      b = caml_call1(Location[46], Location[1]),
      c = caml_call1(caml_call1(Stdlib_Option[9], b), a);
     return c;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib_Arg[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var err = exn[2];
     caml_call3(Stdlib_Format[143], ppf, h, err);
     return action_on_suberror(1);
    }
   }
   function trim_signature(mty){
    if(1 !== mty[0]) return mty;
    var sg = mty[1];
    return [1,
            caml_call2
             (Stdlib_List[20],
              function(item){
               if(3 !== item[0]) return item;
               var
                priv = item[5],
                rs = item[4],
                md = item[3],
                pres = item[2],
                id = item[1],
                a = caml_call1(Location[11], cst),
                attribute = caml_call3(Ast_helper[4][1], 0, a, i);
               return [3,
                       id,
                       pres,
                       [0, md[1], [0, attribute, md[2]], md[3], md[4]],
                       rs,
                       priv];
              },
              sg)];
   }
   function show_prim(to_sig, ppf, lid){
    var env = Toploop[13][1], loc = Location[1];
    try{
     switch(lid[0]){
       case 0:
        var s = lid[1], s$0 = s; break;
       case 1:
        var s$1 = lid[2], s$0 = s$1; break;
       default:
        caml_call4(Stdlib_Format[143], ppf, l, Printtyp[7], lid);
        throw caml_maybe_attach_backtrace(Stdlib[3], 1);
     }
     var
      id = caml_call1(Ident[13], s$0),
      sg = caml_call4(to_sig, env, loc, id, lid),
      a =
        caml_call3
         (Printtyp[6],
          0,
          env,
          function(param){
           return caml_call4(Stdlib_Format[143], ppf, k, Printtyp[26], sg);
          });
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return caml_call2(Stdlib_Format[143], ppf, j);
     if(exn === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var all_show_funs = [0, 0];
   function reg_show_prim(name, to_sig, doc){
    all_show_funs[1] = [0, to_sig, all_show_funs[1]];
    var a = Stdlib_Format[116];
    return Toploop[7].call
            (null,
             name,
             [3, function(b){return show_prim(to_sig, a, b);}],
             [0, section_env, doc]);
   }
   reg_show_prim
    ("show_val",
     function(env, loc, id, lid){
      var desc = caml_call4(Env[48], 0, loc, lid, env)[2];
      return [0, [0, id, desc, 0], 0];
     },
     "Print the signature of the corresponding value.");
   reg_show_prim
    ("show_type",
     function(env, loc, id, lid){
      var
       match$0 = caml_call4(Env[49], 0, loc, lid, env),
       desc = match$0[2],
       path = match$0[1];
      a:
      if(0 === path[0]){
       var
        id$0 = path[1],
        recursive_use = [0, 0],
        nonrecursive_use = [0, 0],
        it_path =
          function(param){
           if(0 === param[0]){
            var id = param[1], a = caml_call1(Ident[16], id$0);
            if(caml_call1(Ident[16], id) === a)
             return caml_call2(Ident[20], id$0, id)
                     ? (recursive_use[1] = 1, 0)
                     : (nonrecursive_use[1] = 1, 0);
           }
           return 0;
          };
       caml_call1
        (Types[13],
         function(mark){
          var
           a = caml_call1(Btype[45], mark),
           it =
             [0,
              a[1],
              a[2],
              a[3],
              a[4],
              a[5],
              a[6],
              a[7],
              a[8],
              a[9],
              a[10],
              a[11],
              a[12],
              a[13],
              a[14],
              a[15],
              it_path];
          return caml_call2(it[4], it, desc);
         });
       var match = nonrecursive_use[1];
       if(! recursive_use[1] && match){var rs = 0, id$1 = id$0; break a;}
       var rs = 1, id$1 = id$0;
      }
      else
       var rs = 1, id$1 = id;
      return [0, [1, id$1, desc, rs, 0], 0];
     },
     "Print the signature of the corresponding type constructor.");
   function is_exception_constructor(env, type_expr){
    return caml_call4
            (Ctype[100], env, 1, [0, type_expr, 0], [0, Predef[8], 0]);
   }
   reg_show_prim
    ("show_constructor",
     function(env, loc, id, lid){
      var desc = caml_call5(Env[56], 0, loc, 0, lid, env);
      if(is_exception_constructor(env, desc[2]))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       path = caml_call1(Btype[76], desc),
       type_decl = caml_call2(Env[12], path, env),
       param = desc[6];
      a:
      {
       if(typeof param !== "number" && 2 === param[0]){var a = 1; break a;}
       var a = 0;
      }
      if(a){
       var
        ret_type = desc[9] ? [0, desc[2]] : 0,
        ext =
          [0,
           path,
           type_decl[1],
           [0, desc[4]],
           ret_type,
           1,
           desc[11],
           desc[12],
           desc[14]];
       return [0, [2, id, ext, 0, 0], 0];
      }
      var
       b = caml_call2(Path[8], 0, path),
       type_id = caml_call1(Ident[13], b);
      return [0, [1, type_id, type_decl, 1, 0], 0];
     },
     "Print the signature of the corresponding value constructor.");
   reg_show_prim
    ("show_exception",
     function(env, loc, id, lid){
      var desc = caml_call5(Env[56], 0, loc, 0, lid, env);
      if(1 - is_exception_constructor(env, desc[2]))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       ret_type = desc[9] ? [0, Predef[8]] : 0,
       ext =
         [0,
          Predef[27],
          0,
          [0, desc[4]],
          ret_type,
          1,
          desc[11],
          desc[12],
          desc[14]];
      return [0, [2, id, ext, 2, 0], 0];
     },
     "Print the signature of the corresponding exception.");
   var cst_Exit = "Exit";
   function secretly_the_same_path(env, path1, path2){
    function norm(path){return caml_call2(Out_type[8], env, path);}
    var a = norm(path2), b = norm(path1);
    return caml_call2(Path[1], b, a);
   }
   reg_show_prim
    ("show_module",
     function(env, loc, id, lid){
      var
       match = caml_call4(Env[50], 0, loc, lid, env),
       md = match[2],
       path = match[1];
      if(0 === path[0]) var id$0 = path[1], id$1 = id$0; else var id$1 = id;
      var path$0 = path, md$0 = md, acc = 0;
      for(;;){
       let md = md$0;
       var
        def =
          function(rs){
           var a = md[4], b = md[3], c = md[2];
           return [3, id$1, 0, [0, trim_signature(md[1]), c, b, a], rs, 0];
          },
        match$0 = md$0[1];
       if(3 !== match$0[0]) break;
       var new_path = match$0[1], md$1 = caml_call2(Env[14], new_path, env);
       if(secretly_the_same_path(env, path$0, new_path)){path$0 = new_path; md$0 = md$1;}
       else{path$0 = new_path; md$0 = md$1; acc = [0, def(0), acc];}
      }
      var Exit = [248, cst_Exit, runtime.caml_fresh_oo_id(0)];
      function it_path(param$0){
       var param = param$0;
       for(;;)
        switch(param[0]){
          case 0:
           var id = param[1], a = caml_call2(Ident[20], id$1, id);
           if(a) throw caml_maybe_attach_backtrace(Exit, 1);
           return a;
          case 1:
           var root = param[1]; param = root; break;
          default: return 0;
        }
      }
      var
       a =
         [0,
          def
           (caml_call1
             (Types[13],
              function(mark){
               var
                a = caml_call1(Btype[45], mark),
                it =
                  [0,
                   a[1],
                   a[2],
                   a[3],
                   a[4],
                   a[5],
                   a[6],
                   a[7],
                   a[8],
                   a[9],
                   a[10],
                   a[11],
                   a[12],
                   a[13],
                   a[14],
                   a[15],
                   it_path];
               try{caml_call2(it[6], it, md$0);}
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                if(exn === Exit) return 1;
                throw caml_maybe_attach_backtrace(exn, 0);
               }
               return 0;
              })),
          acc];
      return caml_call1(Stdlib_List[10], a);
     },
     "Print the signature of the corresponding module.");
   reg_show_prim
    ("show_module_type",
     function(env, loc, id, lid){
      var
       match = caml_call4(Env[51], 0, loc, lid, env),
       mtd = match[2],
       path = match[1];
      if(0 === path[0]) var id$0 = path[1], id$1 = id$0; else var id$1 = id;
      var path$0 = path, mtd$0 = mtd, acc = 0;
      for(;;){
       var def = [4, id$1, mtd$0, 0], a = mtd$0[1];
       if(a){
        var match$0 = a[1];
        if(0 === match$0[0]){
         var
          new_path = match$0[1],
          mtd$1 = caml_call2(Env[15], new_path, env);
         if(secretly_the_same_path(env, path$0, new_path)){path$0 = new_path; mtd$0 = mtd$1; continue;}
         path$0 = new_path;
         mtd$0 = mtd$1;
         acc = [0, def, acc];
         continue;
        }
       }
       return caml_call1(Stdlib_List[10], [0, def, acc]);
      }
     },
     "Print the signature of the corresponding module type.");
   reg_show_prim
    ("show_class",
     function(env, loc, id, lid){
      var
       desc_class = caml_call4(Env[52], 0, loc, lid, env)[2],
       desc_cltype = caml_call4(Env[53], 0, loc, lid, env)[2],
       typedcl = caml_call4(Env[49], 0, loc, lid, env)[2];
      return [0,
              [5, id, desc_class, 0, 0],
              [0, [6, id, desc_cltype, 0, 0], [0, [1, id, typedcl, 0, 0], 0]]];
     },
     "Print the signature of the corresponding class.");
   reg_show_prim
    ("show_class_type",
     function(env, loc, id, lid){
      var
       desc = caml_call4(Env[53], 0, loc, lid, env)[2],
       typedcl = caml_call4(Env[49], 0, loc, lid, env)[2];
      return [0, [6, id, desc, 0, 0], [0, [1, id, typedcl, 0, 0], 0]];
     },
     "Print the signature of the corresponding class type.");
   function show(env, loc, id, lid){
    var
     sg =
       caml_call3
        (Stdlib_List[26],
         function(sg, f){
          try{
           var
            a = caml_call4(f, env, loc, id, lid),
            b = caml_call2(Stdlib[37], a, sg);
           return b;
          }
          catch(exn){return sg;}
         },
         0,
         all_show_funs[1]);
    if(0 === sg) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    return sg;
   }
   var m = Stdlib_Format[116];
   Toploop[7].call
    (null,
     "show",
     [3, function(a){return show_prim(show, m, a);}],
     [0,
      section_env,
      "Print the signatures of components from any of the categories below."]);
   Toploop[7].call
    (null,
     "print_depth",
     [2, function(n){Toploop[35][1] = n; return 0;}],
     [0,
      section_print,
      "Limit the printing of values to a maximal depth of n."]);
   Toploop[7].call
    (null,
     "print_length",
     [2, function(n){Toploop[36][1] = n; return 0;}],
     [0,
      section_print,
      "Limit the number of value nodes printed to at most n."]);
   Toploop[7].call
    (null,
     "debug",
     [4, function(b){Clflags[20][1] = b; return 0;}],
     [0, section_options, "Choose whether to generate debugging events."]);
   Toploop[7].call
    (null,
     "labels",
     [4, function(b){Clflags[32][1] = 1 - b; return 0;}],
     [0,
      section_options,
      "Choose whether to ignore labels in function types."]);
   Toploop[7].call
    (null,
     "principal",
     [4, function(b){Clflags[54][1] = b; return 0;}],
     [0,
      section_options,
      "Make sure that all types are derived in a principal way."]);
   Toploop[7].call
    (null,
     "rectypes",
     [0, function(param){Clflags[56][1] = 1; return 0;}],
     [0,
      section_options,
      "Allow arbitrary recursive types during type-checking."]);
   Toploop[7].call
    (null,
     "ppx",
     [1, function(s){Clflags[38][1] = [0, s, Clflags[38][1]]; return 0;}],
     [0,
      section_options,
      "After parsing, pipe the abstract syntax tree through the preprocessor command."]);
   Toploop[7].call
    (null,
     "warnings",
     [1,
      function(s){
       var ppf = Stdlib_Sys[3][1] ? Stdlib_Format[116] : Stdlib_Format[118];
       return parse_warnings(ppf, 0, s);
      }],
     [0,
      section_options,
      "Enable or disable warnings according to the argument."]);
   Toploop[7].call
    (null,
     "warn_error",
     [1,
      function(s){
       var ppf = Stdlib_Sys[3][1] ? Stdlib_Format[116] : Stdlib_Format[118];
       return parse_warnings(ppf, 1, s);
      }],
     [0,
      section_options,
      "Treat as errors the warnings enabled by the argument."]);
   var
    o =
      [0,
       [18,
        [1, [0, [11, cst_hov_2, 0], cst_hov_2]],
        [12, 35, [2, 0, [2, 0, [17, 3, [15, [17, 0, [17, 4, 0]]]]]]]],
       "@[<hov 2>#%s%s@\n%a@]@."],
    p = [0, [12, 35, [2, 0, [2, 0, [17, 4, 0]]]], "#%s%s@."],
    cst_str = " <str>",
    cst_int = " <int>",
    cst_ident = " <ident>",
    cst_bool = " <bool>",
    q = [0, [2, [0, 1, 30], [2, 0, [17, 4, 0]]], "%30s%s@."],
    r = [0, [17, 4, 0], "@."];
   function print_section(ppf, param){
    var
     directives = param[2],
     section = param[1],
     a = 0 !== directives ? 1 : 0;
    return a
            ? (caml_call4
               (Stdlib_Format[143], ppf, q, cst$1, section),
              caml_call2
               (Stdlib_List[18],
                function(param$0){
                 var
                  doc = param$0[3],
                  directive = param$0[2],
                  name = param$0[1];
                 switch(directive[0]){
                   case 0:
                    var param = cst$0; break;
                   case 1:
                    var param = cst_str; break;
                   case 2:
                    var param = cst_int; break;
                   case 3:
                    var param = cst_ident; break;
                   default: var param = cst_bool;
                 }
                 if(! doc)
                  return caml_call4(Stdlib_Format[143], ppf, p, name, param);
                 var doc$0 = doc[1];
                 return caml_call6
                         (Stdlib_Format[143],
                          ppf,
                          o,
                          name,
                          param,
                          Stdlib_Format[139],
                          doc$0);
                },
                directives),
              caml_call2(Stdlib_Format[143], ppf, r))
            : a;
   }
   var ppf = Stdlib_Format[116], n = [0, "toplevel/topdirs.ml", 726, 16];
   Toploop[7].call
    (null,
     "help",
     [0,
      function(param){
       var sections = caml_call2(Stdlib_Hashtbl[1], 0, 10);
       function add_dir(name){
        var match = Toploop[8].call(null, name);
        if(! match)
         throw caml_maybe_attach_backtrace([0, Assert_failure, n], 1);
        var dir = match[1], match$0 = Toploop[9].call(null, name);
        if(match$0)
         var
          match$1 = match$0[1],
          doc = match$1[2],
          section$0 = match$1[1],
          doc$0 = [0, doc],
          section$1 = section$0;
        else
         var doc$0 = 0, section$1 = section;
        try{var b = caml_call2(Stdlib_Hashtbl[6], sections, section$1), a = b;
        }
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
         var a = 0;
        }
        return caml_call3
                (Stdlib_Hashtbl[11],
                 sections,
                 section$1,
                 [0, [0, name, dir, doc$0], a]);
       }
       var a = Toploop[10].call(null, 0);
       caml_call2(Stdlib_List[18], add_dir, a);
       function take_section(section){
        if(! caml_call2(Stdlib_Hashtbl[9], sections, section))
         return [0, section, 0];
        var
         a = caml_call2(Stdlib_Hashtbl[6], sections, section),
         section_dirs =
           caml_call1
            (caml_call1
              (Stdlib_List[63],
               function(a, param){
                var n2 = param[1], n1 = a[1];
                return caml_call2(Stdlib_String[10], n1, n2);
               }),
             a);
        caml_call2(Stdlib_Hashtbl[10], sections, section);
        return [0, section, section_dirs];
       }
       var
        sections_before = caml_call2(Stdlib_List[20], take_section, before),
        sections_after = caml_call2(Stdlib_List[20], take_section, after),
        b =
          caml_call3
           (Stdlib_Hashtbl[14],
            function(section, param, acc){return [0, section, acc];},
            sections,
            0),
        c = caml_call1(caml_call1(Stdlib_List[63], Stdlib_String[10]), b),
        sections_user =
          caml_call1(caml_call1(Stdlib_List[20], take_section), c),
        d = caml_call2(Stdlib[37], sections_user, sections_after),
        e = caml_call2(Stdlib[37], sections_before, d);
       return caml_call2
               (Stdlib_List[18],
                function(a){return print_section(ppf, a);},
                e);
      }],
     [0,
      section_general,
      "Prints a list of all available directives, with corresponding argument type if appropriate."]);
   var
    Topdirs =
      [0,
       dir_quit,
       dir_directory,
       dir_remove_directory,
       dir_cd,
       dir_load,
       dir_use,
       dir_use_output,
       dir_install_printer,
       dir_remove_printer,
       section_general,
       section_run,
       section_env,
       section_print,
       section_trace,
       section_options,
       section_undocumented,
       load_file];
   runtime.caml_register_global(125, Topdirs, "Topdirs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Topmain
//# unitInfo: Requires: Clflags, Compenv, Compmisc, Ctype, Env, Location, Main_args, Path, Printtyp, Stdlib, Stdlib__Arg, Stdlib__Array, Stdlib__Filename, Stdlib__Format, Stdlib__List, Stdlib__Obj, Stdlib__Printf, Stdlib__Sys, Topcommon, Topdirs, Toploop, Trace, Types
//# unitInfo: Force_link: true
//# shape: Topmain:[F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_is_no_longer_traced = " is no longer traced.",
    cst_a_is_no_longer_traced = "%a is no longer traced.@.",
    cst_Unbound_value = "Unbound value ",
    cst_Unbound_value_a = "Unbound value %a.@.",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    program = "ocaml",
    Compenv = global_data.Compenv,
    Stdlib_Format = global_data.Stdlib__Format,
    Topcommon = global_data.Topcommon,
    Location = global_data.Location,
    Clflags = global_data.Clflags,
    Compmisc = global_data.Compmisc,
    Toploop = global_data.Toploop,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Array = global_data.Stdlib__Array,
    Trace = global_data.Trace,
    Printtyp = global_data.Printtyp,
    Stdlib_List = global_data.Stdlib__List,
    Path = global_data.Path,
    Env = global_data.Env,
    Stdlib = global_data.Stdlib,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Ctype = global_data.Ctype,
    Types = global_data.Types,
    Topdirs = global_data.Topdirs,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Main_args = global_data.Main_args,
    tracing_function_ptr =
      Trace[3].call
       (null,
        function(arg){
         var a = runtime.caml_get_current_environment(0);
         return Trace[6].call(null, a, arg);
        }),
    ppf = Stdlib_Format[116],
    a =
      [0,
       [11, cst_Unbound_value, [15, [12, 46, [17, 4, 0]]]],
       cst_Unbound_value_a],
    b =
      [0,
       [15,
        [11,
         " is already traced (under the name ",
         [15, [11, ").", [17, 4, 0]]]]],
       "%a is already traced (under the name %a).@."],
    c = [0, [15, [11, " is now traced.", [17, 4, 0]]], "%a is now traced.@."],
    d =
      [0,
       [15, [11, " is not a function.", [17, 4, 0]]],
       "%a is not a function.@."],
    e =
      [0,
       [15,
        [11, " is an external function and cannot be traced.", [17, 4, 0]]],
       "%a is an external function and cannot be traced.@."];
   Topcommon[20].call
    (null,
     "trace",
     [3,
      function(lid){
       try{var val = caml_call2(Env[63], lid, Topcommon[3][1]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         return caml_call4(Stdlib_Format[143], ppf, a, Printtyp[7], lid);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var desc = val[2], path = val[1], match = desc[2];
       if(typeof match !== "number" && 0 === match[0])
        return caml_call4(Stdlib_Format[143], ppf, e, Printtyp[7], lid);
       var clos = caml_call2(Toploop[24], Topcommon[3][1], path);
       a:
       if(caml_call1(Stdlib_Obj[1], clos)){
        var g = Stdlib_Obj[9];
        if(caml_obj_tag(clos) !== g){
         var l = Stdlib_Obj[11];
         if(caml_obj_tag(clos) !== l) break a;
        }
        var
         h = caml_call2(Ctype[75], Topcommon[3][1], desc[1]),
         match$0 = caml_call1(Types[9], h);
        b:
        {
         if(typeof match$0 !== "number" && 1 === match$0[0]){var f = 1; break b;}
         var f = 0;
        }
        if(f){
         var match$1 = Trace[2].call(null, clos);
         if(match$1){
          var opath = match$1[1];
          return caml_call6
                  (Stdlib_Format[143],
                   ppf,
                   b,
                   Printtyp[9],
                   path,
                   Printtyp[9],
                   opath);
         }
         var
          i = Trace[1][1],
          j = Trace[5].call(null, Topcommon[3][1], lid, ppf, desc[1]),
          k = [0, [0, path, clos, Trace[3].call(null, clos), j], i];
         Trace[1][1] = k;
         Trace[4].call(null, clos, tracing_function_ptr);
         return caml_call4(Stdlib_Format[143], ppf, c, Printtyp[7], lid);
        }
       }
       return caml_call4(Stdlib_Format[143], ppf, d, Printtyp[7], lid);
      }],
     [0,
      Topdirs[14],
      "All calls to the function named function-name will be traced."]);
   var
    ppf$0 = Stdlib_Format[116],
    f =
      [0,
       [11, cst_Unbound_value, [15, [12, 46, [17, 4, 0]]]],
       cst_Unbound_value_a],
    g =
      [0,
       [15, [11, cst_is_no_longer_traced, [17, 4, 0]]],
       cst_a_is_no_longer_traced],
    h =
      [0, [15, [11, " was not traced.", [17, 4, 0]]], "%a was not traced.@."];
   Topcommon[20].call
    (null,
     "untrace",
     [3,
      function(lid){
       try{var val = caml_call2(Env[63], lid, Topcommon[3][1]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         return caml_call4(Stdlib_Format[143], ppf$0, f, Printtyp[7], lid);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var path = val[1];
       function remove(param){
        if(param){
         var rem = param[2], f = param[1];
         return caml_call2(Path[1], f[1], path)
                 ? (Trace
                     [4].call
                    (null, f[2], f[3]),
                   caml_call4(Stdlib_Format[143], ppf$0, g, Printtyp[7], lid),
                   rem)
                 : [0, f, remove(rem)];
        }
        caml_call4(Stdlib_Format[143], ppf$0, h, Printtyp[7], lid);
        return 0;
       }
       var a = remove(Trace[1][1]);
       Trace[1][1] = a;
       return 0;
      }],
     [0, Topdirs[14], "Stop tracing the given function."]);
   var
    ppf$1 = Stdlib_Format[116],
    i =
      [0,
       [15, [11, cst_is_no_longer_traced, [17, 4, 0]]],
       cst_a_is_no_longer_traced];
   Topcommon[20].call
    (null,
     "untrace_all",
     [0,
      function(param){
       caml_call2
        (Stdlib_List[18],
         function(f){
          Trace[4].call(null, f[2], f[3]);
          return caml_call4(Stdlib_Format[143], ppf$1, i, Printtyp[9], f[1]);
         },
         Trace[1][1]);
       Trace[1][1] = 0;
       return 0;
      }],
     [0, Topdirs[14], "Stop tracing all functions traced so far."]);
   var
    first_nonexpanded_pos = [0, 0],
    current = [0, Stdlib_Arg[12][1]],
    argv = [0, runtime.caml_sys_argv(0)],
    cst_cmo = ".cmo",
    cst_cma = ".cma",
    j =
      [0,
       [11,
        "For implementation reasons, the toplevel does not support having script files (here ",
        [3,
         0,
         [11,
          ") inside expanded arguments passed through the -args{,0} command-line option.\n",
          0]]],
       "For implementation reasons, the toplevel does not support having script files (here %S) inside expanded arguments passed through the -args{,0} command-line option.\n"];
   function input_argument(name){
    var filename = Toploop[3].call(null, name), ppf = Stdlib_Format[118];
    if
     (!
      caml_call2(Stdlib_Filename[7], filename, cst_cmo)
      && ! caml_call2(Stdlib_Filename[7], filename, cst_cma)){
     var pos = current[1];
     if(pos < first_nonexpanded_pos[1]){
      caml_call2(Stdlib_Printf[3], j, filename);
      throw caml_maybe_attach_backtrace([0, Compenv[1], 2], 1);
     }
     var
      newargs =
        caml_call3
         (Stdlib_Array[6],
          argv[1],
          current[1],
          argv[1].length - 1 - current[1] | 0);
     caml_call2(Compenv[18], ppf, 1);
     caml_call1(Compmisc[4], 0);
     if
      (Toploop[61].call(null, ppf, [0, name], 0)
       && Toploop[6].call(null, ppf, name, newargs))
      throw caml_maybe_attach_backtrace([0, Compenv[1], 0], 1);
     throw caml_maybe_attach_backtrace([0, Compenv[1], 2], 1);
    }
    Toploop[60][1] = [0, filename, Toploop[60][1]];
    return 0;
   }
   function file_argument(x){return input_argument([0, x]);}
   function wrap_expand(f, s){
    var start = current[1], arr = caml_call1(f, s), len = arr.length - 1;
    first_nonexpanded_pos[1] =
     start < first_nonexpanded_pos[1]
      ? first_nonexpanded_pos[1] + len | 0
      : (start + len | 0) + 2 | 0;
    return arr;
   }
   var
    include = Main_args[7][1],
    absname = include[1],
    no_absname = include[2],
    alert = include[3],
    I = include[4],
    H = include[5],
    labels = include[6],
    alias_deps = include[7],
    no_alias_deps = include[8],
    app_funct = include[9],
    no_app_funct = include[10],
    noassert = include[11],
    nolabels = include[12],
    nostdlib = include[13],
    nocwd = include[14],
    open = include[15],
    ppx = include[16],
    keywords = include[17],
    principal = include[18],
    no_principal = include[19],
    rectypes = include[20],
    no_rectypes = include[21],
    safer_matching = include[22],
    short_paths = include[23],
    strict_sequence = include[24],
    no_strict_sequence = include[25],
    strict_formats = include[26],
    no_strict_formats = include[27],
    unboxed_types = include[28],
    no_unboxed_types = include[29],
    version = include[30],
    vnum = include[31],
    w = include[32],
    nopervasives = include[34],
    unsafe = include[35],
    warn_error = include[36],
    warn_help = include[37],
    dno_unique_ids = include[38],
    dunique_ids = include[39],
    dno_locations = include[40],
    dlocations = include[41],
    dsource = include[42],
    dparsetree = include[43],
    dtypedtree = include[44],
    dshape = include[45],
    drawlambda = include[46],
    dlambda = include[47],
    init = include[48],
    noinit = include[49],
    no_version = include[50],
    prompt = include[51],
    noprompt = include[52],
    nopromptcont = include[53],
    color = include[57],
    error_style = include[58],
    dinstr = include[60];
   function stdin(param){return input_argument(0);}
   var k = Stdlib_Arg[13];
   function args(a){return wrap_expand(k, a);}
   var l = Stdlib_Arg[14];
   function args0(a){return wrap_expand(l, a);}
   function anonymous(s){return file_argument(s);}
   function eval$(s){return input_argument([1, s]);}
   var
    Options =
      caml_call1
       (Main_args[2],
        [0,
         absname,
         no_absname,
         alert,
         I,
         H,
         labels,
         alias_deps,
         no_alias_deps,
         app_funct,
         no_app_funct,
         noassert,
         nolabels,
         nostdlib,
         nocwd,
         open,
         ppx,
         keywords,
         principal,
         no_principal,
         rectypes,
         no_rectypes,
         safer_matching,
         short_paths,
         strict_sequence,
         no_strict_sequence,
         strict_formats,
         no_strict_formats,
         unboxed_types,
         no_unboxed_types,
         version,
         vnum,
         w,
         anonymous,
         nopervasives,
         unsafe,
         warn_error,
         warn_help,
         dno_unique_ids,
         dunique_ids,
         dno_locations,
         dlocations,
         dsource,
         dparsetree,
         dtypedtree,
         dshape,
         drawlambda,
         dlambda,
         init,
         noinit,
         no_version,
         prompt,
         noprompt,
         nopromptcont,
         stdin,
         args,
         args0,
         color,
         error_style,
         eval$,
         dinstr]),
    cst_File_toplevel_byte_topmain =
      'File "toplevel/byte/topmain.ml", line 195, characters 24-31';
   function main(param){
    try{
     var ppf = Stdlib_Format[118], a = 2 <= argv[1].length - 1 ? 1 : 0;
     if(a)
      var
       b = runtime.caml_check_bound(argv[1], 1)[2],
       display_deprecated_script_aler = Topcommon[43].call(null, b);
     else
      var display_deprecated_script_aler = a;
     Topcommon[2].call(null, 0);
     caml_call2(Compenv[18], ppf, 0);
     if(display_deprecated_script_aler) caml_call1(Location[50], program);
     caml_call2(Clflags[175], cst_File_toplevel_byte_topmain, Options[1]);
     caml_call4(Compenv[25], [0, current], argv, file_argument, program);
     caml_call2(Compenv[18], ppf, 1);
     caml_call1(Compmisc[4], 0);
     if(1 - Toploop[61].call(null, ppf, 0, 0))
      throw caml_maybe_attach_backtrace([0, Compenv[1], 2], 1);
     caml_call3(Compmisc[1], 0, 0, 0);
     Toploop[5].call(null, Stdlib_Format[116]);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Compenv[1]) throw caml_maybe_attach_backtrace(exn, 0);
     var n = exn[2];
     return n;
    }
    return 0;
   }
   var Topmain = [0, main];
   runtime.caml_register_global(42, Topmain, "Topmain");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
