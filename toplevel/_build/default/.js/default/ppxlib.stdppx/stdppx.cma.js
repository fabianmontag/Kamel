// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Stdppx
//# unitInfo: Requires: Sexplib0__Sexp_conv, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__BytesLabels, Stdlib__Char, Stdlib__Hashtbl, Stdlib__ListLabels, Stdlib__Map, Stdlib__Set, Stdlib__String, Stdlib__StringLabels
//# shape: Stdppx:[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N],F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N,[N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N],[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(3),F(5)],[N,N,N,N,N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N],[F(3)],[N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N],[F(1)*],[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(3),F(3),F(3),F(2),F(3),F(2),F(2),F(2)],[F(2),F(3),F(1),F(1)],[N,N,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N],[],[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2),F(4),F(2),F(2),F(3),F(2),F(1),F(2),F(2),F(1),F(3),F(2),F(2),F(1)*,F(1),F(1),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2)],[F(1)*,F(2),F(2),F(2)*,F(1)*],[F(2),F(2),F(2),F(2),F(2),F(2)],[F(2),F(1)*,F(1)*,F(2)],[F(5),F(6),F(2)],[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(2),N,N,N,F(2),F(2),F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,N,[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(2)],N],F(2),F(4),F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    flags$0 = [0, 1, [0, 3, 0]],
    flags = [0, 0, 0],
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib_Map = global_data.Stdlib__Map,
    default_string_of_float = Sexplib0_Sexp_conv[1],
    write_old_option_format = Sexplib0_Sexp_conv[2],
    read_old_option_format = Sexplib0_Sexp_conv[3],
    list_map = Sexplib0_Sexp_conv[4],
    sexp_of_unit = Sexplib0_Sexp_conv[5],
    sexp_of_bool = Sexplib0_Sexp_conv[6],
    sexp_of_string = Sexplib0_Sexp_conv[7],
    sexp_of_bytes = Sexplib0_Sexp_conv[8],
    sexp_of_char = Sexplib0_Sexp_conv[9],
    sexp_of_int = Sexplib0_Sexp_conv[10],
    sexp_of_float = Sexplib0_Sexp_conv[11],
    sexp_of_int32 = Sexplib0_Sexp_conv[12],
    sexp_of_int64 = Sexplib0_Sexp_conv[13],
    sexp_of_nativeint = Sexplib0_Sexp_conv[14],
    sexp_of_ref = Sexplib0_Sexp_conv[15],
    sexp_of_lazy_t = Sexplib0_Sexp_conv[16],
    sexp_of_option = Sexplib0_Sexp_conv[17],
    sexp_of_pair = Sexplib0_Sexp_conv[18],
    sexp_of_triple = Sexplib0_Sexp_conv[19],
    sexp_of_list = Sexplib0_Sexp_conv[20],
    sexp_of_array = Sexplib0_Sexp_conv[21],
    sexp_of_hashtbl = Sexplib0_Sexp_conv[22],
    sexp_of_opaque = Sexplib0_Sexp_conv[23],
    sexp_of_fun = Sexplib0_Sexp_conv[24],
    Of_sexp_error = Sexplib0_Sexp_conv[25],
    record_check_extra_fields = Sexplib0_Sexp_conv[26],
    of_sexp_error = Sexplib0_Sexp_conv[27],
    of_sexp_error_exn = Sexplib0_Sexp_conv[28],
    unit_of_sexp = Sexplib0_Sexp_conv[29],
    bool_of_sexp = Sexplib0_Sexp_conv[30],
    string_of_sexp = Sexplib0_Sexp_conv[31],
    bytes_of_sexp = Sexplib0_Sexp_conv[32],
    char_of_sexp = Sexplib0_Sexp_conv[33],
    int_of_sexp = Sexplib0_Sexp_conv[34],
    float_of_sexp = Sexplib0_Sexp_conv[35],
    int32_of_sexp = Sexplib0_Sexp_conv[36],
    int64_of_sexp = Sexplib0_Sexp_conv[37],
    nativeint_of_sexp = Sexplib0_Sexp_conv[38],
    ref_of_sexp = Sexplib0_Sexp_conv[39],
    lazy_t_of_sexp = Sexplib0_Sexp_conv[40],
    option_of_sexp = Sexplib0_Sexp_conv[41],
    pair_of_sexp = Sexplib0_Sexp_conv[42],
    triple_of_sexp = Sexplib0_Sexp_conv[43],
    list_of_sexp = Sexplib0_Sexp_conv[44],
    array_of_sexp = Sexplib0_Sexp_conv[45],
    hashtbl_of_sexp = Sexplib0_Sexp_conv[46],
    opaque_of_sexp = Sexplib0_Sexp_conv[47],
    fun_of_sexp = Sexplib0_Sexp_conv[48],
    sexp_grammar_with_tags = Sexplib0_Sexp_conv[49],
    sexp_grammar_with_tag_list = Sexplib0_Sexp_conv[50],
    unit_sexp_grammar = Sexplib0_Sexp_conv[51],
    bool_sexp_grammar = Sexplib0_Sexp_conv[52],
    string_sexp_grammar = Sexplib0_Sexp_conv[53],
    bytes_sexp_grammar = Sexplib0_Sexp_conv[54],
    char_sexp_grammar = Sexplib0_Sexp_conv[55],
    int_sexp_grammar = Sexplib0_Sexp_conv[56],
    float_sexp_grammar = Sexplib0_Sexp_conv[57],
    int32_sexp_grammar = Sexplib0_Sexp_conv[58],
    int64_sexp_grammar = Sexplib0_Sexp_conv[59],
    nativeint_sexp_grammar = Sexplib0_Sexp_conv[60],
    sexp_t_sexp_grammar = Sexplib0_Sexp_conv[61],
    ref_sexp_grammar = Sexplib0_Sexp_conv[62],
    lazy_t_sexp_grammar = Sexplib0_Sexp_conv[63],
    option_sexp_grammar = Sexplib0_Sexp_conv[64],
    list_sexp_grammar = Sexplib0_Sexp_conv[65],
    array_sexp_grammar = Sexplib0_Sexp_conv[66],
    opaque_sexp_grammar = Sexplib0_Sexp_conv[67],
    fun_sexp_grammar = Sexplib0_Sexp_conv[68],
    sexp_of_exn = Sexplib0_Sexp_conv[69],
    printexc_prefer_sexp = Sexplib0_Sexp_conv[70],
    sexp_of_exn_opt = Sexplib0_Sexp_conv[71],
    Exn_converter = Sexplib0_Sexp_conv[72],
    compare = runtime.caml_compare,
    equal = caml_equal,
    symbol = caml_equal,
    symbol$0 = caml_lessthan,
    symbol$1 = caml_greaterthan,
    symbol$2 = runtime.caml_notequal,
    symbol$3 = runtime.caml_lessequal,
    symbol$4 = caml_greaterequal,
    min = Stdlib[16],
    max = Stdlib[17],
    Poly =
      [0,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max],
    to_string = Stdlib[30],
    Bool =
      [0,
       to_string,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max],
    make = Stdlib_BytesLabels[1],
    init = Stdlib_BytesLabels[2],
    empty = Stdlib_BytesLabels[3],
    copy = Stdlib_BytesLabels[4],
    of_string = Stdlib_BytesLabels[5],
    to_string$0 = Stdlib_BytesLabels[6],
    sub = Stdlib_BytesLabels[7],
    extend = Stdlib_BytesLabels[9],
    fill = Stdlib_BytesLabels[10],
    blit = Stdlib_BytesLabels[11],
    concat = Stdlib_BytesLabels[13],
    cat = Stdlib_BytesLabels[14],
    iter = Stdlib_BytesLabels[15],
    iteri = Stdlib_BytesLabels[16],
    map = Stdlib_BytesLabels[17],
    mapi = Stdlib_BytesLabels[18],
    fold_left = Stdlib_BytesLabels[19],
    fold_right = Stdlib_BytesLabels[20],
    for_all = Stdlib_BytesLabels[21],
    exists = Stdlib_BytesLabels[22],
    trim = Stdlib_BytesLabels[23],
    escaped = Stdlib_BytesLabels[24],
    index = Stdlib_BytesLabels[25],
    index_opt = Stdlib_BytesLabels[26],
    rindex = Stdlib_BytesLabels[27],
    rindex_opt = Stdlib_BytesLabels[28],
    index_from = Stdlib_BytesLabels[29],
    index_from_opt = Stdlib_BytesLabels[30],
    rindex_from = Stdlib_BytesLabels[31],
    rindex_from_opt = Stdlib_BytesLabels[32],
    contains = Stdlib_BytesLabels[33],
    contains_from = Stdlib_BytesLabels[34],
    rcontains_from = Stdlib_BytesLabels[35],
    uppercase_ascii = Stdlib_BytesLabels[36],
    lowercase_ascii = Stdlib_BytesLabels[37],
    capitalize_ascii = Stdlib_BytesLabels[38],
    uncapitalize_ascii = Stdlib_BytesLabels[39],
    compare$0 = Stdlib_BytesLabels[40],
    equal$0 = Stdlib_BytesLabels[41],
    starts_with = Stdlib_BytesLabels[42],
    ends_with = Stdlib_BytesLabels[43],
    unsafe_to_string = Stdlib_BytesLabels[44],
    unsafe_of_string = Stdlib_BytesLabels[45],
    split_on_char = Stdlib_BytesLabels[46],
    to_seq = Stdlib_BytesLabels[47],
    to_seqi = Stdlib_BytesLabels[48],
    of_seq = Stdlib_BytesLabels[49],
    get_utf_8_uchar = Stdlib_BytesLabels[50],
    set_utf_8_uchar = Stdlib_BytesLabels[51],
    is_valid_utf_8 = Stdlib_BytesLabels[52],
    get_utf_16be_uchar = Stdlib_BytesLabels[53],
    set_utf_16be_uchar = Stdlib_BytesLabels[54],
    is_valid_utf_16be = Stdlib_BytesLabels[55],
    get_utf_16le_uchar = Stdlib_BytesLabels[56],
    set_utf_16le_uchar = Stdlib_BytesLabels[57],
    is_valid_utf_16le = Stdlib_BytesLabels[58],
    get_uint8 = Stdlib_BytesLabels[59],
    get_int8 = Stdlib_BytesLabels[60],
    get_uint16_ne = Stdlib_BytesLabels[61],
    get_uint16_be = Stdlib_BytesLabels[62],
    get_uint16_le = Stdlib_BytesLabels[63],
    get_int16_ne = Stdlib_BytesLabels[64],
    get_int16_be = Stdlib_BytesLabels[65],
    get_int16_le = Stdlib_BytesLabels[66],
    get_int32_ne = Stdlib_BytesLabels[67],
    get_int32_be = Stdlib_BytesLabels[68],
    get_int32_le = Stdlib_BytesLabels[69],
    get_int64_ne = Stdlib_BytesLabels[70],
    get_int64_be = Stdlib_BytesLabels[71],
    get_int64_le = Stdlib_BytesLabels[72],
    set_uint8 = Stdlib_BytesLabels[73],
    set_int8 = Stdlib_BytesLabels[74],
    set_uint16_ne = Stdlib_BytesLabels[75],
    set_uint16_be = Stdlib_BytesLabels[76],
    set_uint16_le = Stdlib_BytesLabels[77],
    set_int16_ne = Stdlib_BytesLabels[78],
    set_int16_be = Stdlib_BytesLabels[79],
    set_int16_le = Stdlib_BytesLabels[80],
    set_int32_ne = Stdlib_BytesLabels[81],
    set_int32_be = Stdlib_BytesLabels[82],
    set_int32_le = Stdlib_BytesLabels[83],
    set_int64_ne = Stdlib_BytesLabels[84],
    set_int64_be = Stdlib_BytesLabels[85],
    set_int64_le = Stdlib_BytesLabels[86],
    unsafe_escape = Stdlib_BytesLabels[87];
   function sub_string(t, pos, len){
    return caml_call3(Stdlib_Bytes[8], t, pos, len);
   }
   function blit_string(src, src_pos, dst, dst_pos, len){
    return caml_call5(Stdlib_Bytes[12], src, src_pos, dst, dst_pos, len);
   }
   var
    Bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string$0,
       sub,
       extend,
       fill,
       blit,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$0,
       equal$0,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_uint16_be,
       set_uint16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_escape,
       sub_string,
       blit_string],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    seeded_hash = Stdlib_Char[7],
    hash = Stdlib_Char[8],
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       seeded_hash,
       hash,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max];
   function protectx(x, f, finally$){
    try{var y = caml_call1(f, x);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call1(finally$, x);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    caml_call1(finally$, x);
    return y;
   }
   var
    Exn = [0, protectx],
    to_string$1 = Stdlib[35],
    Float =
      [0,
       to_string$1,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max];
   function id(x){return x;}
   var
    Fn = [0, id],
    create = Stdlib_Hashtbl[1],
    clear = Stdlib_Hashtbl[2],
    reset = Stdlib_Hashtbl[3],
    copy$0 = Stdlib_Hashtbl[4],
    a = Stdlib_Hashtbl[5],
    find = Stdlib_Hashtbl[6],
    find_all = Stdlib_Hashtbl[8],
    mem = Stdlib_Hashtbl[9],
    remove = Stdlib_Hashtbl[10],
    replace = Stdlib_Hashtbl[11],
    iter$0 = Stdlib_Hashtbl[12],
    filter_map_inplace = Stdlib_Hashtbl[13],
    fold = Stdlib_Hashtbl[14],
    length = Stdlib_Hashtbl[15],
    randomize = Stdlib_Hashtbl[16],
    is_randomized = Stdlib_Hashtbl[17],
    rebuild = Stdlib_Hashtbl[18],
    stats = Stdlib_Hashtbl[19],
    to_seq$0 = Stdlib_Hashtbl[20],
    to_seq_keys = Stdlib_Hashtbl[21],
    to_seq_values = Stdlib_Hashtbl[22],
    add_seq = Stdlib_Hashtbl[23],
    replace_seq = Stdlib_Hashtbl[24],
    of_seq$0 = Stdlib_Hashtbl[25],
    Make = Stdlib_Hashtbl[26],
    MakeSeeded = Stdlib_Hashtbl[27],
    hash$0 = Stdlib_Hashtbl[28],
    seeded_hash$0 = Stdlib_Hashtbl[29],
    hash_param = Stdlib_Hashtbl[30],
    seeded_hash_param = Stdlib_Hashtbl[31],
    cst_Hashtbl_add_exn = "Hashtbl.add_exn",
    b = [0, 0],
    c = [0, 0],
    cst_Hashtbl_of_alist_exn = "Hashtbl.of_alist_exn";
   function set(t, key, data){
    for(;;){
     if(! caml_call2(mem, t, key)) return caml_call3(a, t, key, data);
     caml_call2(remove, t, key);
    }
   }
   function add(t, key, data){
    return caml_call2(mem, t, key)
            ? [1, [0, Stdlib[6], cst_Hashtbl_add_exn]]
            : (caml_call3(a, t, key, data), b);
   }
   function add_exn(t, key, data){
    var match = add(t, key, data);
    if(0 === match[0]) return 0;
    var exn = match[1];
    throw caml_maybe_attach_backtrace(exn, 1);
   }
   function find_opt(t, key){
    try{var data = caml_call2(find, t, key);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, data];
   }
   function find_or_add(t, key, default$){
    var match = find_opt(t, key);
    if(match){var data = match[1]; return data;}
    var data$0 = caml_call1(default$, 0);
    add_exn(t, key, data$0);
    return data$0;
   }
   function add_alist(t, alist$1){
    var alist = alist$1;
    for(;;){
     if(! alist) return c;
     var
      alist$0 = alist[2],
      match = alist[1],
      data = match[2],
      key = match[1];
     if(0 !== add(t, key, data)[0]) return [1, key];
     alist = alist$0;
    }
   }
   function of_alist(size, alist){
    if(size)
     var size$0 = size[1], size$1 = size$0;
    else
     var size$1 = caml_call1(Stdlib_ListLabels[1], alist);
    var t = caml_call2(create, 0, size$1), error = add_alist(t, alist);
    return 0 === error[0] ? [0, t] : error;
   }
   function of_alist_exn(size, alist){
    var match = of_alist(size, alist);
    if(0 !== match[0])
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Hashtbl_of_alist_exn], 1);
    var t = match[1];
    return t;
   }
   var
    Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy$0,
       find,
       find_all,
       mem,
       remove,
       replace,
       iter$0,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq$0,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq$0,
       Make,
       MakeSeeded,
       hash$0,
       seeded_hash$0,
       hash_param,
       seeded_hash_param,
       set,
       add,
       add_exn,
       find_opt,
       find_or_add,
       add_alist,
       of_alist,
       of_alist_exn];
   function create$0(opt, file){
    var binary = opt ? opt[1] : 1, flags$0 = binary ? [0, 6, flags] : flags;
    return caml_call3(Stdlib[81], flags$0, 0, file);
   }
   function with_file(binary, filename, f){
    var t = create$0(binary, filename);
    return protectx(t, f, Stdlib[93]);
   }
   function input_all(t){
    var buf = caml_call1(Stdlib_Buffer[1], 64);
    for(;;){
     try{var char = caml_call1(Stdlib[82], t);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[12]) return caml_call1(Stdlib_Buffer[2], buf);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     caml_call2(Stdlib_Buffer[12], buf, char);
    }
   }
   function read_all(filename){return with_file(0, filename, input_all);}
   var
    In_channel = [0, create$0, with_file, input_all, read_all],
    max_int = Stdlib[19],
    to_string$2 = Stdlib[33],
    Int =
      [0,
       max_int,
       to_string$2,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max],
    Either = [0],
    length$0 = Stdlib_ListLabels[1],
    compare_lengths = Stdlib_ListLabels[2],
    compare_length_with = Stdlib_ListLabels[3],
    cons = Stdlib_ListLabels[5],
    hd = Stdlib_ListLabels[6],
    tl = Stdlib_ListLabels[7],
    nth = Stdlib_ListLabels[8],
    nth_opt = Stdlib_ListLabels[9],
    rev = Stdlib_ListLabels[10],
    rev_append = Stdlib_ListLabels[13],
    flatten = Stdlib_ListLabels[15],
    equal$1 = Stdlib_ListLabels[16],
    compare$1 = Stdlib_ListLabels[17],
    iter$1 = Stdlib_ListLabels[18],
    iteri$0 = Stdlib_ListLabels[19],
    rev_map = Stdlib_ListLabels[22],
    fold_left_map = Stdlib_ListLabels[25],
    fold_left$0 = Stdlib_ListLabels[26],
    iter2 = Stdlib_ListLabels[28],
    rev_map2 = Stdlib_ListLabels[30],
    fold_left2 = Stdlib_ListLabels[31],
    for_all$0 = Stdlib_ListLabels[33],
    exists$0 = Stdlib_ListLabels[34],
    for_all2 = Stdlib_ListLabels[35],
    exists2 = Stdlib_ListLabels[36],
    mem$0 = Stdlib_ListLabels[37],
    memq = Stdlib_ListLabels[38],
    find$0 = Stdlib_ListLabels[39],
    find_opt$0 = Stdlib_ListLabels[40],
    find_index = Stdlib_ListLabels[41],
    find_mapi = Stdlib_ListLabels[43],
    filter = Stdlib_ListLabels[44],
    find_all$0 = Stdlib_ListLabels[45],
    filteri = Stdlib_ListLabels[46],
    take = Stdlib_ListLabels[47],
    drop = Stdlib_ListLabels[48],
    take_while = Stdlib_ListLabels[49],
    drop_while = Stdlib_ListLabels[50],
    partition = Stdlib_ListLabels[51],
    assoc = Stdlib_ListLabels[53],
    assq = Stdlib_ListLabels[55],
    assq_opt = Stdlib_ListLabels[56],
    mem_assoc = Stdlib_ListLabels[57],
    mem_assq = Stdlib_ListLabels[58],
    sort = Stdlib_ListLabels[63],
    stable_sort = Stdlib_ListLabels[64],
    fast_sort = Stdlib_ListLabels[65],
    sort_uniq = Stdlib_ListLabels[66],
    to_seq$1 = Stdlib_ListLabels[68],
    of_seq$1 = Stdlib_ListLabels[69],
    d = [0, 0, 0];
   function rev_mapi(list, f){
    var list$0 = list, i = 0, acc = 0;
    for(;;){
     if(! list$0) return acc;
     var
      tail = list$0[2],
      head = list$0[1],
      acc$0 = [0, caml_call2(f, i, head), acc],
      i$0 = i + 1 | 0;
     list$0 = tail;
     i = i$0;
     acc = acc$0;
    }
   }
   function fold_right2(list1, list2, init, f){
    var a = caml_call1(rev, list2);
    return caml_call4
            (fold_left2,
             function(acc, x, y){return caml_call3(f, x, y, acc);},
             init,
             caml_call1(rev, list1),
             a);
   }
   function map$0(list, f){
    return caml_call1(rev, caml_call2(rev_map, f, list));
   }
   function mapi$0(list, f){return caml_call1(rev, rev_mapi(list, f));}
   function fold_right$0(list, init, f){
    return caml_call3
            (fold_left$0,
             function(acc, x){return caml_call2(f, x, acc);},
             init,
             caml_call1(Stdlib_ListLabels[10], list));
   }
   function append(x, y){
    return caml_call2(rev_append, caml_call1(rev, x), y);
   }
   function concat$0(list){return fold_right$0(list, 0, append);}
   function rev_combine(list1, list2){
    return caml_call4
            (fold_left2,
             function(acc, x, y){return [0, [0, x, y], acc];},
             0,
             list1,
             list2);
   }
   function combine(list1, list2){
    return caml_call1(rev, rev_combine(list1, list2));
   }
   function split(list){
    return fold_right$0
            (list,
             d,
             function(a, param){
              var ys = param[2], xs = param[1], y = a[2], x = a[1];
              return [0, [0, x, xs], [0, y, ys]];
             });
   }
   function map2(list1, list2, f){
    return caml_call1
            (rev,
             caml_call4
              (fold_left2,
               function(acc, x, y){return [0, caml_call2(f, x, y), acc];},
               0,
               list1,
               list2));
   }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
    for(;;){
     if(! param){
      var a = caml_call1(rev, right);
      return [0, caml_call1(rev, left), a];
     }
     var l$0 = param[2], x = param[1], match = caml_call1(p, x);
     if(0 === match[0]){
      var v = match[1], left$0 = [0, v, left];
      left = left$0;
      param = l$0;
     }
     else{
      var v$0 = match[1], right$0 = [0, v$0, right];
      right = right$0;
      param = l$0;
     }
    }
   }
   function init$0(len, f){
    var pos = 0, acc = 0;
    for(;;){
     if(caml_greaterequal(pos, len))
      return caml_call1(Stdlib_ListLabels[10], acc);
     var acc$0 = [0, caml_call1(f, pos), acc], pos$0 = pos + 1 | 0;
     pos = pos$0;
     acc = acc$0;
    }
   }
   function is_empty(param){return param ? 0 : 1;}
   function rev_filter_opt(list){
    return caml_call3
            (fold_left$0,
             function(tail, option){
              if(! option) return tail;
              var head = option[1];
              return [0, head, tail];
             },
             0,
             list);
   }
   function filter_opt(list){return caml_call1(rev, rev_filter_opt(list));}
   function filter_map(list, f){
    return rev_filter_opt(caml_call2(rev_map, f, list));
   }
   function concat_map(list, f){return concat$0(map$0(list, f));}
   function find_map(list$0, f){
    var list = list$0;
    for(;;){
     if(! list) return 0;
     var tail = list[2], head = list[1], some = caml_call1(f, head);
     if(some) return some;
     list = tail;
    }
   }
   function find_map_exn(list, f){
    var match = find_map(list, f);
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var x = match[1];
    return x;
   }
   function last(param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var rest = param[2], x = param[1];
     if(! rest) return [0, x];
     param = rest;
    }
   }
   function split_while(list, f){
    var list$0 = list, acc = 0;
    for(;;){
     if(list$0){
      var head = list$0[1], tail = list$0[2];
      if(caml_call1(f, head)){
       var acc$0 = [0, head, acc];
       list$0 = tail;
       acc = acc$0;
       continue;
      }
     }
     return [0, caml_call1(Stdlib_ListLabels[10], acc), list$0];
    }
   }
   function find_a_dup(list, compare){
    var
     Elt = [0, compare],
     Elt_set = caml_call1(Stdlib_Set[1], Elt),
     set$1 = Elt_set[1],
     list$0 = list,
     set = set$1;
    for(;;){
     if(! list$0) return 0;
     var tail = list$0[2], head = list$0[1];
     if(caml_call2(Elt_set[31], head, set)) return [0, head];
     var set$0 = caml_call2(Elt_set[2], head, set);
     list$0 = tail;
     set = set$0;
    }
   }
   function assoc_opt(key, alist){
    try{var x = caml_call2(assoc, key, alist);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, x];
   }
   function iter$2(list, f){return caml_call2(iter$1, f, list);}
   var
    List =
      [0,
       length$0,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       rev_append,
       flatten,
       equal$1,
       compare$1,
       iteri$0,
       rev_map,
       fold_left_map,
       fold_left$0,
       iter2,
       rev_map2,
       fold_left2,
       for_all$0,
       exists$0,
       for_all2,
       exists2,
       mem$0,
       memq,
       find$0,
       find_opt$0,
       find_index,
       find_mapi,
       filter,
       find_all$0,
       filteri,
       take,
       drop,
       take_while,
       drop_while,
       partition,
       assoc,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       sort,
       stable_sort,
       fast_sort,
       sort_uniq,
       to_seq$1,
       of_seq$1,
       -599241041,
       -599241041,
       -599241041,
       rev_mapi,
       fold_right2,
       map$0,
       mapi$0,
       fold_right$0,
       append,
       concat$0,
       rev_combine,
       combine,
       split,
       map2,
       partition_map,
       init$0,
       is_empty,
       rev_filter_opt,
       filter_opt,
       filter_map,
       concat_map,
       find_map,
       find_map_exn,
       last,
       split_while,
       find_a_dup,
       assoc_opt,
       iter$2];
   function is_some(param){return param ? 1 : 0;}
   function iter$3(t, f){
    if(! t) return 0;
    var x = t[1];
    return caml_call1(f, x);
   }
   function map$1(t, f){
    if(! t) return 0;
    var x = t[1];
    return [0, caml_call1(f, x)];
   }
   function value(t, default$){
    if(! t) return default$;
    var x = t[1];
    return x;
   }
   function to_list(t){if(! t) return 0; var x = t[1]; return [0, x, 0];}
   var Option = [0, is_some, iter$3, map$1, value, to_list];
   function bind(t, f){
    if(0 === t[0]){var a = t[1]; return caml_call1(f, a);}
    var e = t[1];
    return [1, e];
   }
   function map$2(t, f){
    if(0 === t[0]){var a = t[1]; return [0, caml_call1(f, a)];}
    var e = t[1];
    return [1, e];
   }
   function map_error(t, f){
    if(0 === t[0]){var a = t[1]; return [0, caml_call1(f, a)];}
    var e = t[1];
    return [1, e];
   }
   function symbol_bind(t, f){return bind(t, f);}
   function symbol_map(t, f){return map$2(t, f);}
   function handle_error(t, f){
    if(0 === t[0]){var a = t[1]; return a;}
    var e = t[1];
    return caml_call1(f, e);
   }
   var
    Result =
      [0, bind, map$2, map_error, symbol_bind, symbol_map, handle_error];
   function symbol$5(a, param){
    var q2 = param[2], t2 = param[1], q1 = a[2], t1 = a[1];
    return [0, t1, caml_call2(Stdlib[37], q1, [0, t2, q2])];
   }
   function hd$0(a){return a[1];}
   function to_list$0(param){
    var q = param[2], t = param[1];
    return [0, t, q];
   }
   function map$3(f, param){
    var q = param[2], t = param[1], a = map$0(q, f);
    return [0, caml_call1(f, t), a];
   }
   var NonEmptyList = [0, symbol$5, hd$0, to_list$0, map$3];
   function create$1(c, b, a, opt, file){
    var
     binary = c ? c[1] : 1,
     append = b ? b[1] : 0,
     fail_if_exists = a ? a[1] : 0,
     perm = opt ? opt[1] : 438,
     d = binary ? 6 : 7,
     flags = [0, d, flags$0],
     e = append ? 2 : 4,
     flags$1 = [0, e, flags],
     flags$2 = fail_if_exists ? [0, 5, flags$1] : flags$1;
    return caml_call3(Stdlib[62], flags$2, perm, file);
   }
   function with_file$0(binary, append, fail_if_exists, perm, file, f){
    var t = create$1(binary, append, fail_if_exists, perm, file);
    return protectx(t, f, Stdlib[76]);
   }
   function write_all(filename, data){
    return with_file$0
            (0,
             0,
             0,
             0,
             filename,
             function(t){return caml_call2(Stdlib[66], t, data);});
   }
   var
    Out_channel = [0, create$1, with_file$0, write_all],
    make$0 = Stdlib_StringLabels[1],
    init$1 = Stdlib_StringLabels[2],
    empty$0 = Stdlib_StringLabels[3],
    of_bytes = Stdlib_StringLabels[4],
    to_bytes = Stdlib_StringLabels[5],
    blit$0 = Stdlib_StringLabels[6],
    concat$1 = Stdlib_StringLabels[7],
    cat$0 = Stdlib_StringLabels[8],
    starts_with$0 = Stdlib_StringLabels[11],
    ends_with$0 = Stdlib_StringLabels[12],
    contains_from$0 = Stdlib_StringLabels[13],
    rcontains_from$0 = Stdlib_StringLabels[14],
    contains$0 = Stdlib_StringLabels[15],
    sub$0 = Stdlib_StringLabels[16],
    map$4 = Stdlib_StringLabels[18],
    mapi$1 = Stdlib_StringLabels[19],
    fold_left$1 = Stdlib_StringLabels[20],
    fold_right$1 = Stdlib_StringLabels[21],
    trim$0 = Stdlib_StringLabels[24],
    escaped$1 = Stdlib_StringLabels[25],
    uppercase_ascii$1 = Stdlib_StringLabels[26],
    iter$4 = Stdlib_StringLabels[30],
    iteri$1 = Stdlib_StringLabels[31],
    index_from$0 = Stdlib_StringLabels[32],
    rindex_from$0 = Stdlib_StringLabels[34],
    index$0 = Stdlib_StringLabels[36],
    rindex$0 = Stdlib_StringLabels[38],
    to_seq$2 = Stdlib_StringLabels[40],
    to_seqi$0 = Stdlib_StringLabels[41],
    of_seq$2 = Stdlib_StringLabels[42],
    get_utf_8_uchar$0 = Stdlib_StringLabels[43],
    is_valid_utf_8$0 = Stdlib_StringLabels[44],
    get_utf_16be_uchar$0 = Stdlib_StringLabels[45],
    is_valid_utf_16be$0 = Stdlib_StringLabels[46],
    get_utf_16le_uchar$0 = Stdlib_StringLabels[47],
    is_valid_utf_16le$0 = Stdlib_StringLabels[48],
    get_uint8$0 = Stdlib_StringLabels[49],
    get_int8$0 = Stdlib_StringLabels[50],
    get_uint16_ne$0 = Stdlib_StringLabels[51],
    get_uint16_be$0 = Stdlib_StringLabels[52],
    get_uint16_le$0 = Stdlib_StringLabels[53],
    get_int16_ne$0 = Stdlib_StringLabels[54],
    get_int16_be$0 = Stdlib_StringLabels[55],
    get_int16_le$0 = Stdlib_StringLabels[56],
    get_int32_ne$0 = Stdlib_StringLabels[57],
    hash$1 = Stdlib_StringLabels[58],
    seeded_hash$1 = Stdlib_StringLabels[59],
    get_int32_be$0 = Stdlib_StringLabels[60],
    get_int32_le$0 = Stdlib_StringLabels[61],
    get_int64_ne$0 = Stdlib_StringLabels[62],
    get_int64_be$0 = Stdlib_StringLabels[63],
    get_int64_le$0 = Stdlib_StringLabels[64];
   function is_empty$0(t){return caml_equal(caml_ml_string_length(t), 0);}
   function prefix(t, len){return caml_call3(sub$0, t, 0, len);}
   function suffix(t, len){
    return caml_call3(sub$0, t, caml_ml_string_length(t) - len | 0, len);
   }
   function drop_prefix(t, len){
    return caml_call3(sub$0, t, len, caml_ml_string_length(t) - len | 0);
   }
   function drop_suffix(t, len){
    return caml_call3(sub$0, t, 0, caml_ml_string_length(t) - len | 0);
   }
   function is_prefix(t, prefix){
    var
     d =
       caml_greaterequal
        (caml_ml_string_length(t), caml_ml_string_length(prefix));
    if(! d) return d;
    var len = caml_ml_string_length(prefix), pos = 0;
    for(;;){
     var c = caml_greaterequal(pos, len);
     if(c)
      var a = c;
     else{
      var
       e = caml_string_get(prefix, pos),
       b = caml_equal(caml_string_get(t, pos), e);
      if(b){var pos$0 = pos + 1 | 0; pos = pos$0; continue;}
      var a = b;
     }
     return a;
    }
   }
   function is_suffix(t, suffix){
    var
     d =
       caml_greaterequal
        (caml_ml_string_length(t), caml_ml_string_length(suffix));
    if(! d) return d;
    var
     suffix_offset =
       caml_ml_string_length(t) - caml_ml_string_length(suffix) | 0,
     pos$1 = caml_ml_string_length(suffix) - 1 | 0,
     pos = pos$1;
    for(;;){
     var c = caml_lessthan(pos, 0);
     if(c)
      var a = c;
     else{
      var
       e = caml_string_get(suffix, pos),
       b = caml_equal(caml_string_get(t, suffix_offset + pos | 0), e);
      if(b){var pos$0 = pos - 1 | 0; pos = pos$0; continue;}
      var a = b;
     }
     return a;
    }
   }
   function exists$1(t, f){
    var len = caml_ml_string_length(t), pos = 0;
    for(;;){
     var c = caml_lessthan(pos, len);
     if(c){
      var a = caml_call1(f, caml_string_get(t, pos));
      if(! a){var pos$0 = pos + 1 | 0; pos = pos$0; continue;}
      var b = a;
     }
     else
      var b = c;
     return b;
    }
   }
   function for_all$1(t, f){
    var len = caml_ml_string_length(t), pos = 0;
    for(;;){
     var c = caml_greaterequal(pos, len);
     if(c)
      var a = c;
     else{
      var b = caml_call1(f, caml_string_get(t, pos));
      if(b){var pos$0 = pos + 1 | 0; pos = pos$0; continue;}
      var a = b;
     }
     return a;
    }
   }
   function index_opt$0(t, char){
    try{var i = caml_call2(index$0, t, char);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, i];
   }
   function rindex_opt$0(t, char){
    try{var i = caml_call2(rindex$0, t, char);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, i];
   }
   function index_from_opt$0(t, char, pos){
    try{var i = caml_call3(index_from$0, t, char, pos);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, i];
   }
   function rindex_from_opt$0(t, char, pos){
    try{var i = caml_call3(rindex_from$0, t, char, pos);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, i];
   }
   function lsplit2(t, on){
    var match = index_opt$0(t, on);
    if(! match) return 0;
    var
     i = match[1],
     a =
       caml_call3
        (sub$0, t, i + 1 | 0, (caml_ml_string_length(t) - i | 0) - 1 | 0);
    return [0, [0, caml_call3(sub$0, t, 0, i), a]];
   }
   var
    capitalize_ascii$0 = Stdlib_String[28],
    lowercase_ascii$1 = Stdlib_String[27],
    uncapitalize_ascii$0 = Stdlib_String[29];
   function split_on_char$0(t, sep){
    return caml_call2(Stdlib_String[17], sep, t);
   }
   function is_substring(t, substring){
    var
     len_t = caml_ml_string_length(t),
     len_sub = caml_ml_string_length(substring);
    if(caml_equal(len_sub, 0)) return 1;
    if(caml_greaterthan(len_sub, len_t)) return 0;
    var pos$1 = 0;
    for(;;){
     if(caml_greaterthan(pos$1 + len_sub | 0, len_t)) return 0;
     var pos = pos$1, sub_pos = 0;
     for(;;){
      if(caml_equal(sub_pos, len_sub))
       var a = 1;
      else{
       var b = caml_string_get(substring, sub_pos);
       if(caml_equal(caml_string_get(t, pos), b)){
        var sub_pos$0 = sub_pos + 1 | 0, pos$0 = pos + 1 | 0;
        pos = pos$0;
        sub_pos = sub_pos$0;
        continue;
       }
       var a = 0;
      }
      if(a) return 1;
      var pos$2 = pos$1 + 1 | 0;
      pos$1 = pos$2;
      break;
     }
    }
   }
   var
    include = caml_call1(Stdlib_Map[1], [0, Stdlib_StringLabels[10]]),
    empty$1 = include[1],
    add$0 = include[2],
    add_to_list = include[3],
    update = include[4],
    singleton = include[5],
    remove$0 = include[6],
    merge = include[7],
    union = include[8],
    cardinal = include[9],
    bindings = include[10],
    min_binding = include[11],
    min_binding_opt = include[12],
    max_binding = include[13],
    max_binding_opt = include[14],
    choose = include[15],
    choose_opt = include[16],
    find$1 = include[17],
    find_first = include[19],
    find_first_opt = include[20],
    find_last = include[21],
    find_last_opt = include[22],
    iter$5 = include[23],
    fold$0 = include[24],
    map$5 = include[25],
    mapi$2 = include[26],
    filter$0 = include[27],
    filter_map$0 = include[28],
    partition$0 = include[29],
    split$0 = include[30],
    is_empty$1 = include[31],
    mem$1 = include[32],
    equal$2 = include[33],
    compare$2 = include[34],
    for_all$2 = include[35],
    exists$2 = include[36],
    to_list$1 = include[37],
    of_list = include[38],
    to_seq$3 = include[39],
    to_rev_seq = include[40],
    to_seq_from = include[41],
    add_seq$0 = include[42],
    of_seq$3 = include[43];
   function find_opt$1(key, t){
    try{var x = caml_call2(find$1, key, t);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, x];
   }
   var
    Map =
      [0,
       empty$1,
       add$0,
       add_to_list,
       update,
       singleton,
       remove$0,
       merge,
       union,
       cardinal,
       bindings,
       min_binding,
       min_binding_opt,
       max_binding,
       max_binding_opt,
       choose,
       choose_opt,
       find$1,
       find_first,
       find_first_opt,
       find_last,
       find_last_opt,
       iter$5,
       fold$0,
       map$5,
       mapi$2,
       filter$0,
       filter_map$0,
       partition$0,
       split$0,
       is_empty$1,
       mem$1,
       equal$2,
       compare$2,
       for_all$2,
       exists$2,
       to_list$1,
       of_list,
       to_seq$3,
       to_rev_seq,
       to_seq_from,
       add_seq$0,
       of_seq$3,
       find_opt$1],
    Set = caml_call1(Stdlib_Set[1], [0, Stdlib_StringLabels[10]]),
    String =
      [0,
       make$0,
       init$1,
       empty$0,
       of_bytes,
       to_bytes,
       blit$0,
       concat$1,
       cat$0,
       starts_with$0,
       ends_with$0,
       contains_from$0,
       rcontains_from$0,
       contains$0,
       sub$0,
       map$4,
       mapi$1,
       fold_left$1,
       fold_right$1,
       trim$0,
       escaped$1,
       uppercase_ascii$1,
       iter$4,
       iteri$1,
       index_from$0,
       rindex_from$0,
       index$0,
       rindex$0,
       to_seq$2,
       to_seqi$0,
       of_seq$2,
       get_utf_8_uchar$0,
       is_valid_utf_8$0,
       get_utf_16be_uchar$0,
       is_valid_utf_16be$0,
       get_utf_16le_uchar$0,
       is_valid_utf_16le$0,
       get_uint8$0,
       get_int8$0,
       get_uint16_ne$0,
       get_uint16_be$0,
       get_uint16_le$0,
       get_int16_ne$0,
       get_int16_be$0,
       get_int16_le$0,
       get_int32_ne$0,
       hash$1,
       seeded_hash$1,
       get_int32_be$0,
       get_int32_le$0,
       get_int64_ne$0,
       get_int64_be$0,
       get_int64_le$0,
       is_empty$0,
       prefix,
       suffix,
       drop_prefix,
       drop_suffix,
       is_prefix,
       is_suffix,
       exists$1,
       for_all$1,
       index_opt$0,
       rindex_opt$0,
       index_from_opt$0,
       rindex_from_opt$0,
       lsplit2,
       capitalize_ascii$0,
       lowercase_ascii$1,
       uncapitalize_ascii$0,
       split_on_char$0,
       is_substring,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max,
       Map,
       Set];
   function output(oc, bytes, pos, len){
    return caml_call4(Stdlib[68], oc, bytes, pos, len);
   }
   function output_substring(oc, string, pos, len){
    return caml_call4(Stdlib[69], oc, string, pos, len);
   }
   var
    Stdppx =
      [0,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       Exn_converter,
       Poly,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max,
       Bool,
       Bytes,
       Char,
       Exn,
       Float,
       Fn,
       Hashtbl,
       In_channel,
       Int,
       Either,
       List,
       Option,
       Result,
       NonEmptyList,
       Out_channel,
       String,
       append,
       output,
       output_substring];
   runtime.caml_register_global(19, Stdppx, "Stdppx");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
