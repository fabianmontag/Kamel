// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppxlib_traverse_builtins
//# unitInfo: Requires: CamlinternalOO, Stdlib__Array, Stdlib__List
//# shape: Ppxlib_traverse_builtins:[[],N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "",
    cst$8 = "::",
    cst_None$1 = "None",
    cst_Some$1 = "Some",
    cst$9 = "[]",
    cst_array = "array",
    cst_bool = "bool",
    cst_char = "char",
    cst_int = "int",
    cst_list = "list",
    cst_option = "option",
    cst_string = "string",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = cst$8,
    cst$7 = cst$9,
    cst$4 = cst$8,
    cst$5 = cst$9,
    cst$3 = cst$10,
    cst$2 = cst$10,
    cst$1 = cst$10,
    cst$0 = cst$10,
    cst = cst$10,
    b =
      [0,
       "unit",
       "tuple",
       cst_string,
       "record",
       "other",
       cst_option,
       "nativeint",
       cst_list,
       "int64",
       "int32",
       cst_int,
       "float",
       "constr",
       cst_char,
       cst_bool,
       cst_array],
    a =
      [0,
       cst_bool,
       cst_char,
       cst_list,
       cst_int,
       cst_string,
       cst_array,
       cst_option],
    shared =
      [0,
       cst_string,
       cst_option,
       cst_list,
       cst_int,
       cst_char,
       cst_bool,
       cst_array],
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    T = [0];
   function c(x){return x;}
   var
    map =
      caml_call2
       (CamlinternalOO[19],
        a,
        function(d){
         var
          b = caml_call2(CamlinternalOO[3], d, cst),
          a = caml_call2(CamlinternalOO[8], d, shared);
         caml_call2
          (CamlinternalOO[11],
           d,
           [0,
            a[4],
            function(self_1){return self_1[b + 1];},
            a[1],
            function(self_1){return self_1[b + 1];},
            a[6],
            function(self_1){return self_1[b + 1];},
            a[5],
            function(self_1){return self_1[b + 1];},
            a[2],
            function(self_1, f, x){
             if(! x) return 0;
             var x$0 = x[1];
             return [0, caml_call1(f, x$0)];
            },
            a[3],
            function(self_1){return Stdlib_List[20];},
            a[7],
            function(self_1){return Stdlib_Array[14];}]);
         return function(f, e){
          var a = caml_call2(CamlinternalOO[24], e, d);
          a[b + 1] = c;
          return a;};
        });
   function d(a){return 0;}
   var
    iter =
      caml_call2
       (CamlinternalOO[19],
        a,
        function(c){
         var
          b = caml_call2(CamlinternalOO[3], c, cst$0),
          a = caml_call2(CamlinternalOO[8], c, shared);
         caml_call2
          (CamlinternalOO[11],
           c,
           [0,
            a[4],
            function(self_2){return self_2[b + 1];},
            a[1],
            function(self_2){return self_2[b + 1];},
            a[6],
            function(self_2){return self_2[b + 1];},
            a[5],
            function(self_2){return self_2[b + 1];},
            a[2],
            function(self_2, f, x){
             if(! x) return 0;
             var x$0 = x[1];
             return caml_call1(f, x$0);
            },
            a[3],
            function(self_2){return Stdlib_List[18];},
            a[7],
            function(self_2){return Stdlib_Array[12];}]);
         return function(f, e){
          var a = caml_call2(CamlinternalOO[24], e, c);
          a[b + 1] = d;
          return a;};
        });
   function e(param, acc){return acc;}
   var
    fold =
      caml_call2
       (CamlinternalOO[19],
        a,
        function(c){
         var
          b = caml_call2(CamlinternalOO[3], c, cst$1),
          a = caml_call2(CamlinternalOO[8], c, shared);
         caml_call2
          (CamlinternalOO[11],
           c,
           [0,
            a[4],
            function(self_3){return self_3[b + 1];},
            a[1],
            function(self_3){return self_3[b + 1];},
            a[6],
            function(self_3){return self_3[b + 1];},
            a[5],
            function(self_3){return self_3[b + 1];},
            a[2],
            function(self_3, f, x, acc){
             if(! x) return acc;
             var x$0 = x[1];
             return caml_call2(f, x$0, acc);
            },
            a[3],
            function(self_3){
             function loop(f, l$1, acc$1){
              var l = l$1, acc = acc$1;
              for(;;){
               if(! l) return acc;
               var l$0 = l[2], x = l[1], acc$0 = caml_call2(f, x, acc);
               l = l$0;
               acc = acc$0;
              }
             }
             return loop;
            },
            a[7],
            function(self_3, f, a, acc){
             var r = [0, acc], b = a.length - 2 | 0, c = 0;
             if(b >= 0){
              var i = c;
              for(;;){
               r[1] = caml_call2(f, a[i + 1], r[1]);
               var d = i + 1 | 0;
               if(b === i) break;
               i = d;
              }
             }
             return r[1];
            }]);
         return function(f, d){
          var a = caml_call2(CamlinternalOO[24], d, c);
          a[b + 1] = e;
          return a;};
        });
   function f(x, acc){return [0, x, acc];}
   var
    fold_map =
      caml_call2
       (CamlinternalOO[19],
        a,
        function(c){
         var
          b = caml_call2(CamlinternalOO[3], c, cst$2),
          a = caml_call2(CamlinternalOO[8], c, shared);
         caml_call2
          (CamlinternalOO[11],
           c,
           [0,
            a[4],
            function(self_4){return self_4[b + 1];},
            a[1],
            function(self_4){return self_4[b + 1];},
            a[6],
            function(self_4){return self_4[b + 1];},
            a[5],
            function(self_4){return self_4[b + 1];},
            a[2],
            function(self_4, f, x, acc){
             if(! x) return [0, 0, acc];
             var
              x$0 = x[1],
              match = caml_call2(f, x$0, acc),
              acc$0 = match[2],
              x$1 = match[1];
             return [0, [0, x$1], acc$0];
            },
            a[3],
            function(self_4){
             function loop(f, l, acc){
              if(! l) return [0, 0, acc];
              var
               l$0 = l[2],
               x = l[1],
               match = caml_call2(f, x, acc),
               acc$0 = match[2],
               x$0 = match[1],
               match$0 = loop(f, l$0, acc$0),
               acc$1 = match$0[2],
               l$1 = match$0[1];
              return [0, [0, x$0, l$1], acc$1];
             }
             return loop;
            },
            a[7],
            function(self_4, f, a, acc){
             var len = a.length - 1;
             if(0 === len) return [0, a, acc];
             var
              match = caml_call2(f, a[1], acc),
              acc$0 = match[2],
              x = match[1],
              a$0 = runtime.caml_array_make(len, x),
              r = [0, acc$0],
              b = len - 1 | 0,
              c = 1;
             if(b >= 1){
              var i = c;
              for(;;){
               var
                match$0 = caml_call2(f, a[i + 1], r[1]),
                acc$1 = match$0[2],
                x$0 = match$0[1];
               a$0[i + 1] = x$0;
               r[1] = acc$1;
               var d = i + 1 | 0;
               if(b === i) break;
               i = d;
              }
             }
             return [0, a$0, r[1]];
            }]);
         return function(e, d){
          var a = caml_call2(CamlinternalOO[24], d, c);
          a[b + 1] = f;
          return a;};
        });
   function g(param, x){return x;}
   var
    map_with_context =
      caml_call2
       (CamlinternalOO[19],
        a,
        function(c){
         var
          b = caml_call2(CamlinternalOO[3], c, cst$3),
          a = caml_call2(CamlinternalOO[8], c, shared);
         caml_call2
          (CamlinternalOO[11],
           c,
           [0,
            a[4],
            function(self_5){return self_5[b + 1];},
            a[1],
            function(self_5){return self_5[b + 1];},
            a[6],
            function(self_5){return self_5[b + 1];},
            a[5],
            function(self_5){return self_5[b + 1];},
            a[2],
            function(self_5, f, ctx, x){
             if(! x) return 0;
             var x$0 = x[1];
             return [0, caml_call2(f, ctx, x$0)];
            },
            a[3],
            function(self_5, f, ctx, l){
             var a = caml_call1(f, ctx);
             return caml_call2(Stdlib_List[20], a, l);
            },
            a[7],
            function(self_5, f, ctx, a){
             var b = caml_call1(f, ctx);
             return caml_call2(Stdlib_Array[14], b, a);
            }]);
         return function(e, d){
          var a = caml_call2(CamlinternalOO[24], d, c);
          a[b + 1] = g;
          return a;};
        }),
    lift = [],
    cst_Some = cst_Some$1,
    cst_None = cst_None$1;
   caml_update_dummy
    (lift,
     [0,
      0,
      function(d){
       var c = caml_call2(CamlinternalOO[8], d, b), e = c[8], a = c[13];
       caml_call2
        (CamlinternalOO[11],
         d,
         [0,
          c[6],
          function(self_6, f, x){
           if(! x) return caml_call3(self_6[1][a + 1], self_6, cst_None, 0);
           var x$0 = x[1], b = [0, caml_call1(f, x$0), 0];
           return caml_call3(self_6[1][a + 1], self_6, cst_Some, b);
          },
          e,
          function(self_6, f, l){
           if(! l) return caml_call3(self_6[1][a + 1], self_6, cst$5, 0);
           var
            l$0 = l[2],
            x = l[1],
            b = [0, caml_call3(self_6[1][e + 1], self_6, f, l$0), 0],
            c = [0, caml_call1(f, x), b];
           return caml_call3(self_6[1][a + 1], self_6, cst$4, c);
          }]);
       return function(b, a){return caml_call2(CamlinternalOO[24], a, d);};
      },
      0]);
   var
    lift_map_with_context = [],
    cst_Some$0 = cst_Some$1,
    cst_None$0 = cst_None$1;
   caml_update_dummy
    (lift_map_with_context,
     [0,
      0,
      function(d){
       var c = caml_call2(CamlinternalOO[8], d, b), e = c[8], a = c[13];
       caml_call2
        (CamlinternalOO[11],
         d,
         [0,
          c[6],
          function(self_7, f, ctx, x){
           if(! x)
            return [0,
                    0,
                    caml_call4(self_7[1][a + 1], self_7, ctx, cst_None$0, 0)];
           var
            x$0 = x[1],
            match = caml_call2(f, ctx, x$0),
            res = match[2],
            x$1 = match[1];
           return [0,
                   [0, x$1],
                   caml_call4
                    (self_7[1][a + 1], self_7, ctx, cst_Some$0, [0, res, 0])];
          },
          e,
          function(self_7, f, ctx, l){
           if(! l)
            return [0, 0, caml_call4(self_7[1][a + 1], self_7, ctx, cst$7, 0)];
           var
            l$0 = l[2],
            x = l[1],
            match = caml_call2(f, ctx, x),
            res_head = match[2],
            x$0 = match[1],
            match$0 = caml_call4(self_7[1][e + 1], self_7, f, ctx, l$0),
            res_tail = match$0[2],
            l$1 = match$0[1];
           return [0,
                   [0, x$0, l$1],
                   caml_call4
                    (self_7[1][a + 1],
                     self_7,
                     ctx,
                     cst$6,
                     [0, res_head, [0, res_tail, 0]])];
          }]);
       return function(b, a){return caml_call2(CamlinternalOO[24], a, d);};
      },
      0]);
   var
    Ppxlib_traverse_builtins =
      [0,
       T,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       lift,
       lift_map_with_context];
   runtime.caml_register_global
    (19, Ppxlib_traverse_builtins, "Ppxlib_traverse_builtins");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
