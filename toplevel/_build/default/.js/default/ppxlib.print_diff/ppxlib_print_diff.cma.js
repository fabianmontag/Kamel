// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppxlib_print_diff
//# unitInfo: Requires: Stdlib__Filename, Stdlib__ListLabels, Stdlib__Printf, Stdlib__StringLabels, Stdlib__Sys
//# shape: Ppxlib_print_diff:[F(6)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_line_1_characters_0_0 = '", line 1, characters 0-0:\n',
    cst_File = 'File "',
    cst_File_s_line_1_characters_0 = 'File "%s", line 1, characters 0-0:\n%!',
    cst_diff_u$1 = "diff -u";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = " ",
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    a = [0, "-location-style omake", 0],
    b = [0, "-keep-whitespace", 0],
    cst_patdiff = "patdiff",
    c = [0, "-ascii", 0],
    d =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " 1>&2", 0]]]]]],
       "%s %s %s 1>&2"],
    e =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u = cst_diff_u$1,
    f =
      [0,
       [11,
        "Error:\n> ",
        [3,
         0,
         [11,
          " exited with code ",
          [4,
           0,
           0,
           0,
           [11,
            "\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n",
            0]]]]],
       "Error:\n> %S exited with code %d\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n"],
    g =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u$0 = cst_diff_u$1;
   function print(diff_command, j, opt, file1, file2, param){
    var extra_patdiff_args = j ? j[1] : 0, use_color = opt ? opt[1] : 0;
    function exec(cmd){
     var
      a = caml_call1(Stdlib_Filename[21], file2),
      b = caml_call1(Stdlib_Filename[21], file1),
      cmd$0 = caml_call4(Stdlib_Printf[4], d, cmd, b, a),
      n = runtime.caml_sys_system_command(cmd$0);
     return 0 === n
             ? 925282182
             : 1 === n ? -890978471 : [0, 106380200, [0, n, cmd$0]];
    }
    if(diff_command){var s = diff_command[1]; exec(s); return 0;}
    var
     h = [0, extra_patdiff_args, 0],
     i = use_color ? 0 : c,
     args = caml_call1(Stdlib_ListLabels[14], [0, b, [0, a, [0, i, h]]]),
     match =
       exec(caml_call2(Stdlib_StringLabels[7], cst, [0, cst_patdiff, args]));
    if(typeof match === "number")
     return 925282182 <= match
             ? (caml_call2(Stdlib_Printf[3], e, file1), exec(cst_diff_u), 0)
             : 0;
    var match$0 = match[2], cmd = match$0[2], err_code = match$0[1];
    caml_call3(Stdlib_Printf[3], f, cmd, err_code);
    caml_call2(Stdlib_Printf[3], g, file1);
    exec(cst_diff_u$0);
    return 0;
   }
   var Ppxlib_print_diff = [0, print];
   runtime.caml_register_global(15, Ppxlib_print_diff, "Ppxlib_print_diff");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHB4bGliX3ByaW50X2RpZmYuY21hLmpzIiwic2VjdGlvbnMiOlt7Im9mZnNldCI6eyJsaW5lIjoxMCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJwcHhsaWJfcHJpbnRfZGlmZi5jbWEuanMiLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIiwiL1VzZXJzL2ZhYmlhbi8ub3BhbS9kZWZhdWx0L2xpYi9wcHhsaWIvcHJpbnRfZGlmZi9wcHhsaWJfcHJpbnRfZGlmZi5tbCJdLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIm9wZW4gU3RkTGFiZWxzXG5cbmxldCBwYXRkaWZmX2NtZCB+dXNlX2NvbG9yIH5leHRyYV9wYXRkaWZmX2FyZ3MgPVxuICBsZXQgYXJncyA9XG4gICAgTGlzdC5jb25jYXRcbiAgICAgIFtcbiAgICAgICAgWyBcIi1rZWVwLXdoaXRlc3BhY2VcIiBdO1xuICAgICAgICBbIFwiLWxvY2F0aW9uLXN0eWxlIG9tYWtlXCIgXTtcbiAgICAgICAgKGlmIHVzZV9jb2xvciB0aGVuIFtdIGVsc2UgWyBcIi1hc2NpaVwiIF0pO1xuICAgICAgICBleHRyYV9wYXRkaWZmX2FyZ3M7XG4gICAgICBdXG4gIGluXG4gIFN0cmluZy5jb25jYXQgfnNlcDpcIiBcIiAoXCJwYXRkaWZmXCIgOjogYXJncylcblxubGV0IHByaW50ID9kaWZmX2NvbW1hbmQgPyhleHRyYV9wYXRkaWZmX2FyZ3MgPSBbXSkgPyh1c2VfY29sb3IgPSBmYWxzZSkgfmZpbGUxXG4gICAgfmZpbGUyICgpID1cbiAgbGV0IGV4ZWMgY21kID1cbiAgICBsZXQgY21kID1cbiAgICAgIFByaW50Zi5zcHJpbnRmIFwiJXMgJXMgJXMgMT4mMlwiIGNtZCAoRmlsZW5hbWUucXVvdGUgZmlsZTEpXG4gICAgICAgIChGaWxlbmFtZS5xdW90ZSBmaWxlMilcbiAgICBpblxuICAgIG1hdGNoIFN5cy5jb21tYW5kIGNtZCB3aXRoXG4gICAgfCAwIC0+IGBTYW1lXG4gICAgfCAxIC0+IGBEaWZmZXJlbnRcbiAgICB8IG4gLT4gYEVycm9yIChuLCBjbWQpXG4gIGluXG4gIG1hdGNoIGRpZmZfY29tbWFuZCB3aXRoXG4gIHwgU29tZSBzIC0+IGlnbm9yZSAoZXhlYyBzIDogWz4gYFNhbWUgfCBgRGlmZmVyZW50IHwgYEVycm9yIG9mIGludCAqIHN0cmluZyBdKVxuICB8IE5vbmUgLT4gKFxuICAgICAgbWF0Y2ggZXhlYyAocGF0ZGlmZl9jbWQgfnVzZV9jb2xvciB+ZXh0cmFfcGF0ZGlmZl9hcmdzKSB3aXRoXG4gICAgICB8IGBTYW1lIC0+XG4gICAgICAgICAgKCogcGF0ZGlmZiBwcm9kdWNlZCBubyBvdXRwdXQsIGZhbGxiYWNrIHRvIGRpZmYgLXUgKilcbiAgICAgICAgICBQcmludGYuZXByaW50ZiBcIkZpbGUgXFxcIiVzXFxcIiwgbGluZSAxLCBjaGFyYWN0ZXJzIDAtMDpcXG4lIVwiIGZpbGUxO1xuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKGV4ZWMgXCJkaWZmIC11XCIgOiBbPiBgU2FtZSB8IGBEaWZmZXJlbnQgfCBgRXJyb3Igb2YgaW50ICogc3RyaW5nIF0pXG4gICAgICB8IGBEaWZmZXJlbnQgLT5cbiAgICAgICAgICAoKiBwYXRkaWZmIHN1Y2Nlc3NmdWxseSBmb3VuZCBhIGRpZmZlcmVuY2UgKilcbiAgICAgICAgICAoKVxuICAgICAgfCBgRXJyb3IgKGVycl9jb2RlLCBjbWQpIC0+XG4gICAgICAgICAgKCogcGF0ZGlmZiB0aHJldyBhbiBlcnJvci4uLiBwZXJoYXBzIGl0IHdhc24ndCBpbnN0YWxsZWQ/IGZhbGxiYWNrIHRvIGRpZmYgLXUgKilcbiAgICAgICAgICBQcmludGYuZXByaW50ZlxuICAgICAgICAgICAgXCJFcnJvcjpcXG5cXFxuICAgICAgICAgICAgID4gJVMgZXhpdGVkIHdpdGggY29kZSAlZFxcblxcXG4gICAgICAgICAgICAgPiBQZXJoYXBzIHBhdGRpZmYgaXMgbm90IGluc3RhbGxlZD8gSGludCwgdHJ5OiBvcGFtIGluc3RhbGwgcGF0ZGlmZlxcblxcXG4gICAgICAgICAgICAgPiBGYWxsaW5nIGJhY2sgdG8gZGlmZiAtdVxcblxcblwiXG4gICAgICAgICAgICBjbWQgZXJyX2NvZGU7XG4gICAgICAgICAgUHJpbnRmLmVwcmludGYgXCJGaWxlIFxcXCIlc1xcXCIsIGxpbmUgMSwgY2hhcmFjdGVycyAwLTA6XFxuJSFcIiBmaWxlMTtcbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChleGVjIFwiZGlmZiAtdVwiIDogWz4gYFNhbWUgfCBgRGlmZmVyZW50IHwgYEVycm9yIG9mIGludCAqIHN0cmluZyBdKSlcbiJdLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0X2xpbmVfMV9jaGFyYWN0ZXJzXzBfMCIsImNzdF9GaWxlIiwiY3N0X0ZpbGVfc19saW5lXzFfY2hhcmFjdGVyc18wIiwiY3N0X2RpZmZfdSIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJjYW1sX2NhbGwzIiwiYTIiLCJjYW1sX2NhbGw0IiwiYTMiLCJnbG9iYWxfZGF0YSIsImNzdCIsIlN0ZGxpYl9GaWxlbmFtZSIsIlN0ZGxpYl9QcmludGYiLCJTdGRsaWJfTGlzdExhYmVscyIsIlN0ZGxpYl9TdHJpbmdMYWJlbHMiLCJjc3RfcGF0ZGlmZiIsInByaW50IiwiZGlmZl9jb21tYW5kIiwib3B0IiwiZmlsZTEiLCJmaWxlMiIsInBhcmFtIiwiZXh0cmFfcGF0ZGlmZl9hcmdzIiwidXNlX2NvbG9yIiwiZXhlYyIsImNtZCIsIm4iLCJzIiwiYXJncyIsIm1hdGNoIiwiZXJyX2NvZGUiLCJQcHhsaWJfcHJpbnRfZGlmZiJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyw0QkFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxpQ0FBQTtBQUFBLElBQUFDLGVBQUE7QUFBQSxZQUFBQyxXQUFBQyxHQUFBQztBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQUYsR0FBQUMsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFKLEdBQUFDLElBQUFFLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBTixHQUFBQyxJQUFBRSxJQUFBRSxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsTUFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxvQkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBaEIsYUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQSxlQUFBO0FBQUEsWUFBQWlCLE1BQUFDLGNBQUEsR0FBQUMsS0FBQUMsT0FBQUMsT0FBQUM7QUFBQUEsUUFBQUMscUJDY1UsY0FBQUMsWUFBQTtBQUFBLGFBQUFDLEtBQUFDO0FBQUFBO0FBQUFBLE1BQUEsSUFLRjtBQUFBLFVBRGlDO0FBQUEsTUFBQUEsUUFBbkM7QUFBQSxNQUFBQyxJQUdJO0FBQUEsS0FBZTtBQUFBO0FBQUEsbUVBR0M7QUFBQTtBQUFBLElBRXhCLHFCQUFBQyxJQUFBLGlCQUNvQixTQUFNO0FBQUE7QUFBQSxTQXhCMUI7QUFBQTtBQUFBLEtBQUFDLE9BQ0U7QUFBQSxLQUFBQztBQUFBQSxPQXlCUSxLQWpCVjtBQUFBLElBaUIyRDtBQUFBO0FBQUEsZ0JBR25ELHdDQUVHO0FBQUEsZ0JBY21FO0FBQUEsUUFBQUEsVUFuQm5CLFVBQUFKLE1BQUEsWUFBQUssV0FBQTtBQUFBLElBV25EO0FBQUEsSUFNQTtBQUFBLElBRUc7QUFBQSxJQUFjO0FBQUEsR0FBcUQ7QUFBQSxPQUFBQyxvQkRoRGhGIiwiaWdub3JlTGlzdCI6WzBdfX1dfQ==
