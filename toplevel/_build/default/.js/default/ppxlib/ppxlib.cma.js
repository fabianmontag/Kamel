// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppxlib__
//# shape: Ppxlib__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppxlib = [0],
    Ppxlib$0 = [0, Ppxlib];
   runtime.caml_register_global(0, Ppxlib$0, "Ppxlib__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Import
//# unitInfo: Requires: Ppxlib_ast, Ppxlib_ast__Ast, Stdppx
//# shape: Ppxlib__Import:[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdppx = global_data.Stdppx,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    default_string_of_float = Stdppx[1],
    write_old_option_format = Stdppx[2],
    read_old_option_format = Stdppx[3],
    list_map = Stdppx[4],
    sexp_of_unit = Stdppx[5],
    sexp_of_bool = Stdppx[6],
    sexp_of_string = Stdppx[7],
    sexp_of_bytes = Stdppx[8],
    sexp_of_char = Stdppx[9],
    sexp_of_int = Stdppx[10],
    sexp_of_float = Stdppx[11],
    sexp_of_int32 = Stdppx[12],
    sexp_of_int64 = Stdppx[13],
    sexp_of_nativeint = Stdppx[14],
    sexp_of_ref = Stdppx[15],
    sexp_of_lazy_t = Stdppx[16],
    sexp_of_option = Stdppx[17],
    sexp_of_pair = Stdppx[18],
    sexp_of_triple = Stdppx[19],
    sexp_of_list = Stdppx[20],
    sexp_of_array = Stdppx[21],
    sexp_of_hashtbl = Stdppx[22],
    sexp_of_opaque = Stdppx[23],
    sexp_of_fun = Stdppx[24],
    Of_sexp_error = Stdppx[25],
    record_check_extra_fields = Stdppx[26],
    of_sexp_error = Stdppx[27],
    of_sexp_error_exn = Stdppx[28],
    unit_of_sexp = Stdppx[29],
    bool_of_sexp = Stdppx[30],
    string_of_sexp = Stdppx[31],
    bytes_of_sexp = Stdppx[32],
    char_of_sexp = Stdppx[33],
    int_of_sexp = Stdppx[34],
    float_of_sexp = Stdppx[35],
    int32_of_sexp = Stdppx[36],
    int64_of_sexp = Stdppx[37],
    nativeint_of_sexp = Stdppx[38],
    ref_of_sexp = Stdppx[39],
    lazy_t_of_sexp = Stdppx[40],
    option_of_sexp = Stdppx[41],
    pair_of_sexp = Stdppx[42],
    triple_of_sexp = Stdppx[43],
    list_of_sexp = Stdppx[44],
    array_of_sexp = Stdppx[45],
    hashtbl_of_sexp = Stdppx[46],
    opaque_of_sexp = Stdppx[47],
    fun_of_sexp = Stdppx[48],
    sexp_grammar_with_tags = Stdppx[49],
    sexp_grammar_with_tag_list = Stdppx[50],
    unit_sexp_grammar = Stdppx[51],
    bool_sexp_grammar = Stdppx[52],
    string_sexp_grammar = Stdppx[53],
    bytes_sexp_grammar = Stdppx[54],
    char_sexp_grammar = Stdppx[55],
    int_sexp_grammar = Stdppx[56],
    float_sexp_grammar = Stdppx[57],
    int32_sexp_grammar = Stdppx[58],
    int64_sexp_grammar = Stdppx[59],
    nativeint_sexp_grammar = Stdppx[60],
    sexp_t_sexp_grammar = Stdppx[61],
    ref_sexp_grammar = Stdppx[62],
    lazy_t_sexp_grammar = Stdppx[63],
    option_sexp_grammar = Stdppx[64],
    list_sexp_grammar = Stdppx[65],
    array_sexp_grammar = Stdppx[66],
    opaque_sexp_grammar = Stdppx[67],
    fun_sexp_grammar = Stdppx[68],
    sexp_of_exn = Stdppx[69],
    printexc_prefer_sexp = Stdppx[70],
    sexp_of_exn_opt = Stdppx[71],
    Exn_converter = Stdppx[72],
    Poly = Stdppx[73],
    compare = Stdppx[74],
    equal = Stdppx[75],
    symbol = Stdppx[76],
    symbol$0 = Stdppx[77],
    symbol$1 = Stdppx[78],
    symbol$2 = Stdppx[79],
    symbol$3 = Stdppx[80],
    symbol$4 = Stdppx[81],
    min = Stdppx[82],
    max = Stdppx[83],
    Bool = Stdppx[84],
    Bytes = Stdppx[85],
    Char = Stdppx[86],
    Exn = Stdppx[87],
    Float = Stdppx[88],
    Fn = Stdppx[89],
    Hashtbl = Stdppx[90],
    In_channel = Stdppx[91],
    Int = Stdppx[92],
    Either = Stdppx[93],
    List = Stdppx[94],
    Option = Stdppx[95],
    Result = Stdppx[96],
    NonEmptyList = Stdppx[97],
    Out_channel = Stdppx[98],
    String = Stdppx[99],
    symbol$5 = Stdppx[100],
    output = Stdppx[101],
    output_substring = Stdppx[102],
    map = Ppxlib_ast_Ast[1],
    iter = Ppxlib_ast_Ast[2],
    fold = Ppxlib_ast_Ast[3],
    fold_map = Ppxlib_ast_Ast[4],
    map_with_context = Ppxlib_ast_Ast[5],
    lift = Ppxlib_ast_Ast[6],
    lift_map_with_context = Ppxlib_ast_Ast[7],
    Ppxlib_Import =
      [0,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       Exn_converter,
       Poly,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max,
       Bool,
       Bytes,
       Char,
       Exn,
       Float,
       Fn,
       Hashtbl,
       In_channel,
       Int,
       Either,
       List,
       Option,
       Result,
       NonEmptyList,
       Out_channel,
       String,
       symbol$5,
       output,
       output_substring,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       lift,
       lift_map_with_context];
   runtime.caml_register_global(2, Ppxlib_Import, "Ppxlib__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Location
//# unitInfo: Requires: Astlib__Location, Ppxlib__Import, Ppxlib_ast__Location_error, Stdlib__Format, Stdlib__Printexc
//# shape: Ppxlib__Location:[F(1)*,F(2)*,N,F(1),F(2),F(2),F(1)*,N,F(2),F(2),F(2),F(2),F(2),N,F(2),N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Astlib_Location = global_data.Astlib__Location,
    Ppxlib_ast_Location_error = global_data.Ppxlib_ast__Location_error,
    Stdlib_Printexc = global_data.Stdlib__Printexc;
   function in_file(name){
    var loc = [0, name, 0, 0, -1];
    return [0, loc, loc, 1];
   }
   function set_filename(loc, fn){
    var
     a = loc[1],
     loc_start = [0, fn, a[2], a[3], a[4]],
     b = loc[2],
     loc_end = [0, fn, b[2], b[3], b[4]];
    return [0, loc_start, loc_end, loc[3]];
   }
   var none = in_file("_none_");
   function is_none(v){return caml_call2(Ppxlib_Import[73][3], v, none);}
   function init(lexbuf, fname){lexbuf[12] = [0, fname, 1, 0, 0]; return 0;}
   function raise_errorf(loc, fmt){
    return caml_call2(Astlib_Location[7], loc, fmt);
   }
   var
    report_exception = Astlib_Location[8],
    a =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [12, 58, 0]]]]]]]]],
       'File "%s", line %d, characters %d-%d:'];
   function of_lexbuf(lexbuf){return [0, lexbuf[11], lexbuf[12], 0];}
   function print(ppf, t){
    return caml_call6
            (Stdlib_Format[143],
             ppf,
             a,
             t[1][1],
             t[1][2],
             t[1][4] - t[1][3] | 0,
             t[2][4] - t[1][3] | 0);
   }
   function compare_pos(p1, p2){
    function column(p){return p[4] - p[3] | 0;}
    var n = caml_call2(Ppxlib_Import[92][3], p1[2], p2[2]);
    if(0 !== n) return n;
    var a = column(p2), b = column(p1);
    return caml_call2(Ppxlib_Import[92][3], b, a);
   }
   function min_pos(p1, p2){
    var a = compare_pos(p1, p2);
    return caml_call2(Ppxlib_Import[80], a, 0) ? p1 : p2;
   }
   function max_pos(p1, p2){
    var a = compare_pos(p1, p2);
    return caml_call2(Ppxlib_Import[81], a, 0) ? p1 : p2;
   }
   function compare(loc1, loc2){
    var n = compare_pos(loc1[1], loc2[1]);
    return 0 === n ? compare_pos(loc1[2], loc2[2]) : n;
   }
   var
    of_exn = Ppxlib_ast_Location_error[1],
    register_error_of_exn = Ppxlib_ast_Location_error[2],
    message = Ppxlib_ast_Location_error[3],
    set_message = Ppxlib_ast_Location_error[4],
    make = Ppxlib_ast_Location_error[5],
    to_extension = Ppxlib_ast_Location_error[6],
    raise = Ppxlib_ast_Location_error[7],
    update_loc = Ppxlib_ast_Location_error[8],
    get_location = Ppxlib_ast_Location_error[9],
    of_extension = Ppxlib_ast_Location_error[10];
   function createf(loc, fmt){
    return caml_call2
            (Stdlib_Format[154],
             function(str){return caml_call3(make, loc, str, 0);},
             fmt);
   }
   function error_extensionf(loc, fmt){
    return caml_call2
            (Stdlib_Format[154],
             function(str){
              return caml_call1(to_extension, caml_call3(make, loc, str, 0));
             },
             fmt);
   }
   var Error = Astlib_Location[6];
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      var tag = param[1];
      if(tag !== Error) return 0;
      var e = param[2];
      return [0, caml_call1(message, e)];
     });
   var
    Ppxlib_Location =
      [0,
       in_file,
       set_filename,
       none,
       is_none,
       init,
       raise_errorf,
       of_lexbuf,
       report_exception,
       print,
       compare_pos,
       min_pos,
       max_pos,
       compare,
       [0,
        make,
        createf,
        message,
        set_message,
        register_error_of_exn,
        of_exn,
        to_extension,
        raise,
        update_loc,
        get_location,
        of_extension],
       error_extensionf,
       Error];
   runtime.caml_register_global(7, Ppxlib_Location, "Ppxlib__Location");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_builder_generated
//# shape: Ppxlib__Ast_builder_generated:[[F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*],F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function attribute(loc){
    return function(name){
     return function(payload){return [0, name, payload, loc];};};
   }
   function binding_op(loc){
    return function(op){
     return function(pat){
      return function(exp){return [0, op, pat, exp, loc];};};};
   }
   function case$(lhs){
    return function(guard){
     return function(rhs){return [0, lhs, guard, rhs];};};
   }
   function pcl_constr(loc){
    return function(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};};
   }
   function pcl_structure(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pcl_fun(loc){
    return function(x0){
     return function(x1){
      return function(x2){
       return function(x3){return [0, [2, x0, x1, x2, x3], loc, 0];};};};};
   }
   function pcl_apply(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};};
   }
   function pcl_let(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [4, x0, x1, x2], loc, 0];};};};
   }
   function pcl_constraint(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0];};};
   }
   function pcl_extension(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function pcl_open(loc){
    return function(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0];};};
   }
   function pcf_inherit(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};};
   }
   function pcf_val(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function pcf_method(loc){
    return function(x0){return [0, [2, x0], loc, 0];};
   }
   function pcf_constraint(loc){
    return function(x0){return [0, [3, x0], loc, 0];};
   }
   function pcf_initializer(loc){
    return function(x0){return [0, [4, x0], loc, 0];};
   }
   function pcf_attribute(loc){
    return function(x0){return [0, [5, x0], loc, 0];};
   }
   function pcf_extension(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function class_infos(loc){
    return function(virt){
     return function(params){
      return function(name){
       return function(expr){return [0, virt, params, name, expr, loc, 0];};};};};
   }
   function class_signature(self){
    return function(fields){return [0, self, fields];};
   }
   function class_structure(self){
    return function(fields){return [0, self, fields];};
   }
   function pcty_constr(loc){
    return function(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};};
   }
   function pcty_signature(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pcty_arrow(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0];};};};
   }
   function pcty_extension(loc){
    return function(x0){return [0, [3, x0], loc, 0];};
   }
   function pcty_open(loc){
    return function(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0];};};
   }
   function pctf_inherit(loc){
    return function(x0){return [0, [0, x0], loc, 0];};
   }
   function pctf_val(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function pctf_method(loc){
    return function(x0){return [0, [2, x0], loc, 0];};
   }
   function pctf_constraint(loc){
    return function(x0){return [0, [3, x0], loc, 0];};
   }
   function pctf_attribute(loc){
    return function(x0){return [0, [4, x0], loc, 0];};
   }
   function pctf_extension(loc){
    return function(x0){return [0, [5, x0], loc, 0];};
   }
   function constructor_declaration(loc){
    return function(name){
     return function(vars){
      return function(args){
       return function(res){return [0, name, vars, args, res, loc, 0];};};};};
   }
   function ptyp_any(loc){return [0, 0, loc, 0, 0];}
   function ptyp_var(loc){
    return function(x0){return [0, [0, x0], loc, 0, 0];};
   }
   function ptyp_arrow(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [1, x0, x1, x2], loc, 0, 0];};};};
   }
   function ptyp_tuple(loc){
    return function(x0){return [0, [2, x0], loc, 0, 0];};
   }
   function ptyp_constr(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};};
   }
   function ptyp_object(loc){
    return function(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0, 0];};};
   }
   function ptyp_class(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};};
   }
   function ptyp_alias(loc){
    return function(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};};
   }
   function ptyp_variant(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [7, x0, x1, x2], loc, 0, 0];};};};
   }
   function ptyp_poly(loc){
    return function(x0){
     return function(x1){return [0, [8, x0, x1], loc, 0, 0];};};
   }
   function ptyp_package(loc){
    return function(x0){return [0, [9, x0], loc, 0, 0];};
   }
   function ptyp_open(loc){
    return function(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};};
   }
   function ptyp_extension(loc){
    return function(x0){return [0, [11, x0], loc, 0, 0];};
   }
   function pdir_string(loc){return function(x0){return [0, [0, x0], loc];};}
   function pdir_int(loc){
    return function(x0){return function(x1){return [0, [1, x0, x1], loc];};};
   }
   function pdir_ident(loc){return function(x0){return [0, [2, x0], loc];};}
   function pdir_bool(loc){return function(x0){return [0, [3, x0], loc];};}
   function pexp_ident(loc){
    return function(x0){return [0, [0, x0], loc, 0, 0];};
   }
   function pexp_constant(loc){
    return function(x0){return [0, [1, x0], loc, 0, 0];};
   }
   function pexp_let(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_function(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [3, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_apply(loc){
    return function(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0, 0];};};
   }
   function pexp_match(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};};
   }
   function pexp_try(loc){
    return function(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};};
   }
   function pexp_tuple(loc){
    return function(x0){return [0, [7, x0], loc, 0, 0];};
   }
   function pexp_construct(loc){
    return function(x0){
     return function(x1){return [0, [8, x0, x1], loc, 0, 0];};};
   }
   function pexp_variant(loc){
    return function(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};};
   }
   function pexp_record(loc){
    return function(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};};
   }
   function pexp_field(loc){
    return function(x0){
     return function(x1){return [0, [11, x0, x1], loc, 0, 0];};};
   }
   function pexp_setfield(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [12, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_array(loc){
    return function(x0){return [0, [13, x0], loc, 0, 0];};
   }
   function pexp_ifthenelse(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [14, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_sequence(loc){
    return function(x0){
     return function(x1){return [0, [15, x0, x1], loc, 0, 0];};};
   }
   function pexp_while(loc){
    return function(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};};
   }
   function pexp_for(loc){
    return function(x0){
     return function(x1){
      return function(x2){
       return function(x3){
        return function(x4){return [0, [17, x0, x1, x2, x3, x4], loc, 0, 0];};};};};};
   }
   function pexp_constraint(loc){
    return function(x0){
     return function(x1){return [0, [18, x0, x1], loc, 0, 0];};};
   }
   function pexp_coerce(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [19, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_send(loc){
    return function(x0){
     return function(x1){return [0, [20, x0, x1], loc, 0, 0];};};
   }
   function pexp_new(loc){
    return function(x0){return [0, [21, x0], loc, 0, 0];};
   }
   function pexp_setinstvar(loc){
    return function(x0){
     return function(x1){return [0, [22, x0, x1], loc, 0, 0];};};
   }
   function pexp_override(loc){
    return function(x0){return [0, [23, x0], loc, 0, 0];};
   }
   function pexp_letmodule(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [24, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_letexception(loc){
    return function(x0){
     return function(x1){return [0, [25, x0, x1], loc, 0, 0];};};
   }
   function pexp_assert(loc){
    return function(x0){return [0, [26, x0], loc, 0, 0];};
   }
   function pexp_lazy(loc){
    return function(x0){return [0, [27, x0], loc, 0, 0];};
   }
   function pexp_poly(loc){
    return function(x0){
     return function(x1){return [0, [28, x0, x1], loc, 0, 0];};};
   }
   function pexp_object(loc){
    return function(x0){return [0, [29, x0], loc, 0, 0];};
   }
   function pexp_newtype(loc){
    return function(x0){
     return function(x1){return [0, [30, x0, x1], loc, 0, 0];};};
   }
   function pexp_pack(loc){
    return function(x0){return [0, [31, x0], loc, 0, 0];};
   }
   function pexp_open(loc){
    return function(x0){
     return function(x1){return [0, [32, x0, x1], loc, 0, 0];};};
   }
   function pexp_letop(loc){
    return function(x0){return [0, [33, x0], loc, 0, 0];};
   }
   function pexp_extension(loc){
    return function(x0){return [0, [34, x0], loc, 0, 0];};
   }
   function pexp_unreachable(loc){return [0, 0, loc, 0, 0];}
   function extension_constructor(loc){
    return function(name){
     return function(kind){return [0, name, kind, loc, 0];};};
   }
   function pparam_val(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, loc, [0, x0, x1, x2]];};};};
   }
   function pparam_newtype(loc){
    return function(x0){return [0, loc, [1, x0]];};
   }
   function include_infos(loc){
    return function(mod){return [0, mod, loc, 0];};
   }
   function label_declaration(loc){
    return function(name){
     return function(mutable){
      return function(type){return [0, name, mutable, type, loc, 0];};};};
   }
   function letop(let$){
    return function(ands){
     return function(body){return [0, let$, ands, body];};};
   }
   function location(start){
    return function(end){
     return function(ghost){return [0, start, end, ghost];};};
   }
   function module_binding(loc){
    return function(name){
     return function(expr){return [0, name, expr, 0, loc];};};
   }
   function module_declaration(loc){
    return function(name){
     return function(type){return [0, name, type, 0, loc];};};
   }
   function pmod_ident(loc){
    return function(x0){return [0, [0, x0], loc, 0];};
   }
   function pmod_structure(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pmod_functor(loc){
    return function(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};};
   }
   function pmod_apply(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};};
   }
   function pmod_apply_unit(loc){
    return function(x0){return [0, [4, x0], loc, 0];};
   }
   function pmod_constraint(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0];};};
   }
   function pmod_unpack(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function pmod_extension(loc){
    return function(x0){return [0, [7, x0], loc, 0];};
   }
   function module_substitution(loc){
    return function(name){
     return function(manifest){return [0, name, manifest, 0, loc];};};
   }
   function pmty_ident(loc){
    return function(x0){return [0, [0, x0], loc, 0];};
   }
   function pmty_signature(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pmty_functor(loc){
    return function(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};};
   }
   function pmty_with(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};};
   }
   function pmty_typeof(loc){
    return function(x0){return [0, [4, x0], loc, 0];};
   }
   function pmty_extension(loc){
    return function(x0){return [0, [5, x0], loc, 0];};
   }
   function pmty_alias(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function module_type_declaration(loc){
    return function(name){
     return function(type){return [0, name, type, 0, loc];};};
   }
   function otag(loc){
    return function(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};};
   }
   function oinherit(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function open_infos(loc){
    return function(expr){
     return function(override){return [0, expr, override, loc, 0];};};
   }
   function ppat_any(loc){return [0, 0, loc, 0, 0];}
   function ppat_var(loc){
    return function(x0){return [0, [0, x0], loc, 0, 0];};
   }
   function ppat_alias(loc){
    return function(x0){
     return function(x1){return [0, [1, x0, x1], loc, 0, 0];};};
   }
   function ppat_constant(loc){
    return function(x0){return [0, [2, x0], loc, 0, 0];};
   }
   function ppat_interval(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};};
   }
   function ppat_tuple(loc){
    return function(x0){return [0, [4, x0], loc, 0, 0];};
   }
   function ppat_construct(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};};
   }
   function ppat_variant(loc){
    return function(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};};
   }
   function ppat_record(loc){
    return function(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0, 0];};};
   }
   function ppat_array(loc){
    return function(x0){return [0, [8, x0], loc, 0, 0];};
   }
   function ppat_or(loc){
    return function(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};};
   }
   function ppat_constraint(loc){
    return function(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};};
   }
   function ppat_type(loc){
    return function(x0){return [0, [11, x0], loc, 0, 0];};
   }
   function ppat_lazy(loc){
    return function(x0){return [0, [12, x0], loc, 0, 0];};
   }
   function ppat_unpack(loc){
    return function(x0){return [0, [13, x0], loc, 0, 0];};
   }
   function ppat_exception(loc){
    return function(x0){return [0, [14, x0], loc, 0, 0];};
   }
   function ppat_extension(loc){
    return function(x0){return [0, [15, x0], loc, 0, 0];};
   }
   function ppat_open(loc){
    return function(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};};
   }
   function position(fname){
    return function(lnum){
     return function(bol){
      return function(cnum){return [0, fname, lnum, bol, cnum];};};};
   }
   function rtag(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};};
   }
   function rinherit(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function psig_value(loc){return function(x0){return [0, [0, x0], loc];};}
   function psig_type(loc){
    return function(x0){return function(x1){return [0, [1, x0, x1], loc];};};
   }
   function psig_typesubst(loc){
    return function(x0){return [0, [2, x0], loc];};
   }
   function psig_typext(loc){return function(x0){return [0, [3, x0], loc];};}
   function psig_exception(loc){
    return function(x0){return [0, [4, x0], loc];};
   }
   function psig_module(loc){return function(x0){return [0, [5, x0], loc];};}
   function psig_modsubst(loc){
    return function(x0){return [0, [6, x0], loc];};
   }
   function psig_recmodule(loc){
    return function(x0){return [0, [7, x0], loc];};
   }
   function psig_modtype(loc){return function(x0){return [0, [8, x0], loc];};}
   function psig_modtypesubst(loc){
    return function(x0){return [0, [9, x0], loc];};
   }
   function psig_open(loc){return function(x0){return [0, [10, x0], loc];};}
   function psig_include(loc){
    return function(x0){return [0, [11, x0], loc];};
   }
   function psig_class(loc){return function(x0){return [0, [12, x0], loc];};}
   function psig_class_type(loc){
    return function(x0){return [0, [13, x0], loc];};
   }
   function psig_attribute(loc){
    return function(x0){return [0, [14, x0], loc];};
   }
   function psig_extension(loc){
    return function(x0){return function(x1){return [0, [15, x0, x1], loc];};};
   }
   function pstr_eval(loc){
    return function(x0){return function(x1){return [0, [0, x0, x1], loc];};};
   }
   function pstr_value(loc){
    return function(x0){return function(x1){return [0, [1, x0, x1], loc];};};
   }
   function pstr_primitive(loc){
    return function(x0){return [0, [2, x0], loc];};
   }
   function pstr_type(loc){
    return function(x0){return function(x1){return [0, [3, x0, x1], loc];};};
   }
   function pstr_typext(loc){return function(x0){return [0, [4, x0], loc];};}
   function pstr_exception(loc){
    return function(x0){return [0, [5, x0], loc];};
   }
   function pstr_module(loc){return function(x0){return [0, [6, x0], loc];};}
   function pstr_recmodule(loc){
    return function(x0){return [0, [7, x0], loc];};
   }
   function pstr_modtype(loc){return function(x0){return [0, [8, x0], loc];};}
   function pstr_open(loc){return function(x0){return [0, [9, x0], loc];};}
   function pstr_class(loc){return function(x0){return [0, [10, x0], loc];};}
   function pstr_class_type(loc){
    return function(x0){return [0, [11, x0], loc];};
   }
   function pstr_include(loc){
    return function(x0){return [0, [12, x0], loc];};
   }
   function pstr_attribute(loc){
    return function(x0){return [0, [13, x0], loc];};
   }
   function pstr_extension(loc){
    return function(x0){return function(x1){return [0, [14, x0, x1], loc];};};
   }
   function toplevel_directive(loc){
    return function(name){return function(arg){return [0, name, arg, loc];};};
   }
   function type_declaration(loc){
    return function(name){
     return function(params){
      return function(cstrs){
       return function(kind){
        return function(private$){
         return function(manifest){
          return [0, name, params, cstrs, kind, private$, manifest, 0, loc];};};};};};};
   }
   function type_exception(loc){
    return function(constructor){return [0, constructor, loc, 0];};
   }
   function type_extension(loc){
    return function(path){
     return function(params){
      return function(constructors){
       return function(private$){
        return [0, path, params, constructors, private$, loc, 0];};};};};
   }
   function value_binding(loc){
    return function(pat){
     return function(expr){
      return function(constraint){return [0, pat, expr, constraint, 0, loc];};};};
   }
   function value_description(loc){
    return function(name){
     return function(type){
      return function(prim){return [0, name, type, prim, 0, loc];};};};
   }
   var
    M =
      [0,
       value_description,
       value_binding,
       type_extension,
       type_exception,
       type_declaration,
       toplevel_directive,
       pstr_extension,
       pstr_attribute,
       pstr_include,
       pstr_class_type,
       pstr_class,
       pstr_open,
       pstr_modtype,
       pstr_recmodule,
       pstr_module,
       pstr_exception,
       pstr_typext,
       pstr_type,
       pstr_primitive,
       pstr_value,
       pstr_eval,
       psig_extension,
       psig_attribute,
       psig_class_type,
       psig_class,
       psig_include,
       psig_open,
       psig_modtypesubst,
       psig_modtype,
       psig_recmodule,
       psig_modsubst,
       psig_module,
       psig_exception,
       psig_typext,
       psig_typesubst,
       psig_type,
       psig_value,
       rinherit,
       rtag,
       position,
       ppat_open,
       ppat_extension,
       ppat_exception,
       ppat_unpack,
       ppat_lazy,
       ppat_type,
       ppat_constraint,
       ppat_or,
       ppat_array,
       ppat_record,
       ppat_variant,
       ppat_construct,
       ppat_tuple,
       ppat_interval,
       ppat_constant,
       ppat_alias,
       ppat_var,
       ppat_any,
       oinherit,
       otag,
       module_type_declaration,
       pmty_alias,
       pmty_extension,
       pmty_typeof,
       pmty_with,
       pmty_functor,
       pmty_signature,
       pmty_ident,
       module_substitution,
       pmod_extension,
       pmod_unpack,
       pmod_constraint,
       pmod_apply_unit,
       pmod_apply,
       pmod_functor,
       pmod_structure,
       pmod_ident,
       module_declaration,
       module_binding,
       location,
       letop,
       label_declaration,
       pparam_newtype,
       pparam_val,
       extension_constructor,
       pexp_unreachable,
       pexp_extension,
       pexp_letop,
       pexp_open,
       pexp_pack,
       pexp_newtype,
       pexp_object,
       pexp_poly,
       pexp_lazy,
       pexp_assert,
       pexp_letexception,
       pexp_letmodule,
       pexp_override,
       pexp_setinstvar,
       pexp_new,
       pexp_send,
       pexp_coerce,
       pexp_constraint,
       pexp_for,
       pexp_while,
       pexp_sequence,
       pexp_ifthenelse,
       pexp_array,
       pexp_setfield,
       pexp_field,
       pexp_record,
       pexp_variant,
       pexp_construct,
       pexp_tuple,
       pexp_try,
       pexp_match,
       pexp_apply,
       pexp_function,
       pexp_let,
       pexp_constant,
       pexp_ident,
       pdir_bool,
       pdir_ident,
       pdir_int,
       pdir_string,
       ptyp_extension,
       ptyp_open,
       ptyp_package,
       ptyp_poly,
       ptyp_variant,
       ptyp_alias,
       ptyp_class,
       ptyp_object,
       ptyp_constr,
       ptyp_tuple,
       ptyp_arrow,
       ptyp_var,
       ptyp_any,
       constructor_declaration,
       pctf_extension,
       pctf_attribute,
       pctf_constraint,
       pctf_method,
       pctf_val,
       pctf_inherit,
       pcty_open,
       pcty_extension,
       pcty_arrow,
       pcty_signature,
       pcty_constr,
       class_structure,
       class_signature,
       pcf_extension,
       pcf_attribute,
       pcf_initializer,
       pcf_constraint,
       pcf_method,
       pcf_val,
       pcf_inherit,
       pcl_open,
       pcl_extension,
       pcl_constraint,
       pcl_let,
       pcl_apply,
       pcl_fun,
       pcl_structure,
       pcl_constr,
       case$,
       binding_op,
       attribute,
       open_infos,
       include_infos,
       class_infos];
   function Make(Loc){
    var loc = Loc[1];
    function attribute(name){
     return function(payload){return [0, name, payload, loc];};
    }
    function binding_op(op){
     return function(pat){
      return function(exp){return [0, op, pat, exp, loc];};};
    }
    function case$(lhs){
     return function(guard){
      return function(rhs){return [0, lhs, guard, rhs];};};
    }
    function pcl_constr(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};
    }
    function pcl_structure(x0){return [0, [1, x0], loc, 0];}
    function pcl_fun(x0){
     return function(x1){
      return function(x2){
       return function(x3){return [0, [2, x0, x1, x2, x3], loc, 0];};};};
    }
    function pcl_apply(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};
    }
    function pcl_let(x0){
     return function(x1){
      return function(x2){return [0, [4, x0, x1, x2], loc, 0];};};
    }
    function pcl_constraint(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0];};
    }
    function pcl_extension(x0){return [0, [6, x0], loc, 0];}
    function pcl_open(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0];};
    }
    function pcf_inherit(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};
    }
    function pcf_val(x0){return [0, [1, x0], loc, 0];}
    function pcf_method(x0){return [0, [2, x0], loc, 0];}
    function pcf_constraint(x0){return [0, [3, x0], loc, 0];}
    function pcf_initializer(x0){return [0, [4, x0], loc, 0];}
    function pcf_attribute(x0){return [0, [5, x0], loc, 0];}
    function pcf_extension(x0){return [0, [6, x0], loc, 0];}
    function class_infos(virt){
     return function(params){
      return function(name){
       return function(expr){return [0, virt, params, name, expr, loc, 0];};};};
    }
    function class_signature(self){
     return function(fields){return [0, self, fields];};
    }
    function class_structure(self){
     return function(fields){return [0, self, fields];};
    }
    function pcty_constr(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};
    }
    function pcty_signature(x0){return [0, [1, x0], loc, 0];}
    function pcty_arrow(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0];};};
    }
    function pcty_extension(x0){return [0, [3, x0], loc, 0];}
    function pcty_open(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0];};
    }
    function pctf_inherit(x0){return [0, [0, x0], loc, 0];}
    function pctf_val(x0){return [0, [1, x0], loc, 0];}
    function pctf_method(x0){return [0, [2, x0], loc, 0];}
    function pctf_constraint(x0){return [0, [3, x0], loc, 0];}
    function pctf_attribute(x0){return [0, [4, x0], loc, 0];}
    function pctf_extension(x0){return [0, [5, x0], loc, 0];}
    function constructor_declaration(name){
     return function(vars){
      return function(args){
       return function(res){return [0, name, vars, args, res, loc, 0];};};};
    }
    var ptyp_any = [0, 0, loc, 0, 0];
    function ptyp_var(x0){return [0, [0, x0], loc, 0, 0];}
    function ptyp_arrow(x0){
     return function(x1){
      return function(x2){return [0, [1, x0, x1, x2], loc, 0, 0];};};
    }
    function ptyp_tuple(x0){return [0, [2, x0], loc, 0, 0];}
    function ptyp_constr(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};
    }
    function ptyp_object(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0, 0];};
    }
    function ptyp_class(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};
    }
    function ptyp_alias(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};
    }
    function ptyp_variant(x0){
     return function(x1){
      return function(x2){return [0, [7, x0, x1, x2], loc, 0, 0];};};
    }
    function ptyp_poly(x0){
     return function(x1){return [0, [8, x0, x1], loc, 0, 0];};
    }
    function ptyp_package(x0){return [0, [9, x0], loc, 0, 0];}
    function ptyp_open(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};
    }
    function ptyp_extension(x0){return [0, [11, x0], loc, 0, 0];}
    function pdir_string(x0){return [0, [0, x0], loc];}
    function pdir_int(x0){return function(x1){return [0, [1, x0, x1], loc];};}
    function pdir_ident(x0){return [0, [2, x0], loc];}
    function pdir_bool(x0){return [0, [3, x0], loc];}
    function pexp_ident(x0){return [0, [0, x0], loc, 0, 0];}
    function pexp_constant(x0){return [0, [1, x0], loc, 0, 0];}
    function pexp_let(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_function(x0){
     return function(x1){
      return function(x2){return [0, [3, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_apply(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0, 0];};
    }
    function pexp_match(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};
    }
    function pexp_try(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};
    }
    function pexp_tuple(x0){return [0, [7, x0], loc, 0, 0];}
    function pexp_construct(x0){
     return function(x1){return [0, [8, x0, x1], loc, 0, 0];};
    }
    function pexp_variant(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};
    }
    function pexp_record(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};
    }
    function pexp_field(x0){
     return function(x1){return [0, [11, x0, x1], loc, 0, 0];};
    }
    function pexp_setfield(x0){
     return function(x1){
      return function(x2){return [0, [12, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_array(x0){return [0, [13, x0], loc, 0, 0];}
    function pexp_ifthenelse(x0){
     return function(x1){
      return function(x2){return [0, [14, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_sequence(x0){
     return function(x1){return [0, [15, x0, x1], loc, 0, 0];};
    }
    function pexp_while(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};
    }
    function pexp_for(x0){
     return function(x1){
      return function(x2){
       return function(x3){
        return function(x4){return [0, [17, x0, x1, x2, x3, x4], loc, 0, 0];};};};};
    }
    function pexp_constraint(x0){
     return function(x1){return [0, [18, x0, x1], loc, 0, 0];};
    }
    function pexp_coerce(x0){
     return function(x1){
      return function(x2){return [0, [19, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_send(x0){
     return function(x1){return [0, [20, x0, x1], loc, 0, 0];};
    }
    function pexp_new(x0){return [0, [21, x0], loc, 0, 0];}
    function pexp_setinstvar(x0){
     return function(x1){return [0, [22, x0, x1], loc, 0, 0];};
    }
    function pexp_override(x0){return [0, [23, x0], loc, 0, 0];}
    function pexp_letmodule(x0){
     return function(x1){
      return function(x2){return [0, [24, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_letexception(x0){
     return function(x1){return [0, [25, x0, x1], loc, 0, 0];};
    }
    function pexp_assert(x0){return [0, [26, x0], loc, 0, 0];}
    function pexp_lazy(x0){return [0, [27, x0], loc, 0, 0];}
    function pexp_poly(x0){
     return function(x1){return [0, [28, x0, x1], loc, 0, 0];};
    }
    function pexp_object(x0){return [0, [29, x0], loc, 0, 0];}
    function pexp_newtype(x0){
     return function(x1){return [0, [30, x0, x1], loc, 0, 0];};
    }
    function pexp_pack(x0){return [0, [31, x0], loc, 0, 0];}
    function pexp_open(x0){
     return function(x1){return [0, [32, x0, x1], loc, 0, 0];};
    }
    function pexp_letop(x0){return [0, [33, x0], loc, 0, 0];}
    function pexp_extension(x0){return [0, [34, x0], loc, 0, 0];}
    var pexp_unreachable = [0, 0, loc, 0, 0];
    function extension_constructor(name){
     return function(kind){return [0, name, kind, loc, 0];};
    }
    function pparam_val(x0){
     return function(x1){
      return function(x2){return [0, loc, [0, x0, x1, x2]];};};
    }
    function pparam_newtype(x0){return [0, loc, [1, x0]];}
    function include_infos(mod){return [0, mod, loc, 0];}
    function label_declaration(name){
     return function(mutable){
      return function(type){return [0, name, mutable, type, loc, 0];};};
    }
    function letop(let$){
     return function(ands){
      return function(body){return [0, let$, ands, body];};};
    }
    function location(start){
     return function(end){
      return function(ghost){return [0, start, end, ghost];};};
    }
    function module_binding(name){
     return function(expr){return [0, name, expr, 0, loc];};
    }
    function module_declaration(name){
     return function(type){return [0, name, type, 0, loc];};
    }
    function pmod_ident(x0){return [0, [0, x0], loc, 0];}
    function pmod_structure(x0){return [0, [1, x0], loc, 0];}
    function pmod_functor(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};
    }
    function pmod_apply(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};
    }
    function pmod_apply_unit(x0){return [0, [4, x0], loc, 0];}
    function pmod_constraint(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0];};
    }
    function pmod_unpack(x0){return [0, [6, x0], loc, 0];}
    function pmod_extension(x0){return [0, [7, x0], loc, 0];}
    function module_substitution(name){
     return function(manifest){return [0, name, manifest, 0, loc];};
    }
    function pmty_ident(x0){return [0, [0, x0], loc, 0];}
    function pmty_signature(x0){return [0, [1, x0], loc, 0];}
    function pmty_functor(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};
    }
    function pmty_with(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};
    }
    function pmty_typeof(x0){return [0, [4, x0], loc, 0];}
    function pmty_extension(x0){return [0, [5, x0], loc, 0];}
    function pmty_alias(x0){return [0, [6, x0], loc, 0];}
    function module_type_declaration(name){
     return function(type){return [0, name, type, 0, loc];};
    }
    function otag(x0){return function(x1){return [0, [0, x0, x1], loc, 0];};}
    function oinherit(x0){return [0, [1, x0], loc, 0];}
    function open_infos(expr){
     return function(override){return [0, expr, override, loc, 0];};
    }
    var ppat_any = [0, 0, loc, 0, 0];
    function ppat_var(x0){return [0, [0, x0], loc, 0, 0];}
    function ppat_alias(x0){
     return function(x1){return [0, [1, x0, x1], loc, 0, 0];};
    }
    function ppat_constant(x0){return [0, [2, x0], loc, 0, 0];}
    function ppat_interval(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};
    }
    function ppat_tuple(x0){return [0, [4, x0], loc, 0, 0];}
    function ppat_construct(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};
    }
    function ppat_variant(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};
    }
    function ppat_record(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0, 0];};
    }
    function ppat_array(x0){return [0, [8, x0], loc, 0, 0];}
    function ppat_or(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};
    }
    function ppat_constraint(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};
    }
    function ppat_type(x0){return [0, [11, x0], loc, 0, 0];}
    function ppat_lazy(x0){return [0, [12, x0], loc, 0, 0];}
    function ppat_unpack(x0){return [0, [13, x0], loc, 0, 0];}
    function ppat_exception(x0){return [0, [14, x0], loc, 0, 0];}
    function ppat_extension(x0){return [0, [15, x0], loc, 0, 0];}
    function ppat_open(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};
    }
    function position(fname){
     return function(lnum){
      return function(bol){
       return function(cnum){return [0, fname, lnum, bol, cnum];};};};
    }
    function rtag(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};
    }
    function rinherit(x0){return [0, [1, x0], loc, 0];}
    function psig_value(x0){return [0, [0, x0], loc];}
    function psig_type(x0){
     return function(x1){return [0, [1, x0, x1], loc];};
    }
    function psig_typesubst(x0){return [0, [2, x0], loc];}
    function psig_typext(x0){return [0, [3, x0], loc];}
    function psig_exception(x0){return [0, [4, x0], loc];}
    function psig_module(x0){return [0, [5, x0], loc];}
    function psig_modsubst(x0){return [0, [6, x0], loc];}
    function psig_recmodule(x0){return [0, [7, x0], loc];}
    function psig_modtype(x0){return [0, [8, x0], loc];}
    function psig_modtypesubst(x0){return [0, [9, x0], loc];}
    function psig_open(x0){return [0, [10, x0], loc];}
    function psig_include(x0){return [0, [11, x0], loc];}
    function psig_class(x0){return [0, [12, x0], loc];}
    function psig_class_type(x0){return [0, [13, x0], loc];}
    function psig_attribute(x0){return [0, [14, x0], loc];}
    function psig_extension(x0){
     return function(x1){return [0, [15, x0, x1], loc];};
    }
    function pstr_eval(x0){
     return function(x1){return [0, [0, x0, x1], loc];};
    }
    function pstr_value(x0){
     return function(x1){return [0, [1, x0, x1], loc];};
    }
    function pstr_primitive(x0){return [0, [2, x0], loc];}
    function pstr_type(x0){
     return function(x1){return [0, [3, x0, x1], loc];};
    }
    function pstr_typext(x0){return [0, [4, x0], loc];}
    function pstr_exception(x0){return [0, [5, x0], loc];}
    function pstr_module(x0){return [0, [6, x0], loc];}
    function pstr_recmodule(x0){return [0, [7, x0], loc];}
    function pstr_modtype(x0){return [0, [8, x0], loc];}
    function pstr_open(x0){return [0, [9, x0], loc];}
    function pstr_class(x0){return [0, [10, x0], loc];}
    function pstr_class_type(x0){return [0, [11, x0], loc];}
    function pstr_include(x0){return [0, [12, x0], loc];}
    function pstr_attribute(x0){return [0, [13, x0], loc];}
    function pstr_extension(x0){
     return function(x1){return [0, [14, x0, x1], loc];};
    }
    function toplevel_directive(name){
     return function(arg){return [0, name, arg, loc];};
    }
    function type_declaration(name){
     return function(params){
      return function(cstrs){
       return function(kind){
        return function(private$){
         return function(manifest){
          return [0, name, params, cstrs, kind, private$, manifest, 0, loc];};};};};};
    }
    function type_exception(constructor){return [0, constructor, loc, 0];}
    function type_extension(path){
     return function(params){
      return function(constructors){
       return function(private$){
        return [0, path, params, constructors, private$, loc, 0];};};};
    }
    function value_binding(pat){
     return function(expr){
      return function(constraint){return [0, pat, expr, constraint, 0, loc];};};
    }
    function value_description(name){
     return function(type){
      return function(prim){return [0, name, type, prim, 0, loc];};};
    }
    return [0,
            loc,
            value_description,
            value_binding,
            type_extension,
            type_exception,
            type_declaration,
            toplevel_directive,
            pstr_extension,
            pstr_attribute,
            pstr_include,
            pstr_class_type,
            pstr_class,
            pstr_open,
            pstr_modtype,
            pstr_recmodule,
            pstr_module,
            pstr_exception,
            pstr_typext,
            pstr_type,
            pstr_primitive,
            pstr_value,
            pstr_eval,
            psig_extension,
            psig_attribute,
            psig_class_type,
            psig_class,
            psig_include,
            psig_open,
            psig_modtypesubst,
            psig_modtype,
            psig_recmodule,
            psig_modsubst,
            psig_module,
            psig_exception,
            psig_typext,
            psig_typesubst,
            psig_type,
            psig_value,
            rinherit,
            rtag,
            position,
            ppat_open,
            ppat_extension,
            ppat_exception,
            ppat_unpack,
            ppat_lazy,
            ppat_type,
            ppat_constraint,
            ppat_or,
            ppat_array,
            ppat_record,
            ppat_variant,
            ppat_construct,
            ppat_tuple,
            ppat_interval,
            ppat_constant,
            ppat_alias,
            ppat_var,
            ppat_any,
            oinherit,
            otag,
            module_type_declaration,
            pmty_alias,
            pmty_extension,
            pmty_typeof,
            pmty_with,
            pmty_functor,
            pmty_signature,
            pmty_ident,
            module_substitution,
            pmod_extension,
            pmod_unpack,
            pmod_constraint,
            pmod_apply_unit,
            pmod_apply,
            pmod_functor,
            pmod_structure,
            pmod_ident,
            module_declaration,
            module_binding,
            location,
            letop,
            label_declaration,
            pparam_newtype,
            pparam_val,
            extension_constructor,
            pexp_unreachable,
            pexp_extension,
            pexp_letop,
            pexp_open,
            pexp_pack,
            pexp_newtype,
            pexp_object,
            pexp_poly,
            pexp_lazy,
            pexp_assert,
            pexp_letexception,
            pexp_letmodule,
            pexp_override,
            pexp_setinstvar,
            pexp_new,
            pexp_send,
            pexp_coerce,
            pexp_constraint,
            pexp_for,
            pexp_while,
            pexp_sequence,
            pexp_ifthenelse,
            pexp_array,
            pexp_setfield,
            pexp_field,
            pexp_record,
            pexp_variant,
            pexp_construct,
            pexp_tuple,
            pexp_try,
            pexp_match,
            pexp_apply,
            pexp_function,
            pexp_let,
            pexp_constant,
            pexp_ident,
            pdir_bool,
            pdir_ident,
            pdir_int,
            pdir_string,
            ptyp_extension,
            ptyp_open,
            ptyp_package,
            ptyp_poly,
            ptyp_variant,
            ptyp_alias,
            ptyp_class,
            ptyp_object,
            ptyp_constr,
            ptyp_tuple,
            ptyp_arrow,
            ptyp_var,
            ptyp_any,
            constructor_declaration,
            pctf_extension,
            pctf_attribute,
            pctf_constraint,
            pctf_method,
            pctf_val,
            pctf_inherit,
            pcty_open,
            pcty_extension,
            pcty_arrow,
            pcty_signature,
            pcty_constr,
            class_structure,
            class_signature,
            pcf_extension,
            pcf_attribute,
            pcf_initializer,
            pcf_constraint,
            pcf_method,
            pcf_val,
            pcf_inherit,
            pcl_open,
            pcl_extension,
            pcl_constraint,
            pcl_let,
            pcl_apply,
            pcl_fun,
            pcl_structure,
            pcl_constr,
            case$,
            binding_op,
            attribute,
            open_infos,
            include_infos,
            class_infos];
   }
   var Ppxlib_Ast_builder_generated = [0, M, Make];
   runtime.caml_register_global
    (0, Ppxlib_Ast_builder_generated, "Ppxlib__Ast_builder_generated");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Loc
//# shape: Ppxlib__Loc:[F(1)*,F(1)*,F(2)*,F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function txt(t){return t[1];}
   function loc(t){return t[2];}
   function make(loc, txt){return [0, txt, loc];}
   function map(t, f){var a = t[2]; return [0, caml_call1(f, t[1]), a];}
   var Ppxlib_Loc = [0, txt, loc, make, map];
   runtime.caml_register_global(0, Ppxlib_Loc, "Ppxlib__Loc");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Longident
//# unitInfo: Requires: Ppxlib__Import, Stdlib, Stdlib__Map, Stdlib__Printf, Stdlib__Set
//# shape: Ppxlib__Longident:[N,F(1),F(1),F(1),F(1),F(1),N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ppxlib_Longident_flatten$1 = "Ppxlib.Longident.flatten",
    cst_src_longident_ml = "src/longident.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = "",
    cst$3 = "()",
    cst$1 = ".",
    cst = " )",
    cst$0 = "( ",
    Stdlib = global_data.Stdlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set,
    compare = Ppxlib_Import[73][1],
    a = [0, [2, 0, [12, 40, [2, 0, [12, 41, 0]]]], "%s(%s)"],
    cst_Ppxlib_Longident_flatten = cst_Ppxlib_Longident_flatten$1,
    cst_Ppxlib_Longident_flatten$0 = cst_Ppxlib_Longident_flatten$1,
    b = [0, cst_src_longident_ml, 46, 10],
    c = [1, 0],
    d = [0, 0],
    e = [1, 0],
    f =
      [0,
       [11, "Ppxlib.Longident.parse(", [2, 0, [11, "): ", [3, 0, 0]]]],
       "Ppxlib.Longident.parse(%s): %S"],
    cst_empty_string = "empty string",
    cst_right_parenthesis_misplace = "right parenthesis misplaced",
    cst_application_in_path = "application in path",
    g = [0, cst_src_longident_ml, 87, 16],
    cst_unbalanced_parenthesis = "unbalanced parenthesis";
   function is_normal_ident_char(param){
    a:
    {
     if(65 <= param){
      var a = param - 91 | 0;
      if(5 < a >>> 0){if(32 <= a) break a;} else if(4 !== a) break a;
     }
     else
      if(48 <= param){if(58 <= param) break a;} else if(39 !== param) break a;
     return 1;
    }
    return 0;
   }
   function short_name(string){
    a:
    {
     if
      (string !== "asr"
       &&
        string !== "land"
        &&
         string !== "lor"
         &&
          string !== "lsl"
          &&
           string !== "lsr"
           && string !== "lxor" && string !== "mod" && string !== "or"){
      var a = caml_call2(Ppxlib_Import[99][61], string, is_normal_ident_char);
      break a;
     }
     var a = 0;
    }
    if(a) return string;
    var b = caml_call2(Stdlib[28], string, cst);
    return caml_call2(Stdlib[28], cst$0, b);
   }
   function name(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return short_name(s);
      case 1:
       var
        b = param[2],
        a$0 = param[1],
        c = short_name(b),
        d = caml_call2(Stdlib[28], cst$1, c),
        e = name(a$0);
       return caml_call2(Stdlib[28], e, d);
      default:
       var b$0 = param[2], a$1 = param[1], f = name(b$0), g = name(a$1);
       return caml_call3(Stdlib_Printf[4], a, g, f);
    }
   }
   function sexp_of_t(t){return [0, name(t)];}
   function flatten_exn(lid$0){
    var accu = 0, param = lid$0;
    for(;;)
     switch(param[0]){
       case 0:
        var s = param[1]; return [0, s, accu];
       case 1:
        var s$0 = param[2], lid = param[1], accu$0 = [0, s$0, accu];
        accu = accu$0;
        param = lid;
        break;
       default: return caml_call1(Stdlib[1], cst_Ppxlib_Longident_flatten);
     }
   }
   function last_exn(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return s;
      case 1:
       var s$0 = param[2]; return s$0;
      default: return caml_call1(Stdlib[1], cst_Ppxlib_Longident_flatten$0);
    }
   }
   function unflatten(init, l){
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, s){return [1, acc, s];},
             init,
             l);
   }
   function parse(s$0){
    function invalid(variant){
     var a = caml_call3(Stdlib_Printf[4], f, variant, s$0);
     return caml_call1(Stdlib[1], a);
    }
    if(caml_call2(Ppxlib_Import[77], caml_ml_string_length(s$0), 1))
     invalid(cst_empty_string);
    var len = caml_ml_string_length(s$0);
    a:
    {
     b:
     {
      var lpos = -1, opened = 0, pos = 0;
      for(;;){
       if(caml_call2(Ppxlib_Import[81], pos, len)) break b;
       var match$0 = caml_string_get(s$0, pos);
       if(40 === match$0){
        var
         lpos$0 = caml_call2(Ppxlib_Import[76], opened, 0) ? pos : lpos,
         pos$0 = pos + 1 | 0,
         opened$0 = opened + 1 | 0;
        lpos = lpos$0;
        opened = opened$0;
        pos = pos$0;
       }
       else if(41 === match$0){
        var opened$1 = opened - 1 | 0;
        if(caml_call2(Ppxlib_Import[76], opened$1, 0)) break;
        if(caml_call2(Ppxlib_Import[77], opened$1, 0)){var par = e; break a;}
        var pos$1 = pos + 1 | 0;
        opened = opened$1;
        pos = pos$1;
       }
       else{var pos$2 = pos + 1 | 0; pos = pos$2;}
      }
      var par = [0, [0, [0, lpos, pos]]];
      break a;
     }
     var par = caml_call2(Ppxlib_Import[78], opened, 0) ? c : d;
    }
    var match$1 = caml_string_get(s$0, 0);
    if(0 !== par[0]) return invalid(cst_unbalanced_parenthesis);
    var h = par[1];
    if(h){
     var match$2 = h[1], r = match$2[2], l$0 = match$2[1];
     if
      (caml_call2(Ppxlib_Import[92][8], r, caml_ml_string_length(s$0) - 1 | 0))
      invalid(cst_right_parenthesis_misplace);
     var
      i =
        caml_call3
         (Ppxlib_Import[99][14], s$0, l$0 + 1 | 0, (r - l$0 | 0) - 1 | 0),
      inside = caml_call1(Ppxlib_Import[99][19], i),
      group =
        caml_call2(Ppxlib_Import[99][74], inside, cst$2) ? cst$3 : inside;
     if(caml_call2(Ppxlib_Import[92][5], l$0, 0)) return [0, group];
     var j = caml_string_get(s$0, l$0 - 1 | 0);
     if(caml_call2(Ppxlib_Import[86][12], j, 46))
      return invalid(cst_application_in_path);
     var
      before = caml_call3(Ppxlib_Import[99][14], s$0, 0, l$0 - 1 | 0),
      match$3 = caml_call2(Ppxlib_Import[99][70], before, 46);
     if(! match$3)
      throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
     var l$1 = match$3[2], s$1 = match$3[1];
     return [1, unflatten([0, s$1], l$1), group];
    }
    var a = match$1 - 91 | 0;
    a:
    {
     if(5 < a >>> 0){if(57 < a + 26 >>> 0) break a;} else if(4 !== a) break a;
     var match = caml_call2(Ppxlib_Import[99][70], s$0, 46);
     if(! match) throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
     var l = match[2], s = match[1];
     return unflatten([0, s], l);
    }
    return [0, s$0];
   }
   var
    Map = caml_call1(Stdlib_Map[1], [0, compare]),
    Set = caml_call1(Stdlib_Set[1], [0, compare]),
    Ppxlib_Longident =
      [0, compare, sexp_of_t, flatten_exn, last_exn, parse, name, Map, Set];
   runtime.caml_register_global(32, Ppxlib_Longident, "Ppxlib__Longident");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_builder_intf
//# shape: Ppxlib__Ast_builder_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppxlib_Ast_builder_intf = [0];
   runtime.caml_register_global
    (0, Ppxlib_Ast_builder_intf, "Ppxlib__Ast_builder_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_builder
//# unitInfo: Requires: Ppxlib__Ast_builder_generated, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Stdlib, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint
//# shape: Ppxlib__Ast_builder:[N,F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "()",
    cst$2 = "::",
    cst$3 = "[]",
    cst_unexpected_applicative_fun = "unexpected applicative functor type";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    x = [0, cst$2],
    x$1 = [0, cst$2],
    cst$1 = "__",
    x$2 = [0, cst$3],
    x$0 = [0, cst$3],
    cst$0 = cst$4,
    cst = cst$4,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Ast_builder_generated = global_data.Ppxlib__Ast_builder_generated,
    Stdlib = global_data.Stdlib,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32;
   global_data.Assert_failure;
   function loc(x){return x[2];}
   function mk(loc, x){return [0, x, loc];}
   function map(f, t){var a = t[2]; return [0, caml_call1(f, t[1]), a];}
   function map_lident(x){var x$0 = x[1]; return [0, [0, x$0], x[2]];}
   function lident(loc, x){
    var x$0 = Ppxlib_Longident[5].call(null, x);
    return [0, x$0, loc];
   }
   var
    Located = [0, loc, mk, map, map_lident, lident],
    include = Ppxlib_Ast_builder_generated[1],
    value_description = include[1],
    a = include[2],
    type_extension = include[3],
    type_exception = include[4],
    type_declaration = include[5],
    toplevel_directive = include[6],
    pstr_extension = include[7],
    pstr_attribute = include[8],
    pstr_include = include[9],
    pstr_class_type = include[10],
    pstr_class = include[11],
    pstr_open = include[12],
    pstr_modtype = include[13],
    pstr_recmodule = include[14],
    pstr_module = include[15],
    pstr_exception = include[16],
    pstr_typext = include[17],
    pstr_type = include[18],
    pstr_primitive = include[19],
    pstr_value = include[20],
    pstr_eval = include[21],
    psig_extension = include[22],
    psig_attribute = include[23],
    psig_class_type = include[24],
    psig_class = include[25],
    psig_include = include[26],
    psig_open = include[27],
    psig_modtypesubst = include[28],
    psig_modtype = include[29],
    psig_recmodule = include[30],
    psig_modsubst = include[31],
    psig_module = include[32],
    psig_exception = include[33],
    psig_typext = include[34],
    psig_typesubst = include[35],
    psig_type = include[36],
    psig_value = include[37],
    rinherit = include[38],
    rtag = include[39],
    position = include[40],
    ppat_open = include[41],
    ppat_extension = include[42],
    ppat_exception = include[43],
    ppat_unpack = include[44],
    ppat_lazy = include[45],
    ppat_type = include[46],
    ppat_constraint = include[47],
    ppat_or = include[48],
    ppat_array = include[49],
    ppat_record = include[50],
    ppat_variant = include[51],
    ppat_construct = include[52],
    ppat_tuple = include[53],
    ppat_interval = include[54],
    ppat_constant = include[55],
    ppat_alias = include[56],
    ppat_var = include[57],
    ppat_any = include[58],
    oinherit = include[59],
    otag = include[60],
    module_type_declaration = include[61],
    pmty_alias = include[62],
    pmty_extension = include[63],
    pmty_typeof = include[64],
    pmty_with = include[65],
    pmty_functor = include[66],
    pmty_signature = include[67],
    pmty_ident = include[68],
    module_substitution = include[69],
    pmod_extension = include[70],
    pmod_unpack = include[71],
    pmod_constraint = include[72],
    pmod_apply_unit = include[73],
    pmod_apply = include[74],
    pmod_functor = include[75],
    pmod_structure = include[76],
    pmod_ident = include[77],
    module_declaration = include[78],
    module_binding = include[79],
    location = include[80],
    letop = include[81],
    label_declaration = include[82],
    pparam_newtype = include[83],
    pparam_val = include[84],
    extension_constructor = include[85],
    pexp_unreachable = include[86],
    pexp_extension = include[87],
    pexp_letop = include[88],
    pexp_open = include[89],
    pexp_pack = include[90],
    pexp_newtype = include[91],
    pexp_object = include[92],
    pexp_poly = include[93],
    pexp_lazy = include[94],
    pexp_assert = include[95],
    pexp_letexception = include[96],
    pexp_letmodule = include[97],
    pexp_override = include[98],
    pexp_setinstvar = include[99],
    pexp_new = include[100],
    pexp_send = include[101],
    pexp_coerce = include[102],
    pexp_constraint = include[103],
    pexp_for = include[104],
    pexp_while = include[105],
    pexp_sequence = include[106],
    pexp_ifthenelse = include[107],
    pexp_array = include[108],
    pexp_setfield = include[109],
    pexp_field = include[110],
    pexp_record = include[111],
    pexp_variant = include[112],
    pexp_construct = include[113],
    pexp_tuple = include[114],
    pexp_try = include[115],
    pexp_match = include[116],
    pexp_apply = include[117],
    pexp_function = include[118],
    pexp_let = include[119],
    pexp_constant = include[120],
    pexp_ident = include[121],
    pdir_bool = include[122],
    pdir_ident = include[123],
    pdir_int = include[124],
    pdir_string = include[125],
    ptyp_extension = include[126],
    ptyp_open = include[127],
    ptyp_package = include[128],
    ptyp_poly = include[129],
    ptyp_variant = include[130],
    ptyp_alias = include[131],
    ptyp_class = include[132],
    ptyp_object = include[133],
    ptyp_constr = include[134],
    ptyp_tuple = include[135],
    ptyp_arrow = include[136],
    ptyp_var = include[137],
    ptyp_any = include[138],
    pctf_extension = include[140],
    pctf_attribute = include[141],
    pctf_constraint = include[142],
    pctf_method = include[143],
    pctf_val = include[144],
    pctf_inherit = include[145],
    pcty_open = include[146],
    pcty_extension = include[147],
    pcty_arrow = include[148],
    pcty_signature = include[149],
    pcty_constr = include[150],
    class_structure = include[151],
    class_signature = include[152],
    pcf_extension = include[153],
    pcf_attribute = include[154],
    pcf_initializer = include[155],
    pcf_constraint = include[156],
    pcf_method = include[157],
    pcf_val = include[158],
    pcf_inherit = include[159],
    pcl_open = include[160],
    pcl_extension = include[161],
    pcl_constraint = include[162],
    pcl_let = include[163],
    pcl_apply = include[164],
    pcl_fun = include[165],
    pcl_structure = include[166],
    pcl_constr = include[167],
    case$ = include[168],
    binding_op = include[169],
    attribute = include[170],
    open_infos = include[171],
    include_infos = include[172],
    class_infos = include[173],
    b = include[139],
    cst_Ppxlib_Ast_builder_nonrec_ =
      "Ppxlib.Ast_builder.nonrec_type_declaration: don't use this function",
    c = [0, 108],
    d = [0, 76],
    e = [0, 110],
    f = [0, 108],
    g = [0, 76],
    h = [0, 110],
    i =
      [0,
       [11, cst_unexpected_applicative_fun, 0],
       cst_unexpected_applicative_fun];
   function value_binding(constraint, loc, pat, expr, param){return a(loc)(pat)(expr)(constraint);
   }
   function constructor_declaration(loc, name, vars, args, res, param){return b(loc)(name)(vars)(args)(res);
   }
   function ppat_construct$0(loc, lid, p){
    return [0,
            [5,
             lid,
             caml_call2
              (Ppxlib_Import[95][3], p, function(p){return [0, 0, p];})],
            loc,
            0,
            0];
   }
   function pexp_function_cases(loc, cases){
    return [0, [3, 0, 0, [1, cases, loc, 0]], loc, 0, 0];
   }
   function pexp_fun(loc, label, expr, p, body){
    var
     params = [0, [0, loc, [0, label, expr, p]], 0],
     match = body[1],
     return_constraint = 0;
    if(typeof match !== "number" && 3 === match[0]){
     var
      func_body = match[3],
      constraint = match[2],
      more_params = match[1],
      a = caml_call2(Ppxlib_Import[100], params, more_params);
     return pexp_function(loc)(a)(constraint)(func_body);
    }
    return pexp_function(loc)(params)(return_constraint)([0, body]);
   }
   function value_binding$0(loc, pat, expr){return a(loc)(pat)(expr)(0);}
   function constructor_declaration$0(loc, name, args, res){return [0, name, 0, args, res, loc, 0];
   }
   function coalesce_arity(e){
    var a = e[1];
    a:
    if(typeof a !== "number" && 3 === a[0]){
     var params1 = a[1];
     if(! a[2]){
      var b = a[3];
      if(0 === b[0]){
       var body1 = b[1];
       if(body1[4]) break a;
       var match = body1[1];
       if(typeof match !== "number" && 3 === match[0]){
        var
         body2 = match[3],
         constraint = match[2],
         params2 = match[1],
         c = caml_call2(Ppxlib_Import[100], params1, params2);
        return pexp_function(e[2])(c)(constraint)(body2);
       }
       return e;
      }
     }
     return e;
    }
    return e;
   }
   function pstr_value_list(loc, rec_flag, vbs){
    return vbs ? [0, pstr_value(loc)(rec_flag)(vbs), 0] : 0;
   }
   function nonrec_type_declaration(f, e, d, c, b, a, param){
    return caml_call1(Stdlib[2], cst_Ppxlib_Ast_builder_nonrec_);
   }
   function eint(loc, t){
    var a = [0, caml_call1(Ppxlib_Import[92][2], t), 0];
    return pexp_constant(loc)(a);
   }
   function echar(loc, t){return pexp_constant(loc)([1, t]);}
   function estring(loc, t){return pexp_constant(loc)([2, t, loc, 0]);}
   function efloat(loc, t){return pexp_constant(loc)([3, t, 0]);}
   function eint32(loc, t){
    var a = [0, caml_call1(Stdlib_Int32[14], t), c];
    return pexp_constant(loc)(a);
   }
   function eint64(loc, t){
    var a = [0, caml_call1(Stdlib_Int64[14], t), d];
    return pexp_constant(loc)(a);
   }
   function enativeint(loc, t){
    var a = [0, caml_call1(Stdlib_Nativeint[15], t), e];
    return pexp_constant(loc)(a);
   }
   function pint(loc, t){
    var a = [0, caml_call1(Ppxlib_Import[92][2], t), 0];
    return ppat_constant(loc)(a);
   }
   function pchar(loc, t){return ppat_constant(loc)([1, t]);}
   function pstring(loc, t){return ppat_constant(loc)([2, t, loc, 0]);}
   function pfloat(loc, t){return ppat_constant(loc)([3, t, 0]);}
   function pint32(loc, t){
    var a = [0, caml_call1(Stdlib_Int32[14], t), f];
    return ppat_constant(loc)(a);
   }
   function pint64(loc, t){
    var a = [0, caml_call1(Stdlib_Int64[14], t), g];
    return ppat_constant(loc)(a);
   }
   function pnativeint(loc, t){
    var a = [0, caml_call1(Stdlib_Nativeint[15], t), h];
    return ppat_constant(loc)(a);
   }
   function ebool(loc, t){
    var a = lident(loc, caml_call1(Ppxlib_Import[84][1], t));
    return pexp_construct(loc)(a)(0);
   }
   function pbool(loc, t){
    return ppat_construct$0
            (loc, lident(loc, caml_call1(Ppxlib_Import[84][1], t)), 0);
   }
   function evar(loc, v){
    var x = Ppxlib_Longident[5].call(null, v);
    return pexp_ident(loc)([0, x, loc]);
   }
   function pvar(loc, v){return ppat_var(loc)([0, v, loc]);}
   function eunit(loc){
    var a = lident(loc, cst);
    return pexp_construct(loc)(a)(0);
   }
   function punit(loc){return ppat_construct$0(loc, lident(loc, cst$0), 0);}
   function pexp_tuple$0(loc, l){
    if(l && ! l[2]){var x = l[1]; return x;}
    return pexp_tuple(loc)(l);
   }
   function ppat_tuple$0(loc, l){
    if(l && ! l[2]){var x = l[1]; return x;}
    return ppat_tuple(loc)(l);
   }
   function ptyp_tuple$0(loc, l){
    if(l && ! l[2]){var x = l[1]; return x;}
    return ptyp_tuple(loc)(l);
   }
   function pexp_tuple_opt(loc, l){return l ? [0, pexp_tuple$0(loc, l)] : 0;}
   function ppat_tuple_opt(loc, l){return l ? [0, ppat_tuple$0(loc, l)] : 0;}
   function ptyp_poly$0(loc, vars, ty){
    return vars ? ptyp_poly(loc)(vars)(ty) : ty;
   }
   function pexp_apply$0(loc, e, el){
    if(! el) return e;
    var a = e[1];
    if(typeof a !== "number" && 4 === a[0] && ! e[4]){
     var args = a[2], e$0 = a[1], b = e$0[4], c = e$0[3], d = e$0[2];
     return [0, [4, e$0, caml_call2(Ppxlib_Import[100], args, el)], d, c, b];
    }
    return pexp_apply(loc)(e)(el);
   }
   function eapply(loc, e, el){
    return pexp_apply$0
            (loc,
             e,
             caml_call2
              (Ppxlib_Import[94][55], el, function(e){return [0, 0, e];}));
   }
   function eabstract(loc, ps, e){
    return caml_call3
            (Ppxlib_Import[94][57],
             ps,
             e,
             function(p, e){return pexp_fun(loc, 0, 0, p, e);});
   }
   function esequence(loc, el){
    var match = caml_call1(Ppxlib_Import[94][9], el);
    if(! match) return eunit(loc);
    var tl = match[2], hd = match[1];
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, e){return pexp_sequence(loc)(e)(acc);},
             hd,
             tl);
   }
   function pconstruct(cd, arg){
    var a = map_lident(cd[1]);
    return ppat_construct$0(cd[5], a, arg);
   }
   function econstruct(cd, arg){
    var a = map_lident(cd[1]);
    return pexp_construct(cd[5])(a)(arg);
   }
   function elist_tail(loc, l, tail){
    if(! l) return tail;
    var
     l$0 = l[2],
     x$0 = l[1],
     a = [0, pexp_tuple$0(loc, [0, x$0, [0, elist_tail(loc, l$0, tail), 0]])];
    return pexp_construct(loc)([0, x, loc])(a);
   }
   function elist(loc, l){
    var tail = pexp_construct(loc)([0, x$0, loc])(0);
    return elist_tail(loc, l, tail);
   }
   function plist_tail(loc, l, tail){
    if(! l) return tail;
    var l$0 = l[2], x = l[1];
    return ppat_construct$0
            (loc,
             [0, x$1, loc],
             [0,
              ppat_tuple$0(loc, [0, x, [0, plist_tail(loc, l$0, tail), 0]])]);
   }
   function plist(loc, l){
    var tail = ppat_construct$0(loc, [0, x$2, loc], 0);
    return plist_tail(loc, l, tail);
   }
   function unapplied_type_constr_conv_wit(loc, ident, f){
    switch(ident[0]){
      case 0:
       var n = ident[1], a = [0, [0, caml_call1(f, n)], loc];
       return pexp_ident(loc)(a);
      case 1:
       var
        n$0 = ident[2],
        path = ident[1],
        b = [0, [1, path, caml_call1(f, n$0)], loc];
       return pexp_ident(loc)(b);
      default: return Ppxlib_Location[6].call(null, [0, loc], i);
    }
   }
   function type_constr_conv(apply_loc, param, f, args){
    var loc = param[2], longident = param[1], loc$0 = [0, loc[1], loc[2], 1];
    if(1 === longident[0]){
     var module_path = longident[1];
     if(2 === module_path[0]){
      var
       n = longident[2],
       suffix_n =
         function(functor){
          var
           a = caml_call2(Stdlib[28], cst$1, n),
           b = caml_call1(Ppxlib_Import[99][69], functor);
          return caml_call2(Stdlib[28], b, a);
         };
      a:
      {
       b:
       {
        var functor_args = 0, param$0 = module_path;
        c:
        for(;;)
         switch(param$0[0]){
           case 0:
            break b;
           case 1:
            break c;
           default:
            var
             arg = param$0[2],
             rest = param$0[1],
             functor_args$0 = [0, arg, functor_args];
            functor_args = functor_args$0;
            param$0 = rest;
         }
        var
         functor$0 = param$0[2],
         functor_path = param$0[1],
         match = [0, [1, functor_path, suffix_n(functor$0)]];
        break a;
       }
       var functor = param$0[1], match = [0, [0, suffix_n(functor)]];
      }
      var
       ident$0 = match[1],
       a =
         caml_call2
          (Ppxlib_Import[94][55],
           functor_args,
           function(path){
            var a = pmod_ident(loc$0)([0, path, loc$0]);
            return pexp_pack(loc$0)(a);
           }),
       b = caml_call2(Ppxlib_Import[100], a, args);
      return eapply
              (apply_loc,
               unapplied_type_constr_conv_wit(loc$0, ident$0, f),
               b);
     }
    }
    var ident = unapplied_type_constr_conv_wit(loc$0, longident, f);
    return args ? eapply(apply_loc, ident, args) : ident;
   }
   function unapplied_type_constr_conv(loc, longident, f){return type_constr_conv(loc, longident, f, 0);
   }
   function gather_args(n, x){
    if(caml_call2(Ppxlib_Import[76], n, 0)) return [0, [0, x, 0]];
    var a = x[1];
    if(typeof a !== "number" && 4 === a[0] && ! x[4]){
     var args = a[2], body = a[1], b = caml_call1(Ppxlib_Import[94][1], args);
     if(! caml_call2(Ppxlib_Import[80], b, n)) return 0;
     var
      match =
        gather_args(n - caml_call1(Ppxlib_Import[94][1], args) | 0, body);
     if(! match) return 0;
     var match$0 = match[1], args$0 = match$0[2], body$0 = match$0[1];
     return [0, [0, body$0, caml_call2(Ppxlib_Import[100], args$0, args)]];
    }
    return 0;
   }
   function eta_reduce(expr$0){
    a:
    {
     b:
     {
      var acc = 0, expr = expr$0;
      for(;;){
       var b = expr[1];
       if(typeof b === "number") break;
       if(3 !== b[0]) break;
       var c = b[1];
       if(! c) break;
       var d = c[1][2];
       if(0 !== d[0]) break;
       if(c[2]) break;
       var f = b[3], subpat = d[3], label = d[1];
       if(0 !== f[0]) break;
       if(expr[4]) break;
       var body = f[1], a = subpat[1];
       if(typeof a === "number") break b;
       switch(a[0]){
         case 0:
          if(subpat[4]) break b;
          var name = a[1], acc$0 = [0, [0, label, name, 0], acc];
          acc = acc$0;
          expr = body;
          break;
         case 10:
          var g = a[1], e = g[1];
          if(typeof e === "number") break b;
          if(0 !== e[0]) break b;
          if(g[4]) break b;
          if(subpat[4]) break b;
          var
           ty = a[2],
           name$0 = e[1],
           acc$1 = [0, [0, label, name$0, [0, ty]], acc];
          acc = acc$1;
          expr = body;
          break;
         default: break b;
       }
      }
      var match = [0, caml_call1(Ppxlib_Import[94][9], acc)];
      break a;
     }
     var match = [0, caml_call1(Ppxlib_Import[94][9], acc)];
    }
    var
     params = match[1],
     match$0 = gather_args(caml_call1(Ppxlib_Import[94][1], params), expr);
    if(! match$0) return 0;
    var h = match$0[1], f_ident = h[1], match$1 = f_ident[1];
    if(typeof match$1 !== "number" && 0 === match$1[0]){
     var args = h[2];
     if
      (!
       caml_call3
        (Ppxlib_Import[94][23],
         function(e, param){
          var
           param_label = param[1],
           arg = e[2],
           arg_label = e[1],
           param$0 = param[2],
           b = caml_call2(Ppxlib_Import[73][3], arg_label, param_label);
          if(b){
           var a = arg[1];
           if(typeof a !== "number" && 0 === a[0]){
            var d = a[1][1];
            if(0 === d[0] && ! arg[4]){
             var name = d[1];
             return caml_call2(Ppxlib_Import[99][74], name, param$0[1]);
            }
           }
           var c = 0;
          }
          else
           var c = b;
          return c;
         },
         args,
         params))
      return 0;
     var loc = expr$0[2];
     if
      (caml_call2
        (Ppxlib_Import[94][22],
         function(param){
          var ty = param[3];
          return caml_call1(Ppxlib_Import[95][1], ty);
         },
         params))
      var
       j = ptyp_any(loc),
       ty$0 =
         caml_call3
          (Ppxlib_Import[94][57],
           params,
           j,
           function(param, acc){
            var ty_opt = param[3], param_label = param[1], loc = param[2][2];
            if(ty_opt)
             var ty = ty_opt[1], ty$0 = ty;
            else
             var ty$0 = ptyp_any(loc);
            return ptyp_arrow(loc)(param_label)(ty$0)(acc);
           }),
       i = pexp_constraint(loc)(f_ident)(ty$0);
     else
      var i = f_ident;
     return [0, i];
    }
    return 0;
   }
   function eta_reduce_if_possible(expr){
    var a = eta_reduce(expr);
    return caml_call2(Ppxlib_Import[95][4], a, expr);
   }
   function eta_reduce_if_possible_and_non(expr, rec_flag){return rec_flag ? expr : eta_reduce_if_possible(expr);
   }
   function Make(Loc){
    var
     include = Ppxlib_Ast_builder_generated[2].call(null, Loc),
     loc = include[1],
     value_description = include[2],
     type_extension = include[4],
     type_exception = include[5],
     type_declaration = include[6],
     toplevel_directive = include[7],
     pstr_extension = include[8],
     pstr_attribute = include[9],
     pstr_include = include[10],
     pstr_class_type = include[11],
     pstr_class = include[12],
     pstr_open = include[13],
     pstr_modtype = include[14],
     pstr_recmodule = include[15],
     pstr_module = include[16],
     pstr_exception = include[17],
     pstr_typext = include[18],
     pstr_type = include[19],
     pstr_primitive = include[20],
     pstr_value = include[21],
     pstr_eval = include[22],
     psig_extension = include[23],
     psig_attribute = include[24],
     psig_class_type = include[25],
     psig_class = include[26],
     psig_include = include[27],
     psig_open = include[28],
     psig_modtypesubst = include[29],
     psig_modtype = include[30],
     psig_recmodule = include[31],
     psig_modsubst = include[32],
     psig_module = include[33],
     psig_exception = include[34],
     psig_typext = include[35],
     psig_typesubst = include[36],
     psig_type = include[37],
     psig_value = include[38],
     rinherit = include[39],
     rtag = include[40],
     position = include[41],
     ppat_open = include[42],
     ppat_extension = include[43],
     ppat_exception = include[44],
     ppat_unpack = include[45],
     ppat_lazy = include[46],
     ppat_type = include[47],
     ppat_constraint = include[48],
     ppat_or = include[49],
     ppat_array = include[50],
     ppat_record = include[51],
     ppat_variant = include[52],
     ppat_construct = include[53],
     ppat_interval = include[55],
     ppat_constant = include[56],
     ppat_alias = include[57],
     ppat_var = include[58],
     ppat_any = include[59],
     oinherit = include[60],
     otag = include[61],
     module_type_declaration = include[62],
     pmty_alias = include[63],
     pmty_extension = include[64],
     pmty_typeof = include[65],
     pmty_with = include[66],
     pmty_functor = include[67],
     pmty_signature = include[68],
     pmty_ident = include[69],
     module_substitution = include[70],
     pmod_extension = include[71],
     pmod_unpack = include[72],
     pmod_constraint = include[73],
     pmod_apply_unit = include[74],
     pmod_apply = include[75],
     pmod_functor = include[76],
     pmod_structure = include[77],
     pmod_ident = include[78],
     module_declaration = include[79],
     module_binding = include[80],
     location = include[81],
     letop = include[82],
     label_declaration = include[83],
     pparam_newtype = include[84],
     pparam_val = include[85],
     extension_constructor = include[86],
     pexp_unreachable = include[87],
     pexp_extension = include[88],
     pexp_letop = include[89],
     pexp_open = include[90],
     pexp_pack = include[91],
     pexp_newtype = include[92],
     pexp_object = include[93],
     pexp_poly = include[94],
     pexp_lazy = include[95],
     pexp_assert = include[96],
     pexp_letexception = include[97],
     pexp_letmodule = include[98],
     pexp_override = include[99],
     pexp_setinstvar = include[100],
     pexp_new = include[101],
     pexp_send = include[102],
     pexp_coerce = include[103],
     pexp_constraint = include[104],
     pexp_for = include[105],
     pexp_while = include[106],
     pexp_sequence = include[107],
     pexp_ifthenelse = include[108],
     pexp_array = include[109],
     pexp_setfield = include[110],
     pexp_field = include[111],
     pexp_record = include[112],
     pexp_variant = include[113],
     pexp_construct = include[114],
     pexp_try = include[116],
     pexp_match = include[117],
     pexp_function = include[119],
     pexp_let = include[120],
     pexp_constant = include[121],
     pexp_ident = include[122],
     pdir_bool = include[123],
     pdir_ident = include[124],
     pdir_int = include[125],
     pdir_string = include[126],
     ptyp_extension = include[127],
     ptyp_open = include[128],
     ptyp_package = include[129],
     ptyp_variant = include[131],
     ptyp_alias = include[132],
     ptyp_class = include[133],
     ptyp_object = include[134],
     ptyp_constr = include[135],
     ptyp_arrow = include[137],
     ptyp_var = include[138],
     ptyp_any = include[139],
     pctf_extension = include[141],
     pctf_attribute = include[142],
     pctf_constraint = include[143],
     pctf_method = include[144],
     pctf_val = include[145],
     pctf_inherit = include[146],
     pcty_open = include[147],
     pcty_extension = include[148],
     pcty_arrow = include[149],
     pcty_signature = include[150],
     pcty_constr = include[151],
     class_structure = include[152],
     class_signature = include[153],
     pcf_extension = include[154],
     pcf_attribute = include[155],
     pcf_initializer = include[156],
     pcf_constraint = include[157],
     pcf_method = include[158],
     pcf_val = include[159],
     pcf_inherit = include[160],
     pcl_open = include[161],
     pcl_extension = include[162],
     pcl_constraint = include[163],
     pcl_let = include[164],
     pcl_apply = include[165],
     pcl_fun = include[166],
     pcl_structure = include[167],
     pcl_constr = include[168],
     case$ = include[169],
     binding_op = include[170],
     attribute = include[171],
     open_infos = include[172],
     include_infos = include[173],
     class_infos = include[174],
     a = include[140];
    function constructor_declaration(name, vars, args, res, param){return caml_call4(a, name, vars, args, res);
    }
    var Latest = [0, ppat_construct, constructor_declaration];
    function ppat_construct$0(lid, p){
     return [0,
             [5,
              lid,
              caml_call2
               (Ppxlib_Import[95][3], p, function(p){return [0, 0, p];})],
             loc,
             0,
             0];
    }
    function constructor_declaration$0(name, args, res){return [0, name, 0, args, res, loc, 0];
    }
    function nonrec_type_declaration$0
    (name, params, cstrs, kind, private$, manifest){
     return nonrec_type_declaration
             (loc, name, params, cstrs, kind, private$, manifest);
    }
    function loc$0(param){return Loc[1];}
    function mk(x){var loc = Loc[1]; return [0, x, loc];}
    function lident$0(x){return lident(Loc[1], x);}
    function pexp_tuple(l){return pexp_tuple$0(loc, l);}
    function ppat_tuple(l){return ppat_tuple$0(loc, l);}
    function ptyp_tuple(l){return ptyp_tuple$0(loc, l);}
    function pexp_tuple_opt$0(l){return pexp_tuple_opt(loc, l);}
    function ppat_tuple_opt$0(l){return ppat_tuple_opt(loc, l);}
    function ptyp_poly(vars, ty){return ptyp_poly$0(loc, vars, ty);}
    function pexp_apply(e, el){return pexp_apply$0(loc, e, el);}
    function pexp_fun$0(lbl, e1, p, e2){return pexp_fun(loc, lbl, e1, p, e2);}
    function pexp_function_cases$0(cases){
     return pexp_function_cases(loc, cases);
    }
    function eint$0(t){return eint(loc, t);}
    function echar$0(t){return echar(loc, t);}
    function estring$0(t){return estring(loc, t);}
    function efloat$0(t){return efloat(loc, t);}
    function eint32$0(t){return eint32(loc, t);}
    function eint64$0(t){return eint64(loc, t);}
    function enativeint$0(t){return enativeint(loc, t);}
    function ebool$0(t){return ebool(loc, t);}
    function evar$0(t){return evar(loc, t);}
    function pint$0(t){return pint(loc, t);}
    function pchar$0(t){return pchar(loc, t);}
    function pstring$0(t){return pstring(loc, t);}
    function pfloat$0(t){return pfloat(loc, t);}
    function pint32$0(t){return pint32(loc, t);}
    function pint64$0(t){return pint64(loc, t);}
    function pnativeint$0(t){return pnativeint(loc, t);}
    function pbool$0(t){return pbool(loc, t);}
    function pvar$0(t){return pvar(loc, t);}
    var eunit$0 = eunit(loc), punit$0 = punit(loc);
    function eapply$0(e, el){return eapply(loc, e, el);}
    function eabstract$0(ps, e){return eabstract(loc, ps, e);}
    function esequence$0(el){return esequence(loc, el);}
    function elist_tail$0(l, tail){return elist_tail(loc, l, tail);}
    function plist_tail$0(l, tail){return plist_tail(loc, l, tail);}
    function elist$0(l){return elist(loc, l);}
    function plist$0(l){return plist(loc, l);}
    function value_binding(a, b){return value_binding$0(loc, a, b);}
    function type_constr_conv$0(ident, f, args){
     return type_constr_conv(loc, ident, f, args);
    }
    function unapplied_type_constr_conv$0(ident, f){
     return unapplied_type_constr_conv(loc, ident, f);
    }
    return [0,
            [0, loc$0, mk, map, map_lident, lident$0],
            loc,
            value_description,
            type_extension,
            type_exception,
            type_declaration,
            toplevel_directive,
            pstr_extension,
            pstr_attribute,
            pstr_include,
            pstr_class_type,
            pstr_class,
            pstr_open,
            pstr_modtype,
            pstr_recmodule,
            pstr_module,
            pstr_exception,
            pstr_typext,
            pstr_type,
            pstr_primitive,
            pstr_value,
            pstr_eval,
            psig_extension,
            psig_attribute,
            psig_class_type,
            psig_class,
            psig_include,
            psig_open,
            psig_modtypesubst,
            psig_modtype,
            psig_recmodule,
            psig_modsubst,
            psig_module,
            psig_exception,
            psig_typext,
            psig_typesubst,
            psig_type,
            psig_value,
            rinherit,
            rtag,
            position,
            ppat_open,
            ppat_extension,
            ppat_exception,
            ppat_unpack,
            ppat_lazy,
            ppat_type,
            ppat_constraint,
            ppat_or,
            ppat_array,
            ppat_record,
            ppat_variant,
            ppat_tuple,
            ppat_interval,
            ppat_constant,
            ppat_alias,
            ppat_var,
            ppat_any,
            oinherit,
            otag,
            module_type_declaration,
            pmty_alias,
            pmty_extension,
            pmty_typeof,
            pmty_with,
            pmty_functor,
            pmty_signature,
            pmty_ident,
            module_substitution,
            pmod_extension,
            pmod_unpack,
            pmod_constraint,
            pmod_apply_unit,
            pmod_apply,
            pmod_functor,
            pmod_structure,
            pmod_ident,
            module_declaration,
            module_binding,
            location,
            letop,
            label_declaration,
            pparam_newtype,
            pparam_val,
            extension_constructor,
            pexp_unreachable,
            pexp_extension,
            pexp_letop,
            pexp_open,
            pexp_pack,
            pexp_newtype,
            pexp_object,
            pexp_poly,
            pexp_lazy,
            pexp_assert,
            pexp_letexception,
            pexp_letmodule,
            pexp_override,
            pexp_setinstvar,
            pexp_new,
            pexp_send,
            pexp_coerce,
            pexp_constraint,
            pexp_for,
            pexp_while,
            pexp_sequence,
            pexp_ifthenelse,
            pexp_array,
            pexp_setfield,
            pexp_field,
            pexp_record,
            pexp_variant,
            pexp_construct,
            pexp_tuple,
            pexp_try,
            pexp_match,
            pexp_apply,
            pexp_let,
            pexp_constant,
            pexp_ident,
            pdir_bool,
            pdir_ident,
            pdir_int,
            pdir_string,
            ptyp_extension,
            ptyp_open,
            ptyp_package,
            ptyp_poly,
            ptyp_variant,
            ptyp_alias,
            ptyp_class,
            ptyp_object,
            ptyp_constr,
            ptyp_tuple,
            ptyp_arrow,
            ptyp_var,
            ptyp_any,
            pctf_extension,
            pctf_attribute,
            pctf_constraint,
            pctf_method,
            pctf_val,
            pctf_inherit,
            pcty_open,
            pcty_extension,
            pcty_arrow,
            pcty_signature,
            pcty_constr,
            class_structure,
            class_signature,
            pcf_extension,
            pcf_attribute,
            pcf_initializer,
            pcf_constraint,
            pcf_method,
            pcf_val,
            pcf_inherit,
            pcl_open,
            pcl_extension,
            pcl_constraint,
            pcl_let,
            pcl_apply,
            pcl_fun,
            pcl_structure,
            pcl_constr,
            case$,
            binding_op,
            attribute,
            open_infos,
            include_infos,
            class_infos,
            eint$0,
            echar$0,
            estring$0,
            efloat$0,
            eint32$0,
            eint64$0,
            enativeint$0,
            ebool$0,
            pint$0,
            pchar$0,
            pstring$0,
            pfloat$0,
            pint32$0,
            pint64$0,
            pnativeint$0,
            pbool$0,
            eunit$0,
            punit$0,
            evar$0,
            pvar$0,
            eapply$0,
            eabstract$0,
            esequence$0,
            ppat_tuple_opt$0,
            pexp_tuple_opt$0,
            pexp_fun$0,
            pexp_function,
            pexp_function_cases$0,
            pconstruct,
            econstruct,
            elist_tail$0,
            elist$0,
            plist_tail$0,
            plist$0,
            value_binding,
            pstr_value_list,
            nonrec_type_declaration$0,
            unapplied_type_constr_conv$0,
            type_constr_conv$0,
            eta_reduce,
            eta_reduce_if_possible,
            eta_reduce_if_possible_and_non,
            Latest,
            ppat_construct$0,
            constructor_declaration$0];
   }
   function make(loc){return Make([0, loc]);}
   var
    Ppxlib_Ast_builder =
      [0,
       [0,
        Located,
        value_description,
        type_extension,
        type_exception,
        type_declaration,
        toplevel_directive,
        pstr_extension,
        pstr_attribute,
        pstr_include,
        pstr_class_type,
        pstr_class,
        pstr_open,
        pstr_modtype,
        pstr_recmodule,
        pstr_module,
        pstr_exception,
        pstr_typext,
        pstr_type,
        pstr_primitive,
        pstr_value,
        pstr_eval,
        psig_extension,
        psig_attribute,
        psig_class_type,
        psig_class,
        psig_include,
        psig_open,
        psig_modtypesubst,
        psig_modtype,
        psig_recmodule,
        psig_modsubst,
        psig_module,
        psig_exception,
        psig_typext,
        psig_typesubst,
        psig_type,
        psig_value,
        rinherit,
        rtag,
        position,
        ppat_open,
        ppat_extension,
        ppat_exception,
        ppat_unpack,
        ppat_lazy,
        ppat_type,
        ppat_constraint,
        ppat_or,
        ppat_array,
        ppat_record,
        ppat_variant,
        ppat_tuple$0,
        ppat_interval,
        ppat_constant,
        ppat_alias,
        ppat_var,
        ppat_any,
        oinherit,
        otag,
        module_type_declaration,
        pmty_alias,
        pmty_extension,
        pmty_typeof,
        pmty_with,
        pmty_functor,
        pmty_signature,
        pmty_ident,
        module_substitution,
        pmod_extension,
        pmod_unpack,
        pmod_constraint,
        pmod_apply_unit,
        pmod_apply,
        pmod_functor,
        pmod_structure,
        pmod_ident,
        module_declaration,
        module_binding,
        location,
        letop,
        label_declaration,
        pparam_newtype,
        pparam_val,
        extension_constructor,
        pexp_unreachable,
        pexp_extension,
        pexp_letop,
        pexp_open,
        pexp_pack,
        pexp_newtype,
        pexp_object,
        pexp_poly,
        pexp_lazy,
        pexp_assert,
        pexp_letexception,
        pexp_letmodule,
        pexp_override,
        pexp_setinstvar,
        pexp_new,
        pexp_send,
        pexp_coerce,
        pexp_constraint,
        pexp_for,
        pexp_while,
        pexp_sequence,
        pexp_ifthenelse,
        pexp_array,
        pexp_setfield,
        pexp_field,
        pexp_record,
        pexp_variant,
        pexp_construct,
        pexp_tuple$0,
        pexp_try,
        pexp_match,
        pexp_apply$0,
        pexp_let,
        pexp_constant,
        pexp_ident,
        pdir_bool,
        pdir_ident,
        pdir_int,
        pdir_string,
        ptyp_extension,
        ptyp_open,
        ptyp_package,
        ptyp_poly$0,
        ptyp_variant,
        ptyp_alias,
        ptyp_class,
        ptyp_object,
        ptyp_constr,
        ptyp_tuple$0,
        ptyp_arrow,
        ptyp_var,
        ptyp_any,
        pctf_extension,
        pctf_attribute,
        pctf_constraint,
        pctf_method,
        pctf_val,
        pctf_inherit,
        pcty_open,
        pcty_extension,
        pcty_arrow,
        pcty_signature,
        pcty_constr,
        class_structure,
        class_signature,
        pcf_extension,
        pcf_attribute,
        pcf_initializer,
        pcf_constraint,
        pcf_method,
        pcf_val,
        pcf_inherit,
        pcl_open,
        pcl_extension,
        pcl_constraint,
        pcl_let,
        pcl_apply,
        pcl_fun,
        pcl_structure,
        pcl_constr,
        case$,
        binding_op,
        attribute,
        open_infos,
        include_infos,
        class_infos,
        [0, ppat_construct, value_binding, constructor_declaration],
        ppat_construct$0,
        coalesce_arity,
        constructor_declaration$0,
        eint,
        echar,
        estring,
        efloat,
        eint32,
        eint64,
        enativeint,
        ebool,
        pint,
        pchar,
        pstring,
        pfloat,
        pint32,
        pint64,
        pnativeint,
        pbool,
        eunit,
        punit,
        evar,
        pvar,
        eapply,
        eabstract,
        esequence,
        ppat_tuple_opt,
        pexp_tuple_opt,
        pexp_fun,
        pexp_function,
        pexp_function_cases,
        pconstruct,
        econstruct,
        elist_tail,
        elist,
        plist_tail,
        plist,
        value_binding$0,
        pstr_value_list,
        nonrec_type_declaration,
        unapplied_type_constr_conv,
        type_constr_conv,
        eta_reduce,
        eta_reduce_if_possible,
        eta_reduce_if_possible_and_non],
       Make,
       make];
   runtime.caml_register_global(25, Ppxlib_Ast_builder, "Ppxlib__Ast_builder");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_pattern0
//# shape: Ppxlib__Ast_pattern0:[N,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    Expected =
      [248, "Ppxlib__Ast_pattern0.Expected", runtime.caml_fresh_oo_id(0)];
   function fail(loc, expected){
    throw caml_maybe_attach_backtrace([0, Expected, loc, expected], 1);
   }
   var Ppxlib_Ast_pattern0 = [0, Expected, fail];
   runtime.caml_register_global
    (1, Ppxlib_Ast_pattern0, "Ppxlib__Ast_pattern0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_traverse0
//# unitInfo: Requires: CamlinternalOO, Ppxlib_ast__Ast, Ppxlib_traverse_builtins
//# shape: Ppxlib__Ast_traverse0:[N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    a =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    b =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    c = [0, cst_string, cst_option, cst_list, cst_int, cst_char, cst_bool],
    d =
      [0,
       cst_array,
       cst_bool,
       cst_char,
       cst_int,
       cst_list,
       cst_option,
       cst_string],
    shared =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_traverse_builtins = global_data.Ppxlib_traverse_builtins,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    map =
      caml_call2
       (CamlinternalOO[19],
        b,
        function(b){
         caml_call2(CamlinternalOO[8], b, a);
         var
          e =
            caml_call6
              (CamlinternalOO[18], b, 0, 0, d, Ppxlib_traverse_builtins[2], 1)
             [1],
          f =
            caml_call6
              (CamlinternalOO[18], b, 0, c, shared, Ppxlib_ast_Ast[1], 1)
             [1];
         return function(d, c){
          var a = caml_call2(CamlinternalOO[24], c, b);
          caml_call1(e, a);
          caml_call1(f, a);
          return caml_call3(CamlinternalOO[26], c, a, b);};
        }),
    iter =
      caml_call2
       (CamlinternalOO[19],
        b,
        function(b){
         caml_call2(CamlinternalOO[8], b, a);
         var
          e =
            caml_call6
              (CamlinternalOO[18], b, 0, 0, d, Ppxlib_traverse_builtins[3], 1)
             [1],
          f =
            caml_call6
              (CamlinternalOO[18], b, 0, c, shared, Ppxlib_ast_Ast[2], 1)
             [1];
         return function(d, c){
          var a = caml_call2(CamlinternalOO[24], c, b);
          caml_call1(e, a);
          caml_call1(f, a);
          return caml_call3(CamlinternalOO[26], c, a, b);};
        }),
    fold =
      caml_call2
       (CamlinternalOO[19],
        b,
        function(b){
         caml_call2(CamlinternalOO[8], b, a);
         var
          e =
            caml_call6
              (CamlinternalOO[18], b, 0, 0, d, Ppxlib_traverse_builtins[4], 1)
             [1],
          f =
            caml_call6
              (CamlinternalOO[18], b, 0, c, shared, Ppxlib_ast_Ast[3], 1)
             [1];
         return function(d, c){
          var a = caml_call2(CamlinternalOO[24], c, b);
          caml_call1(e, a);
          caml_call1(f, a);
          return caml_call3(CamlinternalOO[26], c, a, b);};
        }),
    fold_map =
      caml_call2
       (CamlinternalOO[19],
        b,
        function(b){
         caml_call2(CamlinternalOO[8], b, a);
         var
          e =
            caml_call6
              (CamlinternalOO[18], b, 0, 0, d, Ppxlib_traverse_builtins[5], 1)
             [1],
          f =
            caml_call6
              (CamlinternalOO[18], b, 0, c, shared, Ppxlib_ast_Ast[4], 1)
             [1];
         return function(d, c){
          var a = caml_call2(CamlinternalOO[24], c, b);
          caml_call1(e, a);
          caml_call1(f, a);
          return caml_call3(CamlinternalOO[26], c, a, b);};
        }),
    map_with_context =
      caml_call2
       (CamlinternalOO[19],
        b,
        function(b){
         caml_call2(CamlinternalOO[8], b, a);
         var
          e =
            caml_call6
              (CamlinternalOO[18], b, 0, 0, d, Ppxlib_traverse_builtins[6], 1)
             [1],
          f =
            caml_call6
              (CamlinternalOO[18], b, 0, c, shared, Ppxlib_ast_Ast[5], 1)
             [1];
         return function(d, c){
          var a = caml_call2(CamlinternalOO[24], c, b);
          caml_call1(e, a);
          caml_call1(f, a);
          return caml_call3(CamlinternalOO[26], c, a, b);};
        }),
    lift = [],
    e =
      [0,
       cst_tuple,
       cst_string,
       cst_record,
       cst_option,
       cst_list,
       cst_int,
       cst_constr,
       cst_char,
       cst_bool],
    f = [0, cst_list, cst_option],
    g =
      [0,
       cst_unit,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_nativeint,
       cst_int64,
       cst_int32,
       cst_int,
       cst_float,
       cst_constr,
       cst_char,
       cst_bool,
       cst_array],
    h =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label];
   runtime.caml_update_dummy
    (lift,
     [0,
      0,
      function(a){
       caml_call2(CamlinternalOO[8], a, h);
       var
        b =
          caml_call6
            (CamlinternalOO[18], a, 0, g, f, Ppxlib_traverse_builtins[7], 1)
           [1],
        c =
          caml_call6
            (CamlinternalOO[18], a, 0, e, shared, Ppxlib_ast_Ast[6], 1)
           [1];
       return function(f, e){
        var d = caml_call2(CamlinternalOO[24], e, a);
        caml_call1(b, d);
        caml_call1(c, d);
        return caml_call3(CamlinternalOO[26], e, d, a);};
      },
      0]);
   var
    Ppxlib_Ast_traverse0 =
      [0, map, iter, fold, fold_map, map_with_context, lift];
   runtime.caml_register_global
    (12, Ppxlib_Ast_traverse0, "Ppxlib__Ast_traverse0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Caller_id
//# unitInfo: Requires: Ppxlib__Import, Stdlib__Printexc
//# shape: Ppxlib__Caller_id:[F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    cst_src_caller_id_ml = "src/caller_id.ml";
   function get(skip){
    var
     skip$0 = [0, cst_src_caller_id_ml, skip],
     stack = runtime.caml_get_current_callstack(16),
     len = caml_call1(Stdlib_Printexc[20], stack),
     pos = 0;
    for(;;){
     if(caml_call2(Ppxlib_Import[76], pos, len)) return 0;
     var
      a = caml_call2(Stdlib_Printexc[21], stack, pos),
      b = caml_call1(Stdlib_Printexc[22], a),
      match = caml_call1(Stdlib_Printexc[19][3], b);
     if(! match) return 0;
     var loc = match[1];
     if(! caml_call2(Ppxlib_Import[94][25], loc[1], skip$0)) return [0, loc];
     var pos$0 = pos + 1 | 0;
     pos = pos$0;
    }
   }
   var Ppxlib_Caller_id = [0, get];
   runtime.caml_register_global(3, Ppxlib_Caller_id, "Ppxlib__Caller_id");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Spellcheck
//# unitInfo: Requires: Ppxlib__Import, Stdlib, Stdlib__ArrayLabels, Stdlib__Printf
//# shape: Ppxlib__Spellcheck:[N,F(3),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    cst$0 = ", ",
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Cutoff_met =
      [248, "Ppxlib__Spellcheck.Cutoff_met", runtime.caml_fresh_oo_id(0)],
    a =
      [0,
       [11, "Hint: Did you mean ", [2, 0, [2, 0, [2, 0, [12, 63, 0]]]]],
       "Hint: Did you mean %s%s%s?"],
    cst_or = " or ";
   function levenshtein_distance(s, t, cutoff){
    var m = caml_ml_string_length(s), n = caml_ml_string_length(t);
    if(! caml_call2(Ppxlib_Import[76], cutoff, 0)){
     var k = caml_call1(Stdlib[18], m - n | 0);
     if(! caml_call2(Ppxlib_Import[81], k, cutoff)){
      var
       d = caml_call3(Stdlib_ArrayLabels[2], m + 1 | 0, n + 1 | 0, 0),
       l = 0;
      if(m >= 0){
       var i$0 = l;
       for(;;){
        caml_check_bound(caml_check_bound(d, i$0)[i$0 + 1], 0)[1] = i$0;
        var F = i$0 + 1 | 0;
        if(m === i$0) break;
        i$0 = F;
       }
      }
      var o = 0;
      if(n >= 0){
       var j$0 = o;
       for(;;){
        caml_check_bound(caml_check_bound(d, 0)[1], j$0)[j$0 + 1] = j$0;
        var E = j$0 + 1 | 0;
        if(n === j$0) break;
        j$0 = E;
       }
      }
      var line_min = [0, 0];
      try{
       var p = 1;
       if(n >= 1){
        var j = p;
        for(;;){
         var
          a = caml_call2(Ppxlib_Import[81], line_min[1], cutoff - 1 | 0),
          u = a ? caml_call2(Ppxlib_Import[81], j, cutoff - 1 | 0) : a;
         if(u) throw caml_maybe_attach_backtrace(Cutoff_met, 1);
         line_min[1] = caml_call2(Ppxlib_Import[83], m, n);
         var v = 1;
         if(m >= 1){
          var i = v;
          for(;;){
           var
            x = caml_string_get(t, j - 1 | 0),
            y = caml_string_get(s, i - 1 | 0);
           if(caml_call2(Ppxlib_Import[86][8], y, x))
            var
             b = j - 1 | 0,
             c = i - 1 | 0,
             value = caml_check_bound(caml_check_bound(d, c)[c + 1], b)[b + 1];
           else
            var
             e = j - 1 | 0,
             f = i - 1 | 0,
             g = j - 1 | 0,
             A =
               caml_check_bound(caml_check_bound(d, f)[f + 1], e)[e + 1] + 1
               | 0,
             B =
               caml_check_bound(caml_check_bound(d, i)[i + 1], g)[g + 1] + 1
               | 0,
             h = i - 1 | 0,
             C = caml_call2(Ppxlib_Import[82], B, A),
             D =
               caml_check_bound(caml_check_bound(d, h)[h + 1], j)[j + 1] + 1
               | 0,
             value = caml_call2(Ppxlib_Import[82], D, C);
           caml_check_bound(caml_check_bound(d, i)[i + 1], j)[j + 1] = value;
           line_min[1] = caml_call2(Ppxlib_Import[82], line_min[1], value);
           var z = i + 1 | 0;
           if(m === i) break;
           i = z;
          }
         }
         var w = j + 1 | 0;
         if(n === j) break;
         j = w;
        }
       }
       var
        q = caml_check_bound(caml_check_bound(d, m)[m + 1], n)[n + 1],
        r =
          caml_call2(Ppxlib_Import[77], q, cutoff)
           ? [0, caml_check_bound(caml_check_bound(d, m)[m + 1], n)[n + 1]]
           : 0,
        distance = r;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn !== Cutoff_met) throw caml_maybe_attach_backtrace(exn, 0);
       var distance = 0;
      }
      return distance;
     }
    }
    return 0;
   }
   function spellcheck(names, name){
    var
     switcher = caml_ml_string_length(name) - 1 | 0,
     cutoff =
       3 < switcher >>> 0
        ? 1 < switcher - 4 >>> 0 ? 3 : 2
        : 2 <= switcher ? 1 : 0,
     suggestions =
       caml_call3
         (Ppxlib_Import[94][17],
          function(acc, registered_name){
           var
            names_at_best_distance = acc[2],
            best_distance = acc[1],
            match = levenshtein_distance(name, registered_name, cutoff);
           if(! match) return acc;
           var dist = match[1];
           return caml_call2(Ppxlib_Import[77], dist, best_distance)
                   ? [0, dist, [0, registered_name, 0]]
                   : caml_call2
                      (Ppxlib_Import[78], dist, best_distance)
                     ? acc
                     : [0, dist, [0, registered_name, names_at_best_distance]];
          },
          [0, Ppxlib_Import[92][1], 0],
          names)
        [2],
     b = caml_call1(Ppxlib_Import[94][9], suggestions),
     c = caml_call1(Ppxlib_Import[99][77], name),
     match = caml_call1(caml_call1(Ppxlib_Import[94][31], c), b);
    if(! match) return 0;
    var
     rev_rest = match[2],
     last = match[1],
     d = caml_call1(Ppxlib_Import[94][66], rev_rest) ? cst : cst_or,
     e = caml_call1(Ppxlib_Import[94][9], rev_rest),
     f = caml_call2(Ppxlib_Import[99][7], cst$0, e);
    return [0, caml_call4(Stdlib_Printf[4], a, f, d, last)];
   }
   var Ppxlib_Spellcheck = [0, Cutoff_met, levenshtein_distance, spellcheck];
   runtime.caml_register_global(9, Ppxlib_Spellcheck, "Ppxlib__Spellcheck");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Name
//# unitInfo: Requires: Ppxlib__Caller_id, Ppxlib__Import, Ppxlib__Location, Ppxlib__Spellcheck, Stdlib, Stdlib__Format, Stdlib__Printf
//# shape: Ppxlib__Name:[[F(1),F(1)*,F(2)],F(1),F(1),N,N,N,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst$6 = " '",
    cst_with_name = " with name '",
    cst$7 = ".",
    cst$4 = "@ ",
    cst_Cannot_register = "Cannot register ",
    cst_Did_you_put_it_at_the_wron = "Did you put it at the wrong level?",
    cst_Hint = "Hint:",
    cst_available = "available",
    cst_for = "for",
    cst_is = "is",
    cst_ocaml_extension_constructo = "ocaml.extension_constructor",
    cst_s$1 = "s",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst_a = "a",
    cst_an = "an",
    partial =
      [17,
       [0, cst$4, 1, 0],
       [11,
        "the",
        [17,
         [0, cst$4, 1, 0],
         [11,
          "context",
          [17,
           [0, cst$4, 1, 0],
           [11,
            "of",
            [17, [0, cst$4, 1, 0], [2, 0, [17, [0, cst$4, 1, 0], [15, 0]]]]]]]]]],
    partial$0 = [17, 3, [11, cst_Did_you_put_it_at_the_wron, 0]],
    partial$1 =
      [17,
       [0, cst$4, 1, 0],
       [11,
        cst_for,
        [17,
         [0, cst$4, 1, 0],
         [15,
          [17,
           [0, cst$4, 1, 0],
           [11,
            "and",
            [17, [0, cst$4, 1, 0], [15, [16, [12, 46, [17, 0, partial$0]]]]]]]]]]],
    partial$2 =
      [17,
       [0, cst$4, 1, 0],
       [11,
        cst_for,
        [17,
         [0, cst$4, 1, 0],
         [15,
          [16,
           [12, 46, [17, 0, [17, 3, [11, cst_Did_you_put_it_at_the_wron, 0]]]]]]]]],
    cst$2 = cst$5,
    cst$3 = cst$5,
    partial$3 = [2, 0, [12, 39, [2, 0, 0]]],
    cst$1 = "_",
    kind = "extension",
    cst = cst$7,
    cst$0 = cst$7,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib = global_data.Stdlib,
    Ppxlib_Spellcheck = global_data.Ppxlib__Spellcheck,
    Ppxlib_Caller_id = global_data.Ppxlib__Caller_id;
   function fold_dot_suffixes(name, acc, f){
    function collapse_after_at(param){
     if(! param) return 0;
     var parts = param[2], part = param[1];
     if(! caml_call1(Ppxlib_Import[99][53], part)){
      var a = caml_string_get(part, 0);
      if(caml_call2(Ppxlib_Import[86][8], a, 64)){
       var b = [0, caml_call2(Ppxlib_Import[99][56], part, 1), parts];
       return [0, caml_call2(Ppxlib_Import[99][7], cst, b), 0];
      }
     }
     return [0, part, collapse_after_at(parts)];
    }
    var
     parts$1 = collapse_after_at(caml_call2(Ppxlib_Import[99][70], name, 46)),
     acc$0 = acc,
     parts = parts$1;
    for(;;){
     if(! parts) return acc$0;
     var
      parts$0 = parts[2],
      part = parts[1],
      acc$1 =
        caml_call2
         (f,
          caml_call2(Ppxlib_Import[99][7], cst$0, [0, part, parts$0]),
          acc$0);
     acc$0 = acc$1;
     parts = parts$0;
    }
   }
   function dot_suffixes(name){
    return fold_dot_suffixes(name, 0, function(x, acc){return [0, x, acc];});
   }
   function split_path(s){
    var i = 0;
    for(;;){
     if(caml_call2(Ppxlib_Import[76], i, caml_ml_string_length(s)))
      return [0, s, 0];
     if(46 === caml_string_get(s, i)){
      var i$0 = i + 1 | 0, i$2 = i$0;
      for(;;){
       if(caml_call2(Ppxlib_Import[76], i$2, caml_ml_string_length(s)))
        return [0, s, 0];
       var match = caml_string_get(s, i$2);
       if(65 <= match){
        if(91 > match){
         var a = [0, caml_call2(Ppxlib_Import[99][56], s, i$2)];
         return [0, caml_call2(Ppxlib_Import[99][54], s, i$2 - 1 | 0), a];
        }
       }
       else if(46 === match){var i$4 = i$2 + 1 | 0; i$2 = i$4; continue;}
       var i$3 = i$2 + 1 | 0;
       i = i$3;
       break;
      }
     }
     else{var i$1 = i + 1 | 0; i = i$1;}
    }
   }
   function make(name){
    var a = dot_suffixes(name);
    return [0, name, caml_call1(Ppxlib_Import[99][83][38], a)];
   }
   function name(t){return t[1];}
   function matches(t, matched){
    return caml_call2(Ppxlib_Import[99][83][31], matched, t[2]);
   }
   var Pattern = [0, make, name, matches];
   function split_outer_namespace(name){
    var match = caml_call2(Ppxlib_Import[99][62], name, 46);
    if(! match) return 0;
    var
     i = match[1],
     n = caml_ml_string_length(name),
     before_dot = caml_call3(Ppxlib_Import[99][14], name, 0, i),
     after_dot =
       caml_call3(Ppxlib_Import[99][14], name, i + 1 | 0, (n - i | 0) - 1 | 0);
    return [0, [0, before_dot, after_dot]];
   }
   function create_set(fully_qualified_names){
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, name){
              return fold_dot_suffixes
                      (name,
                       acc,
                       function(x, acc){
                        return caml_call2(Ppxlib_Import[99][83][2], x, acc);
                       });
             },
             Ppxlib_Import[99][83][1],
             fully_qualified_names);
   }
   var
    attributes =
      create_set
       (caml_list_of_js_array
         (["ocaml.alert",
           "ocaml.boxed",
           "ocaml.deprecated",
           "ocaml.deprecated_mutable",
           "ocaml.doc",
           cst_ocaml_extension_constructo,
           "ocaml.immediate",
           "ocaml.immediate64",
           "ocaml.inline",
           "ocaml.inlined",
           "ocaml.local",
           "ocaml.noalloc",
           "ocaml.ppwarning",
           "ocaml.remove_aliases",
           "ocaml.specialise",
           "ocaml.specialised",
           "ocaml.tailcall",
           "ocaml.text",
           "ocaml.unboxed",
           "ocaml.unroll",
           "ocaml.unrolled",
           "ocaml.untagged",
           "ocaml.warn_on_literal_pattern",
           "ocaml.warnerror",
           "ocaml.warning",
           "ocaml.toplevel_printer",
           "toplevel_printer"])),
    extensions =
      create_set([0, "ocaml.error", [0, cst_ocaml_extension_constructo, 0]]);
   function is_allowlisted(kind, name){
    return 482562044 <= kind
            ? caml_call2(Ppxlib_Import[99][83][31], name, attributes)
            : caml_call2(Ppxlib_Import[99][83][31], name, extensions);
   }
   function get_attribute_list(param){
    return caml_call1(Ppxlib_Import[99][83][10], attributes);
   }
   function get_extension_list(param){
    return caml_call1(Ppxlib_Import[99][83][10], extensions);
   }
   function create_reserved(param){
    return caml_call2(Ppxlib_Import[90][1], 0, 16);
   }
   var tbl = create_reserved(0);
   function reserve(ns$0){
    var ns = ns$0, tbl$0 = tbl;
    for(;;){
     var match = split_outer_namespace(ns);
     if(! match) return caml_call3(Ppxlib_Import[90][32], tbl$0, ns, 0);
     var
      match$0 = match[1],
      rest_ns = match$0[2],
      outer_ns = match$0[1],
      match$1 =
        caml_call3
         (Ppxlib_Import[90][34],
          tbl$0,
          outer_ns,
          function(param){return [0, create_reserved(0)];});
     if(! match$1) return 0;
     var rest_tbl = match$1[1];
     ns = rest_ns;
     tbl$0 = rest_tbl;
    }
   }
   function is_in_reserved_namespaces(name$0){
    var name = name$0, tbl$0 = tbl;
    for(;;){
     var match = split_outer_namespace(name);
     if(! match){
      var match$3 = caml_call2(Ppxlib_Import[90][33], tbl$0, name);
      if(match$3 && ! match$3[1]) return 1;
      return 0;
     }
     var
      match$0 = match[1],
      rest = match$0[2],
      ns = match$0[1],
      match$1 = caml_call2(Ppxlib_Import[90][33], tbl$0, ns);
     if(! match$1) return 0;
     var match$2 = match$1[1];
     if(! match$2) return 1;
     var rest_tbl = match$2[1];
     name = rest;
     tbl$0 = rest_tbl;
    }
   }
   reserve("merlin");
   reserve("reason");
   reserve("refmt");
   reserve("ns");
   reserve("res");
   reserve("metaocaml");
   reserve("ocamlformat");
   reserve("ppxlib.migration");
   var
    cst_attribute = "attribute",
    a =
      [0,
       [11,
        cst_Cannot_register,
        [2,
         0,
         [11,
          cst_with_name,
          [2,
           0,
           [11,
            "' as it matches an ",
            [2, 0, [11, " reserved by the compiler", 0]]]]]]],
       "Cannot register %s with name '%s' as it matches an %s reserved by the compiler"],
    b =
      [0,
       [11,
        cst_Cannot_register,
        [2,
         0,
         [11,
          cst_with_name,
          [2, 0, [11, "' as its namespace is marked as reserved", 0]]]]],
       "Cannot register %s with name '%s' as its namespace is marked as reserved"],
    c = [0, "src/name.ml", 0],
    d =
      [0,
       [11, " declared at ", [2, 0, [12, 58, [4, 0, 0, 0, 0]]]],
       " declared at %s:%d"],
    cst_s = cst_s$1,
    cst_on = " on ",
    e =
      [0,
       [11,
        "Some ppx-es tried to register conflicting transformations: ",
        [2,
         0,
         [11,
          cst$6,
          [2,
           0,
           [12,
            39,
            [2, 0, [2, 0, [11, " matches ", [2, 0, [11, cst$6, partial$3]]]]]]]]]],
       "Some ppx-es tried to register conflicting transformations: %s '%s'%s%s matches %s '%s'%s"],
    cst_s$0 = cst_s$1,
    f =
      [0,
       [17,
        [0, cst$4, 1, 0],
        [11,
         "but",
         [17,
          [0, cst$4, 1, 0],
          [11,
           cst_is,
           [17,
            [0, cst$4, 1, 0],
            [11,
             "used",
             [17,
              [0, cst$4, 1, 0],
              [11, "here", [17, [0, cst$4, 1, 0], [11, "in", partial]]]]]]]]]],
       "@ but@ is@ used@ here@ in@ the@ context@ of@ %s@ %a"],
    g = [0, [12, 44, [17, [0, cst$4, 1, 0], 0]], ",@ "],
    h =
      [0,
       [18,
        [1, [0, 0, cst$5]],
        [11,
         cst_Hint,
         [17,
          [0, cst$4, 1, 0],
          [12,
           96,
           [2,
            0,
            [12,
             39,
             [17,
              [0, cst$4, 1, 0],
              [11,
               cst_is,
               [17, [0, cst$4, 1, 0], [11, cst_available, partial$1]]]]]]]]]],
       "@[Hint:@ `%s'@ is@ available@ for@ %a@ and@ %a%t.@]@\nDid you put it at the wrong level?"],
    i =
      [0,
       [18,
        [1, [0, 0, cst$5]],
        [11,
         cst_Hint,
         [17,
          [0, cst$4, 1, 0],
          [12,
           96,
           [2,
            0,
            [12,
             39,
             [17,
              [0, cst$4, 1, 0],
              [11,
               cst_is,
               [17, [0, cst$4, 1, 0], [11, cst_available, partial$2]]]]]]]]]],
       "@[Hint:@ `%s'@ is@ available@ for@ %a%t.@]@\nDid you put it at the wrong level?"],
    j = [0, [2, 0, [11, ".\n", [2, 0, 0]]], "%s.\n%s"],
    k = [0, [2, 0, 0], "%s"];
   function ignore_checks(name){
    var a = is_in_reserved_namespaces(name);
    return a ? a : caml_call2(Ppxlib_Import[99][58], name, cst$1);
   }
   function create(kind, current_file, string_of_context){
    return [0,
            caml_call2(Ppxlib_Import[90][1], 0, 16),
            [0, current_file, c],
            kind,
            string_of_context];
   }
   function get_all_for_context(t, context){
    return caml_call3
            (Ppxlib_Import[90][34],
             t[1],
             context,
             function(param){return [0, Ppxlib_Import[99][82][1]];});
   }
   function check_collisions_local(caller, all_for_context, t, context, name){
    var
     match = caml_call2(Ppxlib_Import[99][82][43], name, all_for_context[1]);
    if(! match) return 0;
    var e$0 = match[1];
    function declared_at(param){
     if(! param) return cst$2;
     var loc = param[1];
     return caml_call3(Stdlib_Printf[4], d, loc[1], loc[2]);
    }
    var match$0 = caml_call1(t[4], context);
    if(match$0)
     var
      s = match$0[1],
      a = caml_call2(Stdlib[28], s, cst_s),
      context$0 = caml_call2(Stdlib[28], cst_on, a);
    else
     var context$0 = cst$3;
    var
     b = declared_at(e$0[2]),
     c = e$0[1],
     f = t[3],
     g = declared_at(caller),
     h = caml_call1(Ppxlib_Import[99][67], t[3]);
    return caml_call9
            (Stdlib_Printf[10], Stdlib[2], e, h, name, context$0, g, f, c, b);
   }
   function check_collisions(t, context, name){
    var
     caller = Ppxlib_Caller_id[1].call(null, t[2]),
     all_for_context = get_all_for_context(t, context);
    return check_collisions_local(caller, all_for_context, t, context, name);
   }
   function register(kind$1, t, context, name){
    if(482562044 <= kind$1)
     var list = attributes, kind$0 = cst_attribute;
    else
     var list = extensions, kind$0 = kind;
    if(caml_call2(Ppxlib_Import[99][83][31], name, list))
     caml_call5(Stdlib_Printf[10], Stdlib[2], a, kind$0, name, kind$0);
    else if(is_in_reserved_namespaces(name))
     caml_call4(Stdlib_Printf[10], Stdlib[2], b, kind$0, name);
    var
     caller = Ppxlib_Caller_id[1].call(null, t[2]),
     all = get_all_for_context(t, context);
    check_collisions_local(caller, all, t, context, name);
    var t$0 = [0, name, caller];
    all[1] =
     fold_dot_suffixes
      (name,
       all[1],
       function(name, acc){
        return caml_call3(Ppxlib_Import[99][82][2], name, t$0, acc);
       });
    return 0;
   }
   function spellcheck(t, context, opt, name){
    var
     allowlist = opt ? opt[1] : 0,
     all_for_context = get_all_for_context(t, context),
     all =
       caml_call3
        (Ppxlib_Import[99][82][23],
         function(key, param, acc){return [0, key, acc];},
         all_for_context[1],
         0),
     a = caml_call2(Ppxlib_Import[100], all, allowlist),
     x = Ppxlib_Spellcheck[3].call(null, a, name);
    if(x) return x;
    if(caml_call2(Ppxlib_Import[99][82][31], name, all_for_context[1]))
     return 0;
    var
     other_contexts =
       caml_call3
        (Ppxlib_Import[90][12],
         function(ctx, all_from_context, acc){
          if
           (caml_call2(Ppxlib_Import[73][6], context, ctx)
            &&
             caml_call2(Ppxlib_Import[99][82][31], name, all_from_context[1])){
           var match = caml_call1(t[4], ctx);
           if(! match) return acc;
           var s = match[1];
           return [0, caml_call2(Stdlib[28], s, cst_s$0), acc];
          }
          return acc;
         },
         t[1],
         0),
     pp_text = Stdlib_Format[139];
    function current_context(ppf){
     var match = caml_call1(t[4], context);
     if(match){
      var s = match[1];
      if(s !== cst$5){
       var a = caml_string_get(s, 0) - 97 | 0;
       if(24 < a >>> 0)
        var a_or_an = cst_a;
       else
        switch(a){
          case 0:
          case 4:
          case 8:
          case 14:
          case 20:
          case 24:
           var a_or_an = cst_an; break;
          default: var a_or_an = cst_a;
        }
       return caml_call5(Stdlib_Format[143], ppf, f, a_or_an, pp_text, s);
      }
     }
     return 0;
    }
    var
     match =
       caml_call2
        (Ppxlib_Import[94][44],
         function(x, y){return - caml_call2(Ppxlib_Import[99][72], x, y) | 0;},
         other_contexts);
    if(! match) return 0;
    var c = match[1];
    if(! match[2])
     return [0,
             caml_call5
              (Stdlib_Format[147], i, name, pp_text, c, current_context)];
    var
     rev_others = match[2],
     others = caml_call1(Ppxlib_Import[94][9], rev_others),
     b =
       caml_call2
        (Stdlib_Format[136],
         [0,
          function(ppf, param){return caml_call2(Stdlib_Format[143], ppf, g);}],
         pp_text);
    return [0,
            caml_call7
             (Stdlib_Format[147],
              h,
              name,
              b,
              others,
              pp_text,
              c,
              current_context)];
   }
   function createf(t, context, allowlist, fmt, name){
    return caml_call3
            (Stdlib_Printf[10],
             function(msg){
              var match = spellcheck(t, context, allowlist, name[1]);
              if(! match)
               return caml_call3(Ppxlib_Location[14][2], name[2], k, msg);
              var s = match[1];
              return caml_call4(Ppxlib_Location[14][2], name[2], j, msg, s);
             },
             fmt,
             name[1]);
   }
   function raise_errorf(t, context, allowlist, fmt, name){
    var a = createf(t, context, allowlist, fmt, name);
    return caml_call1(Ppxlib_Location[14][8], a);
   }
   function error_extensionf(t, context, allowlist, fmt, name){
    var a = createf(t, context, allowlist, fmt, name);
    return caml_call1(Ppxlib_Location[14][7], a);
   }
   var
    Error = [0, createf, raise_errorf, error_extensionf],
    Ppxlib_Name =
      [0,
       Pattern,
       split_path,
       dot_suffixes,
       [0,
        create,
        register,
        check_collisions,
        spellcheck,
        Error,
        raise_errorf],
       [0, get_attribute_list, get_extension_list, is_allowlisted],
       [0, reserve, is_in_reserved_namespaces],
       ignore_checks];
   runtime.caml_register_global(41, Ppxlib_Name, "Ppxlib__Name");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Common
//# unitInfo: Requires: Astlib__Pprintast, CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_builder_generated, Ppxlib__Ast_traverse0, Ppxlib__Import, Ppxlib__Location, Ppxlib__Name, Ppxlib_ast__Ast_helper_lite, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Printf
//# shape: Ppxlib__Common:[F(1)*,F(1),F(1),F(1),F(2),F(2),F(1),F(1),N,F(1),N,F(1),F(1),N,F(2),F(1),F(1),F(1),F(1),F(2),F(2),F(4),F(1),[F(1)*,F(2),F(2),F(2),F(1)],F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_Attributes_not_allowed_her = "Attributes not allowed here",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_go = "go",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_not_a_type_parameter = "not a type parameter",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_return_true = "return_true",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_t$1 = "t",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "}",
    cst$2 = "|",
    cst = cst$3,
    cst$0 = cst$3,
    f =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    c =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    g =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    shared = [0, "type_names"],
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib = global_data.Stdlib,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_ast_Ast_helper_lite = global_data.Ppxlib_ast__Ast_helper_lite,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Name = global_data.Ppxlib__Name,
    Ppxlib_Ast_builder_generated = global_data.Ppxlib__Ast_builder_generated,
    Ppxlib_Ast_traverse0 = global_data.Ppxlib__Ast_traverse0,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Format = global_data.Stdlib__Format,
    Astlib_Pprintast = global_data.Astlib__Pprintast,
    cache_id = runtime.caml_oo_cache_id();
   function lident(x){return [0, x];}
   function core_type_of_type_declaration(td){
    var
     loc = td[1][2],
     a = caml_call2(Ppxlib_Import[94][55], td[2], function(a){return a[1];}),
     b = caml_call2(Ppxlib_Ast_builder[1][1][3], lident, td[1]);
    return caml_call3(Ppxlib_Ast_builder[1][132], loc, b, a);
   }
   function chop(n, or_more, string, pos, f){
    var target = pos[1] - n | 0;
    for(;;){
     a:
     if(caml_call2(Ppxlib_Import[78], pos[1], 0)){
      if(! or_more && ! caml_call2(Ppxlib_Import[78], pos[1], target))
       break a;
      if(caml_call1(f, runtime.caml_string_get(string, pos[1] - 1 | 0))){pos[1] = pos[1] - 1 | 0; continue;}
     }
     return caml_call2(Ppxlib_Import[80], pos[1], target);
    }
   }
   var
    cnt = [0, 0],
    k =
      [0, [2, 0, [11, "__", [4, 3, [0, 2, 3], 0, [12, 95, 0]]]], "%s__%03i_"],
    cst_x = "_x",
    l = [0, [11, cst_not_a_type_parameter, 0], cst_not_a_type_parameter],
    m = [0, [11, cst_not_a_type_parameter, 0], cst_not_a_type_parameter];
   function gen_symbol(opt, param){
    var prefix = opt ? opt[1] : cst_x;
    cnt[1] = cnt[1] + 1 | 0;
    var
     pos = [0, runtime.caml_ml_string_length(prefix)],
     prefix$0 =
       chop(1, 0, prefix, pos, caml_call1(Ppxlib_Import[86][8], 95))
        ? chop
           (3,
            1,
            prefix,
            pos,
            function(param){return 9 < param - 48 >>> 0 ? 0 : 1;})
          ? chop
             (2, 0, prefix, pos, caml_call1(Ppxlib_Import[86][8], 95))
            ? caml_call2(Ppxlib_Import[99][54], prefix, pos[1])
            : prefix
          : prefix
        : prefix;
    return caml_call3(Stdlib_Printf[4], k, prefix$0, cnt[1]);
   }
   function name_type_params_in_td_res(td){
    function name_param(i, param){
     var variance = param[2], tp = param[1], v = tp[1];
     function c(ptyp_desc){
      return [0, [0, ptyp_desc, tp[2], tp[3], tp[4]], variance];
     }
     if(typeof v === "number")
      var
       b = caml_call1(Ppxlib_Import[86][1], 97 + (i % 26 | 0) | 0),
       a =
         [0,
          [0,
           gen_symbol
            ([0, caml_call2(Ppxlib_Import[99][1], (i / 26 | 0) + 1 | 0, b)],
             0)]];
     else
      var
       a =
         0 === v[0]
          ? [0, v]
          : [1, caml_call2(Ppxlib_Location[14][2], tp[2], l)];
     return caml_call2(Ppxlib_Import[96][5], a, c);
    }
    var
     a = caml_call2(Ppxlib_Import[94][56], td[2], name_param),
     match =
       caml_call1
        (caml_call1
          (Ppxlib_Import[94][64],
           function(param){
            if(0 === param[0]){var o = param[1]; return [0, o];}
            var e = param[1];
            return [1, e];
           }),
         a),
     errors = match[2],
     ptype_params = match[1];
    if(! errors)
     return [0,
             [0,
              td[1],
              ptype_params,
              td[3],
              td[4],
              td[5],
              td[6],
              td[7],
              td[8]]];
    var q = errors[2], t = errors[1];
    return [1, [0, t, q]];
   }
   function name_type_params_in_td(td){
    var match = name_type_params_in_td_res(td);
    if(0 === match[0]){var res = match[1]; return res;}
    var err = match[1][1];
    return caml_call1(Ppxlib_Location[14][8], err);
   }
   function combinator_type_of_type_declar(td, f){
    var
     td$0 = name_type_params_in_td(td),
     a = core_type_of_type_declaration(td$0),
     result_type = caml_call2(f, td$0[1][2], a);
    return caml_call3
            (Ppxlib_Import[94][57],
             td$0[2],
             result_type,
             function(param, acc){
              var tp = param[1], loc = tp[2], a = caml_call2(f, loc, tp);
              return caml_call4(Ppxlib_Ast_builder[1][134], loc, 0, a, acc);
             });
   }
   function string_of_core_type(ct){
    var
     buf = caml_call1(Stdlib_Buffer[1], 128),
     ppf = caml_call1(Stdlib_Format[120], buf);
    caml_call2(Astlib_Pprintast[5], ppf, ct);
    caml_call2(Stdlib_Format[43], ppf, 0);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function get_type_param_name_res(param){
    var ty = param[1], loc = ty[2], match = ty[1];
    if(typeof match !== "number" && 0 === match[0]){
     var name = match[1];
     return [0, caml_call2(Ppxlib_Ast_builder[1][1][2], loc, name)];
    }
    return [1, [0, caml_call2(Ppxlib_Location[14][2], loc, m), 0]];
   }
   function get_type_param_name(t){
    var match = get_type_param_name_res(t);
    if(0 === match[0]){var e = match[1]; return e;}
    var err = match[1][1];
    return caml_call1(Ppxlib_Location[14][8], err);
   }
   var
    Type_is_recursive =
      [248, "Ppxlib__Common.Type_is_recursive", runtime.caml_fresh_oo_id(0)],
    j =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_return_true,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_go,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    type_is_recursive =
      caml_call2
       (CamlinternalOO[19],
        [0,
         cst_bool,
         cst_cases,
         cst_case,
         cst_char,
         cst_value_binding,
         cst_extension_constructor_kind,
         cst_core_type,
         cst_structure,
         cst_list,
         cst_label_declaration,
         cst_module_binding,
         cst_position,
         cst_toplevel_directive,
         cst_directive_argument,
         cst_object_field_desc,
         cst_class_type_field_desc,
         cst_open_infos,
         cst_pattern_desc,
         cst_signature_item,
         cst_extension_constructor,
         cst_value_constraint,
         cst_toplevel_phrase,
         cst_extension,
         cst_location,
         cst_variance,
         cst_package_type,
         cst_virtual_flag,
         cst_module_type_desc,
         cst_rec_flag,
         cst_payload,
         cst_type_exception,
         cst_label,
         cst_letop,
         cst_location_stack,
         cst_value_description,
         cst_module_declaration,
         cst_class_type_declaration,
         cst_longident_loc,
         cst_closed_flag,
         cst_directive_argument_desc,
         cst_return_true,
         cst_attribute,
         cst_class_infos,
         cst_signature_item_desc,
         cst_go,
         cst_int,
         cst_loc,
         cst_row_field_desc,
         cst_override_flag,
         cst_structure_item_desc,
         cst_class_field_desc,
         cst_binding_op,
         cst_module_expr_desc,
         cst_class_signature,
         cst_type_extension,
         cst_class_field_kind,
         cst_module_type_declaration,
         cst_arg_label,
         cst_row_field,
         cst_longident,
         cst_string,
         cst_pattern,
         cst_include_description,
         cst_function_param,
         cst_signature,
         cst_function_body,
         cst_class_type_field,
         cst_attributes,
         cst_open_description,
         cst_with_constraint,
         cst_include_declaration,
         cst_class_type_desc,
         cst_private_flag,
         cst_injectivity,
         cst_open_declaration,
         cst_object_field,
         cst_array,
         cst_constant,
         cst_class_expr,
         cst_functor_parameter,
         cst_type_constraint,
         cst_direction_flag,
         cst_core_type_desc,
         cst_type_declaration,
         cst_constructor_declaration,
         cst_option,
         cst_type_kind,
         cst_module_expr,
         cst_module_substitution,
         cst_class_description,
         cst_expression,
         cst_class_type,
         cst_structure_item,
         cst_include_infos,
         cst_class_declaration,
         cst_function_param_desc,
         cst_module_type,
         cst_class_expr_desc,
         cst_class_structure,
         cst_mutable_flag,
         cst_expression_desc,
         cst_constructor_arguments,
         cst_class_field],
        function(b){
         var
          d = caml_call2(CamlinternalOO[3], b, cst),
          e = caml_call2(CamlinternalOO[3], b, cst$0),
          a = caml_call3(CamlinternalOO[4], b, j, shared),
          f = a[23],
          g = a[75],
          h = a[104],
          k = a[10],
          l = a[54],
          m = a[61],
          n = a[76],
          o = a[100],
          i =
            caml_call6
             (CamlinternalOO[18], b, 0, 0, c, Ppxlib_Ast_traverse0[2], 1),
          q = i[30],
          p = i[1];
         caml_call2
          (CamlinternalOO[11],
           b,
           [0,
            f,
            function(self_1, param){throw Type_is_recursive;},
            g,
            function(self_1, ctype){
             var match = ctype[1];
             if(typeof match !== "number")
              switch(match[0]){
                case 1:
                 return 0;
                case 3:
                 var match$0 = match[1][1];
                 if(0 === match$0[0]){
                  var id = match$0[1];
                  if(caml_call2(Ppxlib_Import[94][25], id, self_1[h + 1]))
                   return caml_call2(self_1[1][f + 1], self_1, 0);
                 }
                 break;
              }
             return caml_call1(caml_call1(q, self_1), ctype);
            },
            n,
            function(self_1, cd){
             var match = cd[3];
             if(0 === match[0]){
              var args = match[1], a = caml_call1(self_1[1][g + 1], self_1);
              return caml_call2(Ppxlib_Import[94][77], args, a);
             }
             var fields = match[1], b = caml_call1(self_1[1][l + 1], self_1);
             return caml_call2(Ppxlib_Import[94][77], fields, b);
            },
            o,
            function(self_1, param){return 0;},
            m,
            function(self_1, param){
             if(! self_1[d + 1]) return 0;
             try{
              var a = caml_call1(self_1[1][k + 1], self_1);
              caml_call2(Ppxlib_Import[94][77], self_1[e + 1], a);
             }
             catch(exn$0){
              var exn = caml_wrap_exception(exn$0);
              if(exn === Type_is_recursive) return 1;
              throw caml_maybe_attach_backtrace(exn, 0);
             }
             return 0;
            }]);
         return function(env, a, rec_flag, tds){
          var self = caml_call2(CamlinternalOO[24], a, b);
          self[e + 1] = tds;
          self[d + 1] = rec_flag;
          caml_call1(p, self);
          self[h + 1] =
           caml_call2
            (Ppxlib_Import[94][55], tds, function(td){return td[1][1];});
          return caml_call3(CamlinternalOO[26], a, self, b);};
        }),
    n =
      [0,
       [11, cst_Attributes_not_allowed_her, 0],
       cst_Attributes_not_allowed_her];
   function really_recursive(rec_flag, tds){
    var a = caml_call3(type_is_recursive[1], 0, rec_flag, tds);
    return caml_call2
            (runtime.caml_get_cached_method(a, 23080, cache_id), a, 0);
   }
   function last(x$1, l$1){
    var x = x$1, l = l$1;
    for(;;){if(! l) return x; var l$0 = l[2], x$0 = l[1]; x = x$0; l = l$0;}
   }
   function loc_of_name_and_payload(name, payload){
    switch(payload[0]){
      case 0:
       var match = payload[1];
       if(! match) return name[2];
       var
        l = match[2],
        x = match[1],
        init = x[2],
        b = init[3],
        c = last(x, l)[2][2];
       return [0, init[1], c, b];
      case 1:
       var match$0 = payload[1];
       if(! match$0) return name[2];
       var
        l$0 = match$0[2],
        x$0 = match$0[1],
        init$0 = x$0[2],
        d = init$0[3],
        f = last(x$0, l$0)[2][2];
       return [0, init$0[1], f, d];
      case 2:
       var t = payload[1]; return t[2];
      default:
       var match$1 = payload[2], x$1 = payload[1];
       if(! match$1) return x$1[2];
       var e = match$1[1], a = x$1[2];
       return [0, a[1], e[2][2], a[3]];
    }
   }
   function loc_of_payload(param){
    var attr_payload = param[2], attr_name = param[1];
    return loc_of_name_and_payload(attr_name, attr_payload);
   }
   function loc_of_attribute(param){
    var attr_payload = param[2], attr_name = param[1];
    if(Ppxlib_Location[4].call(null, attr_name[2]))
     return loc_of_name_and_payload(attr_name, attr_payload);
    var
     init = attr_name[2],
     a = init[3],
     b = loc_of_name_and_payload(attr_name, attr_payload)[2];
    return [0, init[1], b, a];
   }
   function loc_of_extension(param){
    var payload = param[2], name = param[1];
    if(Ppxlib_Location[4].call(null, name[2]))
     return loc_of_name_and_payload(name, payload);
    var
     init = name[2],
     a = init[3],
     b = loc_of_name_and_payload(name, payload)[2];
    return [0, init[1], b, a];
   }
   function curry_applications(expr){
    var match = expr[1];
    if(typeof match !== "number" && 4 === match[0]){
     var
      orig_forward_args = match[2],
      f = match[1],
      loc = expr[2],
      loop =
        function(param){
         if(! param) return f;
         var
          rev_front_args = param[2],
          last_arg = param[1],
          a = loop(rev_front_args);
         return Ppxlib_Ast_builder_generated[1][117].call(null, loc)(a)
                 ([0, last_arg, 0]);
        };
     return loop(caml_call1(Ppxlib_Import[94][9], orig_forward_args));
    }
    return expr;
   }
   function d(attr){
    var name = attr[1];
    if(Ppxlib_Name[7].call(null, name[1])) return 0;
    var loc = loc_of_attribute(attr);
    return [0, caml_call2(Ppxlib_Location[14][2], loc, n)];
   }
   var e = Ppxlib_Import[94][69];
   function attributes_errors(a){return caml_call2(e, a, d);}
   var
    a = caml_call1(CamlinternalOO[16], g),
    o = caml_call2(CamlinternalOO[8], a, f)[99],
    p =
      caml_call6(CamlinternalOO[18], a, 0, 0, c, Ppxlib_Ast_traverse0[3], 1)
       [1];
   caml_call3
    (CamlinternalOO[10],
     a,
     o,
     function(self_2, a, acc){
      var b = caml_call2(e, [0, a, 0], d);
      return caml_call2(Ppxlib_Import[100], b, acc);
     });
   caml_call1(CamlinternalOO[17], a);
   var h = caml_call2(CamlinternalOO[24], 0, a);
   caml_call1(p, h);
   var collect_attributes_errors = caml_call3(CamlinternalOO[26], 0, h, a);
   function assert_no_attributes(l){
    var match = caml_call2(e, l, d);
    if(! match) return 0;
    var err = match[1];
    return caml_call1(Ppxlib_Location[14][8], err);
   }
   var
    b = caml_call1(CamlinternalOO[16], g),
    q = caml_call2(CamlinternalOO[8], b, f)[99],
    r =
      caml_call6(CamlinternalOO[18], b, 0, 0, c, Ppxlib_Ast_traverse0[2], 1)
       [1];
   caml_call3
    (CamlinternalOO[10],
     b,
     q,
     function(self_3, a){return assert_no_attributes([0, a, 0]);});
   caml_call1(CamlinternalOO[17], b);
   var i = caml_call2(CamlinternalOO[24], 0, b);
   caml_call1(r, i);
   var
    assert_no_attributes_in = caml_call3(CamlinternalOO[26], 0, i, b),
    cst_ocaml_ppwarning = "ocaml.ppwarning",
    cst_t = cst_t$1,
    cst_t$0 = cst_t$1,
    s = [0, [2, 0, [4, 0, 0, 0, 0]], "%s%d"];
   function attribute_of_warning(loc, s){
    var a = caml_call2(Ppxlib_Ast_builder[1][177], loc, s);
    return [0,
            [0, cst_ocaml_ppwarning, loc],
            [0, [0, caml_call3(Ppxlib_Ast_builder[1][21], loc, a, 0), 0]],
            loc];
   }
   function is_polymorphic_variant(td, sig){
    var match$0 = td[4];
    if(typeof match$0 === "number" && ! match$0){
     var match$1 = td[6];
     if(! match$1) return sig ? 374637448 : 974048726;
     var typ$0 = match$1[1], param = typ$0;
     for(;;){
      var match = param[1];
      if(typeof match !== "number")
       switch(match[0]){
         case 3:
          return 374637448;
         case 6:
          var typ = match[1]; param = typ; continue;
         case 7:
          return -491008483;
       }
      return 974048726;
     }
    }
    return 974048726;
   }
   function mk_named_sig(loc, sg_name, handle_polymorphic_variant, param){
    if(param && ! param[2]){
     var td = param[1];
     if
      (caml_call2(Ppxlib_Import[99][73], td[1][1], cst_t)
       && caml_call1(Ppxlib_Import[94][66], td[3])){
      if(! handle_polymorphic_variant){
       var i = is_polymorphic_variant(td, 1);
       if(caml_call2(Ppxlib_Import[73][3], i, -491008483)) return 0;
      }
      var arity = caml_call1(Ppxlib_Import[94][1], td[2]);
      if(caml_call2(Ppxlib_Import[81], arity, 4)) return 0;
      var
       mty =
         caml_call2(Ppxlib_Import[76], arity, 0)
          ? sg_name
          : caml_call3(Stdlib_Printf[4], s, sg_name, arity),
       td$0 = name_type_params_in_td(td),
       a = td$0[1],
       b =
         caml_call2(Ppxlib_Import[94][55], td$0[2], function(a){return a[1];}),
       c = caml_call1(Ppxlib_Ast_builder[1][1][4], td$0[1]),
       d = [0, caml_call3(Ppxlib_Ast_builder[1][132], loc, c, b)],
       for_subst =
         caml_call8
          (Ppxlib_ast_Ast_helper_lite[9][1],
           [0, loc],
           0,
           [0, td$0[2]],
           0,
           0,
           0,
           d,
           a),
       e =
         [0,
          [4,
           caml_call2(Ppxlib_Ast_builder[1][1][5], loc, cst_t$0),
           for_subst],
          0],
       f = caml_call2(Ppxlib_Ast_builder[1][1][5], loc, mty),
       g = caml_call2(Ppxlib_Ast_builder[1][67], loc, f),
       h = caml_call3(Ppxlib_Ast_builder[1][64], loc, g, e);
      return [0, caml_call2(Ppxlib_Ast_builder[1][169], loc, h)];
     }
    }
    return 0;
   }
   function exn_to_loc_error(exn){
    var match = caml_call1(Ppxlib_Location[14][6], exn);
    if(! match) throw caml_maybe_attach_backtrace(exn, 1);
    var error = match[1];
    return error;
   }
   function return$(e){return [0, e, 0];}
   function symbol_bind(param, f){
    var
     errors1 = param[2],
     x = param[1],
     match = caml_call1(f, x),
     errors2 = match[2],
     y = match[1];
    return [0, y, caml_call2(Ppxlib_Import[100], errors1, errors2)];
   }
   function symbol_map(param, f){
    var errors = param[2], x = param[1];
    return [0, caml_call1(f, x), errors];
   }
   function of_result(result, default$){
    if(0 === result[0]){var x = result[1]; return [0, x, 0];}
    var errors = result[1];
    return [0, default$, caml_call1(Ppxlib_Import[97][3], errors)];
   }
   function combine_errors(list){
    var
     a = caml_call2(Ppxlib_Import[94][70], list, function(a){return a[2];});
    return [0,
            caml_call2(Ppxlib_Import[94][55], list, function(a){return a[1];}),
            a];
   }
   var
    With_errors =
      [0, return$, symbol_bind, symbol_map, of_result, combine_errors];
   function valid_string_constant_delimite(string){
    var n = 0;
    for(;;){
     var
      delimiter = caml_call2(Ppxlib_Import[99][1], n, 120),
      a = caml_call2(Stdlib[28], delimiter, cst$1),
      b = caml_call2(Stdlib[28], cst$2, a);
     if(! caml_call2(Ppxlib_Import[99][71], string, b)) return delimiter;
     var n$0 = n + 1 | 0;
     n = n$0;
    }
   }
   var
    Ppxlib_Common =
      [0,
       lident,
       core_type_of_type_declaration,
       name_type_params_in_td_res,
       name_type_params_in_td,
       combinator_type_of_type_declar,
       gen_symbol,
       string_of_core_type,
       assert_no_attributes,
       assert_no_attributes_in,
       attributes_errors,
       collect_attributes_errors,
       get_type_param_name_res,
       get_type_param_name,
       type_is_recursive,
       really_recursive,
       loc_of_payload,
       loc_of_attribute,
       loc_of_extension,
       curry_applications,
       attribute_of_warning,
       is_polymorphic_variant,
       mk_named_sig,
       exn_to_loc_error,
       With_errors,
       valid_string_constant_delimite];
   runtime.caml_register_global(33, Ppxlib_Common, "Ppxlib__Common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_pattern_generated
//# unitInfo: Requires: Ppxlib__Ast_pattern0, Ppxlib__Common
//# shape: Ppxlib__Ast_pattern_generated:[N,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(2)*,F(2)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*,F(2)*,F(2)*,N,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,N,N,F(2)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,N,F(2)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*,N,F(1)*->F(1)*,F(2)*,F(1)*,N,N,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(2)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(1)*->F(1)*,N,N,F(2)*,F(2)*,F(1)*->F(1)*,F(1)*,F(2)*,F(1)*->F(1)*,N,N,F(2)*,F(2)*,N,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,N,N,N,N,F(2)*,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*,F(2)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(2)*,F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*,N,F(1)*,F(1)*,N,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*,N,N,N,N,N,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_alias$2 = "alias",
    cst_any$1 = "any",
    cst_apply$2 = "apply",
    cst_array$1 = "array",
    cst_arrow$1 = "arrow",
    cst_attribute$3 = "attribute",
    cst_class$2 = "class",
    cst_class_type$1 = "class_type",
    cst_constant$1 = "constant",
    cst_constr$2 = "constr",
    cst_constraint$6 = "constraint",
    cst_construct$1 = "construct",
    cst_exception$2 = "exception",
    cst_extension$10 = "extension",
    cst_functor$1 = "functor",
    cst_ident$3 = "ident",
    cst_include$1 = "include",
    cst_inherit$1 = "inherit",
    cst_lazy$1 = "lazy",
    cst_let$1 = "let",
    cst_method$1 = "method",
    cst_modsubst$1 = "modsubst",
    cst_modtype$2 = "modtype",
    cst_modtypesubst$1 = "modtypesubst",
    cst_module$2 = "module",
    cst_newtype$1 = "newtype",
    cst_object$1 = "object",
    cst_open$7 = "open",
    cst_poly$1 = "poly",
    cst_recmodule$1 = "recmodule",
    cst_record$3 = "record",
    cst_signature$1 = "signature",
    cst_string$1 = "string",
    cst_structure$1 = "structure",
    cst_tuple$3 = "tuple",
    cst_type$3 = "type",
    cst_typesubst$1 = "typesubst",
    cst_typext$1 = "typext",
    cst_unpack$1 = "unpack",
    cst_val$2 = "val",
    cst_value$1 = "value",
    cst_var$1 = "var",
    cst_variant$3 = "variant";
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Ast_pattern0 = global_data.Ppxlib__Ast_pattern0,
    Ppxlib_Common = global_data.Ppxlib__Common,
    cst_Nolabel = "Nolabel",
    nolabel =
      [0,
       function(ctx, loc, x, k){
        return typeof x === "number"
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Nolabel);
       }],
    cst_Labelled = "Labelled",
    cst_Optional = "Optional",
    cst_constr = cst_constr$2,
    cst_structure = cst_structure$1,
    cst_fun = "fun",
    cst_apply = cst_apply$2,
    cst_let = cst_let$1,
    cst_constraint = cst_constraint$6,
    cst_extension = cst_extension$10,
    cst_open = cst_open$7,
    cst_inherit = cst_inherit$1,
    cst_val = cst_val$2,
    cst_method = cst_method$1,
    cst_constraint$0 = cst_constraint$6,
    cst_initializer = "initializer",
    cst_attribute = cst_attribute$3,
    cst_extension$0 = cst_extension$10,
    cst_virtual = "virtual",
    cst_concrete = "concrete",
    cst_constr$0 = cst_constr$2,
    cst_signature = cst_signature$1,
    cst_arrow = cst_arrow$1,
    cst_extension$1 = cst_extension$10,
    cst_open$0 = cst_open$7,
    cst_inherit$0 = cst_inherit$1,
    cst_val$0 = cst_val$2,
    cst_method$0 = cst_method$1,
    cst_constraint$1 = cst_constraint$6,
    cst_attribute$0 = cst_attribute$3,
    cst_extension$2 = cst_extension$10,
    cst_Closed = "Closed";
   function labelled(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(typeof x !== "number" && 0 === x[0]){
              var x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Labelled);
            }];
   }
   function optional(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(typeof x !== "number" && 0 !== x[0]){
              var x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Optional);
            }];
   }
   function attribute(param){
    var name = param[1];
    return function(param){
     var payload = param[1];
     return [0,
             function(ctx, loc, x, k){
              var
               k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
               k$1 = caml_call4(payload, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   function binding_op(param){
    var op = param[1];
    return function(param){
     var pat = param[1];
     return function(param){
      var exp = param[1];
      return [0,
              function(ctx, loc, x, k){
               var
                k$0 = caml_call4(op, ctx, x[1][2], x[1][1], k),
                k$1 = caml_call4(pat, ctx, loc, x[2], k$0),
                k$2 = caml_call4(exp, ctx, loc, x[3], k$1);
               return k$2;
              }];};};
   }
   function case$(param){
    var lhs = param[1];
    return function(param){
     var guard = param[1];
     return function(param){
      var rhs = param[1];
      return [0,
              function(ctx, loc, x, k){
               var
                k$0 = caml_call4(lhs, ctx, loc, x[1], k),
                k$1 = caml_call4(guard, ctx, loc, x[2], k$0),
                k$2 = caml_call4(rhs, ctx, loc, x[3], k$1);
               return k$2;
              }];};};
   }
   function pcl_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pcl_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function pcl_constr(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(0 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_constr);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pcl_structure(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(1 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_structure);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcl_fun(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return function(param){
       var f3 = param[1];
       return [0,
               function(ctx, loc, x, k){
                Ppxlib_Common[8].call(null, x[3]);
                var loc$0 = x[2], x$0 = x[1];
                if(2 !== x$0[0])
                 return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_fun);
                var x3 = x$0[4], x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1),
                 k$3 = caml_call4(f3, ctx, loc$0, x3, k$2);
                return k$3;
               }];};};};
   }
   function pcl_apply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(3 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_apply);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pcl_let(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[3]);
               var loc$0 = x[2], x$0 = x[1];
               if(4 !== x$0[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_let);
               var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
               return k$2;
              }];};};
   }
   function pcl_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(5 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_constraint);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pcl_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(6 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcl_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(7 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_open);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pcf_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pcf_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function pcf_inherit(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[3]);
               var loc$0 = x[2], x$0 = x[1];
               if(0 !== x$0[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_inherit);
               var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
               return k$2;
              }];};};
   }
   function pcf_val(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(1 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_val);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcf_method(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(2 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_method);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcf_constraint(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(3 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call
                      (null, loc$0, cst_constraint$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcf_initializer(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(4 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_initializer);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcf_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(5 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_attribute);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcf_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(6 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function cfk_virtual(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_virtual);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function cfk_concrete(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(0 === x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_concrete);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc, x0, k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function class_infos_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[5],
              k$0 = caml_call4(f1, ctx, loc$0, x[6], k),
              x$0 = [0, x[1], x[2], x[3], x[4], x[5], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function class_infos(param){
    var virt = param[1];
    return function(param){
     var params = param[1];
     return function(param){
      var name = param[1];
      return function(param){
       var expr = param[1];
       return [0,
               function(ctx, loc, x, k){
                Ppxlib_Common[8].call(null, x[6]);
                var
                 k$0 = caml_call4(virt, ctx, loc, x[1], k),
                 k$1 = caml_call4(params, ctx, loc, x[2], k$0),
                 k$2 = caml_call4(name, ctx, x[3][2], x[3][1], k$1),
                 k$3 = caml_call4(expr, ctx, loc, x[4], k$2);
                return k$3;
               }];};};};
   }
   function class_signature(param){
    var self = param[1];
    return function(param){
     var fields = param[1];
     return [0,
             function(ctx, loc, x, k){
              var
               k$0 = caml_call4(self, ctx, loc, x[1], k),
               k$1 = caml_call4(fields, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   function class_structure(param){
    var self = param[1];
    return function(param){
     var fields = param[1];
     return [0,
             function(ctx, loc, x, k){
              var
               k$0 = caml_call4(self, ctx, loc, x[1], k),
               k$1 = caml_call4(fields, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   function pcty_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pcty_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function pcty_constr(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(0 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_constr$0);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pcty_signature(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(1 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_signature);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcty_arrow(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[3]);
               var loc$0 = x[2], x$0 = x[1];
               if(2 !== x$0[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_arrow);
               var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
               return k$2;
              }];};};
   }
   function pcty_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(3 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$1);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pcty_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(4 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_open$0);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pctf_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pctf_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function pctf_inherit(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(0 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_inherit$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pctf_val(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(1 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_val$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pctf_method(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(2 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_method$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pctf_constraint(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(3 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call
                      (null, loc$0, cst_constraint$1);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pctf_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(4 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_attribute$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pctf_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(5 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$2);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   var
    closed =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Closed)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Open = "Open",
    open =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Open);
       }],
    cst_integer = "integer",
    cst_char = "char",
    cst_string = cst_string$1,
    cst_float = "float",
    cst_tuple = cst_tuple$3,
    cst_record = cst_record$3,
    cst_any = cst_any$1;
   function pconst_integer(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(0 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_integer);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc, x0, k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function pconst_char(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(1 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_char);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function pconst_string(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               if(2 !== x[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc, cst_string);
               var x2 = x[3], x1 = x[2], x0 = x[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc, x0, k),
                k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc, x2, k$1);
               return k$2;
              }];};};
   }
   function pconst_float(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(3 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_float);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc, x0, k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function pcstr_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_tuple);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function pcstr_record(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 === x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_record);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function constructor_declaration_attrib(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[5],
              k$0 = caml_call4(f1, ctx, loc$0, x[6], k),
              x$0 = [0, x[1], x[2], x[3], x[4], x[5], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function constructor_declaration(param){
    var name = param[1];
    return function(param){
     var vars = param[1];
     return function(param){
      var args = param[1];
      return function(param){
       var res = param[1];
       return [0,
               function(ctx, loc, x, k){
                Ppxlib_Common[8].call(null, x[6]);
                var
                 k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                 k$1 = caml_call4(vars, ctx, loc, x[2], k$0),
                 k$2 = caml_call4(args, ctx, loc, x[3], k$1),
                 k$3 = caml_call4(res, ctx, loc, x[4], k$2);
                return k$3;
               }];};};};
   }
   function ptyp_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function ptyp_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[4], k),
              x$0 = [0, x[1], x[2], x[3], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   var
    ptyp_any =
      [0,
       function(ctx, loc, x, k){
        Ppxlib_Common[8].call(null, x[4]);
        var loc$0 = x[2], x$0 = x[1];
        return typeof x$0 === "number"
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_any);
       }],
    cst_var = cst_var$1,
    cst_arrow$0 = cst_arrow$1,
    cst_tuple$0 = cst_tuple$3,
    cst_constr$1 = cst_constr$2,
    cst_object = cst_object$1,
    cst_class = cst_class$2,
    cst_alias = cst_alias$2,
    cst_variant = cst_variant$3,
    cst_poly = cst_poly$1,
    cst_package = "package",
    cst_open$1 = cst_open$7,
    cst_extension$3 = cst_extension$10,
    cst_Upto = "Upto";
   function ptyp_var(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 0 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_var);
            }];
   }
   function ptyp_arrow(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 1 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_arrow$0);
              }];};};
   }
   function ptyp_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 2 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_tuple$0);
            }];
   }
   function ptyp_constr(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 3 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_constr$1);
             }];};
   }
   function ptyp_object(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 4 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_object);
             }];};
   }
   function ptyp_class(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 5 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_class);
             }];};
   }
   function ptyp_alias(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 6 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_alias);
             }];};
   }
   function ptyp_variant(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 7 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_variant);
              }];};};
   }
   function ptyp_poly(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 8 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_poly);
             }];};
   }
   function ptyp_package(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 9 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_package);
            }];
   }
   function ptyp_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 10 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_open$1);
             }];};
   }
   function ptyp_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 11 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$3);
            }];
   }
   var
    upto =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Upto)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Downto = "Downto",
    downto =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Downto);
       }],
    cst_string$0 = cst_string$1,
    cst_int = "int",
    cst_ident = cst_ident$3,
    cst_bool = "bool",
    cst_ident$0 = cst_ident$3,
    cst_constant = cst_constant$1,
    cst_let$0 = cst_let$1,
    cst_function = "function",
    cst_apply$0 = cst_apply$2,
    cst_match = "match",
    cst_try = "try",
    cst_tuple$1 = cst_tuple$3,
    cst_construct = cst_construct$1,
    cst_variant$0 = cst_variant$3,
    cst_record$0 = cst_record$3,
    cst_field = "field",
    cst_setfield = "setfield",
    cst_array = cst_array$1,
    cst_ifthenelse = "ifthenelse",
    cst_sequence = "sequence",
    cst_while = "while",
    cst_for = "for",
    cst_constraint$2 = cst_constraint$6,
    cst_coerce = "coerce",
    cst_send = "send",
    cst_new = "new",
    cst_setinstvar = "setinstvar",
    cst_override = "override",
    cst_letmodule = "letmodule",
    cst_letexception = "letexception",
    cst_assert = "assert",
    cst_lazy = cst_lazy$1,
    cst_poly$0 = cst_poly$1,
    cst_object$0 = cst_object$1,
    cst_newtype = cst_newtype$1,
    cst_pack = "pack",
    cst_open$2 = cst_open$7,
    cst_letop = "letop",
    cst_extension$4 = cst_extension$10,
    cst_unreachable = "unreachable";
   function pdira_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pdir_string(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(0 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_string$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pdir_int(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              var loc$0 = x[2], x$0 = x[1];
              if(1 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_int);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pdir_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(2 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_ident);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pdir_bool(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(3 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_bool);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pexp_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pexp_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[4], k),
              x$0 = [0, x[1], x[2], x[3], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function pexp_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 0 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_ident$0);
            }];
   }
   function pexp_constant(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 1 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_constant);
            }];
   }
   function pexp_let(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 2 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_let$0);
              }];};};
   }
   function pexp_function(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 3 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_function);
              }];};};
   }
   function pexp_apply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 4 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_apply$0);
             }];};
   }
   function pexp_match(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 5 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_match);
             }];};
   }
   function pexp_try(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 6 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_try);
             }];};
   }
   function pexp_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 7 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_tuple$1);
            }];
   }
   function pexp_construct(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 8 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_construct);
             }];};
   }
   function pexp_variant(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 9 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_variant$0);
             }];};
   }
   function pexp_record(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 10 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_record$0);
             }];};
   }
   function pexp_field(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 11 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_field);
             }];};
   }
   function pexp_setfield(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 12 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_setfield);
              }];};};
   }
   function pexp_array(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 13 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_array);
            }];
   }
   function pexp_ifthenelse(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 14 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_ifthenelse);
              }];};};
   }
   function pexp_sequence(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 15 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_sequence);
             }];};
   }
   function pexp_while(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 16 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_while);
             }];};
   }
   function pexp_for(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return function(param){
       var f3 = param[1];
       return function(param){
        var f4 = param[1];
        return [0,
                function(ctx, loc, x, k){
                 Ppxlib_Common[8].call(null, x[4]);
                 var loc$0 = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 17 === x$0[0]){
                  var
                   x4 = x$0[5],
                   x3 = x$0[4],
                   x2 = x$0[3],
                   x1 = x$0[2],
                   x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                   k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                   k$2 = caml_call4(f2, ctx, loc$0, x2, k$1),
                   k$3 = caml_call4(f3, ctx, loc$0, x3, k$2),
                   k$4 = caml_call4(f4, ctx, loc$0, x4, k$3);
                  return k$4;
                 }
                 return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_for);
                }];};};};};
   }
   function pexp_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 18 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call
                      (null, loc$0, cst_constraint$2);
             }];};
   }
   function pexp_coerce(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 19 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_coerce);
              }];};};
   }
   function pexp_send(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 20 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_send);
             }];};
   }
   function pexp_new(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 21 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_new);
            }];
   }
   function pexp_setinstvar(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 22 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_setinstvar);
             }];};
   }
   function pexp_override(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 23 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_override);
            }];
   }
   function pexp_letmodule(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var loc$0 = x[2], x$0 = x[1];
               if(typeof x$0 !== "number" && 24 === x$0[0]){
                var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var
                 k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                 k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                 k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
                return k$2;
               }
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_letmodule);
              }];};};
   }
   function pexp_letexception(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 25 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call
                      (null, loc$0, cst_letexception);
             }];};
   }
   function pexp_assert(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 26 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_assert);
            }];
   }
   function pexp_lazy(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 27 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_lazy);
            }];
   }
   function pexp_poly(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 28 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_poly$0);
             }];};
   }
   function pexp_object(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 29 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_object$0);
            }];
   }
   function pexp_newtype(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 30 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_newtype);
             }];};
   }
   function pexp_pack(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 31 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_pack);
            }];
   }
   function pexp_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 32 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_open$2);
             }];};
   }
   function pexp_letop(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 33 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_letop);
            }];
   }
   function pexp_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 34 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$4);
            }];
   }
   var
    pexp_unreachable =
      [0,
       function(ctx, loc, x, k){
        Ppxlib_Common[8].call(null, x[4]);
        var loc$0 = x[2], x$0 = x[1];
        return typeof x$0 === "number"
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_unreachable);
       }],
    cst_decl = "decl",
    cst_rebind = "rebind",
    cst_body = "body",
    cst_cases = "cases",
    cst_val$1 = cst_val$2,
    cst_newtype$0 = cst_newtype$1,
    cst_Unit = "Unit";
   function extension_constructor_attribut(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[3],
              k$0 = caml_call4(f1, ctx, loc$0, x[4], k),
              x$0 = [0, x[1], x[2], x[3], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function extension_constructor(param){
    var name = param[1];
    return function(param){
     var kind = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var
               k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
               k$1 = caml_call4(kind, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   function pext_decl(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               if(0 !== x[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc, cst_decl);
               var x2 = x[3], x1 = x[2], x0 = x[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc, x0, k),
                k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc, x2, k$1);
               return k$2;
              }];};};
   }
   function pext_rebind(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 === x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_rebind);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
             return k$0;
            }];
   }
   function pfunction_body(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_body);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function pfunction_cases(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               if(0 === x[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc, cst_cases);
               var x2 = x[3], x1 = x[2], x0 = x[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc, x0, k),
                k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc, x2, k$1);
               return k$2;
              }];};};
   }
   function pparam_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[1],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pparam_val(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               var loc$0 = x[1], x$0 = x[2];
               if(0 !== x$0[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_val$1);
               var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
               return k$2;
              }];};};
   }
   function pparam_newtype(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[1], x$0 = x[2];
             if(0 === x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_newtype$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
             return k$0;
            }];
   }
   var
    unit =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Unit)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Named = "Named",
    cst_Injective = "Injective";
   function named(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(! x)
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Named);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function include_infos_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function include_infos(param){
    var mod = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var k$0 = caml_call4(mod, ctx, loc, x[1], k);
             return k$0;
            }];
   }
   var
    injective =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Injective)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_NoInjectivity = "NoInjectivity",
    noinjectivity =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_NoInjectivity);
       }],
    cst_Lident = "Lident",
    cst_Ldot = "Ldot",
    cst_Lapply = "Lapply",
    cst_ident$1 = cst_ident$3,
    cst_structure$0 = cst_structure$1,
    cst_functor = cst_functor$1,
    cst_apply$1 = cst_apply$2,
    cst_apply_unit = "apply_unit",
    cst_constraint$3 = cst_constraint$6,
    cst_unpack = cst_unpack$1,
    cst_extension$5 = cst_extension$10,
    cst_ident$2 = cst_ident$3,
    cst_signature$0 = cst_signature$1,
    cst_functor$0 = cst_functor$1,
    cst_with = "with",
    cst_typeof = "typeof",
    cst_extension$6 = cst_extension$10,
    cst_alias$0 = cst_alias$2,
    cst_Immutable = "Immutable";
   function label_declaration_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[4],
              k$0 = caml_call4(f1, ctx, loc$0, x[5], k),
              x$0 = [0, x[1], x[2], x[3], x[4], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function label_declaration(param){
    var name = param[1];
    return function(param){
     var mutable = param[1];
     return function(param){
      var type = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[5]);
               var
                k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                k$1 = caml_call4(mutable, ctx, loc, x[2], k$0),
                k$2 = caml_call4(type, ctx, loc, x[3], k$1);
               return k$2;
              }];};};
   }
   function letop(param){
    var let$ = param[1];
    return function(param){
     var ands = param[1];
     return function(param){
      var body = param[1];
      return [0,
              function(ctx, loc, x, k){
               var
                k$0 = caml_call4(let$, ctx, loc, x[1], k),
                k$1 = caml_call4(ands, ctx, loc, x[2], k$0),
                k$2 = caml_call4(body, ctx, loc, x[3], k$1);
               return k$2;
              }];};};
   }
   function location(param){
    var start = param[1];
    return function(param){
     var end = param[1];
     return function(param){
      var ghost = param[1];
      return [0,
              function(ctx, loc, x, k){
               var
                k$0 = caml_call4(start, ctx, loc, x[1], k),
                k$1 = caml_call4(end, ctx, loc, x[2], k$0),
                k$2 = caml_call4(ghost, ctx, loc, x[3], k$1);
               return k$2;
              }];};};
   }
   function lident(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Lident);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function ldot(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(1 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Ldot);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc, x0, k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function lapply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(2 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Lapply);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc, x0, k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function module_binding_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[4],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0, x[4]],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function module_binding(param){
    var name = param[1];
    return function(param){
     var expr = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var
               k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
               k$1 = caml_call4(expr, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   function module_declaration_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[4],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0, x[4]],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function module_declaration(param){
    var name = param[1];
    return function(param){
     var type = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var
               k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
               k$1 = caml_call4(type, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   function pmod_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pmod_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function pmod_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(0 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_ident$1);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
             return k$0;
            }];
   }
   function pmod_structure(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(1 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_structure$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pmod_functor(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(2 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_functor);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pmod_apply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(3 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_apply$1);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pmod_apply_unit(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(4 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_apply_unit);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pmod_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(5 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call
                       (null, loc$0, cst_constraint$3);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pmod_unpack(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(6 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_unpack);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pmod_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(7 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$5);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function module_substitution_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[4],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0, x[4]],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function module_substitution(param){
    var name = param[1];
    return function(param){
     var manifest = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var
               k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
               k$1 = caml_call4(manifest, ctx, x[2][2], x[2][1], k$0);
              return k$1;
             }];};
   }
   function pmty_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pmty_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function pmty_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(0 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_ident$2);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
             return k$0;
            }];
   }
   function pmty_signature(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(1 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_signature$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pmty_functor(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(2 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_functor$0);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pmty_with(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(3 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_with);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pmty_typeof(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(4 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_typeof);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pmty_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(5 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$6);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pmty_alias(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(6 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_alias$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
             return k$0;
            }];
   }
   function module_type_declaration_attrib(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[4],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0, x[4]],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function module_type_declaration(param){
    var name = param[1];
    return function(param){
     var type = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var
               k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
               k$1 = caml_call4(type, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   var
    immutable =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Immutable)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Mutable = "Mutable",
    mutable =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Mutable);
       }],
    cst_Otag = "Otag",
    cst_Oinherit = "Oinherit",
    cst_Override = "Override";
   function pof_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pof_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function otag(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[3]);
              var loc$0 = x[2], x$0 = x[1];
              if(0 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_Otag);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function oinherit(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(0 === x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_Oinherit);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function open_infos_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[3],
              k$0 = caml_call4(f1, ctx, loc$0, x[4], k),
              x$0 = [0, x[1], x[2], x[3], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function open_infos(param){
    var expr = param[1];
    return function(param){
     var override = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var
               k$0 = caml_call4(expr, ctx, loc, x[1], k),
               k$1 = caml_call4(override, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   var
    override =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Override)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Fresh = "Fresh",
    fresh =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Fresh);
       }],
    cst_any$0 = cst_any$1;
   function ppat_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function ppat_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[4], k),
              x$0 = [0, x[1], x[2], x[3], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   var
    ppat_any =
      [0,
       function(ctx, loc, x, k){
        Ppxlib_Common[8].call(null, x[4]);
        var loc$0 = x[2], x$0 = x[1];
        return typeof x$0 === "number"
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_any$0);
       }],
    cst_var$0 = cst_var$1,
    cst_alias$1 = cst_alias$2,
    cst_constant$0 = cst_constant$1,
    cst_interval = "interval",
    cst_tuple$2 = cst_tuple$3,
    cst_construct$0 = cst_construct$1,
    cst_variant$1 = cst_variant$3,
    cst_record$1 = cst_record$3,
    cst_array$0 = cst_array$1,
    cst_or = "or",
    cst_constraint$4 = cst_constraint$6,
    cst_type = cst_type$3,
    cst_lazy$0 = cst_lazy$1,
    cst_unpack$0 = cst_unpack$1,
    cst_exception = cst_exception$2,
    cst_extension$7 = cst_extension$10,
    cst_open$3 = cst_open$7,
    cst_PStr = "PStr",
    cst_PSig = "PSig",
    cst_PTyp = "PTyp",
    cst_PPat = "PPat",
    cst_Private = "Private";
   function ppat_var(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 0 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_var$0);
            }];
   }
   function ppat_alias(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 1 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_alias$1);
             }];};
   }
   function ppat_constant(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 2 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_constant$0);
            }];
   }
   function ppat_interval(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 3 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_interval);
             }];};
   }
   function ppat_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 4 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_tuple$2);
            }];
   }
   function ppat_construct(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 5 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_construct$0);
             }];};
   }
   function ppat_variant(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 6 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_variant$1);
             }];};
   }
   function ppat_record(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 7 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_record$1);
             }];};
   }
   function ppat_array(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 8 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_array$0);
            }];
   }
   function ppat_or(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 9 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_or);
             }];};
   }
   function ppat_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 10 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, loc$0, x0, k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call
                      (null, loc$0, cst_constraint$4);
             }];};
   }
   function ppat_type(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 11 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_type);
            }];
   }
   function ppat_lazy(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 12 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_lazy$0);
            }];
   }
   function ppat_unpack(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 13 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_unpack$0);
            }];
   }
   function ppat_exception(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 14 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_exception);
            }];
   }
   function ppat_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[4]);
             var loc$0 = x[2], x$0 = x[1];
             if(typeof x$0 !== "number" && 15 === x$0[0]){
              var x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_extension$7);
            }];
   }
   function ppat_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              Ppxlib_Common[8].call(null, x[4]);
              var loc$0 = x[2], x$0 = x[1];
              if(typeof x$0 !== "number" && 16 === x$0[0]){
               var x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
               return k$1;
              }
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_open$3);
             }];};
   }
   function pstr(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_PStr);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function psig(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(1 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_PSig);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function ptyp(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(2 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_PTyp);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function ppat(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(3 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_PPat);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc, x0, k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function position(param){
    var fname = param[1];
    return function(param){
     var lnum = param[1];
     return function(param){
      var bol = param[1];
      return function(param){
       var cnum = param[1];
       return [0,
               function(ctx, loc, x, k){
                var
                 k$0 = caml_call4(fname, ctx, loc, x[1], k),
                 k$1 = caml_call4(lnum, ctx, loc, x[2], k$0),
                 k$2 = caml_call4(bol, ctx, loc, x[3], k$1),
                 k$3 = caml_call4(cnum, ctx, loc, x[4], k$2);
                return k$3;
               }];};};};
   }
   var
    private$ =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Private)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Public = "Public",
    public$ =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Public);
       }],
    cst_Nonrecursive = "Nonrecursive",
    nonrecursive =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Nonrecursive)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Recursive = "Recursive",
    recursive =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Recursive);
       }],
    cst_Rtag = "Rtag",
    cst_Rinherit = "Rinherit",
    cst_value = cst_value$1,
    cst_type$0 = cst_type$3,
    cst_typesubst = cst_typesubst$1,
    cst_typext = cst_typext$1,
    cst_exception$0 = cst_exception$2,
    cst_module = cst_module$2,
    cst_modsubst = cst_modsubst$1,
    cst_recmodule = cst_recmodule$1,
    cst_modtype = cst_modtype$2,
    cst_modtypesubst = cst_modtypesubst$1,
    cst_open$4 = cst_open$7,
    cst_include = cst_include$1,
    cst_class$0 = cst_class$2,
    cst_class_type = cst_class_type$1,
    cst_attribute$1 = cst_attribute$3,
    cst_extension$8 = cst_extension$10,
    cst_eval = "eval",
    cst_value$0 = cst_value$1,
    cst_primitive = "primitive",
    cst_type$1 = cst_type$3,
    cst_typext$0 = cst_typext$1,
    cst_exception$1 = cst_exception$2,
    cst_module$0 = cst_module$2,
    cst_recmodule$0 = cst_recmodule$1,
    cst_modtype$0 = cst_modtype$2,
    cst_open$5 = cst_open$7,
    cst_class$1 = cst_class$2,
    cst_class_type$0 = cst_class_type$1,
    cst_include$0 = cst_include$1,
    cst_attribute$2 = cst_attribute$3,
    cst_extension$9 = cst_extension$10,
    cst_def = "def",
    cst_dir = "dir",
    cst_Pconstraint = "Pconstraint",
    cst_Pcoerce = "Pcoerce",
    cst_abstract = "abstract";
   function prf_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function prf_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function rtag(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[3]);
               var loc$0 = x[2], x$0 = x[1];
               if(0 !== x$0[0])
                return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_Rtag);
               var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
               ctx[1] = ctx[1] + 1 | 0;
               var
                k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                k$1 = caml_call4(f1, ctx, loc$0, x1, k$0),
                k$2 = caml_call4(f2, ctx, loc$0, x2, k$1);
               return k$2;
              }];};};
   }
   function rinherit(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var loc$0 = x[2], x$0 = x[1];
             if(0 === x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_Rinherit);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function psig_value(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(0 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_value);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_type(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              var loc$0 = x[2], x$0 = x[1];
              if(1 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_type$0);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function psig_typesubst(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(2 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_typesubst);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_typext(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(3 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_typext);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_exception(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(4 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_exception$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_module(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(5 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_module);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_modsubst(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(6 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_modsubst);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_recmodule(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(7 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_recmodule);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_modtype(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(8 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_modtype);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_modtypesubst(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(9 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call
                      (null, loc$0, cst_modtypesubst);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_open(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(10 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_open$4);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_include(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(11 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_include);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_class(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(12 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_class$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_class_type(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(13 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_class_type);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(14 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_attribute$1);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function psig_extension(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              var loc$0 = x[2], x$0 = x[1];
              if(15 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call
                       (null, loc$0, cst_extension$8);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pstr_loc(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, loc$0, k),
              k$1 = caml_call4(f2, ctx, loc$0, x, k$0);
             return k$1;
            }];
   }
   function pstr_eval(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              var loc$0 = x[2], x$0 = x[1];
              if(0 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_eval);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pstr_value(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              var loc$0 = x[2], x$0 = x[1];
              if(1 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_value$0);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pstr_primitive(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(2 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_primitive);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_type(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              var loc$0 = x[2], x$0 = x[1];
              if(3 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_type$1);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function pstr_typext(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(4 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_typext$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_exception(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(5 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_exception$1);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_module(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(6 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_module$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_recmodule(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(7 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_recmodule$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_modtype(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(8 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_modtype$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_open(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(9 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_open$5);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_class(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(10 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_class$1);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_class_type(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(11 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call
                      (null, loc$0, cst_class_type$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_include(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(12 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_include$0);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var loc$0 = x[2], x$0 = x[1];
             if(13 !== x$0[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc$0, cst_attribute$2);
             var x0 = x$0[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc$0, x0, k);
             return k$0;
            }];
   }
   function pstr_extension(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              var loc$0 = x[2], x$0 = x[1];
              if(14 !== x$0[0])
               return Ppxlib_Ast_pattern0[2].call
                       (null, loc$0, cst_extension$9);
              var x1 = x$0[2], x0 = x$0[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc$0, x0, k),
               k$1 = caml_call4(f1, ctx, loc$0, x1, k$0);
              return k$1;
             }];};
   }
   function toplevel_directive(param){
    var name = param[1];
    return function(param){
     var arg = param[1];
     return [0,
             function(ctx, loc, x, k){
              var
               k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
               k$1 = caml_call4(arg, ctx, loc, x[2], k$0);
              return k$1;
             }];};
   }
   function ptop_def(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_def);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function ptop_dir(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 === x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_dir);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function pconstraint(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(0 !== x[0])
              return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Pconstraint);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function pcoerce(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(0 === x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_Pcoerce);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, loc, x0, k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function type_declaration_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[8],
              k$0 = caml_call4(f1, ctx, loc$0, x[7], k),
              x$0 = [0, x[1], x[2], x[3], x[4], x[5], x[6], 0, x[8]],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function type_declaration(param){
    var name = param[1];
    return function(param){
     var params = param[1];
     return function(param){
      var cstrs = param[1];
      return function(param){
       var kind = param[1];
       return function(param){
        var private$ = param[1];
        return function(param){
         var manifest = param[1];
         return [0,
                 function(ctx, loc, x, k){
                  Ppxlib_Common[8].call(null, x[7]);
                  var
                   k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                   k$1 = caml_call4(params, ctx, loc, x[2], k$0),
                   k$2 = caml_call4(cstrs, ctx, loc, x[3], k$1),
                   k$3 = caml_call4(kind, ctx, loc, x[4], k$2),
                   k$4 = caml_call4(private$, ctx, loc, x[5], k$3),
                   k$5 = caml_call4(manifest, ctx, loc, x[6], k$4);
                  return k$5;
                 }];};};};};};
   }
   function type_exception_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[2],
              k$0 = caml_call4(f1, ctx, loc$0, x[3], k),
              x$0 = [0, x[1], x[2], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function type_exception(param){
    var constructor = param[1];
    return [0,
            function(ctx, loc, x, k){
             Ppxlib_Common[8].call(null, x[3]);
             var k$0 = caml_call4(constructor, ctx, loc, x[1], k);
             return k$0;
            }];
   }
   function type_extension_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[5],
              k$0 = caml_call4(f1, ctx, loc$0, x[6], k),
              x$0 = [0, x[1], x[2], x[3], x[4], x[5], 0],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function type_extension(param){
    var path = param[1];
    return function(param){
     var params = param[1];
     return function(param){
      var constructors = param[1];
      return function(param){
       var private$ = param[1];
       return [0,
               function(ctx, loc, x, k){
                Ppxlib_Common[8].call(null, x[6]);
                var
                 k$0 = caml_call4(path, ctx, x[1][2], x[1][1], k),
                 k$1 = caml_call4(params, ctx, loc, x[2], k$0),
                 k$2 = caml_call4(constructors, ctx, loc, x[3], k$1),
                 k$3 = caml_call4(private$, ctx, loc, x[4], k$2);
                return k$3;
               }];};};};
   }
   var
    ptype_abstract =
      [0,
       function(ctx, loc, x, k){
        if(typeof x === "number" && ! x){ctx[1] = ctx[1] + 1 | 0; return k;}
        return Ppxlib_Ast_pattern0[2].call(null, loc, cst_abstract);
       }],
    cst_variant$2 = cst_variant$3,
    cst_record$2 = cst_record$3,
    cst_open$6 = cst_open$7;
   function ptype_variant(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(typeof x !== "number" && 0 === x[0]){
              var x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc, cst_variant$2);
            }];
   }
   function ptype_record(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(typeof x !== "number" && 0 !== x[0]){
              var x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var k$0 = caml_call4(f0, ctx, loc, x0, k);
              return k$0;
             }
             return Ppxlib_Ast_pattern0[2].call(null, loc, cst_record$2);
            }];
   }
   var
    ptype_open =
      [0,
       function(ctx, loc, x, k){
        if(typeof x === "number" && x){ctx[1] = ctx[1] + 1 | 0; return k;}
        return Ppxlib_Ast_pattern0[2].call(null, loc, cst_open$6);
       }],
    cst_constraint$5 = cst_constraint$6,
    cst_coercion = "coercion",
    cst_Covariant = "Covariant";
   function value_binding_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[5],
              k$0 = caml_call4(f1, ctx, loc$0, x[4], k),
              x$0 = [0, x[1], x[2], x[3], 0, x[5]],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function value_binding(param){
    var pat = param[1];
    return function(param){
     var expr = param[1];
     return function(param){
      var constraint = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var
                k$0 = caml_call4(pat, ctx, loc, x[1], k),
                k$1 = caml_call4(expr, ctx, loc, x[2], k$0),
                k$2 = caml_call4(constraint, ctx, loc, x[3], k$1);
               return k$2;
              }];};};
   }
   function pvc_constraint(param){
    var flocally_abstract_univars = param[1];
    return function(param){
     var ftyp = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(0 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_constraint$5);
              var typ = x[2], locally_abstract_univars = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 =
                 caml_call4
                  (flocally_abstract_univars,
                   ctx,
                   loc,
                   locally_abstract_univars,
                   k),
               k$1 = caml_call4(ftyp, ctx, loc, typ, k$0);
              return k$1;
             }];};
   }
   function pvc_coercion(param){
    var fground = param[1];
    return function(param){
     var fcoercion = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(0 === x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_coercion);
              var coercion = x[2], ground = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(fground, ctx, loc, ground, k),
               k$1 = caml_call4(fcoercion, ctx, loc, coercion, k$0);
              return k$1;
             }];};
   }
   function value_description_attributes(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var
              loc$0 = x[5],
              k$0 = caml_call4(f1, ctx, loc$0, x[4], k),
              x$0 = [0, x[1], x[2], x[3], 0, x[5]],
              k$1 = caml_call4(f2, ctx, loc$0, x$0, k$0);
             return k$1;
            }];
   }
   function value_description(param){
    var name = param[1];
    return function(param){
     var type = param[1];
     return function(param){
      var prim = param[1];
      return [0,
              function(ctx, loc, x, k){
               Ppxlib_Common[8].call(null, x[4]);
               var
                k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                k$1 = caml_call4(type, ctx, loc, x[2], k$0),
                k$2 = caml_call4(prim, ctx, loc, x[3], k$1);
               return k$2;
              }];};};
   }
   var
    covariant =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Covariant)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Contravariant = "Contravariant",
    contravariant =
      [0,
       function(ctx, loc, x, k){
        return 1 === x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Contravariant);
       }],
    cst_NoVariance = "NoVariance",
    novariance =
      [0,
       function(ctx, loc, x, k){
        return 2 <= x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_NoVariance);
       }],
    cst_Virtual = "Virtual",
    virtual =
      [0,
       function(ctx, loc, x, k){
        return x
                ? Ppxlib_Ast_pattern0[2].call(null, loc, cst_Virtual)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Concrete = "Concrete",
    concrete =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : Ppxlib_Ast_pattern0[2].call(null, loc, cst_Concrete);
       }],
    cst_type$2 = cst_type$3,
    cst_module$1 = cst_module$2,
    cst_modtype$1 = cst_modtype$2,
    cst_modtypesubst$0 = cst_modtypesubst$1,
    cst_typesubst$0 = cst_typesubst$1,
    cst_modsubst$0 = cst_modsubst$1;
   function pwith_type(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(0 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_type$2);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function pwith_module(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(1 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_module$1);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
              return k$1;
             }];};
   }
   function pwith_modtype(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(2 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_modtype$1);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function pwith_modtypesubst(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(3 !== x[0])
               return Ppxlib_Ast_pattern0[2].call
                       (null, loc, cst_modtypesubst$0);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function pwith_typesubst(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(4 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_typesubst$0);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, loc, x1, k$0);
              return k$1;
             }];};
   }
   function pwith_modsubst(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx, loc, x, k){
              if(5 !== x[0])
               return Ppxlib_Ast_pattern0[2].call(null, loc, cst_modsubst$0);
              var x1 = x[2], x0 = x[1];
              ctx[1] = ctx[1] + 1 | 0;
              var
               k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
               k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
              return k$1;
             }];};
   }
   var
    Ppxlib_Ast_pattern_generated =
      [0,
       nolabel,
       labelled,
       optional,
       attribute,
       binding_op,
       case$,
       pcl_loc,
       pcl_attributes,
       pcl_constr,
       pcl_structure,
       pcl_fun,
       pcl_apply,
       pcl_let,
       pcl_constraint,
       pcl_extension,
       pcl_open,
       pcf_loc,
       pcf_attributes,
       pcf_inherit,
       pcf_val,
       pcf_method,
       pcf_constraint,
       pcf_initializer,
       pcf_attribute,
       pcf_extension,
       cfk_virtual,
       cfk_concrete,
       class_infos_attributes,
       class_infos,
       class_signature,
       class_structure,
       pcty_loc,
       pcty_attributes,
       pcty_constr,
       pcty_signature,
       pcty_arrow,
       pcty_extension,
       pcty_open,
       pctf_loc,
       pctf_attributes,
       pctf_inherit,
       pctf_val,
       pctf_method,
       pctf_constraint,
       pctf_attribute,
       pctf_extension,
       closed,
       open,
       pconst_integer,
       pconst_char,
       pconst_string,
       pconst_float,
       pcstr_tuple,
       pcstr_record,
       constructor_declaration_attrib,
       constructor_declaration,
       ptyp_loc,
       ptyp_attributes,
       ptyp_any,
       ptyp_var,
       ptyp_arrow,
       ptyp_tuple,
       ptyp_constr,
       ptyp_object,
       ptyp_class,
       ptyp_alias,
       ptyp_variant,
       ptyp_poly,
       ptyp_package,
       ptyp_open,
       ptyp_extension,
       upto,
       downto,
       pdira_loc,
       pdir_string,
       pdir_int,
       pdir_ident,
       pdir_bool,
       pexp_loc,
       pexp_attributes,
       pexp_ident,
       pexp_constant,
       pexp_let,
       pexp_function,
       pexp_apply,
       pexp_match,
       pexp_try,
       pexp_tuple,
       pexp_construct,
       pexp_variant,
       pexp_record,
       pexp_field,
       pexp_setfield,
       pexp_array,
       pexp_ifthenelse,
       pexp_sequence,
       pexp_while,
       pexp_for,
       pexp_constraint,
       pexp_coerce,
       pexp_send,
       pexp_new,
       pexp_setinstvar,
       pexp_override,
       pexp_letmodule,
       pexp_letexception,
       pexp_assert,
       pexp_lazy,
       pexp_poly,
       pexp_object,
       pexp_newtype,
       pexp_pack,
       pexp_open,
       pexp_letop,
       pexp_extension,
       pexp_unreachable,
       extension_constructor_attribut,
       extension_constructor,
       pext_decl,
       pext_rebind,
       pfunction_body,
       pfunction_cases,
       pparam_loc,
       pparam_val,
       pparam_newtype,
       unit,
       named,
       include_infos_attributes,
       include_infos,
       injective,
       noinjectivity,
       label_declaration_attributes,
       label_declaration,
       letop,
       location,
       lident,
       ldot,
       lapply,
       module_binding_attributes,
       module_binding,
       module_declaration_attributes,
       module_declaration,
       pmod_loc,
       pmod_attributes,
       pmod_ident,
       pmod_structure,
       pmod_functor,
       pmod_apply,
       pmod_apply_unit,
       pmod_constraint,
       pmod_unpack,
       pmod_extension,
       module_substitution_attributes,
       module_substitution,
       pmty_loc,
       pmty_attributes,
       pmty_ident,
       pmty_signature,
       pmty_functor,
       pmty_with,
       pmty_typeof,
       pmty_extension,
       pmty_alias,
       module_type_declaration_attrib,
       module_type_declaration,
       immutable,
       mutable,
       pof_loc,
       pof_attributes,
       otag,
       oinherit,
       open_infos_attributes,
       open_infos,
       override,
       fresh,
       ppat_loc,
       ppat_attributes,
       ppat_any,
       ppat_var,
       ppat_alias,
       ppat_constant,
       ppat_interval,
       ppat_tuple,
       ppat_construct,
       ppat_variant,
       ppat_record,
       ppat_array,
       ppat_or,
       ppat_constraint,
       ppat_type,
       ppat_lazy,
       ppat_unpack,
       ppat_exception,
       ppat_extension,
       ppat_open,
       pstr,
       psig,
       ptyp,
       ppat,
       position,
       private$,
       public$,
       nonrecursive,
       recursive,
       prf_loc,
       prf_attributes,
       rtag,
       rinherit,
       psig_loc,
       psig_value,
       psig_type,
       psig_typesubst,
       psig_typext,
       psig_exception,
       psig_module,
       psig_modsubst,
       psig_recmodule,
       psig_modtype,
       psig_modtypesubst,
       psig_open,
       psig_include,
       psig_class,
       psig_class_type,
       psig_attribute,
       psig_extension,
       pstr_loc,
       pstr_eval,
       pstr_value,
       pstr_primitive,
       pstr_type,
       pstr_typext,
       pstr_exception,
       pstr_module,
       pstr_recmodule,
       pstr_modtype,
       pstr_open,
       pstr_class,
       pstr_class_type,
       pstr_include,
       pstr_attribute,
       pstr_extension,
       toplevel_directive,
       ptop_def,
       ptop_dir,
       pconstraint,
       pcoerce,
       type_declaration_attributes,
       type_declaration,
       type_exception_attributes,
       type_exception,
       type_extension_attributes,
       type_extension,
       ptype_abstract,
       ptype_variant,
       ptype_record,
       ptype_open,
       value_binding_attributes,
       value_binding,
       pvc_constraint,
       pvc_coercion,
       value_description_attributes,
       value_description,
       covariant,
       contravariant,
       novariance,
       virtual,
       concrete,
       pwith_type,
       pwith_module,
       pwith_modtype,
       pwith_modtypesubst,
       pwith_typesubst,
       pwith_modsubst];
   runtime.caml_register_global
    (210, Ppxlib_Ast_pattern_generated, "Ppxlib__Ast_pattern_generated");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_pattern
//# unitInfo: Requires: Ppxlib__Ast_pattern0, Ppxlib__Ast_pattern_generated, Ppxlib__Common, Ppxlib__Import, Ppxlib__Location, Stdlib, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint, Stdlib__Printf
//# shape: Ppxlib__Ast_pattern:[F(5),F(5),N,N,N,N,F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,N,F(2)*,F(1)*,F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(3)*,N,F(1)*,F(2)*,F(2)*,F(3)*,F(1)*,F(1)*,F(1)*,F(1)*,N,F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(2)*,F(2)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*,F(2)*,F(2)*,N,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,N,N,F(2)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,N,F(2)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*,F(1)*->F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*,N,F(1)*->F(1)*,F(2)*,F(1)*,N,N,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*->F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(2)*,F(1)*->F(1)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(1)*->F(1)*,N,N,F(2)*,F(2)*,F(1)*->F(1)*,F(1)*,F(2)*,F(1)*->F(1)*,N,N,F(2)*,F(2)*,N,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*->F(1)*->F(1)*,N,N,N,N,F(2)*,F(2)*,F(1)*->F(1)*->F(1)*,F(1)*,F(2)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*,F(1)*,F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*->F(1)*->F(1)*,F(2)*,F(1)*,F(2)*,F(1)*->F(1)*->F(1)*->F(1)*,N,F(1)*,F(1)*,N,F(2)*,F(2),F(1)*->F(1)*,F(1)*->F(1)*,F(2)*,F(1)*->F(1)*->F(1)*,N,N,N,N,N,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,F(1)*->F(1)*,N,N,F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1)*->F(1)*,F(2)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "::",
    cst$3 = "[]",
    cst_false$0 = "false",
    cst_list$1 = "list",
    cst_true$0 = "true",
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$3,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Ast_pattern0 = global_data.Ppxlib__Ast_pattern0,
    Ppxlib_Ast_pattern_generated = global_data.Ppxlib__Ast_pattern_generated,
    Expected = Ppxlib_Ast_pattern0[1],
    fail = Ppxlib_Ast_pattern0[2],
    a = [0, [2, 0, [11, " expected", 0]], "%s expected"];
   function restore_context(ctx, backup){ctx[1] = backup;}
   function incr_matched(c){c[1] = c[1] + 1 | 0;}
   function parse_res(param, loc, on_error, x, k){
    var f = param[1];
    try{var b = [0, caml_call4(f, [0, 0], loc, x, k)]; return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Expected) throw caml_maybe_attach_backtrace(exn, 0);
     var expected = exn[3], loc$0 = exn[2];
     if(! on_error)
      return [1,
              [0, caml_call3(Ppxlib_Location[14][2], loc$0, a, expected), 0]];
     var f$0 = on_error[1];
     return [0, caml_call1(f$0, 0)];
    }
   }
   function parse(param, loc, on_error, x, k){
    var f = param[1], match = parse_res([0, f], loc, on_error, x, k);
    if(0 === match[0]){var r = match[1]; return r;}
    var r$0 = match[1][1];
    return caml_call1(Ppxlib_Location[14][8], r$0);
   }
   function create(t, f){return [0, t, f];}
   function parse_res$0(param, loc, x){
    var f = param[2], t = param[1];
    return parse_res(t, loc, 0, x, f);
   }
   function parse$0(param, loc, x){
    var f = param[2], t = param[1];
    return parse(t, loc, 0, x, f);
   }
   var
    symbol =
      [0,
       function(ctx, loc, x, k){incr_matched(ctx); return caml_call1(k, x);}],
    symbol$0 =
      [0,
       function(ctx, loc, x, k){
        incr_matched(ctx);
        return caml_call1(k, [0, x, loc]);
       }],
    drop = [0, function(ctx, loc, param, k){incr_matched(ctx); return k;}],
    b = [0, [1, 0], "%C"],
    c = [0, [3, 0, 0], "%S"],
    cst_Bool = "Bool",
    cst_false = cst_false$0;
   function as(param){
    var f1 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var k$0 = caml_call4(f1, ctx, loc, x, caml_call1(k, x));
             return k$0;
            }];
   }
   function cst(to_string, opt, v){
    var equal = opt ? opt[1] : Ppxlib_Import[73][2];
    return [0,
            function(ctx, loc, x, k){
             return caml_call2(equal, x, v)
                     ? (incr_matched(ctx), k)
                     : fail(loc, caml_call1(to_string, v));
            }];
   }
   function int(v){return cst(Ppxlib_Import[92][2], 0, v);}
   function char(v){return cst(caml_call1(Stdlib_Printf[4], b), 0, v);}
   function string(v){return cst(caml_call1(Stdlib_Printf[4], c), 0, v);}
   function float(v){return cst(Ppxlib_Import[88][1], 0, v);}
   function int32(v){return cst(Stdlib_Int32[14], 0, v);}
   function int64(v){return cst(Stdlib_Int64[14], 0, v);}
   function nativeint(v){return cst(Stdlib_Nativeint[15], 0, v);}
   function bool(v){return cst(Ppxlib_Import[84][1], 0, v);}
   function bool$0(param){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return x !== cst_false$0
                     ? x
                       !== cst_true$0
                       ? fail(loc, cst_Bool)
                       : caml_call4(func, ctx, loc, 1, k)
                     : caml_call4(func, ctx, loc, 0, k);
            }];
   }
   var
    false$ =
      [0,
       function(ctx, loc, x, k){
        return x ? fail(loc, cst_false) : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_true = cst_true$0,
    true$ =
      [0,
       function(ctx, loc, x, k){
        return x ? (ctx[1] = ctx[1] + 1 | 0, k) : fail(loc, cst_true);
       }],
    nil =
      [0,
       function(ctx, loc, x, k){
        return x ? fail(loc, cst$0) : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_None = "None";
   function symbol$1(a, param){
    var f1 = param[1], f0 = a[1];
    return [0,
            function(ctx, loc, x, k){
             if(! x) return fail(loc, cst$1);
             var x1 = x[2], x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var
              k$0 = caml_call4(f0, ctx, loc, x0, k),
              k$1 = caml_call4(f1, ctx, loc, x1, k$0);
             return k$1;
            }];
   }
   var
    none =
      [0,
       function(ctx, loc, x, k){
        return x ? fail(loc, cst_None) : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Some = "Some";
   function some(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(! x) return fail(loc, cst_Some);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function pair(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, param, k){
             var
              x2 = param[2],
              x1 = param[1],
              k$0 = caml_call4(f1, ctx, loc, x1, k),
              k$1 = caml_call4(f2, ctx, loc, x2, k$0);
             return k$1;
            }];
   }
   function triple(b, a, param){
    var f3 = param[1], f2 = a[1], f1 = b[1];
    return [0,
            function(ctx, loc, param, k){
             var
              x3 = param[3],
              x2 = param[2],
              x1 = param[1],
              k$0 = caml_call4(f1, ctx, loc, x1, k),
              k$1 = caml_call4(f2, ctx, loc, x2, k$0),
              k$2 = caml_call4(f3, ctx, loc, x3, k$1);
             return k$2;
            }];
   }
   function alt(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, x, k){
             var backup = ctx[1];
             try{var b = caml_call4(f1, ctx, loc, x, k); return b;}
             catch(e1$0){
              var e1 = caml_wrap_exception(e1$0), m1 = ctx[1];
              restore_context(ctx, backup);
              try{var a = caml_call4(f2, ctx, loc, x, k); return a;}
              catch(e2$0){
               var e2 = caml_wrap_exception(e2$0), m2 = ctx[1];
               if(! caml_call2(Ppxlib_Import[81], m1, m2))
                throw caml_maybe_attach_backtrace(e2, 0);
               restore_context(ctx, m1);
               throw caml_maybe_attach_backtrace(e1, 0);
              }
             }
            }];
   }
   function map(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, x, caml_call1(f, k));
            }];
   }
   function map$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, x, caml_call2(f, loc, k));
            }];
   }
   function map_result(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call1(f, caml_call4(func, ctx, loc, x, k));
            }];
   }
   function symbol_map(t, f){return map(t, f);}
   function map0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, x, caml_call1(k, f));
            }];
   }
   function map1(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a){return caml_call1(k, caml_call1(f, a));});
            }];
   }
   function map2(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a, b){return caml_call1(k, caml_call2(f, a, b));});
            }];
   }
   function map0$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func, ctx, loc, x, caml_call1(k, caml_call1(f, loc)));
            }];
   }
   function map1$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a){return caml_call1(k, caml_call2(f, loc, a));});
            }];
   }
   function map2$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a, b){
                       return caml_call1(k, caml_call3(f, loc, a, b));
                      });
            }];
   }
   function map_value(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, caml_call1(f, x), k);
            }];
   }
   function map_value$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, caml_call2(f, loc, x), k);
            }];
   }
   function alt_option(some, none){
    var a = map0(none, 0);
    return alt(map1(some, function(x){return [0, x];}), a);
   }
   function many(param){
    var f = param[1];
    return [0,
            function(ctx, loc, l, k){
             function aux(accu, param){
              if(! param)
               return caml_call1(k, caml_call1(Ppxlib_Import[94][9], accu));
              var xs = param[2], x = param[1];
              return caml_call4
                      (f, ctx, loc, x, function(x){return aux([0, x, accu], xs);});
             }
             return aux(0, l);
            }];
   }
   function loc(param){
    var f = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(f, ctx, x[2], x[1], k);
            }];
   }
   function pack0(t){return map(t, function(f){return caml_call1(f, 0);});}
   function pack2(t){
    return map(t, function(f, x, y){return caml_call1(f, [0, x, y]);});
   }
   function pack3(t){
    return map(t, function(f, x, y, z){return caml_call1(f, [0, x, y, z]);});
   }
   var
    nolabel = Ppxlib_Ast_pattern_generated[1],
    labelled = Ppxlib_Ast_pattern_generated[2],
    optional = Ppxlib_Ast_pattern_generated[3],
    attribute = Ppxlib_Ast_pattern_generated[4],
    binding_op = Ppxlib_Ast_pattern_generated[5],
    case$ = Ppxlib_Ast_pattern_generated[6],
    pcl_loc = Ppxlib_Ast_pattern_generated[7],
    pcl_attributes = Ppxlib_Ast_pattern_generated[8],
    pcl_constr = Ppxlib_Ast_pattern_generated[9],
    pcl_structure = Ppxlib_Ast_pattern_generated[10],
    pcl_fun = Ppxlib_Ast_pattern_generated[11],
    pcl_apply = Ppxlib_Ast_pattern_generated[12],
    pcl_let = Ppxlib_Ast_pattern_generated[13],
    pcl_constraint = Ppxlib_Ast_pattern_generated[14],
    pcl_extension = Ppxlib_Ast_pattern_generated[15],
    pcl_open = Ppxlib_Ast_pattern_generated[16],
    pcf_loc = Ppxlib_Ast_pattern_generated[17],
    pcf_attributes = Ppxlib_Ast_pattern_generated[18],
    pcf_inherit = Ppxlib_Ast_pattern_generated[19],
    pcf_val = Ppxlib_Ast_pattern_generated[20],
    pcf_method = Ppxlib_Ast_pattern_generated[21],
    pcf_constraint = Ppxlib_Ast_pattern_generated[22],
    pcf_initializer = Ppxlib_Ast_pattern_generated[23],
    pcf_attribute = Ppxlib_Ast_pattern_generated[24],
    pcf_extension = Ppxlib_Ast_pattern_generated[25],
    cfk_virtual = Ppxlib_Ast_pattern_generated[26],
    cfk_concrete = Ppxlib_Ast_pattern_generated[27],
    class_infos_attributes = Ppxlib_Ast_pattern_generated[28],
    class_infos = Ppxlib_Ast_pattern_generated[29],
    class_signature = Ppxlib_Ast_pattern_generated[30],
    class_structure = Ppxlib_Ast_pattern_generated[31],
    pcty_loc = Ppxlib_Ast_pattern_generated[32],
    pcty_attributes = Ppxlib_Ast_pattern_generated[33],
    pcty_constr = Ppxlib_Ast_pattern_generated[34],
    pcty_signature = Ppxlib_Ast_pattern_generated[35],
    pcty_arrow = Ppxlib_Ast_pattern_generated[36],
    pcty_extension = Ppxlib_Ast_pattern_generated[37],
    pcty_open = Ppxlib_Ast_pattern_generated[38],
    pctf_loc = Ppxlib_Ast_pattern_generated[39],
    pctf_attributes = Ppxlib_Ast_pattern_generated[40],
    pctf_inherit = Ppxlib_Ast_pattern_generated[41],
    pctf_val = Ppxlib_Ast_pattern_generated[42],
    pctf_method = Ppxlib_Ast_pattern_generated[43],
    pctf_constraint = Ppxlib_Ast_pattern_generated[44],
    pctf_attribute = Ppxlib_Ast_pattern_generated[45],
    pctf_extension = Ppxlib_Ast_pattern_generated[46],
    closed = Ppxlib_Ast_pattern_generated[47],
    open = Ppxlib_Ast_pattern_generated[48],
    pconst_integer = Ppxlib_Ast_pattern_generated[49],
    pconst_char = Ppxlib_Ast_pattern_generated[50],
    pconst_string = Ppxlib_Ast_pattern_generated[51],
    pconst_float = Ppxlib_Ast_pattern_generated[52],
    pcstr_tuple = Ppxlib_Ast_pattern_generated[53],
    pcstr_record = Ppxlib_Ast_pattern_generated[54],
    constructor_declaration_attrib = Ppxlib_Ast_pattern_generated[55],
    constructor_declaration = Ppxlib_Ast_pattern_generated[56],
    ptyp_loc = Ppxlib_Ast_pattern_generated[57],
    ptyp_attributes = Ppxlib_Ast_pattern_generated[58],
    ptyp_any = Ppxlib_Ast_pattern_generated[59],
    ptyp_var = Ppxlib_Ast_pattern_generated[60],
    ptyp_arrow = Ppxlib_Ast_pattern_generated[61],
    ptyp_tuple = Ppxlib_Ast_pattern_generated[62],
    ptyp_constr = Ppxlib_Ast_pattern_generated[63],
    ptyp_object = Ppxlib_Ast_pattern_generated[64],
    ptyp_class = Ppxlib_Ast_pattern_generated[65],
    ptyp_alias = Ppxlib_Ast_pattern_generated[66],
    ptyp_variant = Ppxlib_Ast_pattern_generated[67],
    ptyp_poly = Ppxlib_Ast_pattern_generated[68],
    ptyp_package = Ppxlib_Ast_pattern_generated[69],
    ptyp_open = Ppxlib_Ast_pattern_generated[70],
    ptyp_extension = Ppxlib_Ast_pattern_generated[71],
    upto = Ppxlib_Ast_pattern_generated[72],
    downto = Ppxlib_Ast_pattern_generated[73],
    pdira_loc = Ppxlib_Ast_pattern_generated[74],
    pdir_string = Ppxlib_Ast_pattern_generated[75],
    pdir_int = Ppxlib_Ast_pattern_generated[76],
    pdir_ident = Ppxlib_Ast_pattern_generated[77],
    pdir_bool = Ppxlib_Ast_pattern_generated[78],
    pexp_loc = Ppxlib_Ast_pattern_generated[79],
    pexp_attributes = Ppxlib_Ast_pattern_generated[80],
    pexp_ident = Ppxlib_Ast_pattern_generated[81],
    pexp_constant = Ppxlib_Ast_pattern_generated[82],
    pexp_let = Ppxlib_Ast_pattern_generated[83],
    pexp_function = Ppxlib_Ast_pattern_generated[84],
    pexp_apply = Ppxlib_Ast_pattern_generated[85],
    pexp_match = Ppxlib_Ast_pattern_generated[86],
    pexp_try = Ppxlib_Ast_pattern_generated[87],
    pexp_tuple = Ppxlib_Ast_pattern_generated[88],
    pexp_construct = Ppxlib_Ast_pattern_generated[89],
    pexp_variant = Ppxlib_Ast_pattern_generated[90],
    pexp_record = Ppxlib_Ast_pattern_generated[91],
    pexp_field = Ppxlib_Ast_pattern_generated[92],
    pexp_setfield = Ppxlib_Ast_pattern_generated[93],
    pexp_array = Ppxlib_Ast_pattern_generated[94],
    pexp_ifthenelse = Ppxlib_Ast_pattern_generated[95],
    pexp_sequence = Ppxlib_Ast_pattern_generated[96],
    pexp_while = Ppxlib_Ast_pattern_generated[97],
    pexp_for = Ppxlib_Ast_pattern_generated[98],
    pexp_constraint = Ppxlib_Ast_pattern_generated[99],
    pexp_coerce = Ppxlib_Ast_pattern_generated[100],
    pexp_send = Ppxlib_Ast_pattern_generated[101],
    pexp_new = Ppxlib_Ast_pattern_generated[102],
    pexp_setinstvar = Ppxlib_Ast_pattern_generated[103],
    pexp_override = Ppxlib_Ast_pattern_generated[104],
    pexp_letmodule = Ppxlib_Ast_pattern_generated[105],
    pexp_letexception = Ppxlib_Ast_pattern_generated[106],
    pexp_assert = Ppxlib_Ast_pattern_generated[107],
    pexp_lazy = Ppxlib_Ast_pattern_generated[108],
    pexp_poly = Ppxlib_Ast_pattern_generated[109],
    pexp_object = Ppxlib_Ast_pattern_generated[110],
    pexp_newtype = Ppxlib_Ast_pattern_generated[111],
    pexp_pack = Ppxlib_Ast_pattern_generated[112],
    pexp_open = Ppxlib_Ast_pattern_generated[113],
    pexp_letop = Ppxlib_Ast_pattern_generated[114],
    pexp_extension = Ppxlib_Ast_pattern_generated[115],
    pexp_unreachable = Ppxlib_Ast_pattern_generated[116],
    extension_constructor_attribut = Ppxlib_Ast_pattern_generated[117],
    extension_constructor = Ppxlib_Ast_pattern_generated[118],
    pext_decl = Ppxlib_Ast_pattern_generated[119],
    pext_rebind = Ppxlib_Ast_pattern_generated[120],
    pfunction_body = Ppxlib_Ast_pattern_generated[121],
    pfunction_cases = Ppxlib_Ast_pattern_generated[122],
    pparam_loc = Ppxlib_Ast_pattern_generated[123],
    pparam_val = Ppxlib_Ast_pattern_generated[124],
    pparam_newtype = Ppxlib_Ast_pattern_generated[125],
    unit = Ppxlib_Ast_pattern_generated[126],
    named = Ppxlib_Ast_pattern_generated[127],
    include_infos_attributes = Ppxlib_Ast_pattern_generated[128],
    include_infos = Ppxlib_Ast_pattern_generated[129],
    injective = Ppxlib_Ast_pattern_generated[130],
    noinjectivity = Ppxlib_Ast_pattern_generated[131],
    label_declaration_attributes = Ppxlib_Ast_pattern_generated[132],
    label_declaration = Ppxlib_Ast_pattern_generated[133],
    letop = Ppxlib_Ast_pattern_generated[134],
    location = Ppxlib_Ast_pattern_generated[135],
    lident = Ppxlib_Ast_pattern_generated[136],
    ldot = Ppxlib_Ast_pattern_generated[137],
    lapply = Ppxlib_Ast_pattern_generated[138],
    module_binding_attributes = Ppxlib_Ast_pattern_generated[139],
    module_binding = Ppxlib_Ast_pattern_generated[140],
    module_declaration_attributes = Ppxlib_Ast_pattern_generated[141],
    module_declaration = Ppxlib_Ast_pattern_generated[142],
    pmod_loc = Ppxlib_Ast_pattern_generated[143],
    pmod_attributes = Ppxlib_Ast_pattern_generated[144],
    pmod_ident = Ppxlib_Ast_pattern_generated[145],
    pmod_structure = Ppxlib_Ast_pattern_generated[146],
    pmod_functor = Ppxlib_Ast_pattern_generated[147],
    pmod_apply = Ppxlib_Ast_pattern_generated[148],
    pmod_apply_unit = Ppxlib_Ast_pattern_generated[149],
    pmod_constraint = Ppxlib_Ast_pattern_generated[150],
    pmod_unpack = Ppxlib_Ast_pattern_generated[151],
    pmod_extension = Ppxlib_Ast_pattern_generated[152],
    module_substitution_attributes = Ppxlib_Ast_pattern_generated[153],
    module_substitution = Ppxlib_Ast_pattern_generated[154],
    pmty_loc = Ppxlib_Ast_pattern_generated[155],
    pmty_attributes = Ppxlib_Ast_pattern_generated[156],
    pmty_ident = Ppxlib_Ast_pattern_generated[157],
    pmty_signature = Ppxlib_Ast_pattern_generated[158],
    pmty_functor = Ppxlib_Ast_pattern_generated[159],
    pmty_with = Ppxlib_Ast_pattern_generated[160],
    pmty_typeof = Ppxlib_Ast_pattern_generated[161],
    pmty_extension = Ppxlib_Ast_pattern_generated[162],
    pmty_alias = Ppxlib_Ast_pattern_generated[163],
    module_type_declaration_attrib = Ppxlib_Ast_pattern_generated[164],
    module_type_declaration = Ppxlib_Ast_pattern_generated[165],
    immutable = Ppxlib_Ast_pattern_generated[166],
    mutable = Ppxlib_Ast_pattern_generated[167],
    pof_loc = Ppxlib_Ast_pattern_generated[168],
    pof_attributes = Ppxlib_Ast_pattern_generated[169],
    otag = Ppxlib_Ast_pattern_generated[170],
    oinherit = Ppxlib_Ast_pattern_generated[171],
    open_infos_attributes = Ppxlib_Ast_pattern_generated[172],
    open_infos = Ppxlib_Ast_pattern_generated[173],
    override = Ppxlib_Ast_pattern_generated[174],
    fresh = Ppxlib_Ast_pattern_generated[175],
    ppat_loc = Ppxlib_Ast_pattern_generated[176],
    ppat_attributes = Ppxlib_Ast_pattern_generated[177],
    ppat_any = Ppxlib_Ast_pattern_generated[178],
    ppat_var = Ppxlib_Ast_pattern_generated[179],
    ppat_alias = Ppxlib_Ast_pattern_generated[180],
    ppat_constant = Ppxlib_Ast_pattern_generated[181],
    ppat_interval = Ppxlib_Ast_pattern_generated[182],
    ppat_tuple = Ppxlib_Ast_pattern_generated[183],
    ppat_construct = Ppxlib_Ast_pattern_generated[184],
    ppat_variant = Ppxlib_Ast_pattern_generated[185],
    ppat_record = Ppxlib_Ast_pattern_generated[186],
    ppat_array = Ppxlib_Ast_pattern_generated[187],
    ppat_or = Ppxlib_Ast_pattern_generated[188],
    ppat_constraint = Ppxlib_Ast_pattern_generated[189],
    ppat_type = Ppxlib_Ast_pattern_generated[190],
    ppat_lazy = Ppxlib_Ast_pattern_generated[191],
    ppat_unpack = Ppxlib_Ast_pattern_generated[192],
    ppat_exception = Ppxlib_Ast_pattern_generated[193],
    ppat_extension = Ppxlib_Ast_pattern_generated[194],
    ppat_open = Ppxlib_Ast_pattern_generated[195],
    pstr = Ppxlib_Ast_pattern_generated[196],
    psig = Ppxlib_Ast_pattern_generated[197],
    ptyp = Ppxlib_Ast_pattern_generated[198],
    ppat = Ppxlib_Ast_pattern_generated[199],
    position = Ppxlib_Ast_pattern_generated[200],
    private$ = Ppxlib_Ast_pattern_generated[201],
    public$ = Ppxlib_Ast_pattern_generated[202],
    nonrecursive = Ppxlib_Ast_pattern_generated[203],
    recursive = Ppxlib_Ast_pattern_generated[204],
    prf_loc = Ppxlib_Ast_pattern_generated[205],
    prf_attributes = Ppxlib_Ast_pattern_generated[206],
    rtag = Ppxlib_Ast_pattern_generated[207],
    rinherit = Ppxlib_Ast_pattern_generated[208],
    psig_loc = Ppxlib_Ast_pattern_generated[209],
    psig_value = Ppxlib_Ast_pattern_generated[210],
    psig_type = Ppxlib_Ast_pattern_generated[211],
    psig_typesubst = Ppxlib_Ast_pattern_generated[212],
    psig_typext = Ppxlib_Ast_pattern_generated[213],
    psig_exception = Ppxlib_Ast_pattern_generated[214],
    psig_module = Ppxlib_Ast_pattern_generated[215],
    psig_modsubst = Ppxlib_Ast_pattern_generated[216],
    psig_recmodule = Ppxlib_Ast_pattern_generated[217],
    psig_modtype = Ppxlib_Ast_pattern_generated[218],
    psig_modtypesubst = Ppxlib_Ast_pattern_generated[219],
    psig_open = Ppxlib_Ast_pattern_generated[220],
    psig_include = Ppxlib_Ast_pattern_generated[221],
    psig_class = Ppxlib_Ast_pattern_generated[222],
    psig_class_type = Ppxlib_Ast_pattern_generated[223],
    psig_attribute = Ppxlib_Ast_pattern_generated[224],
    psig_extension = Ppxlib_Ast_pattern_generated[225],
    pstr_loc = Ppxlib_Ast_pattern_generated[226],
    pstr_eval = Ppxlib_Ast_pattern_generated[227],
    pstr_value = Ppxlib_Ast_pattern_generated[228],
    pstr_primitive = Ppxlib_Ast_pattern_generated[229],
    pstr_type = Ppxlib_Ast_pattern_generated[230],
    pstr_typext = Ppxlib_Ast_pattern_generated[231],
    pstr_exception = Ppxlib_Ast_pattern_generated[232],
    pstr_module = Ppxlib_Ast_pattern_generated[233],
    pstr_recmodule = Ppxlib_Ast_pattern_generated[234],
    pstr_modtype = Ppxlib_Ast_pattern_generated[235],
    pstr_open = Ppxlib_Ast_pattern_generated[236],
    pstr_class = Ppxlib_Ast_pattern_generated[237],
    pstr_class_type = Ppxlib_Ast_pattern_generated[238],
    pstr_include = Ppxlib_Ast_pattern_generated[239],
    pstr_attribute = Ppxlib_Ast_pattern_generated[240],
    pstr_extension = Ppxlib_Ast_pattern_generated[241],
    toplevel_directive = Ppxlib_Ast_pattern_generated[242],
    ptop_def = Ppxlib_Ast_pattern_generated[243],
    ptop_dir = Ppxlib_Ast_pattern_generated[244],
    pconstraint = Ppxlib_Ast_pattern_generated[245],
    pcoerce = Ppxlib_Ast_pattern_generated[246],
    type_declaration_attributes = Ppxlib_Ast_pattern_generated[247],
    type_declaration = Ppxlib_Ast_pattern_generated[248],
    type_exception_attributes = Ppxlib_Ast_pattern_generated[249],
    type_exception = Ppxlib_Ast_pattern_generated[250],
    type_extension_attributes = Ppxlib_Ast_pattern_generated[251],
    type_extension = Ppxlib_Ast_pattern_generated[252],
    ptype_abstract = Ppxlib_Ast_pattern_generated[253],
    ptype_variant = Ppxlib_Ast_pattern_generated[254],
    ptype_record = Ppxlib_Ast_pattern_generated[255],
    ptype_open = Ppxlib_Ast_pattern_generated[256],
    value_binding_attributes = Ppxlib_Ast_pattern_generated[257],
    pvc_constraint = Ppxlib_Ast_pattern_generated[259],
    pvc_coercion = Ppxlib_Ast_pattern_generated[260],
    value_description_attributes = Ppxlib_Ast_pattern_generated[261],
    value_description = Ppxlib_Ast_pattern_generated[262],
    covariant = Ppxlib_Ast_pattern_generated[263],
    contravariant = Ppxlib_Ast_pattern_generated[264],
    novariance = Ppxlib_Ast_pattern_generated[265],
    virtual = Ppxlib_Ast_pattern_generated[266],
    concrete = Ppxlib_Ast_pattern_generated[267],
    pwith_type = Ppxlib_Ast_pattern_generated[268],
    pwith_module = Ppxlib_Ast_pattern_generated[269],
    pwith_modtype = Ppxlib_Ast_pattern_generated[270],
    pwith_modtypesubst = Ppxlib_Ast_pattern_generated[271],
    pwith_typesubst = Ppxlib_Ast_pattern_generated[272],
    pwith_modsubst = Ppxlib_Ast_pattern_generated[273],
    d = Ppxlib_Ast_pattern_generated[258],
    cst_Nolabel = "Nolabel",
    cst_list = cst_list$1,
    cst_list$0 = cst_list$1;
   function value_binding(pat, expr){return d(pat)(expr);}
   function echar(t){return pexp_constant(pconst_char(t));}
   function estring(t){return pexp_constant(pconst_string(t)(drop)(drop));}
   function efloat(t){return pexp_constant(pconst_float(t)(drop));}
   function pchar(t){return ppat_constant(pconst_char(t));}
   function pstring(t){return ppat_constant(pconst_string(t)(drop)(drop));}
   function pfloat(t){return ppat_constant(pconst_float(t)(drop));}
   function const_int(t){
    var f = t[1];
    return pconst_integer
             ([0,
               function(ctx, loc, x, k){
                return caml_call4(f, ctx, loc, caml_int_of_string(x), k);
               }])
            (none);
   }
   function const_int32(t){
    var a = some(char(108)), f = t[1];
    return pconst_integer
             ([0,
               function(ctx, loc, x, k){
                return caml_call4(f, ctx, loc, caml_int_of_string(x), k);
               }])
            (a);
   }
   function const_int64(t){
    var a = some(char(76)), f = t[1];
    return pconst_integer
             ([0,
               function(ctx, loc, x, k){
                return caml_call4
                        (f, ctx, loc, runtime.caml_int64_of_string(x), k);
               }])
            (a);
   }
   function const_nativeint(t){
    var a = some(char(110)), f = t[1];
    return pconst_integer
             ([0,
               function(ctx, loc, x, k){
                return caml_call4(f, ctx, loc, caml_int_of_string(x), k);
               }])
            (a);
   }
   function eint(t){return pexp_constant(const_int(t));}
   function eint32(t){return pexp_constant(const_int32(t));}
   function eint64(t){return pexp_constant(const_int64(t));}
   function enativeint(t){return pexp_constant(const_nativeint(t));}
   function pint(t){return ppat_constant(const_int(t));}
   function pint32(t){return ppat_constant(const_int32(t));}
   function pint64(t){return ppat_constant(const_int64(t));}
   function pnativeint(t){return ppat_constant(const_nativeint(t));}
   function single_expr_payload(t){
    return pstr(symbol$1(pstr_eval(t)(nil), nil));
   }
   function no_label(t){
    return pair(cst(function(param){return cst_Nolabel;}, 0, 0), t);
   }
   function ebool(t){return pexp_construct(lident(bool$0(t)))(none);}
   function pbool(t){return ppat_construct(lident(bool$0(t)))(none);}
   function extension(a, param){
    var f2 = param[1], f1 = a[1];
    return [0,
            function(ctx, loc, param, k){
             var
              payload = param[2],
              name = param[1],
              k$0 = caml_call4(f1, ctx, name[2], name[1], k),
              k$1 = caml_call4(f2, ctx, loc, payload, k$0);
             return k$1;
            }];
   }
   function elist(param){
    var f = param[1];
    return [0,
            function(ctx, loc, e$0, k){
             a:
             {
              b:
              {
               c:
               {
                var e = e$0, acc = 0;
                for(;;){
                 Ppxlib_Common[8].call(null, e[4]);
                 var a = e[1];
                 if(typeof a === "number") break b;
                 if(8 !== a[0]) break b;
                 var d = a[1][1];
                 if(0 !== d[0]) break b;
                 var g = d[1];
                 if(g !== cst$2) break c;
                 var match = a[2];
                 if(! match) break b;
                 var arg = match[1];
                 Ppxlib_Common[8].call(null, arg[4]);
                 var match$0 = arg[1];
                 if(typeof match$0 === "number") break;
                 if(7 !== match$0[0]) break;
                 var b = match$0[1];
                 if(! b) break;
                 var c = b[2];
                 if(! c) break;
                 if(c[2]) break;
                 var tl = c[1], hd = b[1], acc$0 = [0, hd, acc];
                 e = tl;
                 acc = acc$0;
                }
                var l = fail(arg[2], cst_list$0);
                break a;
               }
               if(g === cst$3 && ! a[2]){
                var l = caml_call1(Ppxlib_Import[94][9], acc);
                break a;
               }
              }
              var l = fail(e[2], cst_list);
             }
             incr_matched(ctx);
             return caml_call1
                     (k,
                      caml_call2
                       (Ppxlib_Import[94][55],
                        l,
                        function(x){
                         return caml_call4(f, ctx, x[2], x, function(x){return x;});
                        }));
            }];
   }
   function esequence(param){
    var f = param[1];
    return [0,
            function(ctx, loc, expr, k){
             var expr$0 = expr, acc = 0;
             for(;;){
              var match = expr$0[1];
              if(typeof match === "number") break;
              if(15 !== match[0]) break;
              var
               next = match[2],
               expr$1 = match[1],
               acc$0 = [0, expr$1, acc];
              expr$0 = next;
              acc = acc$0;
             }
             return caml_call1
                     (k,
                      caml_call2
                       (Ppxlib_Import[94][15],
                        function(expr){
                         return caml_call4
                                 (f, ctx, expr[2], expr, function(x){return x;});
                        },
                        [0, expr$0, acc]));
            }];
   }
   function of_func(f){return [0, f];}
   function to_func(param){var f = param[1]; return f;}
   var
    Ppxlib_Ast_pattern =
      [0,
       parse,
       parse_res,
       [0, create, parse$0, parse_res$0],
       symbol,
       symbol$0,
       drop,
       as,
       alt,
       alt_option,
       alt,
       map,
       map$0,
       map_result,
       symbol_map,
       map0,
       map1,
       map2,
       map0$0,
       map1$0,
       map2$0,
       map_value,
       map_value$0,
       nil,
       symbol$1,
       many,
       int,
       char,
       string,
       float,
       int32,
       int64,
       nativeint,
       bool,
       ebool,
       pbool,
       cst,
       none,
       some,
       pair,
       pair,
       triple,
       loc,
       pack0,
       pack2,
       pack3,
       nolabel,
       labelled,
       optional,
       binding_op,
       case$,
       pcl_loc,
       pcl_attributes,
       pcl_constr,
       pcl_structure,
       pcl_fun,
       pcl_apply,
       pcl_let,
       pcl_constraint,
       pcl_extension,
       pcl_open,
       pcf_loc,
       pcf_attributes,
       pcf_inherit,
       pcf_val,
       pcf_method,
       pcf_constraint,
       pcf_initializer,
       pcf_attribute,
       pcf_extension,
       cfk_virtual,
       cfk_concrete,
       class_infos_attributes,
       class_infos,
       class_signature,
       class_structure,
       pcty_loc,
       pcty_attributes,
       pcty_constr,
       pcty_signature,
       pcty_arrow,
       pcty_extension,
       pcty_open,
       pctf_loc,
       pctf_attributes,
       pctf_inherit,
       pctf_val,
       pctf_method,
       pctf_constraint,
       pctf_attribute,
       pctf_extension,
       closed,
       open,
       pconst_integer,
       pconst_char,
       pconst_string,
       pconst_float,
       pcstr_tuple,
       pcstr_record,
       constructor_declaration_attrib,
       constructor_declaration,
       ptyp_loc,
       ptyp_attributes,
       ptyp_any,
       ptyp_var,
       ptyp_arrow,
       ptyp_tuple,
       ptyp_constr,
       ptyp_object,
       ptyp_class,
       ptyp_alias,
       ptyp_variant,
       ptyp_poly,
       ptyp_package,
       ptyp_open,
       ptyp_extension,
       upto,
       downto,
       pdira_loc,
       pdir_string,
       pdir_int,
       pdir_ident,
       pdir_bool,
       pexp_loc,
       pexp_attributes,
       pexp_ident,
       pexp_constant,
       pexp_let,
       pexp_function,
       pexp_apply,
       pexp_match,
       pexp_try,
       pexp_tuple,
       pexp_construct,
       pexp_variant,
       pexp_record,
       pexp_field,
       pexp_setfield,
       pexp_array,
       pexp_ifthenelse,
       pexp_sequence,
       pexp_while,
       pexp_for,
       pexp_constraint,
       pexp_coerce,
       pexp_send,
       pexp_new,
       pexp_setinstvar,
       pexp_override,
       pexp_letmodule,
       pexp_letexception,
       pexp_assert,
       pexp_lazy,
       pexp_poly,
       pexp_object,
       pexp_newtype,
       pexp_pack,
       pexp_open,
       pexp_letop,
       pexp_extension,
       pexp_unreachable,
       extension_constructor_attribut,
       extension_constructor,
       pext_decl,
       pext_rebind,
       pfunction_body,
       pfunction_cases,
       pparam_loc,
       pparam_val,
       pparam_newtype,
       unit,
       named,
       include_infos_attributes,
       include_infos,
       injective,
       noinjectivity,
       label_declaration_attributes,
       label_declaration,
       letop,
       location,
       lident,
       ldot,
       lapply,
       module_binding_attributes,
       module_binding,
       module_declaration_attributes,
       module_declaration,
       pmod_loc,
       pmod_attributes,
       pmod_ident,
       pmod_structure,
       pmod_functor,
       pmod_apply,
       pmod_apply_unit,
       pmod_constraint,
       pmod_unpack,
       pmod_extension,
       module_substitution_attributes,
       module_substitution,
       pmty_loc,
       pmty_attributes,
       pmty_ident,
       pmty_signature,
       pmty_functor,
       pmty_with,
       pmty_typeof,
       pmty_extension,
       pmty_alias,
       module_type_declaration_attrib,
       module_type_declaration,
       immutable,
       mutable,
       pof_loc,
       pof_attributes,
       otag,
       oinherit,
       open_infos_attributes,
       open_infos,
       override,
       fresh,
       ppat_loc,
       ppat_attributes,
       ppat_any,
       ppat_var,
       ppat_alias,
       ppat_constant,
       ppat_interval,
       ppat_tuple,
       ppat_construct,
       ppat_variant,
       ppat_record,
       ppat_array,
       ppat_or,
       ppat_constraint,
       ppat_type,
       ppat_lazy,
       ppat_unpack,
       ppat_exception,
       ppat_extension,
       ppat_open,
       pstr,
       psig,
       ptyp,
       ppat,
       position,
       private$,
       public$,
       nonrecursive,
       recursive,
       prf_loc,
       prf_attributes,
       rtag,
       rinherit,
       psig_loc,
       psig_value,
       psig_type,
       psig_typesubst,
       psig_typext,
       psig_exception,
       psig_module,
       psig_modsubst,
       psig_recmodule,
       psig_modtype,
       psig_modtypesubst,
       psig_open,
       psig_include,
       psig_class,
       psig_class_type,
       psig_attribute,
       psig_extension,
       pstr_loc,
       pstr_eval,
       pstr_value,
       pstr_primitive,
       pstr_type,
       pstr_typext,
       pstr_exception,
       pstr_module,
       pstr_recmodule,
       pstr_modtype,
       pstr_open,
       pstr_class,
       pstr_class_type,
       pstr_include,
       pstr_attribute,
       pstr_extension,
       toplevel_directive,
       ptop_def,
       ptop_dir,
       pconstraint,
       pcoerce,
       type_declaration_attributes,
       type_declaration,
       type_exception_attributes,
       type_exception,
       type_extension_attributes,
       type_extension,
       ptype_abstract,
       ptype_variant,
       ptype_record,
       ptype_open,
       value_binding_attributes,
       value_binding,
       pvc_constraint,
       pvc_coercion,
       value_description_attributes,
       value_description,
       covariant,
       contravariant,
       novariance,
       virtual,
       concrete,
       pwith_type,
       pwith_module,
       pwith_modtype,
       pwith_modtypesubst,
       pwith_typesubst,
       pwith_modsubst,
       true$,
       false$,
       eint,
       echar,
       estring,
       efloat,
       eint32,
       eint64,
       enativeint,
       pint,
       pchar,
       pstring,
       pfloat,
       pint32,
       pint64,
       pnativeint,
       single_expr_payload,
       no_label,
       attribute,
       extension,
       elist,
       esequence,
       of_func,
       to_func,
       fail];
   runtime.caml_register_global(26, Ppxlib_Ast_pattern, "Ppxlib__Ast_pattern");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Attribute
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse0, Ppxlib__Common, Ppxlib__Import, Ppxlib__Location, Ppxlib__Name, Stdlib, Stdlib__Hashtbl, Stdppx
//# shape: Ppxlib__Attribute:[N,F(4),F(4),F(4),F(2),F(1)*,F(1)*,F(3),F(3),F(3),F(3),F(2),F(2),F(3),F(3),N,N,N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(2)*,F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Attribute = "Attribute `",
    cst_Duplicated_attribute = "Duplicated attribute",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attribute_not_expected_her =
      "attribute not expected here, Ppxlib.Attribute needs updating!",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_check_node = "check_node",
    cst_class_field$1 = "class field",
    cst_class_type_field$1 = "class type field",
    cst_class_declaration$0 = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field$2 = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type$0 = "class_type",
    cst_class_type_declaration$0 = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field$2 = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration$0 = "constructor_declaration",
    cst_core_type$0 = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression$0 = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor$0 = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration$0 = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding$0 = "module_binding",
    cst_module_declaration$0 = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution$0 = "module_substitution",
    cst_module_type$0 = "module_type",
    cst_module_type_declaration$0 = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open$1 = "open",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern$0 = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item$0 = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_attribute_ml = "src/attribute.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item$0 = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration$0 = "type_declaration",
    cst_type_exception$0 = "type_exception",
    cst_type_extension$0 = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding$0 = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_oo_cache_id = runtime.caml_oo_cache_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = ", ",
    k =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding$0,
       cst_type_kind,
       cst_type_extension$0,
       cst_type_exception$0,
       cst_type_declaration$0,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item$0,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item$0,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern$0,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration$0,
       cst_module_type$0,
       cst_module_substitution$0,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration$0,
       cst_module_binding$0,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration$0,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor$0,
       cst_extension,
       cst_expression_desc,
       cst_expression$0,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type$0,
       cst_constructor_declaration$0,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field$2,
       cst_class_type_desc,
       cst_class_type_declaration$0,
       cst_class_type$0,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field$2,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration$0,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    i =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration$0,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field$2,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type$0,
       cst_class_type_declaration$0,
       cst_class_type_desc,
       cst_class_type_field$2,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration$0,
       cst_core_type$0,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression$0,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor$0,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration$0,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding$0,
       cst_module_declaration$0,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution$0,
       cst_module_type$0,
       cst_module_type_declaration$0,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern$0,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item$0,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item$0,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration$0,
       cst_type_exception$0,
       cst_type_extension$0,
       cst_type_kind,
       cst_value_binding$0,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding$0,
       cst_extension_constructor_kind,
       cst_core_type$0,
       cst_structure,
       cst_list,
       cst_label_declaration$0,
       cst_module_binding$0,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item$0,
       cst_extension_constructor$0,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception$0,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration$0,
       cst_class_type_declaration$0,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension$0,
       cst_class_field_kind,
       cst_module_type_declaration$0,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern$0,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field$2,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration$0,
       cst_constructor_declaration$0,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution$0,
       cst_class_description,
       cst_expression$0,
       cst_class_type$0,
       cst_structure_item$0,
       cst_include_infos,
       cst_class_declaration$0,
       cst_function_param_desc,
       cst_module_type$0,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field$2],
    cst = cst$2,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Ast_traverse0 = global_data.Ppxlib__Ast_traverse0,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Name = global_data.Ppxlib__Name,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Assert_failure = global_data.Assert_failure,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Stdlib = global_data.Stdlib,
    Stdppx = global_data.Stdppx,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    cache_id$3 = caml_oo_cache_id(),
    cache_id$4 = caml_oo_cache_id(),
    cache_id$5 = caml_oo_cache_id(),
    cache_id$6 = caml_oo_cache_id(),
    cache_id$7 = caml_oo_cache_id(),
    cache_id$8 = caml_oo_cache_id(),
    cache_id$9 = caml_oo_cache_id(),
    cache_id$10 = caml_oo_cache_id(),
    cache_id$11 = caml_oo_cache_id(),
    cache_id$12 = caml_oo_cache_id(),
    cache_id$13 = caml_oo_cache_id(),
    cache_id$14 = caml_oo_cache_id(),
    cache_id$15 = caml_oo_cache_id(),
    cache_id$16 = caml_oo_cache_id(),
    cache_id$17 = caml_oo_cache_id(),
    cache_id$18 = caml_oo_cache_id(),
    cache_id$19 = caml_oo_cache_id(),
    cache_id$20 = caml_oo_cache_id(),
    cache_id$21 = caml_oo_cache_id(),
    cache_id$22 = caml_oo_cache_id(),
    cache_id$23 = caml_oo_cache_id(),
    cache_id$24 = caml_oo_cache_id(),
    cache_id$25 = caml_oo_cache_id(),
    cache_id$26 = caml_oo_cache_id();
   function poly_equal(a, b){
    return caml_call2(Stdppx[73][2], [0, a], [0, b]);
   }
   var
    cst_Attribute_Context_get_pstr = "Attribute.Context.get_pstr_eval",
    cst_Attribute_Context_get_pstr$0 = "Attribute.Context.get_pstr_extension",
    cst_Attribute_Context_get_psig = "Attribute.Context.get_psig_extension";
   function get_pstr_eval(st){
    var match = st[1];
    if(0 !== match[0])
     return caml_call1(Stdlib[2], cst_Attribute_Context_get_pstr);
    var l = match[2], e = match[1];
    return [0, e, l];
   }
   function get_pstr_extension(st){
    var match = st[1];
    if(14 !== match[0])
     return caml_call1(Stdlib[2], cst_Attribute_Context_get_pstr$0);
    var l = match[2], e = match[1];
    return [0, e, l];
   }
   function get_psig_extension(st){
    var match = st[1];
    if(15 !== match[0])
     return caml_call1(Stdlib[2], cst_Attribute_Context_get_psig);
    var l = match[2], e = match[1];
    return [0, e, l];
   }
   function get_attributes(t, x){
    switch(t){
      case 0:
       return x[5];
      case 2:
       return x[7];
      case 26:
       return get_pstr_eval(x)[2];
      case 27:
       return get_pstr_extension(x)[2];
      case 28:
       return get_psig_extension(x)[2];
      case 1:
      case 4:
      case 12:
      case 15:
       return x[6];
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 20:
      case 21:
      case 24:
       return x[4];
      default: return x[3];
    }
   }
   function set_attributes(t, x, attrs){
    switch(t){
      case 0:
       return [0, x[1], x[2], x[3], x[4], attrs];
      case 2:
       return [0, x[1], x[2], x[3], x[4], x[5], x[6], attrs, x[8]];
      case 26:
       var a = x[2]; return [0, [0, get_pstr_eval(x)[1], attrs], a];
      case 27:
       var b = x[2]; return [0, [14, get_pstr_extension(x)[1], attrs], b];
      case 28:
       var c = x[2]; return [0, [15, get_psig_extension(x)[1], attrs], c];
      case 9:
      case 24:
       return [0, x[1], x[2], x[3], attrs, x[5]];
      case 1:
      case 4:
      case 12:
      case 15:
       return [0, x[1], x[2], x[3], x[4], x[5], attrs];
      case 17:
      case 18:
      case 19:
      case 25:
       return [0, x[1], x[2], attrs, x[4]];
      case 5:
      case 6:
      case 7:
      case 8:
      case 20:
      case 21:
       return [0, x[1], x[2], x[3], attrs];
      default: return [0, x[1], x[2], attrs];
    }
   }
   function get_attribute_if_is_floating_n(t, x){
    switch(t){
      case 0:
       var match = x[1];
       if(13 === match[0]){var a = match[1]; return [0, a];}
       break;
      case 1:
       var match$0 = x[1];
       if(14 === match$0[0]){var a$0 = match$0[1]; return [0, a$0];}
       break;
      case 2:
       var match$1 = x[1];
       if(5 === match$1[0]){var a$1 = match$1[1]; return [0, a$1];}
       break;
      default:
       var match$2 = x[1];
       if(4 === match$2[0]){var a$2 = match$2[1]; return [0, a$2];}
    }
    return 0;
   }
   var
    dummy_ext = [0, [0, cst, Ppxlib_Location[3]], [0, 0]],
    cst_label_declaration = "label declaration",
    cst_constructor_declaration = "constructor declaration",
    cst_type_declaration = "type declaration",
    cst_type_exception = "type exception",
    cst_type_extension = "type extension",
    cst_extension_constructor = "extension constructor",
    cst_pattern = cst_pattern$0,
    cst_core_type = "core type",
    cst_expression = cst_expression$0,
    cst_value = "value",
    cst_class_type = "class type",
    cst_class_type_field = cst_class_type_field$1,
    cst_class_declaration = "class declaration",
    cst_class_expression = "class expression",
    cst_class_field = cst_class_field$1,
    cst_class_type_declaration = "class type declaration",
    cst_module_type = "module type",
    cst_module_declaration = "module declaration",
    cst_module_type_declaration = "module type declaration",
    cst_module_substitution = "module substitution",
    cst_open = cst_open$1,
    cst_open$0 = cst_open$1,
    cst_include = "include",
    cst_module_expression = "module expression",
    cst_value_binding = "value binding",
    cst_module_binding = "module binding",
    cst_toplevel_expression = "toplevel expression",
    cst_toplevel_extension = "toplevel extension",
    cst_toplevel_signature_extensi = "toplevel signature extension",
    cst_polymorphic_variant_tag = "polymorphic variant tag",
    cst_object_type_field = "object type field",
    cst_structure_item = "structure item",
    cst_signature_item = "signature item",
    cst_class_field$0 = cst_class_field$1,
    cst_class_type_field$0 = cst_class_type_field$1,
    cst_floating = " (floating)";
   function name(t){return Ppxlib_Name[1][2].call(null, t[1]);}
   function context(t){return t[2];}
   var
    registrar =
      caml_call3
       (Ppxlib_Name[4][1],
        cst_attribute,
        cst_src_attribute_ml,
        function(param){
         if(0 === param[0]){
          var t = param[1];
          switch(t){
            case 0:
             var a = cst_label_declaration; break;
            case 1:
             var a = cst_constructor_declaration; break;
            case 2:
             var a = cst_type_declaration; break;
            case 3:
             var a = cst_type_exception; break;
            case 4:
             var a = cst_type_extension; break;
            case 5:
             var a = cst_extension_constructor; break;
            case 6:
             var a = cst_pattern; break;
            case 7:
             var a = cst_core_type; break;
            case 8:
             var a = cst_expression; break;
            case 9:
             var a = cst_value; break;
            case 10:
             var a = cst_class_type; break;
            case 11:
             var a = cst_class_type_field; break;
            case 12:
             var a = cst_class_declaration; break;
            case 13:
             var a = cst_class_expression; break;
            case 14:
             var a = cst_class_field; break;
            case 15:
             var a = cst_class_type_declaration; break;
            case 16:
             var a = cst_module_type; break;
            case 17:
             var a = cst_module_declaration; break;
            case 18:
             var a = cst_module_type_declaration; break;
            case 19:
             var a = cst_module_substitution; break;
            case 20:
             var a = cst_open; break;
            case 21:
             var a = cst_open$0; break;
            case 22:
             var a = cst_include; break;
            case 23:
             var a = cst_module_expression; break;
            case 24:
             var a = cst_value_binding; break;
            case 25:
             var a = cst_module_binding; break;
            case 26:
             var a = cst_toplevel_expression; break;
            case 27:
             var a = cst_toplevel_extension; break;
            case 28:
             var a = cst_toplevel_signature_extensi; break;
            case 29:
             var a = cst_polymorphic_variant_tag; break;
            default: var a = cst_object_type_field;
          }
          return [0, a];
         }
         var t$0 = param[1];
         switch(t$0){
           case 0:
            var b = cst_structure_item; break;
           case 1:
            var b = cst_signature_item; break;
           case 2:
            var b = cst_class_field$0; break;
           default: var b = cst_class_type_field$0;
         }
         return [0, caml_call2(Stdlib[28], b, cst_floating)];
        });
   function declare_with_all_args(name, context, pattern, k){
    caml_call4(Ppxlib_Name[4][2], 482562044, registrar, [0, context], name);
    return [0, Ppxlib_Name[1][1].call(null, name), context, [0, pattern, k]];
   }
   function declare(name, context, pattern, k){
    return declare_with_all_args
            (name, context, pattern, function(a, param){return k;});
   }
   function declare_with_name_loc(name, context, pattern, k){
    return declare_with_all_args
            (name,
             context,
             pattern,
             function(param, name_loc){return caml_call1(k, name_loc);});
   }
   function declare_with_attr_loc(name, context, pattern, k){
    return declare_with_all_args
            (name,
             context,
             pattern,
             function(attr_loc, param){return caml_call1(k, attr_loc);});
   }
   function declare_flag(name, context){
    var
     payload_pattern =
       Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]);
    function continuation(a, param){return 0;}
    return declare_with_all_args(name, context, payload_pattern, continuation);
   }
   function normalize(t){var a = t[2]; return [0, t[1], [0, a[1], a[2], 1]];}
   function hash(t){
    var a = normalize(t);
    return caml_call1(Ppxlib_Import[90][26], a);
   }
   function equal(x, y){
    var a = normalize(y), b = normalize(x);
    return caml_call2(Ppxlib_Import[73][2], b, a);
   }
   var
    Attribute_table = caml_call1(Stdlib_Hashtbl[26], [0, equal, hash]),
    not_seen = caml_call1(Attribute_table[1], 128);
   function mark_as_seen(param){
    var attr_name = param[1];
    return caml_call2(Attribute_table[6], not_seen, attr_name);
   }
   var
    e = caml_call1(CamlinternalOO[16], shared),
    u = caml_call2(CamlinternalOO[8], e, k)[99],
    v =
      caml_call6(CamlinternalOO[18], e, 0, 0, i, Ppxlib_Ast_traverse0[2], 1)
       [1];
   caml_call3
    (CamlinternalOO[10], e, u, function(self_1){return mark_as_seen;});
   caml_call1(CamlinternalOO[17], e);
   var o = caml_call2(CamlinternalOO[24], 0, e);
   caml_call1(v, o);
   var
    explicitly_drop = caml_call3(CamlinternalOO[26], 0, o, e),
    cst_Attribute_Floating_Context =
      "Attribute.Floating.Context.get_attribute",
    w = [0, [11, cst_Duplicated_attribute, 0], cst_Duplicated_attribute],
    x = [0, 0],
    y = [0, 1],
    z = [0, 0],
    A = [0, 0],
    B = [0, 0],
    C =
      [0,
       [11, "Multiple match for floating attributes: ", [2, 0, 0]],
       "Multiple match for floating attributes: %s"],
    D = [0, 0],
    E = [0, cst_src_attribute_ml, 468, 8],
    F = [0, 0],
    G =
      [0,
       [11, cst_Attribute, [2, 0, [11, "' was not used", 0]]],
       "Attribute `%s' was not used"];
   function get_internal(t, attributes$1){
    var attributes = attributes$1, longest_match = 0;
    for(;;){
     if(! attributes) return [0, longest_match];
     var attributes$0 = attributes[2], attr = attributes[1], name = attr[1];
     if(Ppxlib_Name[1][3].call(null, t[1], name[1]))
      if(longest_match){
       var
        name$0 = longest_match[1][1],
        len = caml_ml_string_length(name[1]),
        len$0 = caml_ml_string_length(name$0[1]);
       if(caml_call2(Ppxlib_Import[78], len, len$0)){
        var longest_match$0 = [0, attr];
        attributes = attributes$0;
        longest_match = longest_match$0;
       }
       else{
        if(! caml_call2(Ppxlib_Import[77], len, len$0))
         return [1, [0, caml_call2(Ppxlib_Location[14][2], name[2], w), 0]];
        attributes = attributes$0;
       }
      }
      else{
       var longest_match$1 = [0, attr];
       attributes = attributes$0;
       longest_match = longest_match$1;
      }
     else
      attributes = attributes$0;
    }
   }
   function convert(opt, pattern, attr){
    var do_mark_as_seen = opt ? opt[1] : 1;
    if(do_mark_as_seen) mark_as_seen(attr);
    var
     k = pattern[2],
     pattern$0 = pattern[1],
     a = caml_call2(k, attr[3], attr[1][2]),
     b = attr[2],
     c = Ppxlib_Common[16].call(null, attr);
    return Ppxlib_Ast_pattern[2].call(null, pattern$0, c, 0, b, a);
   }
   function get_res(t, do_mark_as_seen, x$0){
    var attrs = get_attributes(t[2], x$0), a = get_internal(t, attrs);
    return caml_call2
            (Ppxlib_Import[96][4],
             a,
             function(res){
              if(! res) return x;
              var attr = res[1], a = convert(do_mark_as_seen, t[3], attr);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       a,
                       function(value){return [0, value];});
             });
   }
   function get(t, do_mark_as_seen, x){
    var a = get_res(t, do_mark_as_seen, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   function has_flag_res(t, mark_as_seen, x){
    var e = get_res(t, mark_as_seen, x);
    return 0 === e[0] ? e[1] ? y : z : e;
   }
   function has_flag(t, mark_as_seen, x){
    var a = has_flag_res(t, mark_as_seen, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   function consume_res(t, x){
    var attrs = get_attributes(t[2], x), a = get_internal(t, attrs);
    return caml_call2
            (Ppxlib_Import[96][4],
             a,
             function(res){
              if(! res) return A;
              var
               attr = res[1],
               attrs$0 =
                 caml_call2
                  (Ppxlib_Import[94][31],
                   function(attr$0){return 1 - (attr === attr$0 ? 1 : 0);},
                   attrs),
               x$0 = set_attributes(t[2], x, attrs$0),
               a = convert(0, t[3], attr);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       a,
                       function(value){return [0, [0, x$0, value]];});
             });
   }
   function consume(t, x){
    var a = consume_res(t, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   function remove_seen_res(context, packeds, x){
    var attrs = get_attributes(context, x);
    function loop(acc, param$0){
     var param = param$0;
     for(;;){
      if(! param) return [0, acc];
      var rest = param[2], t = param[1][1];
      if(poly_equal(t[2], context)) break;
      param = rest;
     }
     var a = get_internal(t, attrs);
     return caml_call2
             (Ppxlib_Import[96][4],
              a,
              function(res){
               if(! res) return loop(acc, rest);
               var attr = res[1], name = attr[1];
               return caml_call2(Attribute_table[11], not_seen, name)
                       ? loop(acc, rest)
                       : loop([0, attr, acc], rest);
              });
    }
    var a = loop(0, packeds);
    return caml_call2
            (Ppxlib_Import[96][5],
             a,
             function(matched){
              var
               attrs$0 =
                 caml_call2
                  (Ppxlib_Import[94][31],
                   function(attr){
                    return 1 - caml_call2(Ppxlib_Import[94][26], attr, matched);
                   },
                   attrs);
              return set_attributes(context, x, attrs$0);
             });
   }
   function remove_seen(context, packeds, x){
    var a = remove_seen_res(context, packeds, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   function pattern_res(t, p){
    var f = Ppxlib_Ast_pattern[341].call(null, p);
    return Ppxlib_Ast_pattern[340].call
            (null,
             function(ctx, loc, x, k){
              var a = consume_res(t, x);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       a,
                       function(res){
                        if(! res)
                         return caml_call4(f, ctx, loc, x, caml_call1(k, 0));
                        var match = res[1], v = match[2], x$0 = match[1];
                        return caml_call4(f, ctx, loc, x$0, caml_call1(k, [0, v]));
                       });
             });
   }
   function pattern(t, p){
    var a = pattern_res(t, p), f = Ppxlib_Ast_pattern[341].call(null, a);
    return Ppxlib_Ast_pattern[340].call
            (null,
             function(a, b, c, d){
              var e = caml_call4(f, a, b, c, d);
              return caml_call2
                      (Ppxlib_Import[96][6],
                       e,
                       function(param){
                        var err = param[1];
                        return caml_call1(Ppxlib_Location[14][8], err);
                       });
             });
   }
   function name$0(t){return Ppxlib_Name[1][2].call(null, t[1]);}
   function declare$0(name, context, pattern, k){
    caml_call4(Ppxlib_Name[4][2], 482562044, registrar, [1, context], name);
    return [0,
            Ppxlib_Name[1][1].call(null, name),
            context,
            [0, pattern, function(a, param){return k;}]];
   }
   function convert_attr_res(t, attr){
    if(! Ppxlib_Name[1][3].call(null, t[1], attr[1][1])) return B;
    var a = convert(0, t[3], attr);
    return caml_call2
            (Ppxlib_Import[96][5], a, function(value){return [0, value];});
   }
   function convert_res(ts, x){
    if(! ts) return F;
    var context = ts[1][2];
    if
     (!
      caml_call2
       (Ppxlib_Import[94][21],
        function(t){return poly_equal(t[2], context);},
        ts))
     throw caml_maybe_attach_backtrace([0, Assert_failure, E], 1);
    var match = get_attribute_if_is_floating_n(context, x);
    if(match)
     var a = match[1], attr = a;
    else
     var attr = caml_call1(Stdlib[2], cst_Attribute_Floating_Context);
    var
     name = attr[1],
     l =
       caml_call2
        (Ppxlib_Import[94][31],
         function(t){return Ppxlib_Name[1][3].call(null, t[1], name[1]);},
         ts);
    if(! l) return D;
    if(l[2]){
     var
      b =
        caml_call2
         (Ppxlib_Import[94][55],
          l,
          function(t){return Ppxlib_Name[1][2].call(null, t[1]);}),
      c = caml_call2(Ppxlib_Import[99][7], cst$0, b);
     return [1, [0, caml_call3(Ppxlib_Location[14][2], name[2], C, c), 0]];
    }
    var t = l[1], d = convert(0, t[3], attr);
    return caml_call2
            (Ppxlib_Import[96][5], d, function(value){return [0, value];});
   }
   function convert$0(ts, x){
    var a = convert_res(ts, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   function collect_attribute_errors(registrar, context, name){
    if
     (!
      caml_call2(Ppxlib_Name[5][3], 482562044, name[1])
      &&
       !
       Ppxlib_Name[7].call(null, name[1])
       && caml_call2(Attribute_table[11], not_seen, name)){
     var allowlist = caml_call1(Ppxlib_Name[5][1], 0);
     return [0,
             caml_call5
              (Ppxlib_Name[4][5][1],
               registrar,
               context,
               [0, allowlist],
               G,
               name),
             0];
    }
    return 0;
   }
   var
    f = caml_call1(CamlinternalOO[16], shared),
    a =
      caml_call2
       (CamlinternalOO[8],
        f,
        [0,
         cst_with_constraint,
         cst_virtual_flag,
         cst_variance,
         cst_value_description,
         cst_value_constraint,
         cst_value_binding$0,
         cst_type_kind,
         cst_type_extension$0,
         cst_type_exception$0,
         cst_type_declaration$0,
         cst_type_constraint,
         cst_toplevel_phrase,
         cst_toplevel_directive,
         cst_structure_item_desc,
         cst_structure_item$0,
         cst_structure,
         cst_string,
         cst_signature_item_desc,
         cst_signature_item$0,
         cst_signature,
         cst_row_field_desc,
         cst_row_field,
         cst_rec_flag,
         cst_private_flag,
         cst_position,
         cst_payload,
         cst_pattern_desc,
         cst_pattern$0,
         cst_package_type,
         cst_override_flag,
         cst_option,
         cst_open_infos,
         cst_open_description,
         cst_open_declaration,
         cst_object_field_desc,
         cst_object_field,
         cst_mutable_flag,
         cst_module_type_desc,
         cst_module_type_declaration$0,
         cst_module_type$0,
         cst_module_substitution$0,
         cst_module_expr_desc,
         cst_module_expr,
         cst_module_declaration$0,
         cst_module_binding$0,
         cst_longident_loc,
         cst_longident,
         cst_location_stack,
         cst_location,
         cst_loc,
         cst_list,
         cst_letop,
         cst_label_declaration$0,
         cst_label,
         cst_int,
         cst_injectivity,
         cst_include_infos,
         cst_include_description,
         cst_include_declaration,
         cst_functor_parameter,
         cst_function_param_desc,
         cst_function_param,
         cst_function_body,
         cst_extension_constructor_kind,
         cst_extension_constructor$0,
         cst_extension,
         cst_expression_desc,
         cst_expression$0,
         cst_directive_argument_desc,
         cst_directive_argument,
         cst_direction_flag,
         cst_core_type_desc,
         cst_core_type$0,
         cst_constructor_declaration$0,
         cst_constructor_arguments,
         cst_constant,
         cst_closed_flag,
         cst_class_type_field_desc,
         cst_class_type_field$2,
         cst_class_type_desc,
         cst_class_type_declaration$0,
         cst_class_type$0,
         cst_class_structure,
         cst_class_signature,
         cst_class_infos,
         cst_class_field_kind,
         cst_class_field_desc,
         cst_class_field$2,
         cst_class_expr_desc,
         cst_class_expr,
         cst_class_description,
         cst_class_declaration$0,
         cst_check_node,
         "check_floating",
         cst_char,
         cst_cases,
         cst_case,
         cst_bool,
         cst_binding_op,
         cst_attributes,
         cst_attribute,
         cst_array,
         cst_arg_label]),
    p = a[26],
    c = a[93],
    j = a[94],
    H = a[4],
    I = a[6],
    J = a[8],
    K = a[9],
    L = a[10],
    M = a[15],
    N = a[19],
    O = a[22],
    P = a[28],
    Q = a[33],
    R = a[34],
    S = a[39],
    T = a[40],
    U = a[43],
    V = a[44],
    W = a[45],
    X = a[53],
    Y = a[57],
    Z = a[65],
    _ = a[68],
    $ = a[72],
    aa = a[73],
    ab = a[74],
    ac = a[79],
    ad = a[82],
    ae = a[85],
    af = a[88],
    ag = a[90],
    ah = a[101],
    d = caml_call6(CamlinternalOO[18], f, 0, 0, i, Ppxlib_Ast_traverse0[3], 1),
    aj = d[13],
    ak = d[15],
    al = d[18],
    am = d[21],
    an = d[24],
    ao = d[29],
    ap = d[30],
    aq = d[31],
    ar = d[35],
    as = d[38],
    at = d[46],
    au = d[50],
    av = d[58],
    aw = d[59],
    ax = d[60],
    ay = d[63],
    az = d[64],
    aA = d[69],
    aB = d[70],
    aC = d[75],
    aD = d[81],
    aE = d[84],
    aF = d[88],
    aG = d[93],
    aH = d[94],
    aI = d[95],
    aJ = d[97],
    aK = d[99],
    aL =
      [0,
       [11, cst_attribute_not_expected_her, 0],
       cst_attribute_not_expected_her],
    ai = d[1];
   caml_call2
    (CamlinternalOO[11],
     f,
     [0,
      ah,
      function(self_2, a, param){
       var name = a[1];
       return [0, caml_call2(Ppxlib_Location[14][2], name[2], aL), 0];
      },
      c,
      function(self_2, context, node){
       var attrs = get_attributes(context, node);
       if(! attrs) return [0, node, 0];
       var
        a =
          caml_call2
           (Ppxlib_Import[94][55],
            attrs,
            function(attr){
             var
              payload = attr[2],
              name = attr[1],
              a = collect_attribute_errors(registrar, [0, context], name),
              b = caml_call3(self_2[1][p + 1], self_2, payload, 0),
              collected_errors = caml_call2(Ppxlib_Import[100], b, a);
             mark_as_seen(attr);
             return collected_errors;
            }),
        errors = caml_call1(Ppxlib_Import[94][59], a);
       return [0, set_attributes(context, node, 0), errors];
      },
      j,
      function(self_2, context, node){
       var match = get_attribute_if_is_floating_n(context, node);
       if(! match) return [0, node, 0];
       var
        attr = match[1],
        payload = attr[2],
        name = attr[1],
        b = collect_attribute_errors(registrar, [1, context], name),
        c = caml_call3(self_2[1][p + 1], self_2, payload, 0),
        collected_errors = caml_call2(Ppxlib_Import[100], c, b);
       mark_as_seen(attr);
       switch(context){
         case 0:
          var a = [0, [14, dummy_ext, 0], node[2]]; break;
         case 1:
          var a = [0, [15, dummy_ext, 0], node[2]]; break;
         case 2:
          var a = [0, [6, dummy_ext], node[2], node[3]]; break;
         default: var a = [0, [5, dummy_ext], node[2], node[3]];
       }
       return [0, a, collected_errors];
      },
      X,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 0, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(au, self_2), res, a);
      },
      ab,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 1, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(ao, self_2), res, a);
      },
      L,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 2, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aG, self_2), res, a);
      },
      J,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 4, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aI, self_2), res, a);
      },
      K,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 3, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aH, self_2), res, a);
      },
      Z,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 5, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(as, self_2), res, a);
      },
      P,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 6, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aC, self_2), res, a);
      },
      aa,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 7, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(ap, self_2), res, a);
      },
      _,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 8, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(ar, self_2), res, a);
      },
      H,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 9, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aK, self_2), res, a);
      },
      ad,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 10, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(am, self_2), res, a);
      },
      ae,
      function(self_2, f, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 12, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call3(caml_call1(al, self_2), f, res, a);
      },
      ag,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 13, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aj, self_2), res, a);
      },
      T,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 16, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(ay, self_2), res, a);
      },
      V,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 17, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aw, self_2), res, a);
      },
      S,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 18, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(az, self_2), res, a);
      },
      Q,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 20, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aB, self_2), res, a);
      },
      R,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 21, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aA, self_2), res, a);
      },
      Y,
      function(self_2, f, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 22, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call3(caml_call1(at, self_2), f, res, a);
      },
      U,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 23, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(ax, self_2), res, a);
      },
      I,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 24, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aJ, self_2), res, a);
      },
      W,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 25, x),
        errors = match[2],
        res = match[1],
        a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(av, self_2), res, a);
      },
      af,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 14, x),
        errors1 = match[2],
        x$0 = match[1],
        match$0 = caml_call3(self_2[1][j + 1], self_2, 2, x$0),
        errors2 = match$0[2],
        x$1 = match$0[1],
        a = caml_call2(Ppxlib_Import[100], errors1, errors2),
        b = caml_call2(Ppxlib_Import[100], acc, a);
       return caml_call2(caml_call1(ak, self_2), x$1, b);
      },
      ac,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][c + 1], self_2, 11, x),
        errors1 = match[2],
        x$0 = match[1],
        match$0 = caml_call3(self_2[1][j + 1], self_2, 3, x$0),
        errors2 = match$0[2],
        x$1 = match$0[1],
        a = caml_call2(Ppxlib_Import[100], errors1, errors2),
        b = caml_call2(Ppxlib_Import[100], acc, a);
       return caml_call2(caml_call1(an, self_2), x$1, b);
      },
      O,
      function(self_2, x, acc){
       if(0 === x[1][0])
        var
         a = caml_call3(self_2[1][c + 1], self_2, 29, x),
         errors = a[2],
         x$0 = a[1];
       else
        var errors = 0, x$0 = x;
       var b = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aD, self_2), x$0, b);
      },
      $,
      function(self_2, x, acc){
       a:
       {
        if(typeof x !== "number" && 4 === x[0]){
         var
          closed_flag = x[2],
          fields = x[1],
          b = caml_call2(self_2[1][c + 1], self_2, 30),
          d = caml_call2(Ppxlib_Import[94][55], fields, b),
          match = caml_call1(Ppxlib_Import[94][62], d),
          errors$0 = match[2],
          fields$0 = match[1],
          errors = caml_call1(Ppxlib_Import[94][59], errors$0),
          x$0 = [4, fields$0, closed_flag];
         break a;
        }
        var errors = 0, x$0 = x;
       }
       var a = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(aq, self_2), x$0, a);
      },
      M,
      function(self_2, item, acc){
       var
        match = caml_call3(self_2[1][j + 1], self_2, 0, item),
        errors = match[2],
        item$0 = match[1];
       switch(item$0[1][0]){
         case 0:
          var
           a = caml_call3(self_2[1][c + 1], self_2, 26, item$0),
           errors2 = a[2],
           item$1 = a[1];
          break;
         case 14:
          var
           b = caml_call3(self_2[1][c + 1], self_2, 27, item$0),
           errors2$0 = b[2],
           item$2 = b[1],
           errors2 = errors2$0,
           item$1 = item$2;
          break;
         default: var errors2 = 0, item$1 = item$0;
       }
       var
        d = caml_call2(Ppxlib_Import[100], errors, errors2),
        e = caml_call2(Ppxlib_Import[100], acc, d);
       return caml_call2(caml_call1(aF, self_2), item$1, e);
      },
      N,
      function(self_2, item, acc){
       var
        match = caml_call3(self_2[1][j + 1], self_2, 1, item),
        errors = match[2],
        item$0 = match[1];
       if(15 === item$0[1][0])
        var
         a = caml_call3(self_2[1][c + 1], self_2, 28, item$0),
         errors2$0 = a[2],
         item$2 = a[1],
         errors2 = errors2$0,
         item$1 = item$2;
       else
        var errors2 = 0, item$1 = item$0;
       var
        b = caml_call2(Ppxlib_Import[100], errors, errors2),
        d = caml_call2(Ppxlib_Import[100], acc, b);
       return caml_call2(caml_call1(aE, self_2), item$1, d);
      }]);
   caml_call1(CamlinternalOO[17], f);
   var q = caml_call2(CamlinternalOO[24], 0, f);
   caml_call1(ai, q);
   var
    collect_unused_attributes_erro = caml_call3(CamlinternalOO[26], 0, q, f);
   function raise_if_non_empty(param){
    if(! param) return 0;
    var err = param[1];
    return caml_call1(Ppxlib_Location[14][8], err);
   }
   var
    g = caml_call1(CamlinternalOO[16], shared),
    b =
      caml_call2
       (CamlinternalOO[8],
        g,
        [0,
         cst_with_constraint,
         cst_virtual_flag,
         cst_variance,
         cst_value_description,
         cst_value_constraint,
         cst_value_binding$0,
         cst_type_kind,
         cst_type_extension$0,
         cst_type_exception$0,
         cst_type_declaration$0,
         cst_type_constraint,
         cst_toplevel_phrase,
         cst_toplevel_directive,
         cst_structure_item_desc,
         cst_structure_item$0,
         cst_structure,
         cst_string,
         cst_signature_item_desc,
         cst_signature_item$0,
         cst_signature,
         cst_row_field_desc,
         cst_row_field,
         cst_rec_flag,
         cst_private_flag,
         cst_position,
         cst_payload,
         cst_pattern_desc,
         cst_pattern$0,
         cst_package_type,
         cst_override_flag,
         cst_option,
         cst_open_infos,
         cst_open_description,
         cst_open_declaration,
         cst_object_field_desc,
         cst_object_field,
         cst_mutable_flag,
         cst_module_type_desc,
         cst_module_type_declaration$0,
         cst_module_type$0,
         cst_module_substitution$0,
         cst_module_expr_desc,
         cst_module_expr,
         cst_module_declaration$0,
         cst_module_binding$0,
         cst_longident_loc,
         cst_longident,
         cst_location_stack,
         cst_location,
         cst_loc,
         cst_list,
         cst_letop,
         cst_label_declaration$0,
         cst_label,
         cst_int,
         cst_injectivity,
         cst_include_infos,
         cst_include_description,
         cst_include_declaration,
         cst_functor_parameter,
         cst_function_param_desc,
         cst_function_param,
         cst_function_body,
         cst_extension_constructor_kind,
         cst_extension_constructor$0,
         cst_extension,
         cst_expression_desc,
         cst_expression$0,
         cst_directive_argument_desc,
         cst_directive_argument,
         cst_direction_flag,
         cst_core_type_desc,
         cst_core_type$0,
         cst_constructor_declaration$0,
         cst_constructor_arguments,
         cst_constant,
         cst_closed_flag,
         cst_class_type_field_desc,
         cst_class_type_field$2,
         cst_class_type_desc,
         cst_class_type_declaration$0,
         cst_class_type$0,
         cst_class_structure,
         cst_class_signature,
         cst_class_infos,
         cst_class_field_kind,
         cst_class_field_desc,
         cst_class_field$2,
         cst_class_expr_desc,
         cst_class_expr,
         cst_class_description,
         cst_class_declaration$0,
         cst_check_node,
         cst_char,
         cst_cases,
         cst_case,
         cst_bool,
         cst_binding_op,
         cst_attributes,
         cst_attribute,
         cst_array,
         cst_arg_label]),
    l = b[93],
    aM = b[4],
    aN = b[6],
    aO = b[8],
    aP = b[9],
    aQ = b[10],
    aR = b[15],
    aS = b[19],
    aT = b[22],
    aU = b[26],
    aV = b[28],
    aW = b[33],
    aX = b[34],
    aY = b[39],
    aZ = b[40],
    a0 = b[43],
    a1 = b[44],
    a2 = b[45],
    a3 = b[53],
    a4 = b[57],
    a5 = b[65],
    a6 = b[68],
    a7 = b[72],
    a8 = b[73],
    a9 = b[74],
    a_ = b[79],
    a$ = b[82],
    ba = b[85],
    bb = b[88],
    bc = b[90],
    bd = b[100],
    m = caml_call6(CamlinternalOO[18], g, 0, 0, i, Ppxlib_Ast_traverse0[2], 1),
    bf = m[18],
    bg = m[46],
    bh =
      [0,
       [11, cst_attribute_not_expected_her, 0],
       cst_attribute_not_expected_her],
    be = m[1];
   caml_call2
    (CamlinternalOO[11],
     g,
     [0,
      l,
      function(self_3, context, node){
       var attrs = get_attributes(context, node);
       return attrs
               ? (caml_call2
                  (Ppxlib_Import[94][77],
                   attrs,
                   function(attr){
                    var payload = attr[2], name = attr[1];
                    caml_call2(self_3[1][aU + 1], self_3, payload);
                    var
                     context$0 = [0, context],
                     match = collect_attribute_errors(registrar, context$0, name);
                    if(match){
                     var err = match[1];
                     caml_call1(Ppxlib_Location[14][8], err);
                    }
                    return mark_as_seen(attr);
                   }),
                 set_attributes(context, node, 0))
               : node;
      },
      bd,
      function(self_3, param){
       var name = param[1];
       return Ppxlib_Location[6].call(null, [0, name[2]], bh);
      },
      a3,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -937230609, cache_id$24),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a9,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 720277237, cache_id$23),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aQ,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 698610869, cache_id$22),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aO,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 179859066, cache_id$21),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aP,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -280892598, cache_id$20),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a5,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -579981062, cache_id$19),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aV,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 293013072, cache_id$18),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a8,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -957384486, cache_id$17),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a6,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 782176664, cache_id$16),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aM,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -216458258, cache_id$15),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a$,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 806013793, cache_id$14),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      ba,
      function(self_3, f, x){
       var a = caml_call3(self_3[1][l + 1], self_3, 12, x);
       return caml_call2(caml_call1(bf, self_3), f, a);
      },
      bc,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 639620572, cache_id$13),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aZ,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 915171949, cache_id$12),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a1,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -196978265, cache_id$11),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aY,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 194358504, cache_id$10),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aW,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 406208967, cache_id$9),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aX,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 523001285, cache_id$8),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a4,
      function(self_3, f, x){
       var a = caml_call3(self_3[1][l + 1], self_3, 22, x);
       return caml_call2(caml_call1(bg, self_3), f, a);
      },
      a0,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 748778728, cache_id$7),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aN,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -1035682505, cache_id$6),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a2,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -935352974, cache_id$5),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      bb,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 1060064819, cache_id$4),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 382854684, cache_id$3),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aT,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 223694229, cache_id$2),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      a7,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 692169494, cache_id$1),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      aR,
      function(self_3, item){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, 832861151, cache_id$0),
                  collect_unused_attributes_erro,
                  item,
                  0));
      },
      aS,
      function(self_3, item){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_cached_method
                   (collect_unused_attributes_erro, -662996230, cache_id),
                  collect_unused_attributes_erro,
                  item,
                  0));
      }]);
   caml_call1(CamlinternalOO[17], g);
   var r = caml_call2(CamlinternalOO[24], 0, g);
   caml_call1(be, r);
   var check_unused = caml_call3(CamlinternalOO[26], 0, r, g);
   function reset_checks(param){
    return caml_call1(Attribute_table[2], not_seen);
   }
   var
    h = caml_call1(CamlinternalOO[16], shared),
    bi = caml_call2(CamlinternalOO[8], h, k)[99],
    s = caml_call6(CamlinternalOO[18], h, 0, 0, i, Ppxlib_Ast_traverse0[2], 1),
    bk = s[77],
    bj = s[1];
   caml_call3
    (CamlinternalOO[10],
     h,
     bi,
     function(self_4, attr){
      var
       payload = attr[2],
       name = attr[1],
       loc = Ppxlib_Common[17].call(null, attr);
      caml_call1(caml_call1(bk, self_4), payload);
      return caml_call3(Attribute_table[5], not_seen, name, loc);
     });
   caml_call1(CamlinternalOO[17], h);
   var t = caml_call2(CamlinternalOO[24], 0, h);
   caml_call1(bj, t);
   var
    collect = caml_call3(CamlinternalOO[26], 0, t, h),
    bl =
      [0,
       [11, cst_Attribute, [2, 0, [11, "' was silently dropped", 0]]],
       "Attribute `%s' was silently dropped"];
   function collect_unseen_errors(param){
    function fail(name, loc, acc){
     var txt = name[1];
     return Ppxlib_Name[7].call(null, txt)
             ? acc
             : [0, caml_call3(Ppxlib_Location[14][2], loc, bl, txt), acc];
    }
    return caml_call3(Attribute_table[14], fail, not_seen, 0);
   }
   function check_all_seen(param){
    var match = collect_unseen_errors(0);
    if(! match) return 0;
    var err = match[1];
    return caml_call1(Ppxlib_Location[14][8], err);
   }
   var n = [0, 0];
   function remove_attributes_present_in(table){
    if(! n[1]){
     var
      a = caml_call1(CamlinternalOO[16], shared),
      b = caml_call2(CamlinternalOO[3], a, cst$1),
      d = caml_call2(CamlinternalOO[8], a, k)[99],
      c =
        caml_call6(CamlinternalOO[18], a, 0, 0, i, Ppxlib_Ast_traverse0[2], 0),
      f = c[77],
      e = c[1];
     caml_call3
      (CamlinternalOO[10],
       a,
       d,
       function(self_5, param){
        var env = self_5[b + 1], payload = param[2], name = param[1];
        caml_call1(caml_call1(f, self_5), payload);
        return caml_call2(Attribute_table[6], env[1], name);
       });
     caml_call1(CamlinternalOO[17], a);
     n[1] =
      function(d){
       var f = d[1], c = caml_call2(CamlinternalOO[24], 0, a);
       caml_call2(e, d[2], c);
       c[b + 1] = f;
       return caml_call3(CamlinternalOO[26], 0, c, a);
      };
    }
    return caml_call1(n[1], [0, [0, table], Ppxlib_Ast_traverse0[2][3]]);
   }
   function copy_of_not_seen(param){
    var
     a = caml_call1(Attribute_table[15], not_seen),
     copy = caml_call1(Attribute_table[1], a),
     b = caml_call1(Attribute_table[5], copy);
    caml_call2(Attribute_table[12], b, not_seen);
    return copy;
   }
   function dropped_so_far_structure(st){
    var table = copy_of_not_seen(0), a = remove_attributes_present_in(table);
    caml_call2(caml_get_cached_method(a, -951102413, cache_id$25), a, st);
    return caml_call3
            (Attribute_table[14],
             function(name, loc, acc){return [0, [0, name[1], loc], acc];},
             table,
             0);
   }
   function dropped_so_far_signature(sg){
    var table = copy_of_not_seen(0), a = remove_attributes_present_in(table);
    caml_call2(caml_get_cached_method(a, 359375608, cache_id$26), a, sg);
    return caml_call3
            (Attribute_table[14],
             function(name, loc, acc){return [0, [0, name[1], loc], acc];},
             table,
             0);
   }
   var
    Ppxlib_Attribute =
      [0,
       [0,
        0,
        1,
        2,
        4,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30],
       declare,
       declare_with_name_loc,
       declare_with_attr_loc,
       declare_flag,
       name,
       context,
       get_res,
       get,
       has_flag_res,
       has_flag,
       consume_res,
       consume,
       remove_seen_res,
       remove_seen,
       [0,
        [0, 0, 1, 2, 3],
        declare$0,
        name$0,
        convert_res,
        convert$0,
        convert_attr_res],
       explicitly_drop,
       check_unused,
       collect_unused_attributes_erro,
       collect,
       collect_unseen_errors,
       check_all_seen,
       mark_as_seen,
       dropped_so_far_structure,
       dropped_so_far_signature,
       reset_checks,
       pattern,
       pattern_res];
   runtime.caml_register_global(76, Ppxlib_Attribute, "Ppxlib__Attribute");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Code_path
//# unitInfo: Requires: Ppxlib__Import, Stdlib__Filename
//# shape: Ppxlib__Code_path:[F(1)*,F(1)*,F(1),F(1)*,F(1),F(1)*,F(1),F(1),F(1),F(1)*,F(3)*,F(3)*,F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = ".",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Assert_failure = global_data.Assert_failure,
    a = [0, "src/code_path.ml", 15, 10];
   function top_level(file_path){
    var
     basename = caml_call1(Stdlib_Filename[13], file_path),
     match = caml_call2(Ppxlib_Import[99][70], basename, 46);
    if(! match) throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    var
     name = match[1],
     main_module_name = caml_call1(Ppxlib_Import[99][67], name);
    return [0, file_path, main_module_name, 0, main_module_name, 0, 0, 0];
   }
   function file_path(t){return t[1];}
   function main_module_name(t){return t[2];}
   function enclosing_module(t){return t[4];}
   function enclosing_value(t){return t[5];}
   function submodule_path(t){
    return caml_call2
            (Ppxlib_Import[94][15],
             function(located){return located[1];},
             t[3]);
   }
   function value(t){
    return caml_call2
            (Ppxlib_Import[95][3],
             t[6],
             function(located){return located[1];});
   }
   function fully_qualified_path(t){
    var
     value$0 = value(t),
     submodule_path =
       caml_call2
        (Ppxlib_Import[94][15],
         function(located){return [0, located[1]];},
         t[3]),
     names =
       caml_call2
        (Ppxlib_Import[100], [0, [0, t[2]], submodule_path], [0, value$0, 0]),
     a = caml_call1(Ppxlib_Import[94][68], names);
    return caml_call1(caml_call1(Ppxlib_Import[99][7], cst), a);
   }
   function enter_expr(t){return [0, t[1], t[2], t[3], t[4], t[5], t[6], 1];}
   function enter_module(loc, module_name, t){
    return t[7]
            ? [0, t[1], t[2], t[3], module_name, t[5], t[6], t[7]]
            : [0,
              t[1],
              t[2],
              [0, [0, module_name, loc], t[3]],
              module_name,
              t[5],
              t[6],
              t[7]];
   }
   function enter_value(loc, value_name, t){
    return t[7]
            ? [0, t[1], t[2], t[3], t[4], [0, value_name], t[6], t[7]]
            : [0,
              t[1],
              t[2],
              t[3],
              t[4],
              [0, value_name],
              [0, [0, value_name, loc]],
              t[7]];
   }
   function to_string_path(t){
    var a = submodule_path(t);
    return caml_call2(Ppxlib_Import[99][7], cst$0, [0, t[1], a]);
   }
   function with_string_path(f, loc, path){
    return caml_call2(f, loc, to_string_path(path));
   }
   var
    Ppxlib_Code_path =
      [0,
       file_path,
       main_module_name,
       submodule_path,
       enclosing_module,
       value,
       enclosing_value,
       fully_qualified_path,
       to_string_path,
       top_level,
       enter_expr,
       enter_module,
       enter_value,
       with_string_path];
   runtime.caml_register_global(7, Ppxlib_Code_path, "Ppxlib__Code_path");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Expansion_context
//# unitInfo: Requires: Ppxlib__Code_path
//# shape: Ppxlib__Expansion_context:[N,N,N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Code_path = global_data.Ppxlib__Code_path;
   function top_level(tool_name, file_path, input_name){
    var code_path = Ppxlib_Code_path[9].call(null, file_path);
    return [0, tool_name, code_path, input_name];
   }
   function code_path(t){return t[2];}
   function input_name(t){return t[3];}
   function tool_name(t){return t[1];}
   function enter_expr(t){
    var a = t[3], b = Ppxlib_Code_path[10].call(null, t[2]);
    return [0, t[1], b, a];
   }
   function enter_module(loc, name, t){
    var a = t[3], b = Ppxlib_Code_path[11].call(null, loc, name, t[2]);
    return [0, t[1], b, a];
   }
   function enter_value(loc, name, t){
    var a = t[3], b = Ppxlib_Code_path[12].call(null, loc, name, t[2]);
    return [0, t[1], b, a];
   }
   function make(extension_point_loc, base, param){return [0, extension_point_loc, base];
   }
   function extension_point_loc(t){return t[1];}
   function code_path$0(t){return t[2][2];}
   function input_name$0(t){return t[2][3];}
   function tool_name$0(t){return t[2][1];}
   function with_loc_and_path(f, ctxt){
    var a = Ppxlib_Code_path[8].call(null, ctxt[2][2]);
    return caml_call2(f, ctxt[1], a);
   }
   function make$0(derived_item_loc, inline, base, param){return [0, derived_item_loc, inline, base];
   }
   function derived_item_loc(t){return t[1];}
   function code_path$1(t){return t[3][2];}
   function input_name$1(t){return t[3][3];}
   function tool_name$1(t){return t[3][1];}
   function inline(t){return t[2];}
   function with_loc_and_path$0(f, ctxt){
    var a = Ppxlib_Code_path[8].call(null, ctxt[3][2]);
    return caml_call2(f, ctxt[1], a);
   }
   var
    Ppxlib_Expansion_context =
      [0,
       [0,
        code_path,
        input_name,
        tool_name,
        top_level,
        enter_expr,
        enter_module,
        enter_value],
       [0,
        extension_point_loc,
        code_path$0,
        input_name$0,
        tool_name$0,
        with_loc_and_path,
        make],
       [0,
        derived_item_loc,
        code_path$1,
        input_name$1,
        tool_name$1,
        with_loc_and_path$0,
        inline,
        make$0]];
   runtime.caml_register_global
    (1, Ppxlib_Expansion_context, "Ppxlib__Expansion_context");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_traverse
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse0, Ppxlib__Attribute, Ppxlib__Common, Ppxlib__Expansion_context, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Ppxlib_ast__Ast, Ppxlib_traverse_builtins, Stdlib, Stdlib__ArrayLabels, Stdlib__Format
//# shape: Ppxlib__Ast_traverse:[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "_",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes$0 = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_ppxlib_do_not_enter_module = "ppxlib.do_not_enter_module",
    cst_ppxlib_do_not_enter_value = "ppxlib.do_not_enter_value",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "",
    cst$0 = ".",
    cst = cst$2,
    c =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes$0,
       cst_attribute,
       cst_array,
       cst_arg_label],
    d =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes$0,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    e =
      [0,
       cst_unit,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_nativeint,
       cst_int64,
       cst_int32,
       cst_int,
       cst_float,
       cst_constr,
       cst_char,
       cst_bool,
       cst_array],
    b =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes$0,
       cst_attribute,
       cst_array,
       cst_arg_label],
    f =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes$0,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    g =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_constr,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_unit,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_nativeint,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_record,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_float,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes$0,
       cst_tuple,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_other,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_int32,
       cst_int64,
       cst_class_field],
    h =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes$0,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    shared =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes$0,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Stdlib = global_data.Stdlib,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_traverse_builtins = global_data.Ppxlib_traverse_builtins,
    Ppxlib_Ast_traverse0 = global_data.Ppxlib__Ast_traverse0,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    cache_id = runtime.caml_oo_cache_id(),
    map = Ppxlib_Ast_traverse0[1],
    iter = Ppxlib_Ast_traverse0[2],
    fold = Ppxlib_Ast_traverse0[3],
    fold_map = Ppxlib_Ast_traverse0[4],
    map_with_context = Ppxlib_Ast_traverse0[5],
    lift = Ppxlib_Ast_traverse0[6],
    lift_map_with_context = [],
    l =
      [0,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_option,
       cst_list,
       cst_int,
       cst_constr,
       cst_char,
       cst_bool],
    m = [0, cst_list, cst_option];
   runtime.caml_update_dummy
    (lift_map_with_context,
     [0,
      0,
      function(a){
       caml_call2(CamlinternalOO[8], a, b);
       var
        c =
          caml_call6
            (CamlinternalOO[18], a, 0, e, m, Ppxlib_traverse_builtins[8], 1)
           [1],
        d =
          caml_call6(CamlinternalOO[18], a, 0, l, h, Ppxlib_ast_Ast[7], 1)[1];
       return function(f, e){
        var b = caml_call2(CamlinternalOO[24], e, a);
        caml_call1(c, b);
        caml_call1(d, b);
        return caml_call3(CamlinternalOO[26], e, b, a);};
      },
      0]);
   function module_name(param){
    if(! param) return cst;
    var name = param[1];
    return name;
   }
   function enter(name, path){
    if(caml_call1(Ppxlib_Import[99][53], path)) return name;
    var a = caml_call2(Stdlib[28], cst$0, name);
    return caml_call2(Stdlib[28], path, a);
   }
   function enter_opt(name_opt, path){
    return enter(module_name(name_opt), path);
   }
   var
    map_with_path =
      caml_call2
       (CamlinternalOO[19],
        f,
        function(a){
         var
          e = caml_call2(CamlinternalOO[8], a, c),
          f = e[39],
          g = e[44],
          h = e[45],
          b = caml_call6(CamlinternalOO[18], a, 0, 0, d, map_with_context, 1),
          j = b[58],
          k = b[59],
          l = b[64],
          i = b[1];
         caml_call2
          (CamlinternalOO[11],
           a,
           [0,
            h,
            function(self_2, path, mb){
             var a = enter_opt(mb[1][1], path);
             return caml_call2(caml_call1(j, self_2), a, mb);
            },
            g,
            function(self_2, path, md){
             var a = enter_opt(md[1][1], path);
             return caml_call2(caml_call1(k, self_2), a, md);
            },
            f,
            function(self_2, path, mtd){
             var a = enter(mtd[1][1], path);
             return caml_call2(caml_call1(l, self_2), a, mtd);
            }]);
         return function(d, c){
          var b = caml_call2(CamlinternalOO[24], c, a);
          caml_call1(i, b);
          return caml_call3(CamlinternalOO[26], c, b, a);};
        }),
    a = caml_call1(CamlinternalOO[16], f),
    o = caml_call2(CamlinternalOO[8], a, c)[28],
    i = caml_call6(CamlinternalOO[18], a, 0, 0, d, fold, 1),
    q = i[75],
    p = i[1];
   caml_call3
    (CamlinternalOO[10],
     a,
     o,
     function(self_3, p, acc){
      var acc$0 = caml_call2(caml_call1(q, self_3), p, acc), a = p[1];
      if(typeof a !== "number" && 0 === a[0]){
       var txt = a[1][1];
       return [0, txt, acc$0];
      }
      return acc$0;
     });
   caml_call1(CamlinternalOO[17], a);
   var j = caml_call2(CamlinternalOO[24], 0, a);
   caml_call1(p, j);
   var var_names_of = caml_call3(CamlinternalOO[26], 0, j, a);
   function ec_enter_module_opt(loc, name_opt, ctxt){
    var a = module_name(name_opt);
    return caml_call3(Ppxlib_Expansion_context[1][6], loc, a, ctxt);
   }
   var
    r = Ppxlib_Import[89][1],
    s = Ppxlib_Ast_pattern[180].call(null, Ppxlib_Ast_pattern[5]),
    t = Ppxlib_Ast_pattern[125].call(null, s),
    u = Ppxlib_Ast_pattern[334].call(null, t),
    enter_value =
      Ppxlib_Attribute[2].call(null, "ppxlib.enter_value", 8, u, r),
    v = Ppxlib_Import[89][1],
    w = Ppxlib_Ast_pattern[37],
    x = Ppxlib_Ast_pattern[180].call(null, Ppxlib_Ast_pattern[5]),
    y = Ppxlib_Ast_pattern[133].call(null, x)(w),
    z = Ppxlib_Ast_pattern[334].call(null, y),
    enter_module =
      Ppxlib_Attribute[2].call(null, "ppxlib.enter_module", 23, z, v),
    A = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    do_not_enter_value_binding =
      Ppxlib_Attribute[2].call(null, cst_ppxlib_do_not_enter_value, 24, A, 0),
    B = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    do_not_enter_value_description =
      Ppxlib_Attribute[2].call(null, cst_ppxlib_do_not_enter_value, 9, B, 0),
    C = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    do_not_enter_module_binding =
      Ppxlib_Attribute[2].call(null, cst_ppxlib_do_not_enter_module, 25, C, 0),
    D = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    do_not_enter_module_declaratio =
      Ppxlib_Attribute[2].call(null, cst_ppxlib_do_not_enter_module, 17, D, 0),
    E = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    do_not_enter_module_type_decla =
      Ppxlib_Attribute[2].call(null, cst_ppxlib_do_not_enter_module, 18, E, 0),
    F = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    do_not_enter_let_module =
      Ppxlib_Attribute[2].call(null, cst_ppxlib_do_not_enter_module, 8, F, 0),
    cst_pvb_constraint = "pvb_constraint",
    cst_pvb_loc = "pvb_loc",
    cst_pvb_attributes = "pvb_attributes",
    cst_pvb_expr = "pvb_expr",
    cst_pvb_pat = "pvb_pat",
    cst_attributes = cst_attributes$0,
    cst_pexp_loc_stack = "pexp_loc_stack",
    cst_pexp_loc = "pexp_loc",
    cst_pexp_desc = "pexp_desc",
    cst_Pexp_letmodule = "Pexp_letmodule";
   function G(ctx, x){return [0, x, 0];}
   var
    map_with_expansion_context_and =
      caml_call2
       (CamlinternalOO[19],
        g,
        function(f){
         var
          c = caml_call2(CamlinternalOO[3], f, cst$1),
          a = caml_call2(CamlinternalOO[8], f, b),
          j = a[19],
          g = a[25],
          k = a[48],
          h = a[54],
          l = a[56],
          i = a[76],
          m = a[84],
          n = a[107],
          o = a[4],
          p = a[5],
          q = a[6],
          r = a[7],
          s = a[13],
          t = a[31],
          u = a[34],
          v = a[35],
          w = a[41],
          x = a[44],
          y = a[49],
          z = a[50],
          A = a[55],
          B = a[60],
          C = a[61],
          D = a[62],
          E = a[71],
          F = a[75],
          H = a[102],
          I = a[105],
          J = a[109],
          d =
            caml_call6
             (CamlinternalOO[18], f, 0, e, shared, lift_map_with_context, 1),
          L = d[54],
          M = d[55],
          N = d[56],
          O = d[60],
          P = d[92],
          Q = d[94],
          K = d[1];
         caml_call2
          (CamlinternalOO[11],
           f,
           [0,
            D,
            function(self_4){return self_4[c + 1];},
            j,
            function(self_4){return self_4[c + 1];},
            I,
            function(self_4){return self_4[c + 1];},
            H,
            function(self_4){return self_4[c + 1];},
            E,
            function(self_4){return self_4[c + 1];},
            C,
            function(self_4){return self_4[c + 1];},
            B,
            function(self_4){return self_4[c + 1];},
            w,
            function(self_4){return self_4[c + 1];},
            r,
            function(self_4){return self_4[c + 1];},
            J,
            function(self_4, f, ctx, a){
             var
              b = caml_call1(Stdlib_ArrayLabels[10], a),
              match = caml_call4(self_4[1][l + 1], self_4, f, ctx, b),
              errors = match[2],
              list = match[1];
             return [0, caml_call1(Stdlib_ArrayLabels[11], list), errors];
            },
            u,
            function(self_4, a, param){return 0;},
            g,
            function(self_4, ctx, fields){
             return caml_call2
                     (Ppxlib_Import[94][70], fields, function(a){return a[2];});
            },
            m,
            function(self_4, ctx, tag, args){
             return caml_call1(Ppxlib_Import[94][59], args);
            },
            s,
            function(self_4, ctx, l){
             return caml_call1(Ppxlib_Import[94][59], l);
            },
            i,
            function(self_4, ctxt, expr){
             var
              pexp_attributes = expr[4],
              pexp_loc_stack = expr[3],
              pexp_loc = expr[2],
              pexp_desc = expr[1],
              a = Ppxlib_Attribute[8].call(null, enter_value, 0, expr),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              with_value =
                Ppxlib_Common[24][3].call
                 (null,
                  b,
                  function(param){
                   if(! param) return ctxt;
                   var match = param[1], loc = match[2], txt = match[1];
                   return caml_call3
                           (Ppxlib_Expansion_context[1][7], loc, txt, ctxt);
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      with_value,
                      function(ctxt){
                       var
                        ctxt$0 = caml_call1(Ppxlib_Expansion_context[1][5], ctxt);
                       a:
                       {
                        if(typeof pexp_desc !== "number" && 24 === pexp_desc[0]){
                         var
                          body = pexp_desc[3],
                          module_expr = pexp_desc[2],
                          name = pexp_desc[1],
                          c = caml_call1(self_4[1][j + 1], self_4),
                          d = caml_call2(self_4[1][v + 1], self_4, c),
                          match$2 =
                            caml_call4(self_4[1][A + 1], self_4, d, ctxt$0, name),
                          name_errors = match$2[2],
                          name$0 = match$2[1],
                          e =
                            Ppxlib_Attribute[8].call
                             (null, do_not_enter_let_module, 0, expr),
                          f = Ppxlib_Common[24][4].call(null, e, 0),
                          with_let_module =
                            Ppxlib_Common[24][3].call
                             (null,
                              f,
                              function(param){
                               return param
                                       ? ctxt$0
                                       : ec_enter_module_opt(module_expr[2], name$0[1], ctxt$0);
                              }),
                          match$3 =
                            Ppxlib_Common[24][2].call
                             (null,
                              with_let_module,
                              function(ctxt){
                               return caml_call3
                                       (self_4[1][k + 1], self_4, ctxt, module_expr);
                              }),
                          module_expr_errors = match$3[2],
                          module_expr$0 = match$3[1],
                          match$4 = caml_call3(self_4[1][i + 1], self_4, ctxt$0, body),
                          body_errors = match$4[2],
                          body$0 = match$4[1],
                          errors =
                            caml_call4
                             (self_4[1][m + 1],
                              self_4,
                              ctxt$0,
                              cst_Pexp_letmodule,
                              [0,
                               name_errors,
                               [0, module_expr_errors, [0, body_errors, 0]]]),
                          desc_errors$0 = errors,
                          pexp_desc$1 = [24, name$0, module_expr$0, body$0];
                         break a;
                        }
                        var
                         a = caml_call3(self_4[1][F + 1], self_4, ctxt$0, pexp_desc),
                         desc_errors = a[2],
                         pexp_desc$0 = a[1],
                         desc_errors$0 = desc_errors,
                         pexp_desc$1 = pexp_desc$0;
                       }
                       var
                        match =
                          caml_call3(self_4[1][h + 1], self_4, ctxt$0, pexp_loc),
                        loc_errors = match[2],
                        pexp_loc$0 = match[1],
                        b = caml_call1(self_4[1][h + 1], self_4),
                        match$0 =
                          caml_call4
                           (self_4[1][l + 1], self_4, b, ctxt$0, pexp_loc_stack),
                        loc_stack_errors = match$0[2],
                        pexp_loc_stack$0 = match$0[1],
                        match$1 =
                          caml_call3
                           (self_4[1][n + 1], self_4, ctxt$0, pexp_attributes),
                        attributes_errors = match$1[2],
                        pexp_attributes$0 = match$1[1];
                       return [0,
                               [0,
                                pexp_desc$1,
                                pexp_loc$0,
                                pexp_loc_stack$0,
                                pexp_attributes$0],
                               caml_call3
                                (self_4[1][g + 1],
                                 self_4,
                                 ctxt$0,
                                 [0,
                                  [0, cst_pexp_desc, desc_errors$0],
                                  [0,
                                   [0, cst_pexp_loc, loc_errors],
                                   [0,
                                    [0, cst_pexp_loc_stack, loc_stack_errors],
                                    [0, [0, cst_attributes, attributes_errors], 0]]]])];
                      });
            },
            k,
            function(self_4, ctxt, me){
             var
              a = Ppxlib_Attribute[8].call(null, enter_module, 0, me),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              with_module_expr =
                Ppxlib_Common[24][3].call
                 (null,
                  b,
                  function(param){
                   if(! param) return ctxt;
                   var match = param[1], loc = match[2], txt = match[1];
                   return caml_call3
                           (Ppxlib_Expansion_context[1][6], loc, txt, ctxt);
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      with_module_expr,
                      function(ctxt){
                       return caml_call2(caml_call1(N, self_4), ctxt, me);
                      });
            },
            z,
            function(self_4, ctxt, mb){
             var
              a =
                Ppxlib_Attribute[8].call
                 (null, do_not_enter_module_binding, 0, mb),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              with_module_binding =
                Ppxlib_Common[24][3].call
                 (null,
                  b,
                  function(param){
                   return param
                           ? ctxt
                           : ec_enter_module_opt(mb[4], mb[1][1], ctxt);
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      with_module_binding,
                      function(ctxt){
                       return caml_call2(caml_call1(L, self_4), ctxt, mb);
                      });
            },
            y,
            function(self_4, ctxt, md){
             var
              a =
                Ppxlib_Attribute[8].call
                 (null, do_not_enter_module_declaratio, 0, md),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              with_module_declaration =
                Ppxlib_Common[24][3].call
                 (null,
                  b,
                  function(param){
                   return param
                           ? ctxt
                           : ec_enter_module_opt(md[4], md[1][1], ctxt);
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      with_module_declaration,
                      function(ctxt){
                       return caml_call2(caml_call1(M, self_4), ctxt, md);
                      });
            },
            x,
            function(self_4, ctxt, mtd){
             var
              a =
                Ppxlib_Attribute[8].call
                 (null, do_not_enter_module_type_decla, 0, mtd),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              with_module_type_declaration =
                Ppxlib_Common[24][3].call
                 (null,
                  b,
                  function(param){
                   return param
                           ? ctxt
                           : caml_call3
                             (Ppxlib_Expansion_context[1][6], mtd[4], mtd[1][1], ctxt);
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      with_module_type_declaration,
                      function(ctxt){
                       return caml_call2(caml_call1(O, self_4), ctxt, mtd);
                      });
            },
            o,
            function(self_4, ctxt, vd){
             var
              a =
                Ppxlib_Attribute[8].call
                 (null, do_not_enter_value_description, 0, vd),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              with_value_description =
                Ppxlib_Common[24][3].call
                 (null,
                  b,
                  function(param){
                   return param
                           ? ctxt
                           : caml_call3
                             (Ppxlib_Expansion_context[1][7], vd[5], vd[1][1], ctxt);
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      with_value_description,
                      function(ctxt){
                       return caml_call2(caml_call1(Q, self_4), ctxt, vd);
                      });
            },
            q,
            function(self_4, ctxt, vb){
             var
              pvb_loc = vb[5],
              pvb_attributes = vb[4],
              pvb_constraint = vb[3],
              pvb_expr = vb[2],
              pvb_pat = vb[1],
              a =
                Ppxlib_Attribute[8].call
                 (null, do_not_enter_value_binding, 0, vb),
              b = Ppxlib_Common[24][4].call(null, a, 0);
             return Ppxlib_Common[24][2].call
                     (null,
                      b,
                      function(param){
                       if(param)
                        return caml_call2(caml_call1(P, self_4), ctxt, vb);
                       var
                        match =
                          caml_call3
                           (runtime.caml_get_cached_method
                             (var_names_of, 293013072, cache_id),
                            var_names_of,
                            pvb_pat,
                            0);
                       if(match && ! match[2])
                        var
                         var_name = match[1],
                         in_binding_ctxt =
                           caml_call3
                            (Ppxlib_Expansion_context[1][7], pvb_loc, var_name, ctxt);
                       else
                        var in_binding_ctxt = ctxt;
                       var
                        match$0 =
                          caml_call3(self_4[1][t + 1], self_4, ctxt, pvb_pat),
                        pat_errors = match$0[2],
                        pvb_pat$0 = match$0[1],
                        match$1 =
                          caml_call3
                           (self_4[1][i + 1], self_4, in_binding_ctxt, pvb_expr),
                        expr_errors = match$1[2],
                        pvb_expr$0 = match$1[1],
                        match$2 =
                          caml_call3
                           (self_4[1][n + 1], self_4, in_binding_ctxt, pvb_attributes),
                        attributes_errors = match$2[2],
                        pvb_attributes$0 = match$2[1],
                        match$3 =
                          caml_call3(self_4[1][h + 1], self_4, ctxt, pvb_loc),
                        loc_errors = match$3[2],
                        pvb_loc$0 = match$3[1];
                       if(pvb_constraint)
                        var
                         c = pvb_constraint[1],
                         match$4 = caml_call3(self_4[1][p + 1], self_4, ctxt, c),
                         err = match$4[2],
                         v = match$4[1],
                         constraint_errors = err,
                         pvb_constraint$0 = [0, v];
                       else
                        var constraint_errors = 0, pvb_constraint$0 = 0;
                       var
                        errors =
                          caml_call3
                           (self_4[1][g + 1],
                            self_4,
                            ctxt,
                            [0,
                             [0, cst_pvb_pat, pat_errors],
                             [0,
                              [0, cst_pvb_expr, expr_errors],
                              [0,
                               [0, cst_pvb_attributes, attributes_errors],
                               [0,
                                [0, cst_pvb_loc, loc_errors],
                                [0, [0, cst_pvb_constraint, constraint_errors], 0]]]]]);
                       return [0,
                               [0,
                                pvb_pat$0,
                                pvb_expr$0,
                                pvb_constraint$0,
                                pvb_attributes$0,
                                pvb_loc$0],
                               errors];
                      });
            }]);
         return function(d, b){
          var a = caml_call2(CamlinternalOO[24], b, f);
          a[c + 1] = G;
          caml_call1(K, a);
          return caml_call3(CamlinternalOO[26], b, a, f);};
        }),
    n =
      [0,
       cst_tuple,
       cst_string,
       cst_record,
       cst_option,
       cst_list,
       cst_int,
       cst_constr,
       cst_char,
       cst_bool],
    H = [1, 0],
    cst_ghost = "<ghost>",
    cst_txt = "txt",
    cst_desc = "_desc",
    I = [0, cst$2],
    k =
      caml_call2
       (CamlinternalOO[19],
        g,
        function(c){
         var
          a = caml_call2(CamlinternalOO[8], c, b),
          f = a[7],
          g = a[13],
          i = a[19],
          j = a[25],
          k = a[34],
          l = a[35],
          m = a[41],
          o = a[52],
          p = a[54],
          q = a[56],
          r = a[60],
          s = a[61],
          t = a[62],
          u = a[71],
          v = a[84],
          w = a[102],
          x = a[105],
          y = a[109],
          d = caml_call6(CamlinternalOO[18], c, 0, n, h, Ppxlib_ast_Ast[6], 1),
          e = d[51],
          z = d[1];
         caml_call2
          (CamlinternalOO[11],
           c,
           [0,
            t,
            function(self_5){return Ppxlib_Import[10];},
            i,
            function(self_5){return Ppxlib_Import[7];},
            x,
            function(self_5){return Ppxlib_Import[6];},
            w,
            function(self_5){return Ppxlib_Import[9];},
            u,
            function(self_5){return Ppxlib_Import[11];},
            s,
            function(self_5){return Ppxlib_Import[12];},
            r,
            function(self_5){return Ppxlib_Import[13];},
            m,
            function(self_5){return Ppxlib_Import[14];},
            f,
            function(self_5){return Ppxlib_Import[5];},
            l,
            function(self_5){return Ppxlib_Import[17];},
            q,
            function(self_5){return Ppxlib_Import[20];},
            y,
            function(self_5){return Ppxlib_Import[21];},
            k,
            function(self_5, param){return I;},
            j,
            function(self_5, fields){
             var
              fields$0 =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){
                   var a = param[2];
                   if(0 !== a[0] && ! a[1]) return 0;
                   return 1;
                  },
                  fields);
             a:
             if(fields$0 && ! fields$0[2]){
              var match = fields$0[1], sexp = match[2], label = match[1];
              if
               (!
                caml_call2(Ppxlib_Import[99][73], label, cst_txt)
                && ! caml_call2(Ppxlib_Import[99][59], label, cst_desc))
               break a;
              return sexp;
             }
             return [1,
                     caml_call2
                      (Ppxlib_Import[94][55],
                       fields$0,
                       function(param){
                        var sexp = param[2], label = param[1];
                        return [1, [0, [0, label], [0, sexp, 0]]];
                       })];
            },
            v,
            function(self_5, tag, args){
             return args ? [1, [0, [0, tag], args]] : [0, tag];
            },
            g,
            function(self_5, l){return [1, l];},
            p,
            function(self_5, loc){
             if(caml_call2(Ppxlib_Import[73][2], Ppxlib_Location[3], loc))
              return H;
             var fmt = Stdlib_Format[123];
             Ppxlib_Location[9].call(null, fmt, loc);
             if(loc[3]) caml_call2(Stdlib_Format[13], fmt, cst_ghost);
             var string = caml_call1(Stdlib_Format[125], 0);
             return [0, string];
            },
            o,
            function(self_5, id){
             var string = Ppxlib_Longident[6].call(null, id);
             try{var round_trip = Ppxlib_Longident[5].call(null, string);}
             catch(exn$0){
              var exn = caml_wrap_exception(exn$0), tag = exn[1];
              if(tag === Stdlib[6])
               return caml_call1(caml_call1(e, self_5), id);
              throw caml_maybe_attach_backtrace(exn, 0);
             }
             var a = caml_call2(Ppxlib_Longident[1], id, round_trip);
             return caml_call2(Ppxlib_Import[76], a, 0)
                     ? [0, string]
                     : caml_call1(caml_call1(e, self_5), id);
            }]);
         return function(d, b){
          var a = caml_call2(CamlinternalOO[24], b, c);
          caml_call1(z, a);
          return caml_call3(CamlinternalOO[26], b, a, c);};
        }),
    sexp_of = caml_call1(k[1], 0),
    Ppxlib_Ast_traverse =
      [0,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       map_with_path,
       enter_value,
       enter_module,
       do_not_enter_value_binding,
       do_not_enter_value_description,
       do_not_enter_module_binding,
       do_not_enter_module_declaratio,
       do_not_enter_module_type_decla,
       do_not_enter_let_module,
       lift,
       lift_map_with_context,
       map_with_expansion_context_and,
       k,
       sexp_of];
   runtime.caml_register_global
    (51, Ppxlib_Ast_traverse, "Ppxlib__Ast_traverse");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Skip_hash_bang
//# unitInfo: Requires: Stdlib__Lexing
//# shape: Ppxlib__Skip_hash_bang:[F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\0\0\0\0\x01\0\x01\0\x02\0\x01\0\x03\0\xff\xff",
       "\x02\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\xff\xff\xff\xff\x02\0\x05\0\xff\xff\x05\0\xff\xff\xff\xff\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\x04\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x06\0\x01\0\xxff\xff\xff\xff\xff\xff\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x03\0\x05\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x04\0\0\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x03\0\x05\0\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing;
   function update_loc(lexbuf, lines_to_skip){
    var pos = lexbuf[12];
    lexbuf[12] = [0, pos[1], pos[2] + lines_to_skip | 0, pos[4], pos[4]];
    return 0;
   }
   function skip_hash_bang(lexbuf){
    var ocaml_lex_state = 0;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return update_loc(lexbuf, 3);
        case 1:
         return update_loc(lexbuf, 1);
        default: return 0;
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   var Ppxlib_Skip_hash_bang = [0, skip_hash_bang];
   runtime.caml_register_global
    (2, Ppxlib_Skip_hash_bang, "Ppxlib__Skip_hash_bang");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Utils
//# unitInfo: Requires: Astlib, Astlib__Ast_metadata, Astlib__Config, Astlib__Location, CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_traverse, Ppxlib__Common, Ppxlib__Import, Ppxlib__Location, Ppxlib__Skip_hash_bang, Ppxlib_ast__Import, Ppxlib_ast__Versions, Stdlib, Stdlib__Filename, Stdlib__Lexing, Stdlib__Printf, Stdlib__Sys, Stdppx
//# shape: Ppxlib__Utils:[N,F(3),[F(1),F(1)*,N],[F(2),F(3),F(1)*],N,[F(3)],F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "-",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_ppx_driver$1 = "ppx_driver",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_oo_cache_id = runtime.caml_oo_cache_id,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = "",
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    Ppxlib_ast_Versions = global_data.Ppxlib_ast__Versions,
    Astlib = global_data.Astlib,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    Astlib_Ast_metadata = global_data.Astlib__Ast_metadata,
    Stdlib = global_data.Stdlib,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Astlib_Config = global_data.Astlib__Config,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Astlib_Location = global_data.Astlib__Location,
    Ppxlib_Skip_hash_bang = global_data.Ppxlib__Skip_hash_bang,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    a = caml_call1(CamlinternalOO[16], shared),
    f =
      caml_call2
        (CamlinternalOO[8],
         a,
         [0,
          cst_with_constraint,
          cst_virtual_flag,
          cst_variance,
          cst_value_description,
          cst_value_constraint,
          cst_value_binding,
          cst_type_kind,
          cst_type_extension,
          cst_type_exception,
          cst_type_declaration,
          cst_type_constraint,
          cst_toplevel_phrase,
          cst_toplevel_directive,
          cst_structure_item_desc,
          cst_structure_item,
          cst_structure,
          cst_string,
          cst_signature_item_desc,
          cst_signature_item,
          cst_signature,
          cst_row_field_desc,
          cst_row_field,
          cst_rec_flag,
          cst_private_flag,
          cst_position,
          cst_payload,
          cst_pattern_desc,
          cst_pattern,
          cst_package_type,
          cst_override_flag,
          cst_option,
          cst_open_infos,
          cst_open_description,
          cst_open_declaration,
          cst_object_field_desc,
          cst_object_field,
          cst_mutable_flag,
          cst_module_type_desc,
          cst_module_type_declaration,
          cst_module_type,
          cst_module_substitution,
          cst_module_expr_desc,
          cst_module_expr,
          cst_module_declaration,
          cst_module_binding,
          cst_longident_loc,
          cst_longident,
          cst_location_stack,
          cst_location,
          cst_loc,
          cst_list,
          cst_letop,
          cst_label_declaration,
          cst_label,
          cst_int,
          cst_injectivity,
          cst_include_infos,
          cst_include_description,
          cst_include_declaration,
          cst_functor_parameter,
          cst_function_param_desc,
          cst_function_param,
          cst_function_body,
          cst_extension_constructor_kind,
          cst_extension_constructor,
          cst_extension,
          cst_expression_desc,
          cst_expression,
          cst_directive_argument_desc,
          cst_directive_argument,
          cst_direction_flag,
          cst_core_type_desc,
          cst_core_type,
          cst_constructor_declaration,
          cst_constructor_arguments,
          cst_constant,
          cst_closed_flag,
          cst_class_type_field_desc,
          cst_class_type_field,
          cst_class_type_desc,
          cst_class_type_declaration,
          cst_class_type,
          cst_class_structure,
          cst_class_signature,
          cst_class_infos,
          cst_class_field_kind,
          cst_class_field_desc,
          cst_class_field,
          cst_class_expr_desc,
          cst_class_expr,
          cst_class_description,
          cst_class_declaration,
          cst_char,
          cst_cases,
          cst_case,
          cst_bool,
          cst_binding_op,
          cst_attributes,
          cst_attribute,
          cst_array,
          cst_arg_label])
       [99],
    c =
      caml_call6
       (CamlinternalOO[18],
        a,
        0,
        0,
        [0,
         cst_arg_label,
         cst_array,
         cst_attribute,
         cst_attributes,
         cst_binding_op,
         cst_bool,
         cst_case,
         cst_cases,
         cst_char,
         cst_class_declaration,
         cst_class_description,
         cst_class_expr,
         cst_class_expr_desc,
         cst_class_field,
         cst_class_field_desc,
         cst_class_field_kind,
         cst_class_infos,
         cst_class_signature,
         cst_class_structure,
         cst_class_type,
         cst_class_type_declaration,
         cst_class_type_desc,
         cst_class_type_field,
         cst_class_type_field_desc,
         cst_closed_flag,
         cst_constant,
         cst_constructor_arguments,
         cst_constructor_declaration,
         cst_core_type,
         cst_core_type_desc,
         cst_direction_flag,
         cst_directive_argument,
         cst_directive_argument_desc,
         cst_expression,
         cst_expression_desc,
         cst_extension,
         cst_extension_constructor,
         cst_extension_constructor_kind,
         cst_function_body,
         cst_function_param,
         cst_function_param_desc,
         cst_functor_parameter,
         cst_include_declaration,
         cst_include_description,
         cst_include_infos,
         cst_injectivity,
         cst_int,
         cst_label,
         cst_label_declaration,
         cst_letop,
         cst_list,
         cst_loc,
         cst_location,
         cst_location_stack,
         cst_longident,
         cst_longident_loc,
         cst_module_binding,
         cst_module_declaration,
         cst_module_expr,
         cst_module_expr_desc,
         cst_module_substitution,
         cst_module_type,
         cst_module_type_declaration,
         cst_module_type_desc,
         cst_mutable_flag,
         cst_object_field,
         cst_object_field_desc,
         cst_open_declaration,
         cst_open_description,
         cst_open_infos,
         cst_option,
         cst_override_flag,
         cst_package_type,
         cst_pattern,
         cst_pattern_desc,
         cst_payload,
         cst_position,
         cst_private_flag,
         cst_rec_flag,
         cst_row_field,
         cst_row_field_desc,
         cst_signature,
         cst_signature_item,
         cst_signature_item_desc,
         cst_string,
         cst_structure,
         cst_structure_item,
         cst_structure_item_desc,
         cst_toplevel_directive,
         cst_toplevel_phrase,
         cst_type_constraint,
         cst_type_declaration,
         cst_type_exception,
         cst_type_extension,
         cst_type_kind,
         cst_value_binding,
         cst_value_constraint,
         cst_value_description,
         cst_variance,
         cst_virtual_flag,
         cst_with_constraint],
        Ppxlib_Ast_traverse[1],
        1),
    h = c[4],
    g = c[1];
   caml_call3
    (CamlinternalOO[10],
     a,
     f,
     function(self_1, attr){
      var attr$0 = caml_call1(caml_call1(h, self_1), attr), a = attr$0[1][1];
      a:
      {
       b:
       {
        if
         (a !== "doc"
          && a !== "ocaml.doc" && a !== "ocaml.text" && a !== "text")
         break b;
        var e = attr$0[2];
        if(0 === e[0]){
         var b = e[1];
         if(b){
          var f = b[1][1];
          if(0 === f[0]){
           var c = f[1][1];
           if(typeof c !== "number" && 1 === c[0]){
            var d = c[1];
            if(2 === d[0] && ! b[2]){
             var
              attr_loc = attr$0[3],
              loc = d[2],
              text = d[1],
              g = Ppxlib_Location[13].call(null, attr_loc, loc);
             if(caml_call2(Ppxlib_Import[76], g, 0)){var match = [0, text]; break a;}
            }
           }
          }
         }
        }
       }
       var match = 0;
      }
      if(! match) return attr$0;
      var
       txt = match[1],
       loc$0 = Ppxlib_Location[3],
       delim = [0, Ppxlib_Common[25].call(null, txt)],
       expr =
         caml_call2(Ppxlib_Ast_builder[1][118], loc$0, [2, txt, loc$0, delim]),
       i = attr$0[3],
       j = [0, [0, caml_call3(Ppxlib_Ast_builder[1][21], loc$0, expr, 0), 0]];
      return [0, attr$0[1], j, i];
     });
   caml_call1(CamlinternalOO[17], a);
   var d = caml_call2(CamlinternalOO[24], 0, a);
   caml_call1(g, d);
   var
    prettify_odoc_attributes = caml_call3(CamlinternalOO[26], 0, d, a),
    cst_ml = ".ml",
    i = [0, 1],
    cst_mli = ".mli",
    j = [0, 0],
    cst_implementation = "implementation",
    cst_interface = "interface";
   function with_output(fn, binary, f){
    if(fn){
     var fn$0 = fn[1];
     if(fn$0 !== cst$1)
      return caml_call6(Ppxlib_Import[98][2], [0, binary], 0, 0, 0, fn$0, f);
    }
    caml_call2(Stdlib[78], Stdlib[39], binary);
    return caml_call1(f, Stdlib[39]);
   }
   function of_filename(fn){
    return caml_call2(Stdlib_Filename[7], fn, cst_ml)
            ? i
            : caml_call2(Stdlib_Filename[7], fn, cst_mli) ? j : 0;
   }
   function describe(param){
    return param ? cst_implementation : cst_interface;
   }
   var equal = Ppxlib_Import[73][2], Kind = [0, of_filename, describe, equal];
   function map(t, map){
    if(0 === t[0]){
     var x = t[1];
     return [0,
             caml_call2
              (caml_get_cached_method(map, 359375608, cache_id), map, x)];
    }
    var x$0 = t[1];
    return [1,
            caml_call2
             (caml_get_cached_method(map, -951102413, cache_id$0), map, x$0)];
   }
   function map_with_context(t, map, ctx){
    if(0 === t[0]){
     var x = t[1];
     return [0,
             caml_call3
              (caml_get_cached_method(map, 359375608, cache_id$1),
               map,
               ctx,
               x)];
    }
    var x$0 = t[1];
    return [1,
            caml_call3
             (caml_get_cached_method(map, -951102413, cache_id$2),
              map,
              ctx,
              x$0)];
   }
   function kind(param){return 0 === param[0] ? 0 : 1;}
   var
    Intf_or_impl = [0, map, map_with_context, kind],
    b = Ppxlib_ast_Versions[11],
    e = b[1],
    fall_back_input_version = [0, [0, e[2], e[3]], b[2], b[3], b[4], b[5]],
    magic_length = runtime.caml_ml_string_length(Astlib_Config[2]),
    cst_Error_Not_a_binary_ast = "Error: Not a binary ast",
    cst_Error_Unknown_version = "Error: Unknown version ",
    cst_Source_parse_error = "Source parse error:",
    cst_System_error = "System error: ",
    k = [0, 1],
    l = [1, 0],
    cst_ppx_driver = cst_ppx_driver$1,
    cst_ppx_driver$0 = cst_ppx_driver$1;
   function set_input_lexbuf(input_name){
    function set_input_lexbuf(ic){
     var
      source = caml_call1(Ppxlib_Import[91][3], ic),
      lexbuf = caml_call2(Stdlib_Lexing[3], 0, source);
     caml_call1(Astlib_Location[3], [0, lexbuf]);
     return lexbuf;
    }
    try{
     caml_call3(Ppxlib_Import[91][2], k, input_name, set_input_lexbuf);
     return;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[11]) return;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function from_channel(ch, input_kind){
    function handle_non_binary(prefix_read_from_source){
     if(! input_kind) return l;
     var
      input_name = input_kind[2],
      kind = input_kind[1],
      a = Ppxlib_ast_Versions[11],
      c = a[1],
      input_version = [0, [0, c[2], c[3]], a[2], a[3], a[4], a[5]];
     try{
      var
       d = caml_call1(Ppxlib_Import[91][3], ch),
       all_source = caml_call2(Stdlib[28], prefix_read_from_source, d),
       lexbuf = caml_call2(Stdlib_Lexing[3], 0, all_source),
       b = lexbuf[12];
      lexbuf[12] = [0, input_name, b[2], b[3], b[4]];
      caml_call1(Astlib_Location[3], [0, lexbuf]);
      Ppxlib_Skip_hash_bang[1].call(null, lexbuf);
      var
       ast =
         kind
          ? [1, caml_call1(Ppxlib_ast_Import[3][2], lexbuf)]
          : [0, caml_call1(Ppxlib_ast_Import[3][3], lexbuf)],
       e = [0, [0, input_name, input_version, ast]];
      return e;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       match = caml_call1(Ppxlib_Location[14][6], exn);
      if(! match) throw caml_maybe_attach_backtrace(exn, 0);
      var error = match[1];
      return [1, [1, error, input_version]];
     }
    }
    caml_call2(Stdlib[95], ch, 1);
    var
     buf = runtime.caml_create_bytes(magic_length),
     len = caml_call4(Stdlib[84], ch, buf, 0, magic_length),
     s = caml_call3(Ppxlib_Import[85][86], buf, 0, len),
     match =
       caml_call2(Ppxlib_Import[76], len, magic_length) ? [0, s] : [1, s];
    if(0 !== match[0]) return handle_non_binary(s);
    var match$0 = caml_call1(Ppxlib_ast_Versions[14][1], s);
    if(typeof match$0 !== "number"){
     if(0 === match$0[0]){
      var
       Input_version = match$0[1],
       input_name = caml_call1(Stdlib[89], ch),
       ast = caml_call1(Stdlib[89], ch),
       a = Ppxlib_ast_Versions[10],
       c = a[1],
       i = [0, [0, c[2], c[3]], a[2], a[3], a[4], a[5]],
       Input_to_ppxlib =
         caml_call1(caml_call1(Ppxlib_ast_Versions[13], Input_version), i);
      set_input_lexbuf(input_name);
      var ast$0 = [1, caml_call1(Input_to_ppxlib[1], ast)];
      return [0, [0, input_name, Input_version, ast$0]];
     }
     var
      Input_version$0 = match$0[1],
      input_name$0 = caml_call1(Stdlib[89], ch),
      ast$1 = caml_call1(Stdlib[89], ch),
      b = Ppxlib_ast_Versions[10],
      d = b[1],
      j = [0, [0, d[2], d[3]], b[2], b[3], b[4], b[5]],
      Input_to_ppxlib$0 =
        caml_call1(caml_call1(Ppxlib_ast_Versions[13], Input_version$0), j);
     set_input_lexbuf(input_name$0);
     var ast$2 = [0, caml_call1(Input_to_ppxlib$0[2], ast$1)];
     return [0, [0, input_name$0, Input_version$0, ast$2]];
    }
    var
     e = caml_call3(Ppxlib_Import[99][14], Astlib_Config[2], 0, 9),
     f = caml_call3(Ppxlib_Import[99][14], s, 0, 9);
    if(! caml_call2(Ppxlib_Import[99][73], f, e)){
     var
      g = caml_call3(Ppxlib_Import[99][14], Astlib_Config[1], 0, 9),
      h = caml_call3(Ppxlib_Import[99][14], s, 0, 9);
     if(! caml_call2(Ppxlib_Import[99][73], h, g))
      return handle_non_binary(s);
    }
    return [1, [0, s, fall_back_input_version]];
   }
   function read(input_source, input_kind){
    try{
     if(input_source)
      var
       fn = input_source[1],
       a =
         caml_call3
          (Ppxlib_Import[91][2],
           0,
           fn,
           function(a){return from_channel(a, input_kind);});
     else{
      caml_call2(Stdlib[95], Stdlib[38], 1);
      var a = from_channel(Stdlib[38], input_kind);
     }
     return a;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      match = caml_call1(Ppxlib_Location[14][6], exn);
     if(! match) throw caml_maybe_attach_backtrace(exn, 0);
     var error = match[1];
     return [1, [2, error, fall_back_input_version]];
    }
   }
   function write(oc, param, add_ppx_context){
    var
     ast = param[3],
     Input_version = param[2],
     input_name = param[1],
     a = Ppxlib_ast_Versions[10],
     c = a[1],
     Ppxlib_to_input =
       caml_call1
        (caml_call1
          (Ppxlib_ast_Versions[13],
           [0, [0, c[2], c[3]], a[2], a[3], a[4], a[5]]),
         Input_version),
     b = Ppxlib_ast_Versions[11],
     d = b[1],
     Ocaml_to_input =
       caml_call1
        (caml_call1
          (Ppxlib_ast_Versions[13],
           [0, [0, d[2], d[3]], b[2], b[3], b[4], b[5]]),
         Input_version);
    if(0 === ast[0]){
     var sg = ast[1];
     if(add_ppx_context)
      var
       e = caml_call1(Ppxlib_ast_Import[2][8][2], sg),
       f = caml_call1(caml_call1(Astlib_Ast_metadata[3], cst_ppx_driver), e),
       sg$0 = caml_call1(Ocaml_to_input[2], f);
     else
      var sg$0 = caml_call1(Ppxlib_to_input[2], sg);
     caml_call2(Stdlib[66], oc, Input_version[1][2][2]);
     caml_call2(Stdlib[72], oc, input_name);
     return caml_call2(Stdlib[72], oc, sg$0);
    }
    var st = ast[1];
    if(add_ppx_context)
     var
      g = caml_call1(Ppxlib_ast_Import[2][8][1], st),
      h = caml_call1(caml_call1(Astlib_Ast_metadata[1], cst_ppx_driver$0), g),
      st$0 = caml_call1(Ocaml_to_input[1], h);
    else
     var st$0 = caml_call1(Ppxlib_to_input[1], st);
    caml_call2(Stdlib[66], oc, Input_version[1][2][1]);
    caml_call2(Stdlib[72], oc, input_name);
    return caml_call2(Stdlib[72], oc, st$0);
   }
   function read_binary(fn){
    var
     match =
       caml_call3
        (Ppxlib_Import[91][2], 0, fn, function(a){return from_channel(a, 0);});
    if(0 !== match[0]){
     var error = match[1];
     if(typeof error === "number")
      var a = cst_Error_Not_a_binary_ast;
     else
      switch(error[0]){
        case 0:
         var
          s = error[1],
          a = caml_call2(Stdlib[28], cst_Error_Unknown_version, s);
         break;
        case 1:
         var
          loc = error[1],
          b = caml_call1(Ppxlib_Location[14][3], loc),
          a = caml_call2(Stdlib[28], cst_Source_parse_error, b);
         break;
        default:
         var
          loc$0 = error[1],
          c = caml_call1(Ppxlib_Location[14][3], loc$0),
          a = caml_call2(Stdlib[28], cst_System_error, c);
      }
     return [1, a];
    }
    var match$0 = match[1], ast = match$0[3], input_name = match$0[1];
    if(0 === ast[0])
     var signature = ast[1], ast$0 = [0, signature];
    else
     var structure = ast[1], ast$0 = [1, structure];
    return [0, [0, ast$0, input_name]];
   }
   function get_ast(t){return t[1];}
   function get_input_name(t){return t[2];}
   var
    Read_bin = [0, read_binary, get_ast, get_input_name],
    m = [0, [2, 0, [12, 32, [2, 0, [11, " > ", [2, 0, 0]]]]], "%s %s > %s"],
    n = [0, 0];
   function run_preprocessor(pp, input, output){
    var
     a = caml_call1(Stdlib_Filename[21], output),
     b =
       caml_call2(Ppxlib_Import[99][73], input, cst)
        ? cst$0
        : caml_call1(Stdlib_Filename[21], input),
     command = caml_call4(Stdlib_Printf[4], m, pp, b, a),
     c = runtime.caml_sys_system_command(command);
    return caml_call2(Ppxlib_Import[76], c, 0)
            ? n
            : [1, [0, command, fall_back_input_version]];
   }
   var System = [0, run_preprocessor];
   function print_as_compiler_source(ppf, ast){
    var
     a = Ppxlib_ast_Versions[11],
     c = a[1],
     b = Ppxlib_ast_Versions[10],
     d = b[1],
     e = [0, [0, c[2], c[3]], a[2], a[3], a[4], a[5]],
     Ppxlib_to_compiler =
       caml_call1
        (caml_call1
          (Ppxlib_ast_Versions[13],
           [0, [0, d[2], d[3]], b[2], b[3], b[4], b[5]]),
         e);
    if(0 === ast[0]){
     var sg = ast[1], sg$0 = caml_call1(Ppxlib_to_compiler[2], sg);
     return caml_call2(Astlib[1][7], ppf, sg$0);
    }
    var st = ast[1], st$0 = caml_call1(Ppxlib_to_compiler[1], st);
    return caml_call2(Astlib[1][8], ppf, st$0);
   }
   var
    Ppxlib_Utils =
      [0,
       prettify_odoc_attributes,
       with_output,
       Kind,
       Intf_or_impl,
       [0, read, write, Read_bin],
       System,
       print_as_compiler_source];
   runtime.caml_register_global(43, Ppxlib_Utils, "Ppxlib__Utils");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Code_matcher
//# unitInfo: Requires: Astlib, CamlinternalOO, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse, Ppxlib__Attribute, Ppxlib__Import, Ppxlib__Location, Ppxlib_ast__Import, Sexplib0__Sexp, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__Lexing, Stdlib__Printf, Stdlib__Sys
//# shape: Ppxlib__Code_matcher:[N,F(4),N,F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = " &> ",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_deriving_end = "deriving.end",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_oo_cache_id = runtime.caml_oo_cache_id,
    caml_sys_system_command = runtime.caml_sys_system_command,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Stdlib = global_data.Stdlib,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    Astlib = global_data.Astlib,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    f = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    end_marker_sig =
      caml_call4(Ppxlib_Attribute[16][2], cst_deriving_end, 1, f, 0),
    g = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[23]),
    end_marker_str =
      caml_call4(Ppxlib_Attribute[16][2], cst_deriving_end, 0, g, 0),
    a = [0, 0],
    d =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    e =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    h =
      [0,
       [11,
        "ppxlib: [",
        [17, 5, [17, 5, [17, 5, [2, 0, [11, "] attribute missing", 0]]]]]],
       "ppxlib: [@@@@@@%s] attribute missing"],
    cst_ppxlib = "ppxlib",
    i =
      [0,
       [11,
        "patdiff -ascii -alt-old generated -alt-new 'generated->printed->parsed' ",
        [2, 0, [12, 32, [2, 0, [11, cst$0, [2, 0, 0]]]]]],
       "patdiff -ascii -alt-old generated -alt-new 'generated->printed->parsed' %s %s &> %s"],
    cst_no_differences_produced_by = "<no differences produced by diff>",
    j =
      [0,
       [11,
        "diff --label generated --label 'generated->printed->parsed' ",
        [2, 0, [12, 32, [2, 0, [11, cst$0, [2, 0, 0]]]]]],
       "diff --label generated --label 'generated->printed->parsed' %s %s &> %s"],
    k = [0, "src/code_matcher.ml", 115, 64],
    l = [0, [15, [17, 4, 0]], "%a@."],
    m =
      [0,
       [11,
        "ppxlib: the corrected code doesn't round-trip.\nThis is probably a bug in the OCaml printer:\n",
        [2, 0, 0]],
       "ppxlib: the corrected code doesn't round-trip.\nThis is probably a bug in the OCaml printer:\n%s"];
   function Make(M){
    function extract_prefix(pos, l){
     var acc = 0, param = l;
     for(;;){
      if(! param){
       var
        loc = [0, pos, pos, 0],
        b = caml_call1(Ppxlib_Attribute[16][3], M[2]);
       return [1, [0, caml_call3(Ppxlib_Location[14][2], loc, h, b), 0]];
      }
      var l$0 = param[2], x = param[1];
      try{var val = caml_call2(Ppxlib_Attribute[16][4], [0, M[2], 0], x);}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0), tag = exn[1];
       if(tag !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
       var acc$0 = [0, x, acc];
       acc = acc$0;
       param = l$0;
       continue;
      }
      if(0 !== val[0]){var e = val[1]; return [1, e];}
      if(val[1]){
       var a = caml_call1(M[1], x)[1];
       return [0, [0, caml_call1(Ppxlib_Import[94][9], acc), a]];
      }
      var acc$1 = [0, x, acc];
      acc = acc$1;
      param = l$0;
     }
    }
    if(! a[1]){
     var
      b = caml_call1(CamlinternalOO[16], shared),
      c = caml_call2(CamlinternalOO[8], b, d),
      f = c[48],
      g = c[49],
      n =
        caml_call6(CamlinternalOO[18], b, 0, 0, e, Ppxlib_Ast_traverse[1], 0)
         [1];
     caml_call2
      (CamlinternalOO[11],
       b,
       [0,
        g,
        function(self_1, param){return Ppxlib_Location[3];},
        f,
        function(self_1, param){return 0;}]);
     caml_call1(CamlinternalOO[17], b);
     a[1] =
      function(c){
       var a = caml_call2(CamlinternalOO[24], 0, b);
       caml_call2(n, c[2], a);
       return caml_call3(CamlinternalOO[26], 0, a, b);
      };
    }
    var
     remove_loc = caml_call1(a[1], [0, 0, Ppxlib_Ast_traverse[1][3]]),
     M_map = caml_call1(M[3], [0]);
    function remove_loc$0(x){return caml_call2(M_map[1], remove_loc, x);}
    function last(prev$1, param$0){
     var prev = prev$1, param = param$0;
     for(;;){
      if(! param) return prev;
      var l = param[2], prev$0 = param[1];
      prev = prev$0;
      param = l;
     }
    }
    function diff_asts(generated, round_trip){
     function with_temp_file(f){
      var a = caml_call3(Stdlib_Filename[16], 0, cst_ppxlib, cst);
      return caml_call3(Ppxlib_Import[87][1], a, f, runtime.caml_sys_remove);
     }
     return with_temp_file
             (function(fn1){
               return with_temp_file
                       (function(fn2){
                         return with_temp_file
                                 (function(out){
                                   function dump(fn, ast){
                                    return caml_call6
                                            (Ppxlib_Import[98][2],
                                             0,
                                             0,
                                             0,
                                             0,
                                             fn,
                                             function(oc){
                                              var
                                               ppf = caml_call1(Stdlib_Format[114], oc),
                                               a = caml_call1(M[5], ast);
                                              caml_call2(Sexplib0_Sexp[9], ppf, a);
                                              return caml_call2(Stdlib_Format[43], ppf, 0);
                                             });
                                   }
                                   dump(fn1, generated);
                                   dump(fn2, round_trip);
                                   var
                                    b = caml_call1(Stdlib_Filename[21], out),
                                    c = caml_call1(Stdlib_Filename[21], fn2),
                                    d = caml_call1(Stdlib_Filename[21], fn1),
                                    cmd = caml_call4(Stdlib_Printf[4], i, d, c, b),
                                    e = caml_sys_system_command(cmd),
                                    a = caml_call2(Ppxlib_Import[76], e, 1);
                                   if(a)
                                    var ok = a;
                                   else
                                    var
                                     f = caml_call1(Stdlib_Filename[21], out),
                                     g = caml_call1(Stdlib_Filename[21], fn2),
                                     h = caml_call1(Stdlib_Filename[21], fn1),
                                     cmd$0 = caml_call4(Stdlib_Printf[4], j, h, g, f),
                                     k = caml_sys_system_command(cmd$0),
                                     ok = caml_call2(Ppxlib_Import[76], k, 1);
                                   return ok
                                           ? caml_call1(Ppxlib_Import[91][4], out)
                                           : cst_no_differences_produced_by;
                                  });
                        });
              });
    }
    function parse_string(s){
     var a = caml_call2(Stdlib_Lexing[3], 0, s), match = caml_call1(M[4], a);
     if(match && ! match[2]){var x = match[1]; return x;}
     throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
    }
    function round_trip(ast){
     var compiler_ast = caml_call1(M[6], ast);
     return remove_loc$0
             (parse_string
               (caml_call3(Stdlib_Format[147], l, M[7], compiler_ast)));
    }
    function match_loop(end_pos, mismatch_handler, expected$1, source$1){
     var expected = expected$1, source = source$1;
     for(;;){
      if(! expected){
       if(! source) return 0;
       var
        l = source[2],
        x$1 = source[1],
        init = caml_call1(M[1], x$1),
        b = init[3],
        c = last(x$1, l),
        d = caml_call1(M[1], c)[2],
        loc$1 = [0, init[1], d, b];
       return caml_call2(mismatch_handler, loc$1, 0);
      }
      if(! source){
       var loc$0 = [0, end_pos, end_pos, 0];
       return caml_call2(mismatch_handler, loc$0, expected);
      }
      var
       source$0 = source[2],
       y = source[1],
       expected$0 = expected[2],
       x = expected[1],
       loc = caml_call1(M[1], y),
       x$0 = remove_loc$0(x),
       y$0 = remove_loc$0(y);
      if(caml_call2(Ppxlib_Import[73][6], x$0, y$0)){
       var round_trip$0 = round_trip(x$0);
       if(caml_call2(Ppxlib_Import[73][6], x$0, round_trip$0)){
        var a = diff_asts(x$0, round_trip$0);
        caml_call1(Ppxlib_Location[6].call(null, [0, loc], m), a);
       }
       caml_call2(mismatch_handler, loc, [0, x$0, 0]);
       expected = expected$0;
       source = source$0;
      }
      else{expected = expected$0; source = source$0;}
     }
    }
    function do_match(pos, expected, mismatch_handler, source){
     var a = extract_prefix(pos, source);
     return caml_call2
             (Ppxlib_Import[96][5],
              a,
              function(param){
               var end_pos = param[2], source = param[1];
               return match_loop(end_pos, mismatch_handler, expected, source);
              });
    }
    return [0, , , , , , , , , do_match];
   }
   function get_loc(x){return x[2];}
   function Transform(T){
    function apply(o){
     return caml_call1(caml_get_cached_method(o, 832861151, cache_id), o);
    }
    return [0, apply];
   }
   var
    parse = Ppxlib_ast_Import[3][2],
    b = Ppxlib_Ast_traverse[19],
    to_sexp = caml_call1(caml_get_cached_method(b, 832861151, cache_id$0), b),
    to_compiler = Ppxlib_ast_Import[2][8][19],
    pp_compiler = Astlib[1][23],
    Str =
      Make
       ([0,
         get_loc,
         end_marker_str,
         Transform,
         parse,
         to_sexp,
         to_compiler,
         pp_compiler]);
   function get_loc$0(x){return x[2];}
   function Transform$0(T){
    function apply(o){
     return caml_call1(caml_get_cached_method(o, -662996230, cache_id$1), o);
    }
    return [0, apply];
   }
   var
    parse$0 = Ppxlib_ast_Import[3][3],
    c = Ppxlib_Ast_traverse[19],
    to_sexp$0 =
      caml_call1(caml_get_cached_method(c, -662996230, cache_id$2), c),
    to_compiler$0 = Ppxlib_ast_Import[2][8][18],
    pp_compiler$0 = Astlib[1][24],
    Sig =
      Make
       ([0,
         get_loc$0,
         end_marker_sig,
         Transform$0,
         parse$0,
         to_sexp$0,
         to_compiler$0,
         pp_compiler$0]),
    match_structure_res = Str[9];
   function match_structure(pos, expected, mismatch_handler, l){
    var a = match_structure_res(pos, expected, mismatch_handler, l);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   var match_signature_res = Sig[9];
   function match_signature(pos, expected, mismatch_handler, l){
    var a = match_signature_res(pos, expected, mismatch_handler, l);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   var
    Ppxlib_Code_matcher =
      [0,
       match_structure_res,
       match_structure,
       match_signature_res,
       match_signature];
   runtime.caml_register_global
    (29, Ppxlib_Code_matcher, "Ppxlib__Code_matcher");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Extension
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse, Ppxlib__Common, Ppxlib__Expansion_context, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Ppxlib__Name, Stdlib, Stdlib__Printf
//# shape: Ppxlib__Extension:[N,F(4),F(4),F(4),F(4),[F(3),F(3),F(3),F(3)],F(2),N,N,N,[F(4),F(4)],[F(4),F(4),F(4),F(4)],F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Extension_declare_inline_w$1 =
      "Extension.declare_inline_with_path_arg",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field$0 = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type$0 = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field$0 = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type$0 = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression$0 = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_not_expected_her =
      "extension not expected here, Ppxlib.Extension needs updating!",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type$0 = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern$0 = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item$0 = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_extension_ml = "src/extension.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item$0 = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration$0 = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_oo_cache_id = runtime.caml_oo_cache_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ", ",
    f =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration$0,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item$0,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item$0,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern$0,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type$0,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression$0,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type$0,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field$0,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type$0,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field$0,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    g =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field$0,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type$0,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field$0,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type$0,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression$0,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type$0,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern$0,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item$0,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item$0,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration$0,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type$0,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item$0,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern$0,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field$0,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration$0,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression$0,
       cst_class_type$0,
       cst_structure_item$0,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type$0,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field$0],
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Name = global_data.Ppxlib__Name,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Assert_failure = global_data.Assert_failure,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    cache_id$3 = caml_oo_cache_id(),
    cache_id$4 = caml_oo_cache_id(),
    cache_id$5 = caml_oo_cache_id(),
    cache_id$6 = caml_oo_cache_id(),
    cache_id$7 = caml_oo_cache_id(),
    cache_id$8 = caml_oo_cache_id(),
    cache_id$9 = caml_oo_cache_id(),
    cst_class_expression = "class expression",
    cst_class_field = "class field",
    cst_class_type = "class type",
    cst_class_type_field = "class type field",
    cst_core_type = "core type",
    cst_expression = cst_expression$0,
    cst_module_expression = "module expression",
    cst_module_type = "module type",
    cst_pattern = cst_pattern$0,
    cst_signature_item = "signature item",
    cst_structure_item = "structure item",
    cst_type_declaration = "type declaration",
    k = [0, cst_src_extension_ml, 65, 8];
   function desc(param){
    switch(param){
      case 0:
       return cst_class_expression;
      case 1:
       return cst_class_field;
      case 2:
       return cst_class_type;
      case 3:
       return cst_class_type_field;
      case 4:
       return cst_core_type;
      case 5:
       return cst_expression;
      case 6:
       return cst_module_expression;
      case 7:
       return cst_module_type;
      case 8:
       return cst_pattern;
      case 9:
       return cst_signature_item;
      case 10:
       return cst_structure_item;
      default: return cst_type_declaration;
    }
   }
   function eq(a, b){
    switch(a){
      case 0:
       if(! b) return 0; break;
      case 1:
       if(1 === b) return 0; break;
      case 2:
       if(2 === b) return 0; break;
      case 3:
       if(3 === b) return 0; break;
      case 4:
       if(4 === b) return 0; break;
      case 5:
       if(5 === b) return 0; break;
      case 6:
       if(6 === b) return 0; break;
      case 7:
       if(7 === b) return 0; break;
      case 8:
       if(8 === b) return 0; break;
      case 9:
       if(9 === b) return 0; break;
      case 10:
       if(10 === b) return 0; break;
      default: if(11 <= b) return 0;
    }
    if(caml_call2(Ppxlib_Import[73][6], [0, a], [0, b])) return 1;
    throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
   }
   function get_extension(t, type_decl){
    switch(t){
      case 0:
       var match = type_decl[1];
       if(6 === match[0]){
        var a = type_decl[3], e = match[1];
        return [0, [0, e, a]];
       }
       break;
      case 1:
       var match$0 = type_decl[1];
       if(6 === match$0[0]){
        var a$0 = type_decl[3], e$0 = match$0[1];
        return [0, [0, e$0, a$0]];
       }
       break;
      case 2:
       var match$1 = type_decl[1];
       if(3 === match$1[0]){
        var a$1 = type_decl[3], e$1 = match$1[1];
        return [0, [0, e$1, a$1]];
       }
       break;
      case 3:
       var match$2 = type_decl[1];
       if(5 === match$2[0]){
        var a$2 = type_decl[3], e$2 = match$2[1];
        return [0, [0, e$2, a$2]];
       }
       break;
      case 4:
       var match$3 = type_decl[1];
       if(typeof match$3 !== "number" && 11 === match$3[0]){
        var a$3 = type_decl[4], e$3 = match$3[1];
        return [0, [0, e$3, a$3]];
       }
       break;
      case 5:
       var match$4 = type_decl[1];
       if(typeof match$4 !== "number" && 34 === match$4[0]){
        var a$4 = type_decl[4], e$4 = match$4[1];
        return [0, [0, e$4, a$4]];
       }
       break;
      case 6:
       var match$5 = type_decl[1];
       if(7 === match$5[0]){
        var a$5 = type_decl[3], e$5 = match$5[1];
        return [0, [0, e$5, a$5]];
       }
       break;
      case 7:
       var match$6 = type_decl[1];
       if(5 === match$6[0]){
        var a$6 = type_decl[3], e$6 = match$6[1];
        return [0, [0, e$6, a$6]];
       }
       break;
      case 8:
       var match$7 = type_decl[1];
       if(typeof match$7 !== "number" && 15 === match$7[0]){
        var a$7 = type_decl[4], e$7 = match$7[1];
        return [0, [0, e$7, a$7]];
       }
       break;
      case 9:
       var match$8 = type_decl[1];
       if(15 === match$8[0]){
        var a$8 = match$8[2], e$8 = match$8[1];
        return [0, [0, e$8, a$8]];
       }
       break;
      case 10:
       var match$9 = type_decl[1];
       if(14 === match$9[0]){
        var a$9 = match$9[2], e$9 = match$9[1];
        return [0, [0, e$9, a$9]];
       }
       break;
      default:
       var c = type_decl[6];
       if(c){
        var b = c[1][1];
        if(typeof b !== "number" && 11 === b[0]){
         var
          name = b[1][1],
          virtual_payload =
            caml_call3
             (Ppxlib_Ast_builder[1][18], type_decl[8], 1, [0, type_decl, 0]);
         return [0, [0, [0, name, [0, [0, virtual_payload, 0]]], 0]];
        }
       }
       return 0;
    }
    return 0;
   }
   function merge_attributes_res(t, x, attrs){
    switch(t){
      case 0:
       var a = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], a]];
      case 1:
       var b = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], b]];
      case 2:
       var c = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], c]];
      case 3:
       var d = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], d]];
      case 4:
       var e = caml_call2(Ppxlib_Import[100], x[4], attrs);
       return [0, [0, x[1], x[2], x[3], e]];
      case 5:
       var f = caml_call2(Ppxlib_Import[100], x[4], attrs);
       return [0, [0, x[1], x[2], x[3], f]];
      case 6:
       var g = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], g]];
      case 7:
       var h = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], h]];
      case 8:
       var i = caml_call2(Ppxlib_Import[100], x[4], attrs);
       return [0, [0, x[1], x[2], x[3], i]];
      case 9:
       var match = Ppxlib_Common[10].call(null, attrs);
       if(! match) return [0, x];
       var q = match[2], t$0 = match[1];
       return [1, [0, t$0, q]];
      case 10:
       var match$0 = Ppxlib_Common[10].call(null, attrs);
       if(! match$0) return [0, x];
       var q$0 = match$0[2], t$1 = match$0[1];
       return [1, [0, t$1, q$0]];
      default:
       var match$1 = Ppxlib_Common[10].call(null, attrs);
       if(! match$1) return [0, x];
       var q$1 = match$1[2], t$2 = match$1[1];
       return [1, [0, t$2, q$1]];
    }
   }
   function merge_attributes(t, x, attrs){
    var a = merge_attributes_res(t, x, attrs);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   var
    registrar =
      caml_call3
       (Ppxlib_Name[4][1],
        cst_extension,
        cst_src_extension_ml,
        function(param){var ctx = param[1]; return [0, desc(ctx)];}),
    l = [0, 11],
    m = [0, 4],
    n =
      [0,
       [11, "Multiple match for extensions: ", [2, 0, 0]],
       "Multiple match for extensions: %s"],
    o =
      [0,
       [11, "Extension ", [2, 0, [11, " doesn't expect a path argument", 0]]],
       "Extension %s doesn't expect a path argument"],
    p = [0, 0];
   function Make(Callback){
    function declare(with_arg, name, context, pattern, k){
     if(4 === context)
      caml_call3(Ppxlib_Name[4][3], registrar, l, name);
     else if(11 <= context) caml_call3(Ppxlib_Name[4][3], registrar, m, name);
     caml_call4(Ppxlib_Name[4][2], 115569503, registrar, [0, context], name);
     return [0,
             Ppxlib_Name[1][1].call(null, name),
             context,
             [0, pattern, k],
             with_arg];
    }
    function find(ts, ext){
     var
      match = ext[1],
      loc = match[2],
      name = match[1],
      match$0 = Ppxlib_Name[2].call(null, name),
      arg = match$0[2],
      name$0 = match$0[1],
      l =
        caml_call2
         (Ppxlib_Import[94][31],
          function(t){return Ppxlib_Name[1][3].call(null, t[1], name$0);},
          ts);
     if(! l) return p;
     var t = l[1];
     if(l[2]){
      var
       a =
         caml_call2
          (Ppxlib_Import[94][55],
           l,
           function(t){return Ppxlib_Name[1][2].call(null, t[1]);}),
       b = caml_call2(Ppxlib_Import[99][7], cst, a);
      return [1, [0, caml_call3(Ppxlib_Location[14][2], loc, n, b), 0]];
     }
     if(! t[4] && caml_call1(Ppxlib_Import[95][1], arg))
      return [1, [0, caml_call3(Ppxlib_Location[14][2], loc, o, name$0), 0]];
     var
      arg$0 =
        caml_call2
         (Ppxlib_Import[95][3],
          arg,
          function(s){
           var
            shift = runtime.caml_ml_string_length(name$0) + 1 | 0,
            start = loc[1],
            a =
              [0,
               [0, start[1], start[2], start[3], start[4] + shift | 0],
               loc[2],
               loc[3]];
           return [0, Ppxlib_Longident[5].call(null, s), a];
          });
     return [0, [0, [0, t, arg$0]]];
    }
    return [0, declare, find];
   }
   var include = Make([0]), h = include[1], find = include[2], q = [0, 0];
   function declare_with_path_arg(name, ctx, patt, f){return h(1, name, ctx, patt, f);
   }
   function declare(name, ctx, patt, f){
    return h(0, name, ctx, patt, function(param){return f;});
   }
   function convert_res(ts, loc, ext){
    var a = find(ts, ext);
    return caml_call2
            (Ppxlib_Import[96][4],
             a,
             function(r){
              if(! r) return q;
              var
               a = r[1],
               arg = a[2],
               match = a[1][3],
               f = match[2],
               pattern = match[1],
               b = caml_call1(f, arg),
               c =
                 Ppxlib_Ast_pattern[2].call(null, pattern, loc, 0, ext[2], b);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       c,
                       function(payload){return [0, payload];});
             });
   }
   function convert(ts, loc, ext){
    var a = convert_res(ts, loc, ext);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   var
    M = Make([0]),
    cst_Extension_convert = "Extension.convert",
    r = [0, 0],
    s = [0, 0];
   function convert_res$0(ts, ctxt, ext){
    var
     loc = caml_call1(Ppxlib_Expansion_context[2][1], ctxt),
     a = M[2].call(null, ts, ext);
    return caml_call2
            (Ppxlib_Import[96][4],
             a,
             function(found){
              if(! found) return r;
              var
               a = found[1],
               arg = a[2],
               match = a[1][3],
               f = match[2],
               pattern = match[1],
               b = caml_call2(f, ctxt, arg),
               c =
                 Ppxlib_Ast_pattern[2].call(null, pattern, loc, 0, ext[2], b);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       c,
                       function(payload){
                        if(0 !== payload[0])
                         return caml_call1(Stdlib[2], cst_Extension_convert);
                        var x = payload[1];
                        return [0, x];
                       });
             });
   }
   function convert$0(ts, ctxt, ext){
    var a = convert_res$0(ts, ctxt, ext);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   function convert_inline_res(ts, ctxt, ext){
    var
     loc = caml_call1(Ppxlib_Expansion_context[2][1], ctxt),
     a = M[2].call(null, ts, ext);
    return caml_call2
            (Ppxlib_Import[96][4],
             a,
             function(found){
              if(! found) return s;
              var
               a = found[1],
               arg = a[2],
               match = a[1][3],
               f = match[2],
               pattern = match[1],
               b = caml_call2(f, ctxt, arg),
               c =
                 Ppxlib_Ast_pattern[2].call(null, pattern, loc, 0, ext[2], b);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       c,
                       function(payload){
                        if(0 === payload[0]){
                         var x = payload[1];
                         return [0, [0, x, 0]];
                        }
                        var l = payload[1];
                        return [0, l];
                       });
             });
   }
   function convert_inline(ts, ctxt, ext){
    var a = convert_inline_res(ts, ctxt, ext);
    return caml_call2
            (Ppxlib_Import[96][6],
             a,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[14][8], err);
             });
   }
   var
    For_context =
      [0, convert_res$0, convert$0, convert_inline_res, convert_inline],
    t =
      [0,
       [2, 0, [11, ": ", [2, 0, [11, " can't be inlined", 0]]]],
       "%s: %s can't be inlined"],
    u =
      [0,
       [11, "Extension `", [2, 0, [11, "' was not translated", 0]]],
       "Extension `%s' was not translated"];
   function check_context_for_inline(func, ctx){
    switch(ctx){
      case 1:
      case 3:
      case 9:
      case 10:
       return 0;
      default:
       var a = desc(ctx);
       return caml_call4(Stdlib_Printf[10], Stdlib[1], t, func, a);
    }
   }
   function filter_by_context(context, expanders$1){
    var expanders = expanders$1;
    for(;;){
     if(! expanders) return 0;
     var expanders$0 = expanders[2], t = expanders[1][1];
     if(! eq(context, t[2]))
      return [0, t, filter_by_context(context, expanders$0)];
     expanders = expanders$0;
    }
   }
   function unhandled_extension_error(ctx, param){
    var name = param[1];
    if
     (!
      caml_call2(Ppxlib_Name[5][3], 115569503, name[1])
      && ! Ppxlib_Name[7].call(null, name[1]))
     return [0,
             caml_call5(Ppxlib_Name[4][5][1], registrar, [0, ctx], 0, u, name),
             0];
    return 0;
   }
   var
    d = caml_call1(CamlinternalOO[16], shared),
    a = caml_call2(CamlinternalOO[8], d, f),
    v = a[14],
    w = a[18],
    x = a[27],
    y = a[38],
    z = a[42],
    A = a[66],
    B = a[67],
    C = a[72],
    D = a[78],
    E = a[80],
    F = a[87],
    G = a[89],
    b = caml_call6(CamlinternalOO[18], d, 0, 0, g, Ppxlib_Ast_traverse[3], 1),
    I = b[14],
    J = b[16],
    K = b[23],
    L = b[25],
    N = b[31],
    O = b[36],
    P = b[61],
    Q = b[65],
    R = b[76],
    S = b[85],
    T = b[89],
    U =
      [0,
       [11, cst_extension_not_expected_her, 0],
       cst_extension_not_expected_her],
    H = b[1];
   caml_call2
    (CamlinternalOO[11],
     d,
     [0,
      A,
      function(self_1, param, acc){
       var
        name = param[1],
        a = [0, caml_call2(Ppxlib_Location[14][2], name[2], U), 0];
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      C,
      function(self_1, x, acc){
       if(typeof x !== "number" && 11 === x[0]){
        var ext = x[1], a = unhandled_extension_error(4, ext);
        return caml_call2(Ppxlib_Import[100], acc, a);
       }
       return caml_call2(caml_call1(N, self_1), x, acc);
      },
      x,
      function(self_1, x, acc){
       if(typeof x !== "number" && 15 === x[0]){
        var ext = x[1], a = unhandled_extension_error(8, ext);
        return caml_call2(Ppxlib_Import[100], acc, a);
       }
       return caml_call2(caml_call1(R, self_1), x, acc);
      },
      B,
      function(self_1, x, acc){
       if(typeof x !== "number" && 34 === x[0]){
        var ext = x[1], a = unhandled_extension_error(5, ext);
        return caml_call2(Ppxlib_Import[100], acc, a);
       }
       return caml_call2(caml_call1(O, self_1), x, acc);
      },
      E,
      function(self_1, x, acc){
       if(3 !== x[0]) return caml_call2(caml_call1(K, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(2, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      D,
      function(self_1, x, acc){
       if(5 !== x[0]) return caml_call2(caml_call1(L, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(3, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      G,
      function(self_1, x, acc){
       if(6 !== x[0]) return caml_call2(caml_call1(I, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(0, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      F,
      function(self_1, x, acc){
       if(6 !== x[0]) return caml_call2(caml_call1(J, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(1, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      y,
      function(self_1, x, acc){
       if(5 !== x[0]) return caml_call2(caml_call1(Q, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(7, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      w,
      function(self_1, x, acc){
       if(15 !== x[0]) return caml_call2(caml_call1(S, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(9, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      z,
      function(self_1, x, acc){
       if(7 !== x[0]) return caml_call2(caml_call1(P, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(6, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      },
      v,
      function(self_1, x, acc){
       if(14 !== x[0]) return caml_call2(caml_call1(T, self_1), x, acc);
       var ext = x[1], a = unhandled_extension_error(10, ext);
       return caml_call2(Ppxlib_Import[100], acc, a);
      }]);
   caml_call1(CamlinternalOO[17], d);
   var i = caml_call2(CamlinternalOO[24], 0, d);
   caml_call1(H, i);
   var
    collect_unhandled_extension_er = caml_call3(CamlinternalOO[26], 0, i, d);
   function error_list_to_exception(param){
    if(! param) return 0;
    var err = param[1];
    return caml_call1(Ppxlib_Location[14][8], err);
   }
   var
    e = caml_call1(CamlinternalOO[16], shared),
    c = caml_call2(CamlinternalOO[8], e, f),
    V = c[14],
    W = c[18],
    X = c[27],
    Y = c[38],
    Z = c[42],
    _ = c[66],
    $ = c[67],
    aa = c[72],
    ab = c[78],
    ac = c[80],
    ad = c[87],
    ae = c[89],
    ag =
      [0,
       [11, cst_extension_not_expected_her, 0],
       cst_extension_not_expected_her],
    af =
      caml_call6(CamlinternalOO[18], e, 0, 0, g, Ppxlib_Ast_traverse[2], 1)[1];
   caml_call2
    (CamlinternalOO[11],
     e,
     [0,
      _,
      function(self_2, param){
       var name = param[1];
       return Ppxlib_Location[6].call(null, [0, name[2]], ag);
      },
      aa,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, 692169494, cache_id$9),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      X,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, -715681312, cache_id$8),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      $,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, 1037672856, cache_id$7),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      ac,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, 470470447, cache_id$6),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      ab,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, -805179756, cache_id$5),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      ae,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, 961996500, cache_id$4),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      ad,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, 104911645, cache_id$3),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      Y,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, -326032221, cache_id$2),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      W,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, -27659018, cache_id$1),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      Z,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, 165493832, cache_id$0),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      V,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_cached_method
                   (collect_unhandled_extension_er, 90676721, cache_id),
                  collect_unhandled_extension_er,
                  x,
                  0));
      }]);
   caml_call1(CamlinternalOO[17], e);
   var j = caml_call2(CamlinternalOO[24], 0, e);
   caml_call1(af, j);
   var
    check_unused = caml_call3(CamlinternalOO[26], 0, j, e),
    cst_Extension_declare_inline = "Extension.declare_inline",
    cst_Extension_declare_inline_w = cst_Extension_declare_inline_w$1;
   function declare$0(name, context, pattern, k){
    var
     pattern$0 =
       Ppxlib_Ast_pattern[13].call(null, pattern, function(x){return [0, x];});
    return [0,
            M[1].call
             (null,
              0,
              name,
              context,
              pattern$0,
              function(ctxt, param){return caml_call1(k, ctxt);})];
   }
   function declare_inline(name, context, pattern, k){
    check_context_for_inline(cst_Extension_declare_inline, context);
    var
     pattern$0 =
       Ppxlib_Ast_pattern[13].call(null, pattern, function(x){return [1, x];});
    return [0,
            M[1].call
             (null,
              0,
              name,
              context,
              pattern$0,
              function(ctxt, param){return caml_call1(k, ctxt);})];
   }
   function declare_with_path_arg$0(name, context, pattern, k){
    var
     pattern$0 =
       Ppxlib_Ast_pattern[13].call(null, pattern, function(x){return [0, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k)];
   }
   function declare_inline_with_path_arg(name, context, pattern, k){
    check_context_for_inline(cst_Extension_declare_inline_w, context);
    var
     pattern$0 =
       Ppxlib_Ast_pattern[13].call(null, pattern, function(x){return [1, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k)];
   }
   var
    V3 =
      [0,
       declare$0,
       declare_inline,
       declare_with_path_arg$0,
       declare_inline_with_path_arg],
    cst_Extension_declare_inline_w$0 = cst_Extension_declare_inline_w$1;
   function declare$1(name, context, pattern, f){
    return declare$0
            (name,
             context,
             pattern,
             caml_call1(Ppxlib_Expansion_context[2][5], f));
   }
   function declare_inline$0(name, context, pattern, f){
    return declare_inline
            (name,
             context,
             pattern,
             caml_call1(Ppxlib_Expansion_context[2][5], f));
   }
   function declare_with_path_arg$1(name, context, pattern, k){
    var
     k$0 = caml_call1(Ppxlib_Expansion_context[2][5], k),
     pattern$0 =
       Ppxlib_Ast_pattern[13].call(null, pattern, function(x){return [0, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k$0)];
   }
   function declare_inline_with_path_arg$0(name, context, pattern, k){
    var k$0 = caml_call1(Ppxlib_Expansion_context[2][5], k);
    check_context_for_inline(cst_Extension_declare_inline_w$0, context);
    var
     pattern$0 =
       Ppxlib_Ast_pattern[13].call(null, pattern, function(x){return [1, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k$0)];
   }
   function declare_ppx_import(name, expand){
    var
     a = Ppxlib_Ast_pattern[23],
     b =
       Ppxlib_Ast_pattern[24].call
        (null, Ppxlib_Ast_pattern[4], Ppxlib_Ast_pattern[23]),
     c = Ppxlib_Ast_pattern[274].call(null, Ppxlib_Ast_pattern[248])(b),
     d = Ppxlib_Ast_pattern[24].call(null, c, a),
     pattern = Ppxlib_Ast_pattern[240].call(null, d);
    return declare$0(name, 11, pattern, expand);
   }
   var
    V2 = [0, declare$1, declare_inline$0],
    Ppxlib_Extension =
      [0,
       [0,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        eq,
        get_extension,
        merge_attributes,
        merge_attributes_res],
       declare$1,
       declare_with_path_arg$1,
       declare_inline$0,
       declare_inline_with_path_arg$0,
       For_context,
       filter_by_context,
       [0, declare, declare_with_path_arg, convert_res, convert],
       check_unused,
       collect_unhandled_extension_er,
       V2,
       V3,
       check_context_for_inline,
       declare_ppx_import];
   runtime.caml_register_global(48, Ppxlib_Extension, "Ppxlib__Extension");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Context_free
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_traverse, Ppxlib__Attribute, Ppxlib__Code_matcher, Ppxlib__Common, Ppxlib__Expansion_context, Ppxlib__Extension, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Stdlib, Stdlib__Printf
//# shape: Ppxlib__Context_free:[N,N,[N],N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst_A_context_free_rule_delete =
      "A context-free rule deleted or added attribues of a str/sig item",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_context_free_ml = "src/context_free.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$43,
    cst$0 = cst$43,
    cst$1 = cst$43,
    cst$2 = cst$43,
    cst$3 = cst$43,
    cst$4 = cst$43,
    cst$5 = cst$43,
    cst$6 = cst$43,
    cst$7 = cst$43,
    cst$8 = cst$43,
    cst$9 = cst$43,
    cst$10 = cst$43,
    cst$11 = cst$43,
    cst$12 = cst$43,
    cst$13 = cst$43,
    cst$14 = cst$43,
    cst$15 = cst$43,
    cst$16 = cst$43,
    cst$17 = cst$43,
    cst$18 = cst$43,
    cst$19 = cst$43,
    cst$20 = cst$43,
    cst$21 = cst$43,
    cst$22 = cst$43,
    cst$23 = cst$43,
    cst$24 = cst$43,
    cst$25 = cst$43,
    cst$26 = cst$43,
    cst$27 = cst$43,
    cst$28 = cst$43,
    cst$29 = cst$43,
    cst$30 = cst$43,
    cst$31 = cst$43,
    cst$32 = cst$43,
    cst$33 = cst$43,
    cst$34 = cst$43,
    cst$35 = cst$43,
    cst$36 = cst$43,
    cst$37 = cst$43,
    cst$38 = cst$43,
    cst$39 = cst$43,
    cst$40 = cst$43,
    cst$41 = cst$43,
    cst$42 = cst$43,
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_constr,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_unit,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_nativeint,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_record,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_float,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_tuple,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_other,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_int32,
       cst_int64,
       cst_class_field],
    Ppxlib_Extension = global_data.Ppxlib__Extension,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Ppxlib_Code_matcher = global_data.Ppxlib__Code_matcher,
    Assert_failure = global_data.Assert_failure,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Longident = global_data.Ppxlib__Longident;
   function attr_name(param){
    var t = param[1];
    return Ppxlib_Attribute[6].call(null, t[1]);
   }
   function split_normal_and_expect(l){
    return caml_call2
            (Ppxlib_Import[94][38],
             function(param){var t = param[1]; return 1 - t[2];},
             l);
   }
   function attr_name$0(param){
    var t = param[1];
    return Ppxlib_Attribute[6].call(null, t[1]);
   }
   function split_normal_and_expect$0(l){
    return caml_call2
            (Ppxlib_Import[94][38],
             function(param){var t = param[1]; return 1 - t[2];},
             l);
   }
   function attr_name$1(param){
    var t = param[1];
    return caml_call1(Ppxlib_Attribute[16][3], t[1]);
   }
   var Constant_kind = [0];
   function filter(field$0, l$1){
    var l = l$1;
    for(;;){
     if(! l) return 0;
     var l$0 = l[2], match = l[1], x = match[2], field = match[1];
     a:
     {
      switch(field$0){
        case 0:
         if(! field){var match$0 = 0; break a;} break;
        case 1:
         if(1 === field){var match$0 = 0; break a;} break;
        case 2:
         if(2 === field){var match$0 = 0; break a;} break;
        case 3:
         if(3 === field){var match$0 = 0; break a;} break;
        case 4:
         if(4 === field){var match$0 = 0; break a;} break;
        case 5:
         if(5 === field){var match$0 = 0; break a;} break;
        case 6:
         if(6 === field){var match$0 = 0; break a;} break;
        case 7:
         if(7 === field){var match$0 = 0; break a;} break;
        case 8:
         if(8 === field){var match$0 = 0; break a;} break;
        case 9:
         if(9 === field){var match$0 = 0; break a;} break;
        case 10:
         if(10 === field){var match$0 = 0; break a;} break;
        case 11:
         if(11 === field){var match$0 = 0; break a;} break;
        case 12:
         if(12 === field){var match$0 = 0; break a;} break;
        case 13:
         if(13 === field){var match$0 = 0; break a;} break;
        default: if(14 <= field){var match$0 = 0; break a;}
      }
      var match$0 = 1;
     }
     if(! match$0) return [0, x, filter(field$0, l$0)];
     l = l$0;
    }
   }
   function extension(ext){return [0, 0, ext];}
   function special_function(id, f){
    return [0, 1, [0, id, Ppxlib_Longident[5].call(null, id), f]];
   }
   function special_function$0(ident, f){
    return [0, 1, [0, Ppxlib_Longident[6].call(null, ident), ident, f]];
   }
   function constant(kind, suffix, expand){
    return [0, 2, [0, suffix, kind, expand]];
   }
   function attr_str_type_decl(attribute, expand){
    return [0, 3, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_type_decl(attribute, expand){
    return [0, 4, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_module_type_decl(attribute, expand){return [0, 5, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_module_type_decl(attribute, expand){return [0, 6, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_type_ext(attribute, expand){
    return [0, 7, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_type_ext(attribute, expand){
    return [0, 8, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_exception(attribute, expand){
    return [0, 9, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_exception(attribute, expand){
    return [0, 10, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_class_type_decl(attribute, expand){return [0, 11, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_class_type_decl(attribute, expand){return [0, 12, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_type_decl_expect(attribute, expand){return [0, 3, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_type_decl_expect(attribute, expand){return [0, 4, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_module_type_decl_expe(attribute, expand){return [0, 5, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_module_type_decl_expe(attribute, expand){return [0, 6, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_type_ext_expect(attribute, expand){return [0, 7, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_type_ext_expect(attribute, expand){return [0, 8, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_exception_expect(attribute, expand){return [0, 9, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_exception_expect(attribute, expand){return [0, 10, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_class_type_decl_expec(attribute, expand){return [0, 11, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_class_type_decl_expec(attribute, expand){return [0, 12, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_floating_expect_and_e(attribute, expand){return [0, 13, [0, [0, attribute, expand]]];
   }
   function attr_sig_floating_expect_and_e(attribute, expand){return [0, 14, [0, [0, attribute, expand]]];
   }
   var
    nop = [0, function(b, a, param){return 0;}],
    c =
      [0,
       [11,
        "Context_free.V1.map_top_down: ",
        [2, 0, [11, " present twice in list of special functions", 0]]],
       "Context_free.V1.map_top_down: %s present twice in list of special functions"],
    d =
      [0,
       [11, cst_A_context_free_rule_delete, 0],
       cst_A_context_free_rule_delete],
    dummy = 0;
   function replace(t, context, loc, x){
    return caml_call3(t[1], context, loc, x);
   }
   function insert_after(t, context, loc, x){
    if(0 !== x[0] && ! x[1]) return;
    return caml_call3(t[1], context, [0, loc[2], loc[2], loc[3]], x);
   }
   function exn_to_extension(exn){
    var
     error = Ppxlib_Common[23].call(null, exn),
     loc = caml_call1(Ppxlib_Location[14][10], error),
     extension = caml_call1(Ppxlib_Location[14][7], error);
    return [0, extension, loc];
   }
   function exn_to_error_extension(context, original_node, exn){
    var match = exn_to_extension(exn), loc = match[2], extension = match[1];
    switch(context){
      case 0:
       return caml_call2(Ppxlib_Ast_builder[1][158], loc, extension);
      case 1:
       return caml_call2(Ppxlib_Ast_builder[1][150], loc, extension);
      case 2:
       return caml_call2(Ppxlib_Ast_builder[1][144], loc, extension);
      case 3:
       return caml_call2(Ppxlib_Ast_builder[1][137], loc, extension);
      case 4:
       return caml_call2(Ppxlib_Ast_builder[1][124], loc, extension);
      case 5:
       return caml_call2(Ppxlib_Ast_builder[1][86], loc, extension);
      case 6:
       return caml_call2(Ppxlib_Ast_builder[1][69], loc, extension);
      case 7:
       return caml_call2(Ppxlib_Ast_builder[1][62], loc, extension);
      case 8:
       return caml_call2(Ppxlib_Ast_builder[1][42], loc, extension);
      case 9:
       return caml_call3(Ppxlib_Ast_builder[1][22], loc, extension, 0);
      case 10:
       return caml_call3(Ppxlib_Ast_builder[1][7], loc, extension, 0);
      default:
       var
        ptype_manifest =
          [0, caml_call2(Ppxlib_Ast_builder[1][124], loc, extension)];
       return [0,
               original_node[1],
               original_node[2],
               original_node[3],
               original_node[4],
               original_node[5],
               ptype_manifest,
               original_node[7],
               original_node[8]];
    }
   }
   function exn_to_stri(exn){
    var match = exn_to_extension(exn), loc = match[2], extension = match[1];
    return caml_call3(Ppxlib_Ast_builder[1][7], loc, extension, 0);
   }
   function exn_to_sigi(exn){
    var match = exn_to_extension(exn), loc = match[2], extension = match[1];
    return caml_call3(Ppxlib_Ast_builder[1][22], loc, extension, 0);
   }
   function map_node_rec
   (context, ts, super_call, loc, base_ctxt, x, embed_errors){
    var
     ctxt = caml_call3(Ppxlib_Expansion_context[2][6], loc, base_ctxt, 0),
     match = caml_call2(Ppxlib_Extension[1][13], context, x);
    if(! match) return caml_call2(super_call, base_ctxt, x);
    var match$0 = match[1], attrs = match$0[2], ext = match$0[1];
    function b(converted){
     if(! converted) return caml_call2(super_call, base_ctxt, x);
     var
      x$0 = converted[1],
      a = caml_call3(Ppxlib_Extension[1][15], context, x$0, attrs),
      b = Ppxlib_Common[24][4].call(null, a, x$0);
     return Ppxlib_Common[24][2].call
             (null,
              b,
              function(x){
               return map_node_rec
                       (context, ts, super_call, loc, base_ctxt, x, embed_errors);
              });
    }
    try{
     var
      d = Ppxlib_Extension[6][1].call(null, ts, ctxt, ext),
      e = Ppxlib_Common[24][4].call(null, d, 0),
      a = e;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
     var
      c = [0, exn_to_error_extension(context, x, exn)],
      a = Ppxlib_Common[24][1].call(null, c);
    }
    return Ppxlib_Common[24][2].call(null, a, b);
   }
   function map_node
   (context, ts, super_call, loc, base_ctxt, x, hook, embed_errors){
    var
     ctxt = caml_call3(Ppxlib_Expansion_context[2][6], loc, base_ctxt, 0),
     match = caml_call2(Ppxlib_Extension[1][13], context, x);
    if(! match) return caml_call2(super_call, base_ctxt, x);
    var match$0 = match[1], attrs = match$0[2], ext = match$0[1];
    function b(converted){
     if(! converted) return caml_call2(super_call, base_ctxt, x);
     var
      x$0 = converted[1],
      a =
        map_node_rec
         (context,
          ts,
          super_call,
          loc,
          base_ctxt,
          caml_call3(Ppxlib_Extension[1][14], context, x$0, attrs),
          embed_errors);
     return Ppxlib_Common[24][3].call
             (null,
              a,
              function(generated_code){
               replace(hook, context, loc, [0, generated_code]);
               return generated_code;
              });
    }
    try{
     var
      d = Ppxlib_Extension[6][1].call(null, ts, ctxt, ext),
      e = Ppxlib_Common[24][4].call(null, d, 0),
      a = e;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
     var
      c = [0, exn_to_error_extension(context, x, exn)],
      a = Ppxlib_Common[24][1].call(null, c);
    }
    return Ppxlib_Common[24][2].call(null, a, b);
   }
   function map_nodes
   (context,
    ts,
    super_call,
    get_loc,
    base_ctxt,
    l,
    hook,
    embed_errors,
    in_generated_code){
    if(! l) return Ppxlib_Common[24][1].call(null, 0);
    var
     l$0 = l[2],
     x = l[1],
     match = caml_call2(Ppxlib_Extension[1][13], context, x);
    if(! match){
     var f = caml_call2(super_call, base_ctxt, x);
     return Ppxlib_Common[24][2].call
             (null,
              f,
              function(x){
               var
                a =
                  map_nodes
                   (context,
                    ts,
                    super_call,
                    get_loc,
                    base_ctxt,
                    l$0,
                    hook,
                    embed_errors,
                    in_generated_code);
               return Ppxlib_Common[24][3].call
                       (null, a, function(l){return [0, x, l];});
              });
    }
    var
     match$0 = match[1],
     attrs = match$0[2],
     ext = match$0[1],
     extension_point_loc = caml_call1(get_loc, x),
     ctxt =
       caml_call3
        (Ppxlib_Expansion_context[2][6], extension_point_loc, base_ctxt, 0);
    function b(param){
     if(param){
      var
       converted = param[1],
       a = [0, 0, Ppxlib_Common[10].call(null, attrs)];
      return Ppxlib_Common[24][2].call
              (null,
               a,
               function(param){
                var
                 a =
                   map_nodes
                    (context,
                     ts,
                     super_call,
                     get_loc,
                     base_ctxt,
                     converted,
                     hook,
                     embed_errors,
                     1);
                return Ppxlib_Common[24][2].call
                        (null,
                         a,
                         function(generated_code){
                          if(1 - in_generated_code)
                           replace
                            (hook, context, extension_point_loc, [1, generated_code]);
                          var
                           a =
                             map_nodes
                              (context,
                               ts,
                               super_call,
                               get_loc,
                               base_ctxt,
                               l$0,
                               hook,
                               embed_errors,
                               in_generated_code);
                          return Ppxlib_Common[24][3].call
                                  (null,
                                   a,
                                   function(code){
                                    return caml_call2(Ppxlib_Import[100], generated_code, code);
                                   });
                         });
               });
     }
     var b = caml_call2(super_call, base_ctxt, x);
     return Ppxlib_Common[24][2].call
             (null,
              b,
              function(x){
               var
                a =
                  map_nodes
                   (context,
                    ts,
                    super_call,
                    get_loc,
                    base_ctxt,
                    l$0,
                    hook,
                    embed_errors,
                    in_generated_code);
               return Ppxlib_Common[24][3].call
                       (null, a, function(l){return [0, x, l];});
              });
    }
    try{
     var
      d = Ppxlib_Extension[6][3].call(null, ts, ctxt, ext),
      e = Ppxlib_Common[24][4].call(null, d, 0),
      a = e;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
     var
      c = [0, [0, exn_to_error_extension(context, x, exn), 0]],
      a = Ppxlib_Common[24][1].call(null, c);
    }
    return Ppxlib_Common[24][2].call(null, a, b);
   }
   function map_nodes$0(a){
    return function(c){
     function b(b, d, e, f, g, h, i){
      return map_nodes(a, c, b, d, e, f, g, h, i);
     }
     return function(c){
      function a(i, j, k, l, m, n){
       var h = n, g = m, f = l, e = k, d = j, a = i;
       return b(c, a, d, e, f, g, h);
      }
      return function(c){
       function b(h, i, j, k, l){
        var g = l, f = k, e = j, d = i, b = h;
        return a(c, b, d, e, f, g);
       }
       return function(c){
        var a = caml_call1(b, c);
        return function(c){
         var b = caml_call1(a, c);
         return function(c){
          var a = caml_call1(b, c);
          return function(b){return caml_call2(a, b, 0);};};};};};};};
   }
   function table_of_special_functions(special_functions){
    var
     a =
       caml_call2
        (Ppxlib_Import[94][55],
         special_functions,
         function(param){
          var expand = param[3], ident = param[2];
          return [0, ident, expand];
         }),
     b = caml_call1(Ppxlib_Import[94][1], special_functions) * 2 | 0,
     d = [0, caml_call2(Ppxlib_Import[83], 1024, b)],
     match = caml_call1(caml_call1(Ppxlib_Import[90][36], d), a);
    if(0 === match[0]){var table = match[1]; return table;}
    var
     ident = match[1],
     e =
       caml_call2
        (Ppxlib_Import[94][72],
         special_functions,
         function(r){
          return caml_call2(Ppxlib_Import[73][2], r[2], ident) ? [0, r[1]] : 0;
         });
    return caml_call3(Stdlib_Printf[10], Stdlib[1], c, e);
   }
   function get_group(attr, l){
    if(! l) return Ppxlib_Common[24][1].call(null, 0);
    var l$0 = l[2], x = l[1], a = get_group(attr, l$0);
    return Ppxlib_Common[24][2].call
            (null,
             a,
             function(group){
              var
               a = Ppxlib_Attribute[8].call(null, attr, 0, x),
               b = Ppxlib_Common[24][4].call(null, a, 0);
              return Ppxlib_Common[24][3].call
                      (null,
                       b,
                       function(attr2){
                        if(attr2){
                         var value = attr2[1];
                         if(! group)
                          return [0,
                                  [0,
                                   [0, value],
                                   caml_call2
                                    (Ppxlib_Import[94][55], l$0, function(param){return 0;})]];
                         var vals = group[1];
                         return [0, [0, [0, value], vals]];
                        }
                        if(! group) return 0;
                        var vals$0 = group[1];
                        return [0, [0, 0, vals$0]];
                       });
             });
   }
   function rev_concat(l){
    if(! l) return 0;
    var match = l[2], x = l[1];
    if(! match) return x;
    if(match[2]){
     var a = caml_call1(Ppxlib_Import[94][9], l);
     return caml_call1(Ppxlib_Import[94][59], a);
    }
    var y = match[1];
    return caml_call2(Ppxlib_Import[100], y, x);
   }
   function sort_attr_group_inline(l){
    return caml_call2
            (Ppxlib_Import[94][44],
             function(a, b){
              var c = attr_name(b), d = attr_name(a);
              return caml_call2(Ppxlib_Import[99][72], d, c);
             },
             l);
   }
   function sort_attr_inline(l){
    return caml_call2
            (Ppxlib_Import[94][44],
             function(a, b){
              var c = attr_name$0(b), d = attr_name$0(a);
              return caml_call2(Ppxlib_Import[99][72], d, c);
             },
             l);
   }
   function sort_attr_floating_inline(l){
    return caml_call2
            (Ppxlib_Import[94][44],
             function(a, b){
              var c = attr_name$1(b), d = attr_name$1(a);
              return caml_call2(Ppxlib_Import[99][72], d, c);
             },
             l);
   }
   function context_free_attribute_modific(loc){
    return [1, [0, caml_call2(Ppxlib_Location[14][2], loc, d), 0]];
   }
   function handle_attr_group_inline
   (attrs,
    rf,
    items,
    expanded_items,
    loc,
    base_ctxt,
    embed_errors,
    convert_exn){
    var a = Ppxlib_Common[24][1].call(null, 0);
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, param){
              var group = param[1];
              return Ppxlib_Common[24][2].call
                      (null,
                       acc,
                       function(acc){
                        var a = get_group(group[1], items);
                        return Ppxlib_Common[24][2].call
                                (null,
                                 a,
                                 function(g1){
                                  var a = get_group(group[1], expanded_items);
                                  return Ppxlib_Common[24][2].call
                                          (null,
                                           a,
                                           function(g2){
                                            if(g1){
                                             if(g2){
                                              var
                                               values = g1[1],
                                               ctxt =
                                                 caml_call4
                                                  (Ppxlib_Expansion_context[3][7],
                                                   loc,
                                                   group[2],
                                                   base_ctxt,
                                                   0);
                                              try{
                                               var
                                                expect_items =
                                                  caml_call4(group[3], ctxt, rf, expanded_items, values),
                                                a = Ppxlib_Common[24][1].call(null, [0, expect_items, acc]);
                                               return a;
                                              }
                                              catch(exn$0){
                                               var exn = caml_wrap_exception(exn$0);
                                               if(! embed_errors)
                                                throw caml_maybe_attach_backtrace(exn, 0);
                                               var error_item = [0, caml_call1(convert_exn, exn), 0];
                                               return Ppxlib_Common[24][1].call(null, [0, error_item, acc]);
                                              }
                                             }
                                            }
                                            else if(! g2) return Ppxlib_Common[24][1].call(null, acc);
                                            var b = context_free_attribute_modific(loc);
                                            return Ppxlib_Common[24][4].call(null, b, acc);
                                           });
                                 });
                       });
             },
             a,
             attrs);
   }
   function handle_attr_inline
   (attrs, convert_exn, item, expanded_item, loc, base_ctxt, embed_errors){
    var a = Ppxlib_Common[24][1].call(null, 0);
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, param){
              var a = param[1];
              return Ppxlib_Common[24][2].call
                      (null,
                       acc,
                       function(acc){
                        var
                         b = Ppxlib_Attribute[8].call(null, a[1], 0, item),
                         c = Ppxlib_Common[24][4].call(null, b, 0);
                        return Ppxlib_Common[24][2].call
                                (null,
                                 c,
                                 function(g1){
                                  var
                                   b = Ppxlib_Attribute[8].call(null, a[1], 0, expanded_item),
                                   c = Ppxlib_Common[24][4].call(null, b, 0);
                                  return Ppxlib_Common[24][2].call
                                          (null,
                                           c,
                                           function(g2){
                                            if(g1){
                                             if(g2){
                                              var
                                               value = g1[1],
                                               ctxt =
                                                 caml_call4
                                                  (Ppxlib_Expansion_context[3][7], loc, a[2], base_ctxt, 0);
                                              try{
                                               var
                                                expect_items = caml_call3(a[3], ctxt, expanded_item, value),
                                                b = Ppxlib_Common[24][1].call(null, [0, expect_items, acc]);
                                               return b;
                                              }
                                              catch(exn$0){
                                               var exn = caml_wrap_exception(exn$0);
                                               if(! embed_errors)
                                                throw caml_maybe_attach_backtrace(exn, 0);
                                               var error_item = [0, caml_call1(convert_exn, exn), 0];
                                               return Ppxlib_Common[24][1].call(null, [0, error_item, acc]);
                                              }
                                             }
                                            }
                                            else if(! g2) return Ppxlib_Common[24][1].call(null, acc);
                                            var c = context_free_attribute_modific(loc);
                                            return Ppxlib_Common[24][4].call(null, c, acc);
                                           });
                                 });
                       });
             },
             a,
             attrs);
   }
   function handle_attr_floating_inline
   (attrs, item, loc, base_ctxt, embed_errors, convert_exn){
    var a = Ppxlib_Common[24][1].call(null, 0);
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, param){
              var a = param[1];
              return Ppxlib_Common[24][2].call
                      (null,
                       acc,
                       function(acc){
                        var
                         b = caml_call2(Ppxlib_Attribute[16][6], a[1], item),
                         c = Ppxlib_Common[24][4].call(null, b, 0);
                        return Ppxlib_Common[24][2].call
                                (null,
                                 c,
                                 function(param){
                                  if(! param) return Ppxlib_Common[24][1].call(null, acc);
                                  var
                                   value = param[1],
                                   ctxt =
                                     caml_call4
                                      (Ppxlib_Expansion_context[3][7], loc, 1, base_ctxt, 0);
                                  try{
                                   var
                                    expect_items = caml_call2(a[2], ctxt, value),
                                    b = Ppxlib_Common[24][1].call(null, [0, expect_items, acc]);
                                   return b;
                                  }
                                  catch(exn$0){
                                   var exn = caml_wrap_exception(exn$0);
                                   if(! embed_errors)
                                    throw caml_maybe_attach_backtrace(exn, 0);
                                   var error_item = [0, caml_call1(convert_exn, exn), 0];
                                   return Ppxlib_Common[24][1].call(null, [0, error_item, acc]);
                                  }
                                 });
                       });
             },
             a,
             attrs);
   }
   var
    nop$0 = [0, function(b, a, param){return 0;}],
    Expect_mismatch_handler = [0, nop$0],
    a =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constr,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_float,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_int32,
       cst_int64,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_nativeint,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_other,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_record,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_tuple,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_unit,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    b =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       "pexp_apply_without_traversing_function",
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    e = [0, cst_src_context_free_ml, 993, 20],
    f = [0, cst_src_context_free_ml, 862, 20],
    map_top_down =
      caml_call2
       (CamlinternalOO[19],
        shared,
        function(c){
         var
          k = caml_call2(CamlinternalOO[3], c, cst),
          l = caml_call2(CamlinternalOO[3], c, cst$0),
          m = caml_call2(CamlinternalOO[3], c, cst$1),
          t = caml_call2(CamlinternalOO[3], c, cst$2),
          B = caml_call2(CamlinternalOO[3], c, cst$3),
          C = caml_call2(CamlinternalOO[3], c, cst$4),
          u = caml_call2(CamlinternalOO[3], c, cst$5),
          D = caml_call2(CamlinternalOO[3], c, cst$6),
          v = caml_call2(CamlinternalOO[3], c, cst$7),
          E = caml_call2(CamlinternalOO[3], c, cst$8),
          F = caml_call2(CamlinternalOO[3], c, cst$9),
          G = caml_call2(CamlinternalOO[3], c, cst$10),
          H = caml_call2(CamlinternalOO[3], c, cst$11),
          I = caml_call2(CamlinternalOO[3], c, cst$12),
          w = caml_call2(CamlinternalOO[3], c, cst$13),
          x = caml_call2(CamlinternalOO[3], c, cst$14),
          J = caml_call2(CamlinternalOO[3], c, cst$15),
          K = caml_call2(CamlinternalOO[3], c, cst$16),
          L = caml_call2(CamlinternalOO[3], c, cst$17),
          M = caml_call2(CamlinternalOO[3], c, cst$18),
          N = caml_call2(CamlinternalOO[3], c, cst$19),
          O = caml_call2(CamlinternalOO[3], c, cst$20),
          P = caml_call2(CamlinternalOO[3], c, cst$21),
          Q = caml_call2(CamlinternalOO[3], c, cst$22),
          R = caml_call2(CamlinternalOO[3], c, cst$23),
          S = caml_call2(CamlinternalOO[3], c, cst$24),
          T = caml_call2(CamlinternalOO[3], c, cst$25),
          U = caml_call2(CamlinternalOO[3], c, cst$26),
          V = caml_call2(CamlinternalOO[3], c, cst$27),
          W = caml_call2(CamlinternalOO[3], c, cst$28),
          X = caml_call2(CamlinternalOO[3], c, cst$29),
          Y = caml_call2(CamlinternalOO[3], c, cst$30),
          Z = caml_call2(CamlinternalOO[3], c, cst$31),
          _ = caml_call2(CamlinternalOO[3], c, cst$32),
          $ = caml_call2(CamlinternalOO[3], c, cst$33),
          aa = caml_call2(CamlinternalOO[3], c, cst$34),
          ab = caml_call2(CamlinternalOO[3], c, cst$35),
          ac = caml_call2(CamlinternalOO[3], c, cst$36),
          ad = caml_call2(CamlinternalOO[3], c, cst$37),
          g = caml_call2(CamlinternalOO[3], c, cst$38),
          y = caml_call2(CamlinternalOO[3], c, cst$39),
          j = caml_call2(CamlinternalOO[3], c, cst$40),
          h = caml_call2(CamlinternalOO[3], c, cst$41),
          z = caml_call2(CamlinternalOO[3], c, cst$42),
          d = caml_call2(CamlinternalOO[8], c, b),
          o = d[18],
          p = d[22],
          A = d[29],
          ae = d[32],
          n = d[77],
          af = d[82],
          ag = d[108],
          aj = d[11],
          ak = d[17],
          al = d[21],
          am = d[46],
          an = d[49],
          ao = d[55],
          ap = d[89],
          aq = d[92],
          ar = d[93],
          as = d[94],
          at = d[98],
          au = d[100],
          i =
            caml_call6
             (CamlinternalOO[18], c, 0, 0, a, Ppxlib_Ast_traverse[17], 1),
          ah = i[15],
          ai = i[24],
          q = i[36],
          r = i[91],
          s = i[95],
          aw = i[13],
          ax = i[21],
          ay = i[31],
          az = i[64],
          aA = i[67],
          aB = i[81],
          aC = i[101],
          av = i[1];
         caml_call2
          (CamlinternalOO[11],
           c,
           [0,
            ao,
            function(self_1, param, x){
             return Ppxlib_Common[24][1].call(null, x);
            },
            af,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(ay, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][5],
                      self_1[E + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            ae,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(aB, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][9],
                      self_1[I + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            n,
            function(self_1, base_ctxt, e){
             var
              a = Ppxlib_Attribute[8].call(null, Ppxlib_Ast_traverse[7], 0, e),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              with_context =
                Ppxlib_Common[24][2].call
                 (null,
                  b,
                  function(option){
                   if(! option)
                    return Ppxlib_Common[24][1].call(null, [0, base_ctxt, e]);
                   var
                    match = option[1],
                    loc = match[2],
                    txt = match[1],
                    a =
                      Ppxlib_Attribute[14].call
                       (null, 8, [0, [0, Ppxlib_Ast_traverse[7]], 0], e),
                    b = Ppxlib_Common[24][4].call(null, a, e);
                   return Ppxlib_Common[24][3].call
                           (null,
                            b,
                            function(e){
                             return [0,
                                     caml_call3
                                      (Ppxlib_Expansion_context[1][7], loc, txt, base_ctxt),
                                     e];
                            });
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      with_context,
                      function(param){
                       var e = param[2], base_ctxt = param[1], match = e[1];
                       a:
                       {
                        if(typeof match !== "number" && 34 === match[0]){
                         var
                          expanded =
                            caml_call6
                             (self_1[g + 1],
                              Ppxlib_Extension[1][6],
                              self_1[F + 1],
                              function(param, e){
                               return Ppxlib_Common[24][1].call(null, e);
                              },
                              e[2],
                              base_ctxt,
                              e);
                         break a;
                        }
                        var expanded = Ppxlib_Common[24][1].call(null, e);
                       }
                       return Ppxlib_Common[24][2].call
                               (null,
                                expanded,
                                function(e){
                                 function expand_constant(kind, char, text){
                                  var
                                   match =
                                     caml_call2
                                      (Ppxlib_Import[90][33], self_1[B + 1], [0, char, kind]);
                                  if(! match)
                                   return caml_call2(caml_call1(q, self_1), base_ctxt, e);
                                  var expand = match[1], a = caml_call2(expand, e[2], text);
                                  return caml_call3(self_1[1][n + 1], self_1, base_ctxt, a);
                                 }
                                 var match = e[1];
                                 if(typeof match !== "number")
                                  switch(match[0]){
                                    case 0:
                                     var
                                      id = match[1],
                                      match$0 =
                                        caml_call2(Ppxlib_Import[90][33], self_1[t + 1], id[1]);
                                     if(! match$0)
                                      return caml_call2(caml_call1(q, self_1), base_ctxt, e);
                                     var pattern = match$0[1];
                                     try{
                                      var
                                       d = caml_call1(pattern, e),
                                       f = Ppxlib_Common[24][1].call(null, d),
                                       generated_code = f;
                                     }
                                     catch(exn$0){
                                      var exn = caml_wrap_exception(exn$0);
                                      if(! self_1[l + 1])
                                       throw caml_maybe_attach_backtrace(exn, 0);
                                      var
                                       b =
                                         [0, exn_to_error_extension(Ppxlib_Extension[1][6], e, exn)],
                                       generated_code = Ppxlib_Common[24][1].call(null, b);
                                     }
                                     return Ppxlib_Common[24][2].call
                                             (null,
                                              generated_code,
                                              function(expr){
                                               if(! expr)
                                                return caml_call2(caml_call1(q, self_1), base_ctxt, e);
                                               var e$0 = expr[1];
                                               return caml_call3(self_1[1][n + 1], self_1, base_ctxt, e$0);
                                              });
                                    case 1:
                                     var a = match[1];
                                     switch(a[0]){
                                       case 0:
                                        var match$1 = a[2];
                                        if(match$1){
                                         var c = match$1[1], s = a[1];
                                         try{var h = expand_constant(1, c, s); return h;}
                                         catch(exn){
                                          var exn$0 = caml_wrap_exception(exn);
                                          if(! self_1[l + 1])
                                           throw caml_maybe_attach_backtrace(exn$0, 0);
                                          var
                                           g = exn_to_error_extension(Ppxlib_Extension[1][6], e, exn$0);
                                          return Ppxlib_Common[24][1].call(null, g);
                                         }
                                        }
                                        break;
                                       case 3:
                                        var match$2 = a[2];
                                        if(match$2){
                                         var c$0 = match$2[1], s$0 = a[1];
                                         try{var j = expand_constant(0, c$0, s$0); return j;}
                                         catch(exn){
                                          var exn$1 = caml_wrap_exception(exn);
                                          if(! self_1[l + 1])
                                           throw caml_maybe_attach_backtrace(exn$1, 0);
                                          var
                                           i = exn_to_error_extension(Ppxlib_Extension[1][6], e, exn$1);
                                          return Ppxlib_Common[24][1].call(null, i);
                                         }
                                        }
                                        break;
                                     }
                                     break;
                                    case 4:
                                     var func = match[1], match$3 = func[1];
                                     if(typeof match$3 !== "number" && 0 === match$3[0]){
                                      var
                                       args = match[2],
                                       id$0 = match$3[1],
                                       match$4 =
                                         caml_call2(Ppxlib_Import[90][33], self_1[t + 1], id$0[1]);
                                      if(! match$4)
                                       return caml_call5
                                               (self_1[1][A + 1], self_1, base_ctxt, e, func, args);
                                      var pattern$0 = match$4[1];
                                      try{
                                       var
                                        m = caml_call1(pattern$0, e),
                                        o = Ppxlib_Common[24][1].call(null, m),
                                        generated_code$0 = o;
                                      }
                                      catch(exn){
                                       var exn$2 = caml_wrap_exception(exn);
                                       if(! self_1[l + 1])
                                        throw caml_maybe_attach_backtrace(exn$2, 0);
                                       var
                                        k =
                                          [0,
                                           exn_to_error_extension(Ppxlib_Extension[1][6], e, exn$2)],
                                        generated_code$0 = Ppxlib_Common[24][1].call(null, k);
                                      }
                                      return Ppxlib_Common[24][2].call
                                              (null,
                                               generated_code$0,
                                               function(expr){
                                                if(! expr)
                                                 return caml_call5
                                                         (self_1[1][A + 1], self_1, base_ctxt, e, func, args);
                                                var e$0 = expr[1];
                                                return caml_call3(self_1[1][n + 1], self_1, base_ctxt, e$0);
                                               });
                                     }
                                     break;
                                  }
                                 return caml_call2(caml_call1(q, self_1), base_ctxt, e);
                                });
                      });
            },
            A,
            function(self_1, base_ctxt, e, func, args){
             var
              pexp_attributes = e[4],
              pexp_loc_stack = e[3],
              pexp_loc = e[2],
              pexp_attributes$0 = func[4],
              pexp_loc_stack$0 = func[3],
              pexp_loc$0 = func[2],
              pexp_desc = func[1],
              a =
                caml_call3
                 (self_1[1][ag + 1], self_1, base_ctxt, pexp_attributes$0),
              func$0 =
                Ppxlib_Common[24][3].call
                 (null,
                  a,
                  function(pexp_attributes){
                   return [0,
                           pexp_desc,
                           pexp_loc$0,
                           pexp_loc_stack$0,
                           pexp_attributes];
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      func$0,
                      function(func){
                       var
                        a =
                          caml_call2
                           (Ppxlib_Import[94][55],
                            args,
                            function(param){
                             var
                              exp = param[2],
                              lab = param[1],
                              a = caml_call3(self_1[1][n + 1], self_1, base_ctxt, exp);
                             return Ppxlib_Common[24][3].call
                                     (null, a, function(exp){return [0, lab, exp];});
                            }),
                        args$0 = Ppxlib_Common[24][5].call(null, a);
                       return Ppxlib_Common[24][2].call
                               (null,
                                args$0,
                                function(args){
                                 var
                                  a =
                                    caml_call3
                                     (self_1[1][ag + 1], self_1, base_ctxt, pexp_attributes);
                                 return Ppxlib_Common[24][3].call
                                         (null,
                                          a,
                                          function(pexp_attributes){
                                           return [0,
                                                   [4, func, args],
                                                   pexp_loc,
                                                   pexp_loc_stack,
                                                   pexp_attributes];
                                          });
                                });
                      });
            },
            aq,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(ax, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][3],
                      self_1[D + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            ap,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(ai, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][4],
                      self_1[v + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            au,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(aw, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][1],
                      self_1[C + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            at,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(ah, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][2],
                      self_1[u + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            am,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(aA, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][8],
                      self_1[H + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            an,
            function(self_1, base_ctxt, x){
             var
              a = Ppxlib_Attribute[8].call(null, Ppxlib_Ast_traverse[8], 0, x),
              b = Ppxlib_Common[24][4].call(null, a, 0),
              c =
                Ppxlib_Common[24][2].call
                 (null,
                  b,
                  function(param){
                   if(! param)
                    return Ppxlib_Common[24][1].call(null, [0, base_ctxt, x]);
                   var
                    match = param[1],
                    loc = match[2],
                    txt = match[1],
                    a =
                      Ppxlib_Attribute[14].call
                       (null, 23, [0, [0, Ppxlib_Ast_traverse[8]], 0], x),
                    b = Ppxlib_Common[24][4].call(null, a, x);
                   return Ppxlib_Common[24][3].call
                           (null,
                            b,
                            function(x){
                             return [0,
                                     caml_call3
                                      (Ppxlib_Expansion_context[1][6], loc, txt, base_ctxt),
                                     x];
                            });
                  });
             return Ppxlib_Common[24][2].call
                     (null,
                      c,
                      function(param){
                       var
                        x = param[2],
                        base_ctxt = param[1],
                        a = x[2],
                        b = caml_call1(az, self_1);
                       return caml_call6
                               (self_1[g + 1],
                                Ppxlib_Extension[1][7],
                                self_1[G + 1],
                                b,
                                a,
                                base_ctxt,
                                x);
                      });
            },
            ak,
            function(self_1, base_ctxt, x$0){
             var a = x$0[2], b = caml_call1(s, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][11],
                      self_1[x + 1],
                      b,
                      a,
                      base_ctxt,
                      x$0);
            },
            al,
            function(self_1, base_ctxt, x){
             var a = x[2], b = caml_call1(r, self_1);
             return caml_call6
                     (self_1[g + 1],
                      Ppxlib_Extension[1][10],
                      self_1[w + 1],
                      b,
                      a,
                      base_ctxt,
                      x);
            },
            ar,
            function(self_1, base_ctxt, param){
             var
              pcstr_fields = param[2],
              pcstr_self = param[1],
              a = caml_call3(self_1[1][ae + 1], self_1, base_ctxt, pcstr_self);
             return Ppxlib_Common[24][2].call
                     (null,
                      a,
                      function(pcstr_self){
                       var
                        a = caml_call1(ah, self_1),
                        b =
                          caml_call6
                           (self_1[y + 1],
                            Ppxlib_Extension[1][2],
                            self_1[u + 1],
                            a,
                            function(x){return x[2];},
                            base_ctxt,
                            pcstr_fields);
                       return Ppxlib_Common[24][3].call
                               (null,
                                b,
                                function(pcstr_fields){
                                 return [0, pcstr_self, pcstr_fields];
                                });
                      });
            },
            aj,
            function(self_1, base_ctxt, x){
             var a = x[8], b = caml_call1(aC, self_1);
             return caml_call6
                     (self_1[g + 1], 11, self_1[J + 1], b, a, base_ctxt, x);
            },
            as,
            function(self_1, base_ctxt, param){
             var
              pcsig_fields = param[2],
              pcsig_self = param[1],
              a = caml_call3(self_1[1][af + 1], self_1, base_ctxt, pcsig_self);
             return Ppxlib_Common[24][2].call
                     (null,
                      a,
                      function(pcsig_self){
                       var
                        a = caml_call1(ai, self_1),
                        b =
                          caml_call6
                           (self_1[y + 1],
                            Ppxlib_Extension[1][4],
                            self_1[v + 1],
                            a,
                            function(x){return x[2];},
                            base_ctxt,
                            pcsig_fields);
                       return Ppxlib_Common[24][3].call
                               (null,
                                b,
                                function(pcsig_fields){
                                 return [0, pcsig_self, pcsig_fields];
                                });
                      });
            },
            o,
            function(self_1, base_ctxt, st){
             function with_extra_items
             (item, extra_items, expect_items, rest, in_generated_code){
              var a = loop(rev_concat(extra_items), 1);
              return Ppxlib_Common[24][2].call
                      (null,
                       a,
                       function(extra_items){
                        if(1 - in_generated_code)
                         insert_after(self_1[m + 1], 10, item[2], [1, extra_items]);
                        var a = loop(rest, in_generated_code);
                        return Ppxlib_Common[24][2].call
                                (null,
                                 a,
                                 function(rest$0){
                                  function b(param){
                                   return [0,
                                           item,
                                           caml_call2(Ppxlib_Import[100], extra_items, rest$0)];
                                  }
                                  if(expect_items)
                                   var
                                    expected = rev_concat(expect_items),
                                    pos = item[2][2],
                                    c =
                                      caml_call4
                                       (Ppxlib_Code_matcher[1],
                                        pos,
                                        expected,
                                        function(loc, repl){
                                         return caml_call3(self_1[k + 1][1], 0, loc, repl);
                                        },
                                        rest),
                                    a = Ppxlib_Common[24][4].call(null, c, 0);
                                  else
                                   var a = Ppxlib_Common[24][1].call(null, 0);
                                  return Ppxlib_Common[24][3].call(null, a, b);
                                 });
                       });
             }
             function loop(st, in_generated_code){
              if(! st) return Ppxlib_Common[24][1].call(null, 0);
              var rest = st[2], item = st[1], loc = item[2], match = item[1];
              switch(match[0]){
                case 13:
                 var
                  at = match[1],
                  b =
                    caml_call5
                     (self_1[z + 1],
                      self_1[ac + 1],
                      at,
                      loc,
                      base_ctxt,
                      exn_to_stri);
                 return Ppxlib_Common[24][2].call
                         (null,
                          b,
                          function(expect_items_unexpanded){
                           var
                            a = caml_call2(self_1[1][o + 1], self_1, base_ctxt),
                            b =
                              caml_call2
                               (Ppxlib_Import[94][55], expect_items_unexpanded, a),
                            c = Ppxlib_Common[24][5].call(null, b);
                           return Ppxlib_Common[24][2].call
                                   (null,
                                    c,
                                    function(expect_items_expanded){
                                     var expected = rev_concat(expect_items_expanded);
                                     function b(param){
                                      var a = caml_call2(caml_call1(s, self_1), base_ctxt, item);
                                      return Ppxlib_Common[24][2].call
                                              (null,
                                               a,
                                               function(expanded_item){
                                                var a = loop(rest, in_generated_code);
                                                return Ppxlib_Common[24][3].call
                                                        (null,
                                                         a,
                                                         function(expanded_rest){
                                                          return [0, expanded_item, expanded_rest];
                                                         });
                                               });
                                     }
                                     if(expected)
                                      var
                                       c = caml_call1(self_1[k + 1][1], 0),
                                       d =
                                         caml_call4
                                          (Ppxlib_Code_matcher[1], item[2][2], expected, c, rest),
                                       a = Ppxlib_Common[24][4].call(null, d, 0);
                                     else
                                      var a = Ppxlib_Common[24][1].call(null, 0);
                                     return Ppxlib_Common[24][2].call(null, a, b);
                                    });
                          });
                case 14:
                 var
                  attrs = match[2],
                  ext = match[1],
                  extension_point_loc = item[2],
                  ctxt =
                    caml_call3
                     (Ppxlib_Expansion_context[2][6],
                      extension_point_loc,
                      base_ctxt,
                      0),
                  c =
                    Ppxlib_Extension[6][3].call(null, self_1[x + 1], ctxt, ext),
                  d = Ppxlib_Common[24][4].call(null, c, 0);
                 return Ppxlib_Common[24][2].call
                         (null,
                          d,
                          function(param){
                           if(param){
                            var
                             items = param[1],
                             a = [0, 0, Ppxlib_Common[10].call(null, attrs)];
                            return Ppxlib_Common[24][2].call
                                    (null,
                                     a,
                                     function(param){
                                      var a = loop(items, 1);
                                      return Ppxlib_Common[24][2].call
                                              (null,
                                               a,
                                               function(items){
                                                if(1 - in_generated_code)
                                                 replace(self_1[m + 1], 10, item[2], [1, items]);
                                                var a = loop(rest, in_generated_code);
                                                return Ppxlib_Common[24][3].call
                                                        (null,
                                                         a,
                                                         function(rest){
                                                          return caml_call2(Ppxlib_Import[100], items, rest);
                                                         });
                                               });
                                     });
                           }
                           var b = caml_call2(caml_call1(s, self_1), base_ctxt, item);
                           return Ppxlib_Common[24][2].call
                                   (null,
                                    b,
                                    function(item){
                                     var
                                      a = caml_call3(self_1[1][o + 1], self_1, base_ctxt, rest);
                                     return Ppxlib_Common[24][3].call
                                             (null, a, function(rest){return [0, item, rest];});
                                    });
                          });
                default:
                 var a = caml_call2(caml_call1(s, self_1), base_ctxt, item);
                 return Ppxlib_Common[24][2].call
                         (null,
                          a,
                          function(expanded_item){
                           var a = item[1], match = expanded_item[1];
                           switch(a[0]){
                             case 3:
                              if(3 === match[0]){
                               var
                                exp_tds = match[2],
                                exp_rf = match[1],
                                tds = a[2],
                                rf = a[1];
                               if(! caml_call2(Ppxlib_Import[73][3], rf, exp_rf))
                                throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
                               var
                                c =
                                  caml_call7
                                   (self_1[j + 1],
                                    self_1[K + 1],
                                    rf,
                                    tds,
                                    exp_tds,
                                    loc,
                                    base_ctxt,
                                    exn_to_stri);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        c,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call7
                                             (self_1[j + 1],
                                              self_1[L + 1],
                                              rf,
                                              tds,
                                              exp_tds,
                                              loc,
                                              base_ctxt,
                                              exn_to_stri);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 4:
                              if(4 === match[0]){
                               var
                                exp_te = match[1],
                                te = a[1],
                                d =
                                  caml_call6
                                   (self_1[h + 1],
                                    self_1[S + 1],
                                    exn_to_stri,
                                    te,
                                    exp_te,
                                    loc,
                                    base_ctxt);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        d,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call6
                                             (self_1[h + 1],
                                              self_1[T + 1],
                                              exn_to_stri,
                                              te,
                                              exp_te,
                                              loc,
                                              base_ctxt);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 5:
                              if(5 === match[0]){
                               var
                                exp_ec = match[1],
                                ec = a[1],
                                e =
                                  caml_call6
                                   (self_1[h + 1],
                                    self_1[W + 1],
                                    exn_to_stri,
                                    ec,
                                    exp_ec,
                                    loc,
                                    base_ctxt);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        e,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call6
                                             (self_1[h + 1],
                                              self_1[X + 1],
                                              exn_to_stri,
                                              ec,
                                              exp_ec,
                                              loc,
                                              base_ctxt);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 8:
                              if(8 === match[0]){
                               var
                                exp_mtd = match[1],
                                mtd = a[1],
                                g =
                                  caml_call6
                                   (self_1[h + 1],
                                    self_1[O + 1],
                                    exn_to_stri,
                                    mtd,
                                    exp_mtd,
                                    loc,
                                    base_ctxt);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        g,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call6
                                             (self_1[h + 1],
                                              self_1[P + 1],
                                              exn_to_stri,
                                              mtd,
                                              exp_mtd,
                                              loc,
                                              base_ctxt);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 11:
                              if(11 === match[0]){
                               var
                                exp_cds = match[1],
                                cds = a[1],
                                i =
                                  caml_call7
                                   (self_1[j + 1],
                                    self_1[_ + 1],
                                    0,
                                    cds,
                                    exp_cds,
                                    loc,
                                    base_ctxt,
                                    exn_to_stri);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        i,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call7
                                             (self_1[j + 1],
                                              self_1[$ + 1],
                                              0,
                                              cds,
                                              exp_cds,
                                              loc,
                                              base_ctxt,
                                              exn_to_stri);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                           }
                           var
                            b = caml_call3(self_1[1][o + 1], self_1, base_ctxt, rest);
                           return Ppxlib_Common[24][3].call
                                   (null, b, function(rest){return [0, expanded_item, rest];});
                          });
              }
             }
             return loop(st, 0);
            },
            p,
            function(self_1, base_ctxt, sg){
             function with_extra_items
             (item, extra_items, expect_items, rest, in_generated_code){
              var a = loop(rev_concat(extra_items), 1);
              return Ppxlib_Common[24][2].call
                      (null,
                       a,
                       function(extra_items){
                        if(1 - in_generated_code)
                         insert_after(self_1[m + 1], 9, item[2], [1, extra_items]);
                        var a = loop(rest, in_generated_code);
                        return Ppxlib_Common[24][2].call
                                (null,
                                 a,
                                 function(rest$0){
                                  function b(param){
                                   return [0,
                                           item,
                                           caml_call2(Ppxlib_Import[100], extra_items, rest$0)];
                                  }
                                  if(expect_items)
                                   var
                                    expected = rev_concat(expect_items),
                                    pos = item[2][2],
                                    c =
                                      caml_call4
                                       (Ppxlib_Code_matcher[3],
                                        pos,
                                        expected,
                                        function(loc, repl){
                                         return caml_call3(self_1[k + 1][1], 1, loc, repl);
                                        },
                                        rest),
                                    a = Ppxlib_Common[24][4].call(null, c, 0);
                                  else
                                   var a = Ppxlib_Common[24][1].call(null, 0);
                                  return Ppxlib_Common[24][3].call(null, a, b);
                                 });
                       });
             }
             function loop(sg, in_generated_code){
              if(! sg) return Ppxlib_Common[24][1].call(null, 0);
              var rest = sg[2], item = sg[1], loc = item[2], match = item[1];
              switch(match[0]){
                case 14:
                 var
                  at = match[1],
                  b =
                    caml_call5
                     (self_1[z + 1],
                      self_1[ad + 1],
                      at,
                      loc,
                      base_ctxt,
                      exn_to_sigi);
                 return Ppxlib_Common[24][2].call
                         (null,
                          b,
                          function(expect_items_unexpanded){
                           var
                            a = caml_call2(self_1[1][p + 1], self_1, base_ctxt),
                            b =
                              caml_call2
                               (Ppxlib_Import[94][55], expect_items_unexpanded, a),
                            c = Ppxlib_Common[24][5].call(null, b);
                           return Ppxlib_Common[24][2].call
                                   (null,
                                    c,
                                    function(expect_items_expanded){
                                     var expected = rev_concat(expect_items_expanded);
                                     function b(param){
                                      var a = caml_call2(caml_call1(r, self_1), base_ctxt, item);
                                      return Ppxlib_Common[24][2].call
                                              (null,
                                               a,
                                               function(expanded_item){
                                                var a = loop(rest, in_generated_code);
                                                return Ppxlib_Common[24][3].call
                                                        (null,
                                                         a,
                                                         function(expanded_rest){
                                                          return [0, expanded_item, expanded_rest];
                                                         });
                                               });
                                     }
                                     if(expected)
                                      var
                                       c = caml_call1(self_1[k + 1][1], 1),
                                       d =
                                         caml_call4
                                          (Ppxlib_Code_matcher[3], item[2][2], expected, c, rest),
                                       a = Ppxlib_Common[24][4].call(null, d, 0);
                                     else
                                      var a = Ppxlib_Common[24][1].call(null, 0);
                                     return Ppxlib_Common[24][2].call(null, a, b);
                                    });
                          });
                case 15:
                 var
                  attrs = match[2],
                  ext = match[1],
                  extension_point_loc = item[2],
                  ctxt =
                    caml_call3
                     (Ppxlib_Expansion_context[2][6],
                      extension_point_loc,
                      base_ctxt,
                      0),
                  c =
                    Ppxlib_Extension[6][3].call(null, self_1[w + 1], ctxt, ext),
                  d = Ppxlib_Common[24][4].call(null, c, 0);
                 return Ppxlib_Common[24][2].call
                         (null,
                          d,
                          function(param){
                           if(param){
                            var
                             items = param[1],
                             a = [0, 0, Ppxlib_Common[10].call(null, attrs)];
                            return Ppxlib_Common[24][2].call
                                    (null,
                                     a,
                                     function(param){
                                      var a = loop(items, 1);
                                      return Ppxlib_Common[24][2].call
                                              (null,
                                               a,
                                               function(items){
                                                if(1 - in_generated_code)
                                                 replace(self_1[m + 1], 9, item[2], [1, items]);
                                                var a = loop(rest, in_generated_code);
                                                return Ppxlib_Common[24][3].call
                                                        (null,
                                                         a,
                                                         function(rest){
                                                          return caml_call2(Ppxlib_Import[100], items, rest);
                                                         });
                                               });
                                     });
                           }
                           var b = caml_call2(caml_call1(r, self_1), base_ctxt, item);
                           return Ppxlib_Common[24][2].call
                                   (null,
                                    b,
                                    function(item){
                                     var
                                      a = caml_call3(self_1[1][p + 1], self_1, base_ctxt, rest);
                                     return Ppxlib_Common[24][3].call
                                             (null, a, function(rest){return [0, item, rest];});
                                    });
                          });
                default:
                 var a = caml_call2(caml_call1(r, self_1), base_ctxt, item);
                 return Ppxlib_Common[24][2].call
                         (null,
                          a,
                          function(expanded_item){
                           var a = item[1], match = expanded_item[1];
                           switch(a[0]){
                             case 1:
                              if(1 === match[0]){
                               var
                                exp_tds = match[2],
                                exp_rf = match[1],
                                tds = a[2],
                                rf = a[1];
                               if(! caml_call2(Ppxlib_Import[73][3], rf, exp_rf))
                                throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
                               var
                                c =
                                  caml_call7
                                   (self_1[j + 1],
                                    self_1[M + 1],
                                    rf,
                                    tds,
                                    exp_tds,
                                    loc,
                                    base_ctxt,
                                    exn_to_sigi);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        c,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call7
                                             (self_1[j + 1],
                                              self_1[N + 1],
                                              rf,
                                              tds,
                                              exp_tds,
                                              loc,
                                              base_ctxt,
                                              exn_to_sigi);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 3:
                              if(3 === match[0]){
                               var
                                exp_te = match[1],
                                te = a[1],
                                d =
                                  caml_call6
                                   (self_1[h + 1],
                                    self_1[U + 1],
                                    exn_to_sigi,
                                    te,
                                    exp_te,
                                    loc,
                                    base_ctxt);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        d,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call6
                                             (self_1[h + 1],
                                              self_1[V + 1],
                                              exn_to_sigi,
                                              te,
                                              exp_te,
                                              loc,
                                              base_ctxt);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 4:
                              if(4 === match[0]){
                               var
                                exp_ec = match[1],
                                ec = a[1],
                                f =
                                  caml_call6
                                   (self_1[h + 1],
                                    self_1[Y + 1],
                                    exn_to_sigi,
                                    ec,
                                    exp_ec,
                                    loc,
                                    base_ctxt);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        f,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call6
                                             (self_1[h + 1],
                                              self_1[Z + 1],
                                              exn_to_sigi,
                                              ec,
                                              exp_ec,
                                              loc,
                                              base_ctxt);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 8:
                              if(8 === match[0]){
                               var
                                exp_mtd = match[1],
                                mtd = a[1],
                                g =
                                  caml_call6
                                   (self_1[h + 1],
                                    self_1[Q + 1],
                                    exn_to_sigi,
                                    mtd,
                                    exp_mtd,
                                    loc,
                                    base_ctxt);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        g,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call6
                                             (self_1[h + 1],
                                              self_1[R + 1],
                                              exn_to_sigi,
                                              mtd,
                                              exp_mtd,
                                              loc,
                                              base_ctxt);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                             case 13:
                              if(13 === match[0]){
                               var
                                exp_cds = match[1],
                                cds = a[1],
                                i =
                                  caml_call7
                                   (self_1[j + 1],
                                    self_1[aa + 1],
                                    0,
                                    cds,
                                    exp_cds,
                                    loc,
                                    base_ctxt,
                                    exn_to_sigi);
                               return Ppxlib_Common[24][2].call
                                       (null,
                                        i,
                                        function(extra_items){
                                         var
                                          a =
                                            caml_call7
                                             (self_1[j + 1],
                                              self_1[ab + 1],
                                              0,
                                              cds,
                                              exp_cds,
                                              loc,
                                              base_ctxt,
                                              exn_to_sigi);
                                         return Ppxlib_Common[24][2].call
                                                 (null,
                                                  a,
                                                  function(expect_items){
                                                   return with_extra_items
                                                           (expanded_item,
                                                            extra_items,
                                                            expect_items,
                                                            rest,
                                                            in_generated_code);
                                                  });
                                        });
                              }
                              break;
                           }
                           var
                            b = caml_call3(self_1[1][p + 1], self_1, base_ctxt, rest);
                           return Ppxlib_Common[24][3].call
                                   (null, b, function(rest){return [0, expanded_item, rest];});
                          });
              }
             }
             return loop(sg, 0);
            }]);
         return function(env, self, opt){
          if(opt) var sth = opt[1], sth$0 = sth; else var sth$0 = nop$0;
          return function(opt){
           if(opt) var sth = opt[1], hook = sth; else var hook = nop;
           return function(opt){
            if(opt) var sth = opt[1], sth$1 = sth; else var sth$1 = 0;
            return function(rules){
             var
              special_functions = table_of_special_functions(filter(1, rules)),
              b = filter(2, rules),
              d =
                caml_call2
                 (Ppxlib_Import[94][55],
                  b,
                  function(c){return [0, [0, c[1], c[2]], c[3]];}),
              constants = caml_call2(Ppxlib_Import[90][37], 0, d),
              extensions = filter(0, rules),
              class_expr =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][1], extensions),
              class_field =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][2], extensions),
              class_type =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][3], extensions),
              class_type_field =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][4], extensions),
              core_type =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][5], extensions),
              expression =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][6], extensions),
              module_expr =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][7], extensions),
              module_type =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][8], extensions),
              pattern =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][9], extensions),
              signature_item =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][10], extensions),
              structure_item =
                Ppxlib_Extension[7].call
                 (null, Ppxlib_Extension[1][11], extensions),
              ppx_import = Ppxlib_Extension[7].call(null, 11, extensions),
              match =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(3, rules))),
              attr_str_type_decls_expect = match[2],
              attr_str_type_decls = match[1],
              match$0 =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(4, rules))),
              attr_sig_type_decls_expect = match$0[2],
              attr_sig_type_decls = match$0[1],
              match$1 =
                split_normal_and_expect$0(sort_attr_inline(filter(5, rules))),
              attr_str_module_type_decls_exp = match$1[2],
              attr_str_module_type_decls = match$1[1],
              match$2 =
                split_normal_and_expect$0(sort_attr_inline(filter(6, rules))),
              attr_sig_module_type_decls_exp = match$2[2],
              attr_sig_module_type_decls = match$2[1],
              match$3 =
                split_normal_and_expect$0(sort_attr_inline(filter(7, rules))),
              attr_str_type_exts_expect = match$3[2],
              attr_str_type_exts = match$3[1],
              match$4 =
                split_normal_and_expect$0(sort_attr_inline(filter(8, rules))),
              attr_sig_type_exts_expect = match$4[2],
              attr_sig_type_exts = match$4[1],
              match$5 =
                split_normal_and_expect$0(sort_attr_inline(filter(9, rules))),
              attr_str_exceptions_expect = match$5[2],
              attr_str_exceptions = match$5[1],
              match$6 =
                split_normal_and_expect$0(sort_attr_inline(filter(10, rules))),
              attr_sig_exceptions_expect = match$6[2],
              attr_sig_exceptions = match$6[1],
              match$7 =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(11, rules))),
              attr_str_class_decls_expect = match$7[2],
              attr_str_class_decls = match$7[1],
              match$8 =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(12, rules))),
              attr_sig_class_decls_expect = match$8[2],
              attr_sig_class_decls = match$8[1],
              attr_str_floating_expect_and_e =
                sort_attr_floating_inline(filter(13, rules)),
              attr_sig_floating_expect_and_e =
                sort_attr_floating_inline(filter(14, rules));
             function map_node$0(a){
              return function(c){
               function b(b, d, e, f, g, h){
                return map_node(a, c, b, d, e, f, g, h);
               }
               return function(c){
                function a(h, i, j, k, l){
                 var g = l, f = k, e = j, d = i, a = h;
                 return b(c, a, d, e, f, g);
                }
                return function(c){
                 function b(g, h, i, j){
                  var f = j, e = i, d = h, b = g;
                  return a(c, b, d, e, f);
                 }
                 return function(c){
                  var a = caml_call1(b, c);
                  return function(b){return caml_call3(a, b, hook, sth$1);};};};};};
             }
             function map_nodes(b){
              var a = map_nodes$0(b);
              return function(c){
               var b = a(c);
               return function(c){
                var a = b(c);
                return function(c){
                 var b = a(c);
                 return function(c){
                  var a = b(c);
                  return function(b){return caml_call2(a(b), hook, sth$1);};};};};};
             }
             function handle_attr_group_inline$0(a){
              return function(c){
               function b(b, d, e, f, g, h){
                return handle_attr_group_inline(a, c, b, d, e, f, g, h);
               }
               return function(c){
                function a(h, i, j, k, l){
                 var g = l, f = k, e = j, d = i, a = h;
                 return b(c, a, d, e, f, g);
                }
                return function(c){
                 function b(g, h, i, j){
                  var f = j, e = i, d = h, b = g;
                  return a(c, b, d, e, f);
                 }
                 return function(c){
                  var a = caml_call1(b, c);
                  return function(b){return caml_call2(a, b, sth$1);};};};};};
             }
             function handle_attr_inline$0(a){
              return function(c){
               function b(b, d, e, f, g){
                return handle_attr_inline(a, c, b, d, e, f, g);
               }
               return function(c){
                function a(g, h, i, j){
                 var f = j, e = i, d = h, a = g;
                 return b(c, a, d, e, f);
                }
                return function(c){
                 function b(f, g, h){
                  var e = h, d = g, b = f;
                  return a(c, b, d, e);
                 }
                 return function(c){
                  var a = caml_call1(b, c);
                  return function(b){return caml_call2(a, b, sth$1);};};};};};
             }
             var a = caml_call2(CamlinternalOO[24], self, c);
             a[z + 1] =
              function(a){
               return function(c){
                function b(b, d, e, f){
                 return handle_attr_floating_inline(a, c, b, d, e, f);
                }
                return function(c){
                 function a(f, g, h){
                  var e = h, d = g, a = f;
                  return b(c, a, d, e);
                 }
                 return function(b){
                  return function(d){var c = d; return a(b, sth$1, c);};};};};
              };
             a[h + 1] = handle_attr_inline$0;
             a[j + 1] = handle_attr_group_inline$0;
             a[y + 1] = map_nodes;
             a[g + 1] = map_node$0;
             a[ad + 1] = attr_sig_floating_expect_and_e;
             a[ac + 1] = attr_str_floating_expect_and_e;
             a[aa + 1] = attr_sig_class_decls;
             a[ab + 1] = attr_sig_class_decls_expect;
             a[_ + 1] = attr_str_class_decls;
             a[$ + 1] = attr_str_class_decls_expect;
             a[Y + 1] = attr_sig_exceptions;
             a[Z + 1] = attr_sig_exceptions_expect;
             a[W + 1] = attr_str_exceptions;
             a[X + 1] = attr_str_exceptions_expect;
             a[U + 1] = attr_sig_type_exts;
             a[V + 1] = attr_sig_type_exts_expect;
             a[S + 1] = attr_str_type_exts;
             a[T + 1] = attr_str_type_exts_expect;
             a[Q + 1] = attr_sig_module_type_decls;
             a[R + 1] = attr_sig_module_type_decls_exp;
             a[O + 1] = attr_str_module_type_decls;
             a[P + 1] = attr_str_module_type_decls_exp;
             a[M + 1] = attr_sig_type_decls;
             a[N + 1] = attr_sig_type_decls_expect;
             a[K + 1] = attr_str_type_decls;
             a[L + 1] = attr_str_type_decls_expect;
             a[C + 1] = class_expr;
             a[u + 1] = class_field;
             a[D + 1] = class_type;
             a[v + 1] = class_type_field;
             a[E + 1] = core_type;
             a[F + 1] = expression;
             a[G + 1] = module_expr;
             a[H + 1] = module_type;
             a[I + 1] = pattern;
             a[w + 1] = signature_item;
             a[x + 1] = structure_item;
             a[J + 1] = ppx_import;
             a[B + 1] = constants;
             a[t + 1] = special_functions;
             a[m + 1] = hook;
             a[l + 1] = sth$1;
             a[k + 1] = sth$0;
             caml_call1(av, a);
             return caml_call3(CamlinternalOO[26], self, a, c);};};};};
        }),
    Ppxlib_Context_free =
      [0,
       [0,
        extension,
        special_function,
        special_function$0,
        Constant_kind,
        constant,
        attr_str_type_decl,
        attr_sig_type_decl,
        attr_str_type_decl_expect,
        attr_sig_type_decl_expect,
        attr_str_module_type_decl,
        attr_sig_module_type_decl,
        attr_str_module_type_decl_expe,
        attr_sig_module_type_decl_expe,
        attr_str_type_ext,
        attr_sig_type_ext,
        attr_str_type_ext_expect,
        attr_sig_type_ext_expect,
        attr_str_exception,
        attr_sig_exception,
        attr_str_exception_expect,
        attr_sig_exception_expect,
        attr_str_class_type_decl,
        attr_sig_class_type_decl,
        attr_str_class_type_decl_expec,
        attr_sig_class_type_decl_expec,
        attr_str_floating_expect_and_e,
        attr_sig_floating_expect_and_e],
       [0, nop],
       Expect_mismatch_handler,
       map_top_down];
   runtime.caml_register_global
    (65, Ppxlib_Context_free, "Ppxlib__Context_free");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Reconcile
//# unitInfo: Requires: Astlib, Astlib__Pprintast, Ppxlib__Import, Ppxlib__Location, Ppxlib__Utils, Ppxlib_ast__Versions, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__Printf, Stdlib__Sys
//# shape: Ppxlib__Reconcile:[N,N,F(9)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst$4 = "# ",
    cst_a = "%a",
    cst_s = "%s\n",
    cst_Ppxlib_Reconcile_Cannot_pr =
      "Ppxlib.Reconcile: Cannot print this AST fragment using the compiler printers with OCaml < 4.14",
    cst_ppxlib_driver_locations_of =
      "ppxlib_driver: locations of generated code are overlapping, cannot reconcile",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$5,
    cst$1 = " > ",
    cst$2 = cst$5,
    cst = "\n",
    cst$0 = cst$5,
    generated_code_begin =
      "(* -----{ GENERATED CODE BEGIN }------------------------------------- *)",
    generated_code_end =
      "(* -----{ GENERATED CODE END   }------------------------------------- *)",
    Astlib = global_data.Astlib,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppxlib_Utils = global_data.Ppxlib__Utils,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_ast_Versions = global_data.Ppxlib_ast__Versions,
    Astlib_Pprintast = global_data.Astlib__Pprintast,
    a = [0, [12, 40, [15, [12, 41, 0]]], "(%a)"],
    b = [0, [15, 0], cst_a],
    c = [0, [15, 0], cst_a],
    d =
      [0,
       [11,
        "ppxlib_driver: the rewriting contains parts from another file.\nIt is too complicated to reconcile it with the source: ",
        [2, 0, [11, " or ", [2, 0, [11, " and ", [2, 0, 0]]]]]],
       "ppxlib_driver: the rewriting contains parts from another file.\nIt is too complicated to reconcile it with the source: %s or %s and %s"],
    e = [0, "src/reconcile.ml", 164, 8],
    f =
      [0,
       [11, cst_ppxlib_driver_locations_of, 0],
       cst_ppxlib_driver_locations_of],
    cst_ml = ".ml",
    cst_ppxlib_driver = "ppxlib_driver",
    g = [0, [2, 0, [12, 32, [2, 0, [2, 0, 0]]]], "%s %s%s"],
    h =
      [0,
       [11,
        "command exited with code ",
        [4, 0, 0, 0, [11, ": ", [2, 0, [12, 10, 0]]]]],
       "command exited with code %d: %s\n"],
    cst_mli = ".mli",
    i =
      [0,
       [11, cst$4, [4, 0, 0, 0, [12, 32, [3, 0, [12, 10, [2, [1, 1], 0]]]]]],
       "# %d %S\n%*s"],
    j =
      [0,
       [11, cst_Ppxlib_Reconcile_Cannot_pr, 0],
       cst_Ppxlib_Reconcile_Cannot_pr],
    k = [0, [2, 0, [12, 10, 0]], cst_s],
    l =
      [0,
       [11, cst$4, [4, 0, 0, 0, [12, 32, [3, 0, [12, 10, 0]]]]],
       "# %d %S\n"],
    m = [0, [2, 0, [12, 10, 0]], cst_s],
    n = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_stdout = "<stdout>";
   function paren(pp, ppf, x){
    return caml_call4(Stdlib_Format[143], ppf, a, pp, x);
   }
   function make(context, start, stop, repl, param){return [0, start, stop, [0, context, repl]];
   }
   function make_text(start, stop, repl, param){return [0, start, stop, [1, repl]];
   }
   function text(use_compiler_pprint, block){
    var match = block[3];
    if(0 !== match[0]){var s$0 = match[1]; return s$0;}
    var generated = match[2], context = match[1];
    if(use_compiler_pprint)
     var
      printer =
        function(ppf, a){
         var
          b = Ppxlib_ast_Versions[11],
          d = b[1],
          c = Ppxlib_ast_Versions[10],
          e = c[1],
          f = [0, [0, d[2], d[3]], b[2], b[3], b[4], b[5]],
          Ppxlib_to_compiler =
            caml_call1
             (caml_call1
               (Ppxlib_ast_Versions[13],
                [0, [0, e[2], e[3]], c[2], c[3], c[4], c[5]]),
              f);
         if(0 === context[0])
          switch(context[1]){
            case 0:
             var g = caml_call1(Ppxlib_to_compiler[11], a);
             return caml_call2(Astlib[1][15], ppf, g);
            case 1:
             var h = caml_call1(Ppxlib_to_compiler[12], a);
             return caml_call2(Astlib[1][13], ppf, h);
            case 2:
             var i = caml_call1(Ppxlib_to_compiler[13], a);
             return caml_call2(Astlib[1][16], ppf, i);
            case 3:
             var j = caml_call1(Ppxlib_to_compiler[15], a);
             return caml_call2(Astlib[1][14], ppf, j);
            case 4:
             var k = caml_call1(Ppxlib_to_compiler[4], a);
             return paren(Astlib[1][6], ppf, k);
            case 5:
             var l = caml_call1(Ppxlib_to_compiler[5], a);
             return paren(Astlib[1][3], ppf, l);
            case 6:
             var m = caml_call1(Ppxlib_to_compiler[16], a);
             return caml_call2(Astlib[1][10], ppf, m);
            case 7:
             var n = caml_call1(Ppxlib_to_compiler[17], a);
             return caml_call2(Astlib[1][17], ppf, n);
            case 8:
             var o = caml_call1(Ppxlib_to_compiler[6], a);
             return paren(Astlib[1][5], ppf, o);
            case 9:
             var p = caml_call1(Ppxlib_to_compiler[18], a);
             return caml_call2(Astlib[1][24], ppf, p);
            case 10:
             var q = caml_call1(Ppxlib_to_compiler[19], a);
             return caml_call2(Astlib[1][23], ppf, q);
            default:
             var
              stri_a = [0, [3, 1, [0, a, 0]], Ppxlib_Location[3]],
              r = caml_call1(Ppxlib_to_compiler[19], stri_a);
             return caml_call2(Astlib[1][23], ppf, r);
          }
         switch(context[1]){
           case 0:
            var s = caml_call1(Ppxlib_to_compiler[19], a);
            return caml_call2(Astlib[1][23], ppf, s);
           case 1:
            var t = caml_call1(Ppxlib_to_compiler[18], a);
            return caml_call2(Astlib[1][24], ppf, t);
           case 2:
            var u = caml_call1(Ppxlib_to_compiler[12], a);
            return caml_call2(Astlib[1][13], ppf, u);
           default:
            var v = caml_call1(Ppxlib_to_compiler[15], a);
            return caml_call2(Astlib[1][14], ppf, v);
         }
        };
    else if(0 === context[0])
     switch(context[1]){
       case 0:
        var printer = Astlib_Pprintast[13]; break;
       case 1:
        var printer = Astlib_Pprintast[14]; break;
       case 2:
        var printer = Astlib_Pprintast[15]; break;
       case 3:
        var printer = Astlib_Pprintast[17]; break;
       case 4:
        var
         a = Astlib_Pprintast[5],
         printer = function(b, c){return paren(a, b, c);};
        break;
       case 5:
        var
         d = Astlib_Pprintast[2],
         printer = function(a, b){return paren(d, a, b);};
        break;
       case 6:
        var printer = Astlib_Pprintast[18]; break;
       case 7:
        var printer = Astlib_Pprintast[19]; break;
       case 8:
        var
         e = Astlib_Pprintast[6],
         printer = function(a, b){return paren(e, a, b);};
        break;
       case 9:
        var printer = Astlib_Pprintast[20]; break;
       case 10:
        var printer = Astlib_Pprintast[21]; break;
       default: var printer = Astlib_Pprintast[22];
     }
    else
     switch(context[1]){
       case 0:
        var printer = Astlib_Pprintast[21]; break;
       case 1:
        var printer = Astlib_Pprintast[20]; break;
       case 2:
        var printer = Astlib_Pprintast[14]; break;
       default: var printer = Astlib_Pprintast[17];
     }
    if(0 === generated[0])
     var x = generated[1], s = caml_call3(Stdlib_Format[147], b, printer, x);
    else
     var
      l = generated[1],
      s =
        caml_call3
         (Stdlib_Format[147],
          c,
          function(ppf, l){
           return caml_call2
                   (Ppxlib_Import[94][77],
                    l,
                    function(x){
                     caml_call2(printer, ppf, x);
                     return caml_call2(Stdlib_Format[45], ppf, 0);
                    });
          },
          l);
    function loop(s, pos){
     if(caml_call2(Ppxlib_Import[81], pos, caml_ml_string_length(s)))
      return 0;
     var match = caml_call3(Ppxlib_Import[99][64], s, pos, 10);
     if(match)
      var i = match[1], idx = i;
     else
      var idx = caml_ml_string_length(s);
     var
      len$0 = idx - pos | 0,
      len = [0, len$0],
      c = [0, cst, loop(s, idx + 1 | 0)];
     for(;;){
      if(caml_call2(Ppxlib_Import[78], len[1], 0)){
       var a = caml_string_get(s, (pos + len[1] | 0) - 1 | 0) - 9 | 0;
       a:
       {
        b:
        {
         if(4 < a >>> 0){
          if(23 !== a) break b;
         }
         else if(2 >= a - 1 >>> 0) break b;
         var b = 1;
         break a;
        }
        var b = 0;
       }
       if(b){len[1] = len[1] - 1 | 0; continue;}
      }
      return [0, caml_call3(Ppxlib_Import[99][14], s, pos, len[1]), c];
     }
    }
    var f = loop(s, 0);
    return caml_call2(Ppxlib_Import[99][7], cst$0, f);
   }
   function count_newlines(s){
    var n = [0, 0];
    caml_call2
     (Ppxlib_Import[99][22],
      function(param){return 10 === param ? (n[1] = n[1] + 1 | 0, 0) : 0;},
      s);
    return n[1];
   }
   function skip_blank_eol(contents, pos){
    var cnum$1 = pos[4], cnum = cnum$1;
    for(;;){
     if(caml_call2(Ppxlib_Import[76], cnum, caml_ml_string_length(contents)))
      return [0, pos[1], pos[2], pos[3], cnum];
     var match = caml_string_get(contents, cnum);
     a:
     {
      if(14 <= match){
       if(32 !== match) break a;
      }
      else{
       if(9 > match) break a;
       switch(match - 9 | 0){
         case 1:
          return [0, pos[1], pos[2] + 1 | 0, cnum + 1 | 0, cnum + 1 | 0];
         case 2:
         case 3:
          break a;
       }
      }
      var cnum$0 = cnum + 1 | 0;
      cnum = cnum$0;
      continue;
     }
     return pos;
    }
   }
   function reconcile
   (styler,
    repls$3,
    kind,
    contents,
    input_filename,
    output,
    input_name,
    target,
    use_compiler_pprint){
    caml_call2
     (Ppxlib_Import[94][77],
      repls$3,
      function(repl){
       var
        a = caml_call2(Ppxlib_Import[99][77], repl[1][1], input_name),
        b = a || caml_call2(Ppxlib_Import[99][77], repl[2][1], input_name);
       if(b){
        var
         c = repl[2][1],
         f = repl[1][1],
         g = [0, Ppxlib_Location[1].call(null, input_filename)];
        caml_call3(Ppxlib_Location[6].call(null, g, d), f, c, input_name);
       }
       if(caml_call2(Ppxlib_Import[80], repl[1][4], repl[2][4])) return 0;
       throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
      });
    var
     repls =
       caml_call2
        (Ppxlib_Import[94][44],
         function(a, b){
          var d = caml_call2(Ppxlib_Import[74], a[1][4], b[2][4]);
          return caml_call2(Ppxlib_Import[76], d, 0)
                  ? caml_call2(Ppxlib_Import[74], b[2][4], a[2][4])
                  : d;
         },
         repls$3);
    if(repls){
     var
      repls$2 = repls[2],
      repl$0 = repls[1],
      prev = repl$0,
      repls$0 = repls$2,
      acc = 0;
     for(;;){
      if(! repls$0){
       var repls$4 = caml_call1(Ppxlib_Import[94][9], [0, prev, acc]);
       break;
      }
      var repls$1 = repls$0[2], repl = repls$0[1];
      if(caml_call2(Ppxlib_Import[78], prev[2][4], repl[1][4])){
       if(! caml_call2(Ppxlib_Import[81], prev[2][4], repl[2][4])){
        var
         repls$4 =
           Ppxlib_Location[6].call(null, [0, [0, repl[1], prev[2], 0]], f);
        break;
       }
       repls$0 = repls$1;
      }
      else{
       var acc$0 = [0, prev, acc];
       prev = repl;
       repls$0 = repls$1;
       acc = acc$0;
      }
     }
    }
    else
     var repls$4 = 0;
    if(output)
     var fn$0 = output[1], output_name = fn$0;
    else
     var output_name = cst_stdout;
    function f$0(oc){
     function copy_input(pos, up_to, line, last_is_text, is_text){
      var pos$0 = last_is_text ? pos : skip_blank_eol(contents, pos);
      if(! caml_call2(Ppxlib_Import[77], pos$0[4], up_to)) return line;
      if(target && ! target[1])
       caml_call6
        (Stdlib_Printf[1],
         oc,
         i,
         pos$0[2],
         input_name,
         pos$0[4] - pos$0[3] | 0,
         cst$3);
      caml_call4
       (Ppxlib_Import[102], oc, contents, pos$0[4], up_to - pos$0[4] | 0);
      var line$0 = [0, line + 1 | 0], a = pos$0[4], b = up_to - 1 | 0;
      if(b >= a){
       var i$0 = a;
       for(;;){
        var d = caml_string_get(contents, i$0);
        if(caml_call2(Ppxlib_Import[86][8], d, 10))
         line$0[1] = line$0[1] + 1 | 0;
        var e = i$0 + 1 | 0;
        if(b === i$0) break;
        i$0 = e;
       }
      }
      var line$1 = line$0[1];
      if(! is_text){
       var c = caml_string_get(contents, up_to - 1 | 0);
       if(caml_call2(Ppxlib_Import[86][12], c, 10)){
        caml_call2(Stdlib[65], oc, 10);
        return line$1 + 1 | 0;
       }
      }
      return line$1;
     }
     function loop$0(counter, line, pos, repls, last_is_text){
      if(! repls){
       copy_input(pos, caml_ml_string_length(contents), line, last_is_text, 0);
       return 0;
      }
      var
       repls$0 = repls[2],
       repl = repls[1],
       is_text = 0 === repl[3][0] ? 0 : 1,
       line$0 = copy_input(pos, repl[1][4], line, last_is_text, is_text);
      try{var c = text(use_compiler_pprint, repl), s = c;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn !== Astlib[1][25]) throw caml_maybe_attach_backtrace(exn, 0);
       var
        b = Ppxlib_Location[1].call(null, input_filename)[3],
        loc = [0, repl[1], repl[2], b],
        s = Ppxlib_Location[6].call(null, [0, loc], j);
      }
      var
       line$1 =
         target
          ? target
             [1]
            ? (caml_call3
               (Stdlib_Printf[1], oc, k, generated_code_begin),
              line$0 + 1 | 0)
            : (caml_call4
               (Stdlib_Printf[1], oc, l, line$0 + 1 | 0, output_name),
              line$0 + 1 | 0)
          : line$0;
      caml_call2(Stdlib[66], oc, s);
      var line$2 = line$1 + count_newlines(s) | 0, a = repl[2];
      if(counter >= 50)
       return caml_trampoline_return
               (loop_consecutive_repls$0, [0, line$2, a, repls$0, is_text]);
      var counter$0 = counter + 1 | 0;
      return loop_consecutive_repls$0(counter$0, line$2, a, repls$0, is_text);
     }
     function loop(line, pos, repls, last_is_text){
      return caml_trampoline(loop$0(0, line, pos, repls, last_is_text));
     }
     function loop_consecutive_repls$0
     (counter, line$1, pos$2, repls$1, last_is_text$1){
      var
       line = line$1,
       pos = pos$2,
       repls = repls$1,
       last_is_text = last_is_text$1;
      for(;;){
       if(! repls){
        if(counter >= 50)
         return caml_trampoline_return
                 (end_consecutive_repls, [0, line, pos, repls, last_is_text]);
        var counter$1 = counter + 1 | 0;
        return end_consecutive_repls
                (counter$1, line, pos, repls, last_is_text);
       }
       var
        repls$0 = repls[2],
        repl = repls[1],
        pos$0 = last_is_text ? pos : skip_blank_eol(contents, pos);
       if(caml_call2(Ppxlib_Import[77], pos$0[4], repl[1][4])){
        if(counter >= 50)
         return caml_trampoline_return
                 (end_consecutive_repls,
                  [0, line, pos$0, repls, last_is_text]);
        var counter$0 = counter + 1 | 0;
        return end_consecutive_repls
                (counter$0, line, pos$0, repls, last_is_text);
       }
       var s = text(use_compiler_pprint, repl);
       caml_call2(Stdlib[66], oc, s);
       var
        line$0 = line + count_newlines(s) | 0,
        last_is_text$0 = 0 === repl[3][0] ? 0 : 1,
        pos$1 = repl[2];
       line = line$0;
       pos = pos$1;
       repls = repls$0;
       last_is_text = last_is_text$0;
      }
     }
     function loop_consecutive_repls(line, pos, repls, last_is_text){
      return caml_trampoline
              (loop_consecutive_repls$0(0, line, pos, repls, last_is_text));
     }
     function end_consecutive_repls(counter, line, pos, repls, last_is_text){
      if(target && target[1])
       caml_call3(Stdlib_Printf[1], oc, m, generated_code_end);
      if(counter >= 50)
       return caml_trampoline_return
               (loop$0, [0, line, pos, repls, last_is_text]);
      var counter$0 = counter + 1 | 0;
      return loop$0(counter$0, line, pos, repls, last_is_text);
     }
     var pos = [0, input_name, 1, 0, 0];
     if(repls$4 && 0 === repls$4[1][1][4]){
      if(target && target[1])
       caml_call3(Stdlib_Printf[1], oc, n, generated_code_begin);
      return loop_consecutive_repls(1, pos, repls$4, 0);
     }
     return loop(1, pos, repls$4, 0);
    }
    if(! styler) return Ppxlib_Utils[2].call(null, output, 0, f$0);
    var
     cmd = styler[1],
     c = kind ? cst_ml : cst_mli,
     match = caml_call5(Stdlib_Filename[17], 0, 0, 0, cst_ppxlib_driver, c),
     oc = match[2],
     tmp_fn = match[1];
    if(output)
     var
      fn = output[1],
      o = caml_call1(Stdlib_Filename[21], fn),
      a = caml_call2(Stdlib[28], cst$1, o);
    else
     var a = cst$2;
    var
     p = caml_call1(Stdlib_Filename[21], tmp_fn),
     cmd$0 = caml_call4(Stdlib_Printf[4], g, cmd, p, a),
     n$0 =
       caml_call3
        (Ppxlib_Import[87][1],
         tmp_fn,
         function(param){
          caml_call3(Ppxlib_Import[87][1], oc, f$0, Stdlib[76]);
          return runtime.caml_sys_system_command(cmd$0);
         },
         runtime.caml_sys_remove),
     b = caml_call2(Ppxlib_Import[79], n$0, 0);
    return b
            ? (caml_call3
               (Stdlib_Printf[3], h, n$0, cmd$0),
              caml_call1(Stdlib[99], 1))
            : b;
   }
   var Ppxlib_Reconcile = [0, [0], [0, make, make_text], reconcile];
   runtime.caml_register_global(36, Ppxlib_Reconcile, "Ppxlib__Reconcile");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Quoter
//# unitInfo: Requires: Ppxlib__Ast_builder, Ppxlib__Import, Ppxlib__Location, Stdlib
//# shape: Ppxlib__Quoter:[F(1)*,F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "__",
    cst$0 = "()",
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib = global_data.Stdlib,
    Ppxlib_Location = global_data.Ppxlib__Location;
   function create(param){return [0, 0, 0];}
   function sanitize(t, e){
    var bindings = t[2];
    if(! bindings) return e;
    var Ast = Ppxlib_Ast_builder[3].call(null, e[2]);
    return caml_call3(Ast[118], 0, bindings, e);
   }
   function quote(t, e){
    var
     loc = e[2],
     Ast = Ppxlib_Ast_builder[3].call(null, loc),
     a = caml_call1(Ppxlib_Import[92][2], t[1]),
     name = caml_call2(Stdlib[28], cst, a),
     match = e[1];
    a:
    {
     if(typeof match !== "number" && 0 === match[0]){
      var quoted_expr$0 = caml_call1(Ast[190], name), binding_expr$0 = e;
      break a;
     }
     var
      unit = caml_call2(Ppxlib_Ast_builder[1][1][5], loc, cst$0),
      p = caml_call2(Ast[215], unit, 0),
      params = [0, [0, Ppxlib_Location[3], [0, 0, 0, p]], 0],
      binding_expr = caml_call3(Ast[198], params, 0, [0, e]),
      b = [0, Ast[188], 0],
      c = caml_call1(Ast[190], name),
      quoted_expr = caml_call2(Ast[192], c, b),
      quoted_expr$0 = quoted_expr,
      binding_expr$0 = binding_expr;
    }
    var
     pat = caml_call1(Ast[191], name),
     binding = caml_call2(Ast[206], pat, binding_expr$0);
    t[2] = [0, binding, t[2]];
    t[1] = t[1] + 1 | 0;
    return quoted_expr$0;
   }
   var Ppxlib_Quoter = [0, create, quote, sanitize];
   runtime.caml_register_global(6, Ppxlib_Quoter, "Ppxlib__Quoter");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Merlin_helpers
//# unitInfo: Requires: Ppxlib__Location, Ppxlib_ast__Ast_helper_lite
//# shape: Ppxlib__Merlin_helpers:[N,N,F(1)*,F(1)*,F(1)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_ast_Ast_helper_lite = global_data.Ppxlib_ast__Ast_helper_lite;
   function mk_attr_noloc(txt){
    return caml_call2
            (Ppxlib_ast_Ast_helper_lite[4][1],
             0,
             [0, txt, Ppxlib_Location[3]]);
   }
   var
    hide_attribute = caml_call1(mk_attr_noloc("merlin.hide"), [0, 0]),
    focus_attribute = caml_call1(mk_attr_noloc("merlin.focus"), [0, 0]);
   function hide_pattern(p){
    var ppat_attributes = p[4];
    return [0, p[1], p[2], p[3], [0, hide_attribute, ppat_attributes]];
   }
   function focus_pattern(p){
    var ppat_attributes = p[4];
    return [0, p[1], p[2], p[3], [0, focus_attribute, ppat_attributes]];
   }
   function hide_expression(e){
    var pexp_attributes = e[4];
    return [0, e[1], e[2], e[3], [0, hide_attribute, pexp_attributes]];
   }
   function focus_expression(e){
    var pexp_attributes = e[4];
    return [0, e[1], e[2], e[3], [0, focus_attribute, pexp_attributes]];
   }
   var
    Ppxlib_Merlin_helpers =
      [0,
       hide_attribute,
       focus_attribute,
       hide_pattern,
       focus_pattern,
       hide_expression,
       focus_expression];
   runtime.caml_register_global
    (6, Ppxlib_Merlin_helpers, "Ppxlib__Merlin_helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Location_check
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_traverse, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Ppxlib__Merlin_helpers, Stdlib
//# shape: Ppxlib__Location_check:[N,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "@ ",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field$0 = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type$0 = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field$0 = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration$0 = "constructor_declaration",
    cst_core_type$0 = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_exception$1 = "exception",
    cst_expression$0 = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor$0 = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration$0 = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding$0 = "module_binding",
    cst_module_declaration$0 = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution$0 = "module_substitution",
    cst_module_type$0 = "module_type",
    cst_module_type_declaration$0 = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field$0 = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern$0 = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field$0 = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item$0 = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item$0 = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration$0 = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension$0 = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding$0 = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description$0 = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ".",
    cst$1 = "()",
    cst$2 = "()<-",
    cst$3 = "[]",
    cst$4 = "[]<-",
    cst$5 = "{}",
    cst$6 = "{}<-",
    cst = " ",
    cst_n = "n ",
    partial = [11, " found at:", [17, [0, cst$7, 1, 0], [15, 0]]],
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding$0,
       cst_extension_constructor_kind,
       cst_core_type$0,
       cst_structure,
       cst_list,
       cst_label_declaration$0,
       cst_module_binding$0,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item$0,
       cst_extension_constructor$0,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description$0,
       cst_module_declaration$0,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension$0,
       cst_class_field_kind,
       cst_module_type_declaration$0,
       cst_arg_label,
       cst_row_field$0,
       cst_longident,
       cst_string,
       cst_pattern$0,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field$0,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field$0,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration$0,
       cst_constructor_declaration$0,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution$0,
       cst_class_description,
       cst_expression$0,
       cst_class_type$0,
       cst_structure_item$0,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type$0,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field$0],
    empty = [0, 0, 0, 0],
    Ppxlib_Import = global_data.Ppxlib__Import,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Stdlib = global_data.Stdlib,
    Ppxlib_Merlin_helpers = global_data.Ppxlib__Merlin_helpers,
    Assert_failure = global_data.Assert_failure,
    e =
      [0,
       [11,
        "invalid output from ppx, ",
        [2,
         0,
         [11,
          " overlaps with ",
          [2, 0, [11, " at location:", [17, 4, [15, 0]]]]]]],
       "invalid output from ppx, %s overlaps with %s at location:@.%a"];
   function a(ranges, node){
    var node_loc = node[2], node_name = node[1];
    if(! ranges) return [0, node, 0];
    var
     xs = ranges[2],
     x = ranges[1],
     x_loc = x[2],
     x_name = x[1],
     b = Ppxlib_Location[10].call(null, node_loc[1], x_loc[2]);
    if(caml_call2(Ppxlib_Import[81], b, 0)) return [0, node, [0, x, xs]];
    var c = Ppxlib_Location[10].call(null, x_loc[1], node_loc[2]);
    if(caml_call2(Ppxlib_Import[81], c, 0)) return [0, x, a(xs, node)];
    var d = Ppxlib_Location[9];
    return caml_call4
            (Ppxlib_Location[6].call(null, [0, node_loc], e),
             node_name,
             x_name,
             d,
             x_loc);
   }
   function min_pos(p1, p2){
    if(p1){
     if(p2){
      var p2$0 = p2[1], p1$0 = p1[1];
      return [0, Ppxlib_Location[11].call(null, p1$0, p2$0)];
     }
     var p = p1;
    }
    else{if(! p2) return 0; var p = p2;}
    return p;
   }
   function max_pos(p1, p2){
    if(p1){
     if(p2){
      var p2$0 = p2[1], p1$0 = p1[1];
      return [0, Ppxlib_Location[12].call(null, p1$0, p2$0)];
     }
     var p = p1;
    }
    else{if(! p2) return 0; var p = p2;}
    return p;
   }
   function insert(node_name, loc, t){
    var b = a(t[3], [0, node_name, loc]), c = max_pos([0, loc[2]], t[2]);
    return [0, min_pos([0, loc[1]], t[1]), c, b];
   }
   function reloc_pmty_functors(x){
    var outmost_loc = x[2];
    function aux(x){
     var a = x[1];
     if(2 !== a[0]) return x;
     var match = a[1];
     if(! match){
      var initial_res$0 = a[2], res$1 = aux(initial_res$0);
      return res$1 === initial_res$0 ? x : [0, [2, 0, res$1], x[2], x[3]];
     }
     var
      initial_res = a[2],
      mty = match[2],
      id = match[1],
      res = aux(initial_res),
      c = Ppxlib_Location[13].call(null, outmost_loc, res[2]);
     if(! caml_call2(Ppxlib_Import[76], c, 0))
      return res === initial_res ? x : [0, [2, [0, id, mty], res], x[2], x[3]];
     var
      loc_start = mty[2][2],
      b = res[2],
      res$0 = [0, res[1], [0, loc_start, b[2], b[3]], res[3]];
     return [0, [2, [0, id, mty], res$0], x[2], x[3]];
    }
    return aux(x);
   }
   function reloc_pmod_functors(x){
    var outmost_loc = x[2];
    function aux(x){
     var a = x[1];
     if(2 !== a[0]) return x;
     var match = a[1];
     if(! match){
      var initial_res$0 = a[2], res$1 = aux(initial_res$0);
      return res$1 === initial_res$0 ? x : [0, [2, 0, res$1], x[2], x[3]];
     }
     var
      initial_res = a[2],
      mty = match[2],
      id = match[1],
      res = aux(initial_res),
      c = Ppxlib_Location[13].call(null, outmost_loc, res[2]);
     if(! caml_call2(Ppxlib_Import[76], c, 0))
      return res === initial_res ? x : [0, [2, [0, id, mty], res], x[2], x[3]];
     var
      loc_start = mty[2][2],
      b = res[2],
      res$0 = [0, res[1], [0, loc_start, b[2], b[3]], res[3]];
     return [0, [2, [0, id, mty], res$0], x[2], x[3]];
    }
    return aux(x);
   }
   function all_payloads_inside_parent(loc){
    return caml_call1
            (Ppxlib_Import[94][21],
             function(attr){
              var a = Ppxlib_Location[10].call(null, loc[2], attr[3][2]);
              return caml_call2(Ppxlib_Import[81], a, 0);
             });
   }
   var
    file = [0, 0],
    same_file_so_far = [0, 1],
    f = [0, "src/location_check.ml", 82, 8],
    cst_none = "_none_",
    g =
      [0,
       [11,
        "invalid output from ppx:",
        [17,
         [0, cst$7, 1, 0],
         [11,
          "this ",
          [2,
           0,
           [11,
            " is built from a",
            [2,
             0,
             [11,
              " whose location is outside of this node's.",
              [17, 4, [11, "Child ", [2, 0, partial]]]]]]]]]],
       "invalid output from ppx:@ this %s is built from a%s whose location is outside of this node's.@.Child %s found at:@ %a"];
   function should_ignore(loc, attrs){
    var fname = loc[1][1];
    if(caml_call2(Ppxlib_Import[99][73], fname, cst_none))
     var a = 1;
    else{
     var match = file[1];
     if(match)
      var
       orig_fname = match[1],
       c = caml_call2(Ppxlib_Import[99][73], orig_fname, fname),
       a = c || (same_file_so_far[1] = 0, 0);
     else{file[1] = [0, fname]; var a = 1;}
    }
    var b = 1 - a;
    return b
            ? b
            : caml_call2
              (Ppxlib_Import[94][22],
               function(attr){
                return caml_call2
                        (Ppxlib_Import[99][73],
                         attr[1][1],
                         Ppxlib_Merlin_helpers[1][1][1]);
               },
               attrs);
   }
   function extract_constraint(e){
    var match = e[1];
    a:
    if(typeof match !== "number"){
     switch(match[0]){
       case 18:
        var ct = match[2], e$0 = match[1]; break;
       case 19:
        var ct = match[3], e$0 = match[1]; break;
       case 30:
        var exp = match[2], name = match[1], a = extract_constraint(exp);
        return caml_call2
                (Ppxlib_Import[95][3],
                 a,
                 function(param){
                  var ct = param[2], exp = param[1], a = e[2];
                  return [0,
                          [0, [30, name, exp], [0, a[1], a[2], 1], e[3], e[4]],
                          ct];
                 });
       default: break a;
     }
     return [0, [0, e$0, ct]];
    }
    return 0;
   }
   function do_check(node_name, node_loc, childrens_locs, siblings_locs){
    if(! same_file_so_far[1]) return empty;
    if(! node_loc[3]){
     var d = childrens_locs[1], match$0 = childrens_locs[2];
     a:
     {
      if(d){
       if(match$0){
        var
         max_pos$0 = match$0[1],
         min_pos$0 = d[1],
         j = Ppxlib_Location[10].call(null, min_pos$0, node_loc[1]),
         e = caml_call2(Ppxlib_Import[81], j, 0);
        if(e){
         var
          k = Ppxlib_Location[10].call(null, max_pos$0, node_loc[2]),
          b = caml_call2(Ppxlib_Import[80], k, 0);
         break a;
        }
        var b = e;
        break a;
       }
      }
      else if(! match$0){var b = 1; break a;}
      throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
     }
     if(b) return insert(node_name, node_loc, siblings_locs);
     var
      match$1 =
        caml_call2
         (Ppxlib_Import[94][27],
          function(param){
           var
            l = param[2],
            b = Ppxlib_Location[10].call(null, node_loc[1], l[1]),
            a = caml_call2(Ppxlib_Import[78], b, 0);
           if(a) return a;
           var c = Ppxlib_Location[10].call(null, node_loc[2], l[2]);
           return caml_call2(Ppxlib_Import[77], c, 0);
          },
          childrens_locs[3]),
      child_loc = match$1[2],
      child_name = match$1[1],
      h = runtime.caml_string_unsafe_get(child_name, 0) - 97 | 0,
      m = Ppxlib_Location[9];
     if(20 < h >>> 0)
      var c = cst;
     else
      switch(h){
        case 0:
        case 4:
        case 8:
        case 14:
        case 20:
         var c = cst_n; break;
        default: var c = cst;
      }
     var o = caml_call2(Stdlib[28], c, child_name);
     return caml_call5
             (Ppxlib_Location[6].call(null, [0, node_loc], g),
              node_name,
              o,
              child_name,
              m,
              child_loc);
    }
    var
     l2 = siblings_locs[3],
     l1 = childrens_locs[3],
     xs = l1,
     ys = l2,
     n = 42;
    for(;;){
     a:
     {
      if(xs && 0 !== n){
       if(ys){
        var ys$0 = ys[2], xs$0 = xs[2], n$0 = n - 1 | 0;
        xs = xs$0;
        ys = ys$0;
        n = n$0;
        continue;
       }
       var match = [0, l1, l2];
       break a;
      }
      var match = [0, l2, l1];
     }
     var
      l = match[2],
      init = match[1],
      ranges = caml_call3(Ppxlib_Import[94][17], a, init, l),
      i = max_pos(childrens_locs[2], siblings_locs[2]);
     return [0, min_pos(childrens_locs[1], siblings_locs[1]), i, ranges];
    }
   }
   var
    b = [0, 0],
    c =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description$0,
       cst_value_constraint,
       cst_value_binding$0,
       cst_type_kind,
       cst_type_extension$0,
       cst_type_exception,
       cst_type_declaration$0,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item$0,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item$0,
       cst_signature,
       cst_row_field_desc,
       cst_row_field$0,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern$0,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field$0,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration$0,
       cst_module_type$0,
       cst_module_substitution$0,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration$0,
       cst_module_binding$0,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration$0,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor$0,
       cst_extension,
       cst_expression_desc,
       cst_expression$0,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type$0,
       cst_constructor_declaration$0,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field$0,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type$0,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field$0,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    d =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field$0,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type$0,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field$0,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration$0,
       cst_core_type$0,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression$0,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor$0,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration$0,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding$0,
       cst_module_declaration$0,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution$0,
       cst_module_type$0,
       cst_module_type_declaration$0,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field$0,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern$0,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field$0,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item$0,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item$0,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration$0,
       cst_type_exception,
       cst_type_extension$0,
       cst_type_kind,
       cst_value_binding$0,
       cst_value_constraint,
       cst_value_description$0,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    cst_exception = cst_exception$1,
    cst_exception$0 = cst_exception$1,
    cst_pattern = cst_pattern$0,
    cst_expression = cst_expression$0,
    cst_core_type = "core type",
    cst_module_expression = "module expression",
    cst_module_type = "module type",
    cst_value_binding = "value binding",
    cst_module_binding = "module binding",
    cst_structure_item = "structure item",
    cst_include = "include",
    cst_open = "open",
    cst_module_type_declaration = "module type declaration",
    cst_module_substitution = "module substitution",
    cst_module_declaration = "module declaration",
    cst_signature_item = "signature item",
    cst_class_field = "class field",
    cst_class_expression = "class expression",
    cst_class = "class",
    cst_class_type_field = "class type field",
    cst_class_type = "class type",
    cst_extension_constructor = "extension constructor",
    cst_type_extension = "type extension",
    cst_constructor_declaration = "constructor declaration",
    cst_label_declaration = "label declaration",
    cst_type_declaration = "type declaration",
    cst_value_description = "value description",
    cst_binding_operator = "binding operator",
    cst_object_field = "object field",
    cst_row_field = "row field",
    cst_ident = "ident";
   function enforce_invariants(fname){
    file[1] = fname;
    if(! b[1]){
     var
      i = caml_call1(CamlinternalOO[16], shared),
      a = caml_call2(CamlinternalOO[8], i, c),
      n = a[10],
      o = a[27],
      k = a[28],
      p = a[30],
      q = a[31],
      r = a[42],
      h = a[46],
      s = a[49],
      m = a[51],
      t = a[65],
      u = a[67],
      g = a[68],
      j = a[73],
      v = a[82],
      w = a[90],
      f = a[98],
      y = a[1],
      z = a[4],
      A = a[6],
      B = a[8],
      C = a[9],
      D = a[15],
      E = a[17],
      F = a[19],
      G = a[22],
      H = a[32],
      I = a[36],
      J = a[38],
      K = a[39],
      L = a[40],
      M = a[41],
      N = a[43],
      O = a[44],
      P = a[45],
      Q = a[50],
      R = a[53],
      S = a[57],
      T = a[72],
      U = a[74],
      V = a[79],
      W = a[80],
      X = a[85],
      Y = a[88],
      Z = a[89],
      _ = a[97],
      $ = a[99],
      e =
        caml_call6(CamlinternalOO[18], i, 0, 0, d, Ppxlib_Ast_traverse[3], 0),
      l = e[36],
      x = e[60],
      ab = e[4],
      ac = e[6],
      ad = e[13],
      ae = e[14],
      af = e[15],
      ag = e[18],
      ah = e[21],
      ai = e[23],
      aj = e[24],
      ak = e[29],
      al = e[30],
      am = e[35],
      an = e[38],
      ao = e[46],
      ap = e[50],
      aq = e[58],
      ar = e[59],
      as = e[61],
      at = e[62],
      au = e[63],
      av = e[64],
      aw = e[67],
      ax = e[71],
      ay = e[75],
      az = e[76],
      aA = e[81],
      aB = e[84],
      aC = e[88],
      aD = e[93],
      aE = e[95],
      aF = e[97],
      aG = e[99],
      aH = e[102],
      aa = e[1];
     caml_call2
      (CamlinternalOO[11],
       i,
       [0,
        h,
        function(self_1, x, siblings){
         return x[2][3] ? siblings : insert(cst_ident, x[2], siblings);
        },
        G,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aA, self_1), x, empty);
         return do_check(cst_row_field, x[2], childrens_locs, siblings_locs);
        },
        I,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aw, self_1), x, empty);
         return do_check
                 (cst_object_field, x[2], childrens_locs, siblings_locs);
        },
        _,
        function(self_1, x, siblings_locs){
         var childrens_locs = caml_call2(caml_call1(ac, self_1), x, empty);
         return do_check
                 (cst_binding_operator, x[4], childrens_locs, siblings_locs);
        },
        z,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[5], x[4])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aG, self_1), x, empty);
         return do_check
                 (cst_value_description, x[5], childrens_locs, siblings_locs);
        },
        n,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[8], x[7])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aD, self_1), x, empty);
         return do_check
                 (cst_type_declaration, x[8], childrens_locs, siblings_locs);
        },
        R,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[5])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(ap, self_1), x, empty);
         return do_check
                 (cst_label_declaration, x[4], childrens_locs, siblings_locs);
        },
        U,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[5], x[6])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(ak, self_1), x, empty);
         return do_check
                 (cst_constructor_declaration,
                  x[5],
                  childrens_locs,
                  siblings_locs);
        },
        B,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[5], x[6])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aE, self_1), x, empty);
         return do_check
                 (cst_type_extension, x[5], childrens_locs, siblings_locs);
        },
        t,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[3], x[4])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(an, self_1), x, empty);
         return do_check
                 (cst_extension_constructor,
                  x[3],
                  childrens_locs,
                  siblings_locs);
        },
        v,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(ah, self_1), x, empty);
         return do_check(cst_class_type, x[2], childrens_locs, siblings_locs);
        },
        V,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aj, self_1), x, empty);
         return do_check
                 (cst_class_type_field, x[2], childrens_locs, siblings_locs);
        },
        X,
        function(self_1, f, x, siblings_locs){
         if(should_ignore(x[5], x[6])) return siblings_locs;
         var childrens_locs = caml_call3(caml_call1(ag, self_1), f, x, empty);
         return do_check(cst_class, x[5], childrens_locs, siblings_locs);
        },
        w,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(ad, self_1), x, empty);
         return do_check
                 (cst_class_expression, x[2], childrens_locs, siblings_locs);
        },
        Y,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(af, self_1), x, empty);
         return do_check(cst_class_field, x[2], childrens_locs, siblings_locs);
        },
        F,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], 0)) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aB, self_1), x, empty);
         return do_check
                 (cst_signature_item, x[2], childrens_locs, siblings_locs);
        },
        O,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(ar, self_1), x, empty);
         return do_check
                 (cst_module_declaration, x[4], childrens_locs, siblings_locs);
        },
        M,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(at, self_1), x, empty);
         return do_check
                 (cst_module_substitution,
                  x[4],
                  childrens_locs,
                  siblings_locs);
        },
        K,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(av, self_1), x, empty);
         return do_check
                 (cst_module_type_declaration,
                  x[4],
                  childrens_locs,
                  siblings_locs);
        },
        H,
        function(self_1, f, x, siblings_locs){
         if(should_ignore(x[3], x[4])) return siblings_locs;
         var childrens_locs = caml_call3(caml_call1(ax, self_1), f, x, empty);
         return do_check(cst_open, x[3], childrens_locs, siblings_locs);
        },
        S,
        function(self_1, f, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call3(caml_call1(ao, self_1), f, x, empty);
         return do_check(cst_include, x[2], childrens_locs, siblings_locs);
        },
        D,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], 0)) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aC, self_1), x, empty);
         return do_check
                 (cst_structure_item, x[2], childrens_locs, siblings_locs);
        },
        P,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(aq, self_1), x, empty);
         return do_check
                 (cst_module_binding, x[4], childrens_locs, siblings_locs);
        },
        A,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[5], x[4])) return siblings_locs;
         var match = x[1][1], match$0 = extract_constraint(x[2]);
         a:
         {
          if(typeof match !== "number" && 10 === match[0]){
           var a = match[2][1];
           if(typeof a !== "number" && 8 === a[0] && match$0){
            var
             match$1 = match$0[1],
             cte = match$1[2],
             pvb_expr = match$1[1],
             ctp = a[2],
             pvb_pat = match[1],
             b = Ppxlib_Location[13].call(null, ctp[2], cte[2]);
            if(caml_call2(Ppxlib_Import[76], b, 0)){
             var acc = caml_call3(self_1[1][k + 1], self_1, pvb_pat, empty);
             caml_call3(self_1[1][j + 1], self_1, ctp, acc);
             var
              acc$0 = caml_call3(self_1[1][g + 1], self_1, pvb_expr, acc),
              acc$1 = caml_call3(self_1[1][f + 1], self_1, x[4], acc$0),
              childrens_locs = acc$1;
             break a;
            }
           }
          }
          var childrens_locs = caml_call2(caml_call1(aF, self_1), x, empty);
         }
         return do_check
                 (cst_value_binding, x[5], childrens_locs, siblings_locs);
        },
        L,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var x$0 = reloc_pmty_functors(x), a = x$0[3];
         if(caml_call1(all_payloads_inside_parent(x$0[2]), a))
          var childrens_locs = caml_call2(caml_call1(au, self_1), x$0, empty);
         else{
          var acc = caml_call3(self_1[1][J + 1], self_1, x$0[1], empty);
          caml_call3(self_1[1][f + 1], self_1, x$0[3], acc);
          var childrens_locs = acc;
         }
         return do_check
                 (cst_module_type, x$0[2], childrens_locs, siblings_locs);
        },
        N,
        function(self_1, x$0, siblings_locs){
         if(should_ignore(x$0[2], x$0[3])) return siblings_locs;
         var x$1 = reloc_pmod_functors(x$0), a = x$1[3];
         if(caml_call1(all_payloads_inside_parent(x$1[2]), a))
          var childrens_locs = caml_call2(caml_call1(x, self_1), x$1, empty);
         else{
          var acc = caml_call3(self_1[1][r + 1], self_1, x$1[1], empty);
          caml_call3(self_1[1][f + 1], self_1, x$1[3], acc);
          var childrens_locs = acc;
         }
         return do_check
                 (cst_module_expression,
                  x$1[2],
                  childrens_locs,
                  siblings_locs);
        },
        j,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[4])) return siblings_locs;
         var a = x[4];
         if(caml_call1(all_payloads_inside_parent(x[2]), a))
          var childrens_locs = caml_call2(caml_call1(al, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][T + 1], self_1, x[1], empty);
          caml_call3(self_1[1][f + 1], self_1, x[4], acc);
          var childrens_locs = acc;
         }
         return do_check(cst_core_type, x[2], childrens_locs, siblings_locs);
        },
        g,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[4])) return siblings_locs;
         var a = x[4];
         if(caml_call1(all_payloads_inside_parent(x[2]), a))
          var childrens_locs = caml_call2(caml_call1(am, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][u + 1], self_1, x[1], empty);
          caml_call3(self_1[1][f + 1], self_1, x[4], acc);
          var childrens_locs = acc;
         }
         return do_check(cst_expression, x[2], childrens_locs, siblings_locs);
        },
        k,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[4])) return siblings_locs;
         var a = x[4];
         if(caml_call1(all_payloads_inside_parent(x[2]), a))
          var childrens_locs = caml_call2(caml_call1(ay, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][o + 1], self_1, x[1], empty);
          caml_call3(self_1[1][f + 1], self_1, x[4], acc);
          var childrens_locs = acc;
         }
         return do_check(cst_pattern, x[2], childrens_locs, siblings_locs);
        },
        C,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var
          childs_locs = caml_call3(self_1[1][t + 1], self_1, x[1], empty),
          attrs_locs = caml_call3(self_1[1][f + 1], self_1, x[3], empty);
         do_check(cst_exception, x[2], attrs_locs, siblings_locs);
         return do_check(cst_exception$0, x[2], childs_locs, siblings_locs);
        },
        y,
        function(self_1, x, siblings_loc){
         switch(x[0]){
           case 0:
           case 4:
            var tdecl = x[2];
            return caml_call3(self_1[1][n + 1], self_1, tdecl, siblings_loc);
           default:
            return caml_call2(caml_call1(aH, self_1), x, siblings_loc);
         }
        },
        u,
        function(self_1, x, acc){
         if(typeof x !== "number")
          switch(x[0]){
            case 4:
             var a = x[1][1];
             if(typeof a !== "number" && 0 === a[0]){
              var args = x[2], lid = a[1][1];
              try{var id = Ppxlib_Longident[4].call(null, lid);}
              catch(exn){return caml_call2(caml_call1(l, self_1), x, acc);}
              a:
              if(caml_call2(Ppxlib_Import[99][58], id, cst$0)){
               if
                (!
                 caml_call2(Ppxlib_Import[99][59], id, cst$1)
                 &&
                  !
                  caml_call2(Ppxlib_Import[99][59], id, cst$2)
                  &&
                   !
                   caml_call2(Ppxlib_Import[99][59], id, cst$3)
                   &&
                    !
                    caml_call2(Ppxlib_Import[99][59], id, cst$4)
                    &&
                     !
                     caml_call2(Ppxlib_Import[99][59], id, cst$5)
                     && ! caml_call2(Ppxlib_Import[99][59], id, cst$6))
                break a;
               return caml_call4
                       (self_1[1][m + 1],
                        self_1,
                        function(param){
                         var e = param[2];
                         return caml_call2(self_1[1][g + 1], self_1, e);
                        },
                        args,
                        acc);
              }
              return caml_call2(caml_call1(l, self_1), x, acc);
             }
             break;
            case 10:
             var
              expr_o = x[2],
              labels = x[1],
              acc$0 =
                caml_call4
                 (self_1[1][m + 1],
                  self_1,
                  function(param, acc){
                   var
                    e = param[2],
                    lid = param[1],
                    a = Ppxlib_Location[10].call(null, lid[2][1], e[2][1]);
                   if(! caml_call2(Ppxlib_Import[76], a, 0)){
                    var
                     acc$0 = caml_call3(self_1[1][h + 1], self_1, lid, acc),
                     acc$1 = caml_call3(self_1[1][g + 1], self_1, e, acc$0);
                    return acc$1;
                   }
                   var b = Ppxlib_Location[13].call(null, lid[2], e[2]);
                   if(caml_call2(Ppxlib_Import[76], b, 0))
                    return caml_call3(self_1[1][h + 1], self_1, lid, acc);
                   var match = e[1];
                   if(typeof match !== "number" && 18 === match[0]){
                    var c = match[2], e$0 = match[1];
                    caml_call3(self_1[1][j + 1], self_1, c, acc);
                    return caml_call3(self_1[1][g + 1], self_1, e$0, acc);
                   }
                   return caml_call3(self_1[1][g + 1], self_1, e, acc);
                  },
                  labels,
                  acc),
              d = caml_call1(self_1[1][g + 1], self_1);
             return caml_call4(self_1[1][q + 1], self_1, d, expr_o, acc$0);
            case 28:
             var b = x[2];
             if(b){
              var match = b[1][1];
              if(typeof match !== "number" && 8 === match[0]){
               var ct = match[2], e = x[1], match$0 = extract_constraint(e);
               if(match$0){
                var
                 match$1 = match$0[1],
                 cte = match$1[2],
                 e$0 = match$1[1],
                 f = Ppxlib_Location[13].call(null, cte[2], ct[2]);
                if(caml_call2(Ppxlib_Import[76], f, 0)){
                 var
                  acc$1 = caml_call3(self_1[1][g + 1], self_1, e$0, acc),
                  acc$2 = caml_call3(self_1[1][j + 1], self_1, ct, acc$1);
                 return acc$2;
                }
               }
               return caml_call2(caml_call1(l, self_1), x, acc);
              }
             }
             break;
            case 32:
             var opn = x[1], match$2 = opn[1][1];
             if(0 === match$2[0]){
              var
               e$1 = x[2],
               lid$0 = match$2[1],
               i = Ppxlib_Location[10].call(null, lid$0[2][1], e$1[2][1]);
              if(caml_call2(Ppxlib_Import[76], i, 0)){
               var k = Ppxlib_Location[10].call(null, lid$0[2][2], e$1[2][2]);
               if(caml_call2(Ppxlib_Import[79], k, 0)){
                var
                 c = e$1[2],
                 e_loc = [0, lid$0[2][2], c[2], c[3]],
                 n = [32, opn, [0, e$1[1], e_loc, e$1[3], e$1[4]]];
                return caml_call2(caml_call1(l, self_1), n, acc);
               }
              }
             }
             break;
          }
         return caml_call2(caml_call1(l, self_1), x, acc);
        },
        o,
        function(self_1, x, acc){
         if(typeof x !== "number")
          switch(x[0]){
            case 7:
             var labels = x[1];
             return caml_call4
                     (self_1[1][m + 1],
                      self_1,
                      function(param, acc){
                       var
                        pat = param[2],
                        lid = param[1],
                        a = Ppxlib_Location[10].call(null, lid[2][1], pat[2][1]);
                       if(! caml_call2(Ppxlib_Import[76], a, 0)){
                        var
                         acc$0 = caml_call3(self_1[1][h + 1], self_1, lid, acc),
                         acc$1 = caml_call3(self_1[1][k + 1], self_1, pat, acc$0);
                        return acc$1;
                       }
                       var b = Ppxlib_Location[13].call(null, lid[2], pat[2]);
                       if(caml_call2(Ppxlib_Import[76], b, 0))
                        return caml_call3(self_1[1][h + 1], self_1, lid, acc);
                       var match = pat[1];
                       if(typeof match !== "number" && 10 === match[0]){
                        var c = match[2], p = match[1];
                        caml_call3(self_1[1][j + 1], self_1, c, acc);
                        return caml_call3(self_1[1][k + 1], self_1, p, acc);
                       }
                       return caml_call3(self_1[1][k + 1], self_1, pat, acc);
                      },
                      labels,
                      acc);
            case 10:
             var match = x[1][1];
             if(typeof match !== "number" && 13 === match[0]){
              var
               b = x[2],
               a = match[1],
               c = caml_call1(self_1[1][E + 1], self_1),
               d = caml_call2(self_1[1][q + 1], self_1, c),
               acc$0 = caml_call4(self_1[1][Q + 1], self_1, d, a, acc);
              return caml_call3(self_1[1][j + 1], self_1, b, acc$0);
             }
             break;
          }
         return caml_call2(caml_call1(az, self_1), x, acc);
        },
        r,
        function(self_1, x$0, acc){
         if(3 === x$0[0]){
          var a = x$0[2], b = a[1];
          if(1 === b[0] && ! b[1]){
           var
            pmod_loc = a[2],
            m = x$0[1],
            c = Ppxlib_Location[10].call(null, m[2][1], pmod_loc[1]);
           if(caml_call2(Ppxlib_Import[76], c, 0))
            return caml_call2(caml_call1(x, self_1), m, acc);
          }
         }
         return caml_call2(caml_call1(as, self_1), x$0, acc);
        },
        Z,
        function(self_1, x, acc){
         if(7 !== x[0]) return caml_call2(caml_call1(ae, self_1), x, acc);
         var
          ce = x[2],
          od = x[1],
          acc$0 = caml_call3(self_1[1][h + 1], self_1, od[1], acc),
          acc$1 = caml_call3(self_1[1][p + 1], self_1, od[2], acc$0),
          acc$2 = caml_call3(self_1[1][s + 1], self_1, od[3], acc$1),
          acc$3 = caml_call3(self_1[1][f + 1], self_1, od[4], acc$2),
          acc$4 = caml_call3(self_1[1][w + 1], self_1, ce, acc$3);
         return acc$4;
        },
        W,
        function(self_1, x, acc){
         if(4 !== x[0]) return caml_call2(caml_call1(ai, self_1), x, acc);
         var
          ct = x[2],
          od = x[1],
          acc$0 = caml_call3(self_1[1][h + 1], self_1, od[1], acc),
          acc$1 = caml_call3(self_1[1][p + 1], self_1, od[2], acc$0),
          acc$2 = caml_call3(self_1[1][s + 1], self_1, od[3], acc$1),
          acc$3 = caml_call3(self_1[1][f + 1], self_1, od[4], acc$2),
          acc$4 = caml_call3(self_1[1][v + 1], self_1, ct, acc$3);
         return acc$4;
        },
        $,
        function(self_1, x, acc){
         var match = x[1][1];
         if(match !== "ocaml.doc" && match !== "ocaml.text")
          return caml_call2(caml_call1(ab, self_1), x, acc);
         return acc;
        }]);
     caml_call1(CamlinternalOO[17], i);
     b[1] =
      function(b){
       var a = caml_call2(CamlinternalOO[24], 0, i);
       caml_call2(aa, b[2], a);
       return caml_call3(CamlinternalOO[26], 0, a, i);
      };
    }
    return caml_call1(b[1], [0, 0, Ppxlib_Ast_traverse[3][3]]);
   }
   var Ppxlib_Location_check = [0, [0, empty], enforce_invariants];
   runtime.caml_register_global
    (58, Ppxlib_Location_check, "Ppxlib__Location_check");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Options
//# shape: Ppxlib__Options:[[F(1)*],N,N,N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false = "false",
    cst_force = "force",
    cst_true = "true",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    a = [0, "src/options.ml", 13, 19],
    b = [0, cst_true, [0, cst_false, [0, cst_force, 0]]];
   function arg(value){
    return [11,
            b,
            function(flag){
             if(flag !== cst_false)
              if(flag !== cst_force){
               if(flag !== cst_true)
                throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
               var b = 0;
              }
              else
               var b = 2;
             else
              var b = 1;
             value[1] = b;
             return 0;
            }];
   }
   var
    Forcable_bool = [0, arg],
    Ppxlib_Options = [0, Forcable_bool, 1, 1, 0, 0, 0, 0, 0];
   runtime.caml_register_global(6, Ppxlib_Options, "Ppxlib__Options");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Pp_ast
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_traverse, Ppxlib__Import, Stdlib, Stdlib__ArrayLabels, Stdlib__Format
//# shape: Ppxlib__Pp_ast:[N,F(1),F(1),N,F(3),F(3),F(3),F(3),F(3),F(3),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_s = "%s",
    cst$11 = "()",
    cst$12 = ";",
    cst_hv_2 = "<hv 2>",
    cst_hv = "<hv>",
    cst$13 = "@ ",
    cst$14 = "@,",
    cst_hv_2_s_a = "@[<hv 2>%s@ %a@]",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_get_config = "get_config",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_lift_record_with_desc = "lift_record_with_desc",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_set_config = "set_config",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_oo_cache_id = runtime.caml_oo_cache_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$12,
    cst$0 = "|]",
    cst$1 = "[|",
    cst$2 = cst$12,
    cst$3 = "}",
    cst$4 = "{",
    cst$5 = ",",
    cst$6 = ")",
    cst$7 = "(",
    cst$8 = cst$12,
    cst$9 = "]",
    cst$10 = "[",
    shared =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    Stdlib_Format = global_data.Stdlib__Format,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Stdlib = global_data.Stdlib,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    cache_id$3 = caml_oo_cache_id(),
    cache_id$4 = caml_oo_cache_id(),
    cache_id$5 = caml_oo_cache_id(),
    cache_id$6 = caml_oo_cache_id(),
    cache_id$7 = caml_oo_cache_id(),
    cache_id$8 = caml_oo_cache_id(),
    cache_id$9 = caml_oo_cache_id(),
    cache_id$10 = caml_oo_cache_id(),
    cache_id$11 = caml_oo_cache_id(),
    cache_id$12 = caml_oo_cache_id(),
    cache_id$13 = caml_oo_cache_id(),
    cache_id$14 = caml_oo_cache_id(),
    cache_id$15 = caml_oo_cache_id(),
    cache_id$16 = caml_oo_cache_id(),
    show_attrs = 0,
    show_locs = 0,
    loc_mode = 257225820,
    default$ = [0, show_attrs, show_locs, loc_mode],
    a =
      [0,
       cst_unit,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_nativeint,
       cst_int64,
       cst_int32,
       cst_int,
       cst_float,
       cst_constr,
       cst_char,
       cst_bool,
       cst_array],
    b =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_set_config,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_lift_record_with_desc,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_get_config,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    c = [0, "config"],
    d =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [2, 0, [12, 32, [15, [17, [0, cst$14, 0, 0], 0]]]]],
       "@[<hv>%s %a@,"],
    e = [0, [2, 0, [12, 32, [15, [17, [0, cst$14, 0, 0], 0]]]], "%s %a@,"],
    f = [0, [2, 0, [17, 0, 0]], "%s@]"],
    g = [0, [2, 0, [2, 0, 0]], "%s%s"],
    h = [0, [11, cst$11, 0], cst$11],
    i = [0, [4, 3, 0, 0, 0], "%i"],
    j = [0, [3, 0, 0], "%S"],
    k = [0, [9, 0, 0], "%B"],
    l = [0, [0, 0], "%c"],
    m = [0, [8, [0, 0, 0], 0, 0, 0], "%f"],
    n = [0, [5, 3, 0, 0, 0], "%li"],
    o = [0, [7, 3, 0, 0, 0], "%Li"],
    p = [0, [6, 3, 0, 0, 0], "%ni"],
    q =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [17, [0, cst$13, 1, 0], [15, [17, 0, 0]]]]],
       cst_hv_2_s_a],
    r =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [17, [0, cst$13, 1, 0], [15, [17, 0, 0]]]]],
       cst_hv_2_s_a],
    s =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [17, [0, cst$13, 1, 0], [12, 40, [15, [12, 41, [17, 0, 0]]]]]]],
       "@[<hv 2>%s@ (%a)@]"],
    t = [0, [2, 0, 0], cst_s],
    u = [0, [2, 0, 0], cst_s],
    v =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [11, " =", [17, [0, cst$13, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<hv 2>%s =@ %a@]"],
    w = [10, "NoInjectivity", 0],
    x = [10, "Injective", 0],
    y = [10, "Covariant", 0],
    z = [10, "Contravariant", 0],
    A = [10, "NoVariance", 0],
    B = [10, "Open", 0],
    C = [10, "Closed", 0],
    D = [10, "Fresh", 0],
    E = [10, "Override", 0],
    F = [10, "Concrete", 0],
    G = [10, "Virtual", 0],
    H = [10, "Mutable", 0],
    I = [10, "Immutable", 0],
    J = [10, "Public", 0],
    K = [10, "Private", 0],
    L = [10, "Downto", 0],
    M = [10, "Upto", 0],
    N = [10, "Recursive", 0],
    O = [10, "Nonrecursive", 0],
    P = [13, "__attrs"],
    Q =
      [0,
       [12,
        108,
        [4, 3, 0, 0, [12, 99, [4, 3, 0, 0, [11, "..", [4, 3, 0, 0, 0]]]]]],
       "l%ic%i..%i"],
    cst_g = "(g)",
    R =
      [0,
       [12,
        108,
        [4,
         3,
         0,
         0,
         [12,
          99,
          [4, 3, 0, 0, [11, "..l", [4, 3, 0, 0, [12, 99, [4, 3, 0, 0, 0]]]]]]]],
       "l%ic%i..l%ic%i"],
    S = [13, "__loc"],
    T = [13, "__pos"],
    U = [13, "__lstack"],
    V = [13, "__"];
   function make(b, a, opt, param){
    var
     show_attrs$0 = b ? b[1] : show_attrs,
     show_locs$0 = a ? a[1] : show_locs,
     loc_mode$0 = opt ? opt[1] : loc_mode;
    return [0, show_attrs$0, show_locs$0, loc_mode$0];
   }
   function cnum(pos){return pos[4] - pos[3] | 0;}
   function pp_collection(pp_elm, open, close, sep, fmt, l){
    if(! l) return caml_call4(Stdlib_Format[143], fmt, g, open, close);
    var tl = l[2], hd = l[1];
    caml_call5(Stdlib_Format[143], fmt, d, open, pp_elm, hd);
    caml_call2
     (Ppxlib_Import[94][77],
      tl,
      function(sv){
       return caml_call5(Stdlib_Format[143], fmt, e, sep, pp_elm, sv);
      });
    return caml_call3(Stdlib_Format[143], fmt, f, close);
   }
   function pp_simple_val(fmt, simple_val){
    if(typeof simple_val === "number")
     return caml_call2(Stdlib_Format[143], fmt, h);
    switch(simple_val[0]){
      case 0:
       var i$0 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, i, i$0);
      case 1:
       var s$0 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, j, s$0);
      case 2:
       var b = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, k, b);
      case 3:
       var c = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, l, c);
      case 4:
       var l$0 = simple_val[1];
       return pp_collection(pp_simple_val, cst$1, cst$0, cst, fmt, l$0);
      case 5:
       var f = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, m, f);
      case 6:
       var i32 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, n, i32);
      case 7:
       var i64 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, o, i64);
      case 8:
       var ni = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, p, ni);
      case 9:
       var fields = simple_val[1];
       return pp_collection(pp_field, cst$4, cst$3, cst$2, fmt, fields);
      case 10:
       var cname = simple_val[1], match = simple_val[2];
       if(! match) return caml_call3(Stdlib_Format[143], fmt, t, cname);
       var x = match[1];
       a:
       {
        if(typeof x !== "number" && 10 === x[0] && x[2]){
         if(match[2]) break a;
         return caml_call5
                 (Stdlib_Format[143], fmt, s, cname, pp_simple_val, x);
        }
        if(! match[2])
         return caml_call5
                 (Stdlib_Format[143], fmt, r, cname, pp_simple_val, x);
       }
       var l$1 = simple_val[2];
       return caml_call5
               (Stdlib_Format[143], fmt, q, cname, pp_simple_val, [11, l$1]);
      case 11:
       var l$2 = simple_val[1];
       return pp_collection(pp_simple_val, cst$7, cst$6, cst$5, fmt, l$2);
      case 12:
       var l$3 = simple_val[1];
       return pp_collection(pp_simple_val, cst$10, cst$9, cst$8, fmt, l$3);
      default:
       var s$1 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, u, s$1);
    }
   }
   function pp_field(fmt, param){
    var simple_val = param[2], fname = param[1];
    return caml_call5
            (Stdlib_Format[143], fmt, v, fname, pp_simple_val, simple_val);
   }
   var
    lift_simple_val =
      caml_call2
       (CamlinternalOO[19],
        [0,
         cst_bool,
         cst_cases,
         cst_case,
         cst_char,
         cst_value_binding,
         cst_extension_constructor_kind,
         cst_lift_record_with_desc,
         cst_core_type,
         cst_structure,
         cst_list,
         cst_constr,
         cst_label_declaration,
         cst_module_binding,
         cst_position,
         cst_toplevel_directive,
         cst_directive_argument,
         cst_object_field_desc,
         cst_unit,
         cst_class_type_field_desc,
         cst_open_infos,
         cst_pattern_desc,
         cst_nativeint,
         cst_signature_item,
         cst_extension_constructor,
         cst_value_constraint,
         cst_toplevel_phrase,
         cst_extension,
         cst_location,
         cst_variance,
         cst_package_type,
         cst_virtual_flag,
         cst_module_type_desc,
         cst_rec_flag,
         cst_payload,
         cst_type_exception,
         cst_label,
         cst_letop,
         cst_location_stack,
         cst_value_description,
         cst_module_declaration,
         cst_class_type_declaration,
         cst_longident_loc,
         cst_closed_flag,
         cst_directive_argument_desc,
         cst_attribute,
         cst_class_infos,
         cst_record,
         cst_signature_item_desc,
         cst_int,
         cst_loc,
         cst_row_field_desc,
         cst_override_flag,
         cst_float,
         cst_structure_item_desc,
         cst_class_field_desc,
         cst_binding_op,
         cst_module_expr_desc,
         cst_class_signature,
         cst_type_extension,
         cst_class_field_kind,
         cst_module_type_declaration,
         cst_arg_label,
         cst_row_field,
         cst_longident,
         cst_string,
         cst_pattern,
         cst_include_description,
         cst_function_param,
         cst_signature,
         cst_function_body,
         cst_class_type_field,
         cst_attributes,
         cst_tuple,
         cst_open_description,
         cst_with_constraint,
         cst_include_declaration,
         cst_class_type_desc,
         cst_private_flag,
         cst_injectivity,
         cst_open_declaration,
         cst_object_field,
         cst_array,
         cst_constant,
         cst_class_expr,
         cst_functor_parameter,
         cst_type_constraint,
         cst_direction_flag,
         cst_core_type_desc,
         cst_type_declaration,
         cst_constructor_declaration,
         cst_option,
         cst_type_kind,
         cst_module_expr,
         cst_module_substitution,
         cst_class_description,
         cst_expression,
         cst_class_type,
         cst_structure_item,
         cst_include_infos,
         cst_class_declaration,
         cst_function_param_desc,
         cst_other,
         cst_module_type,
         cst_get_config,
         cst_class_expr_desc,
         cst_set_config,
         cst_class_structure,
         cst_mutable_flag,
         cst_expression_desc,
         cst_constructor_arguments,
         cst_int32,
         cst_int64,
         cst_class_field],
        function(h){
         var
          d = caml_call3(CamlinternalOO[4], h, b, c),
          g = d[58],
          f = d[114],
          m = d[2],
          n = d[3],
          o = d[7],
          p = d[13],
          q = d[16],
          r = d[17],
          s = d[18],
          t = d[19],
          u = d[20],
          v = d[21],
          W = d[22],
          X = d[23],
          Y = d[24],
          Z = d[25],
          _ = d[26],
          $ = d[27],
          aa = d[28],
          ab = d[29],
          ac = d[31],
          ad = d[32],
          ae = d[34],
          af = d[35],
          ag = d[40],
          ah = d[41],
          ai = d[42],
          aj = d[43],
          ak = d[44],
          al = d[46],
          am = d[48],
          an = d[49],
          ao = d[54],
          ap = d[55],
          aq = d[56],
          ar = d[57],
          as = d[62],
          at = d[63],
          au = d[64],
          av = d[65],
          aw = d[69],
          ax = d[74],
          ay = d[78],
          az = d[79],
          aA = d[80],
          aB = d[81],
          aC = d[82],
          aD = d[83],
          aE = d[84],
          aF = d[87],
          aG = d[89],
          aH = d[90],
          aI = d[91],
          aJ = d[92],
          aK = d[94],
          aL = d[95],
          aM = d[96],
          aN = d[99],
          aO = d[100],
          aP = d[101],
          aQ = d[102],
          aR = d[105],
          aS = d[108],
          aT = d[110],
          aU = d[112],
          e =
            caml_call6
             (CamlinternalOO[18], h, 0, a, shared, Ppxlib_Ast_traverse[15], 1),
          i = e[16],
          j = e[17],
          k = e[79],
          l = e[82],
          aW = e[4],
          aX = e[10],
          aY = e[12],
          aZ = e[18],
          a0 = e[21],
          a1 = e[27],
          a2 = e[32],
          a3 = e[49],
          a4 = e[50],
          a5 = e[56],
          a6 = e[59],
          a7 = e[63],
          a8 = e[71],
          a9 = e[74],
          a_ = e[77],
          aV = e[1];
         caml_call2
          (CamlinternalOO[11],
           h,
           [0,
            X,
            function(self_1, new_config){
             self_1[f + 1] = new_config;
             return 0;
            },
            aw,
            function(self_1, param){return self_1[f + 1];},
            o,
            function(self_1, param){return 0;},
            au,
            function(self_1, i){return [0, i];},
            t,
            function(self_1, s){return [1, s];},
            aS,
            function(self_1, b){return [2, b];},
            aR,
            function(self_1, c){return [3, c];},
            ax,
            function(self_1, f){return [5, f];},
            at,
            function(self_1, i32){return [6, i32];},
            as,
            function(self_1, i64){return [7, i64];},
            ai,
            function(self_1, ni){return [8, ni];},
            ar,
            function(self_1, lift_a, list){
             return [12, caml_call2(Ppxlib_Import[94][55], list, lift_a)];
            },
            p,
            function(self_1, res_list){return [11, res_list];},
            _,
            function(self_1, fields){return [9, fields];},
            aF,
            function(self_1, ctr, res_list){return [10, ctr, res_list];},
            aU,
            function(self_1, lift_a, array){
             var a = caml_call2(Stdlib_ArrayLabels[14], lift_a, array);
             return [4, caml_call1(Stdlib_ArrayLabels[10], a)];
            },
            af,
            function(self_1, a){return V;},
            ao,
            function(self_1, ls){return U;},
            ab,
            function(self_1, pos){
             var match = self_1[f + 1][3];
             if
              (self_1[f + 1][2]
               && typeof match === "number" && 782112175 === match)
              return caml_call1(caml_call1(a9, self_1), pos);
             return T;
            },
            aq,
            function(self_1, lift_a, a_loc){
             return self_1[f + 1][2]
                     ? caml_call2(caml_call1(a3, self_1), lift_a, a_loc)
                     : caml_call1(lift_a, a_loc[1]);
            },
            ap,
            function(self_1, loc){
             var match = self_1[f + 1][3];
             if(! self_1[f + 1][2]) return S;
             if(782112175 <= match)
              return caml_call1(caml_call1(a4, self_1), loc);
             var
              begin_line = loc[1][2],
              begin_char = cnum(loc[1]),
              end_line = loc[2][2],
              end_char = cnum(loc[2]),
              repr =
                caml_call2(Ppxlib_Import[92][4], begin_line, end_line)
                 ? caml_call4
                   (Stdlib_Format[146], Q, begin_line, begin_char, end_char)
                 : caml_call5
                   (Stdlib_Format[146],
                    R,
                    begin_line,
                    begin_char,
                    end_line,
                    end_char),
              with_ghost = loc[3] ? caml_call2(Stdlib[28], repr, cst_g) : repr;
             return [13, with_ghost];
            },
            aT,
            function(self_1, attrs){
             return self_1[f + 1][1]
                     ? caml_call1(caml_call1(aW, self_1), attrs)
                     : P;
            },
            g,
            function(self_1, lift_desc, lift_record, desc, attrs, x){
             a:
             {
              var a = self_1[f + 1][1];
              if(! self_1[f + 1][2]){
               if(a && attrs) break a;
               return caml_call1(lift_desc, desc);
              }
             }
             return caml_call1(lift_record, x);
            },
            aE,
            function(self_1, ct){
             var
              a = ct[4],
              b = ct[1],
              c = caml_call1(a1, self_1),
              d = caml_call1(self_1[1][aD + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, ct);
            },
            Z,
            function(self_1, rf){
             var
              a = rf[3],
              b = rf[1],
              c = caml_call1(a_, self_1),
              d = caml_call1(self_1[1][Y + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, rf);
            },
            ah,
            function(self_1, obf){
             var
              a = obf[3],
              b = obf[1],
              c = caml_call1(a7, self_1),
              d = caml_call1(self_1[1][ag + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, obf);
            },
            ad,
            function(self_1, pat){
             var
              a = pat[4],
              b = pat[1],
              c = caml_call1(a8, self_1),
              d = caml_call1(self_1[1][ac + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, pat);
            },
            az,
            function(self_1, exp){
             var
              a = exp[4],
              b = exp[1],
              c = caml_call1(a2, self_1),
              d = caml_call1(self_1[1][ay + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, exp);
            },
            aK,
            function(self_1, cty){
             var
              a = cty[3],
              b = cty[1],
              c = caml_call1(aZ, self_1),
              d = caml_call1(self_1[1][aJ + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, cty);
            },
            aI,
            function(self_1, ctf){
             var
              a = ctf[3],
              b = ctf[1],
              c = caml_call1(a0, self_1),
              d = caml_call1(self_1[1][aH + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, ctf);
            },
            aQ,
            function(self_1, cl){
             var
              a = cl[3],
              b = cl[1],
              c = caml_call1(aX, self_1),
              d = caml_call1(self_1[1][aP + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, cl);
            },
            aO,
            function(self_1, cf){
             var
              a = cf[3],
              b = cf[1],
              c = caml_call1(aY, self_1),
              d = caml_call1(self_1[1][aN + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, cf);
            },
            al,
            function(self_1, mty){
             var
              a = mty[3],
              b = mty[1],
              c = caml_call1(a6, self_1),
              d = caml_call1(self_1[1][ak + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, mty);
            },
            an,
            function(self_1, mod){
             var
              a = mod[3],
              b = mod[1],
              c = caml_call1(a5, self_1),
              d = caml_call1(self_1[1][am + 1], self_1);
             return caml_call6(self_1[1][g + 1], self_1, d, c, b, a, mod);
            },
            r,
            function(self_1, stri){
             return caml_call2(self_1[1][q + 1], self_1, stri[1]);
            },
            v,
            function(self_1, sigi){
             return caml_call2(self_1[1][u + 1], self_1, sigi[1]);
            },
            s,
            function(self_1, str){
             if(self_1[f + 1][1])
              return caml_call1(caml_call1(l, self_1), str);
             var
              a =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 13 === param[1][0] ? 0 : 1;},
                  str);
             return caml_call1(caml_call1(l, self_1), a);
            },
            W,
            function(self_1, sig){
             if(self_1[f + 1][1])
              return caml_call1(caml_call1(k, self_1), sig);
             var
              a =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 14 === param[1][0] ? 0 : 1;},
                  sig);
             return caml_call1(caml_call1(k, self_1), a);
            },
            aL,
            function(self_1, cstr){
             if(self_1[f + 1][1])
              return caml_call1(caml_call1(j, self_1), cstr);
             var
              pcstr_fields =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 5 === param[1][0] ? 0 : 1;},
                  cstr[2]),
              a = [0, cstr[1], pcstr_fields];
             return caml_call1(caml_call1(j, self_1), a);
            },
            aM,
            function(self_1, csig){
             if(self_1[f + 1][1])
              return caml_call1(caml_call1(i, self_1), csig);
             var
              pcsig_fields =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 4 === param[1][0] ? 0 : 1;},
                  csig[2]),
              a = [0, csig[1], pcsig_fields];
             return caml_call1(caml_call1(i, self_1), a);
            },
            aB,
            function(self_1, dira){
             return caml_call2(self_1[1][aA + 1], self_1, dira[1]);
            },
            $,
            function(self_1, rec_flag){return rec_flag ? N : O;},
            aC,
            function(self_1, direction_flag){return direction_flag ? L : M;},
            aa,
            function(self_1, private_flag){return private_flag ? J : K;},
            aj,
            function(self_1, mutable_flag){return mutable_flag ? H : I;},
            m,
            function(self_1, virtual_flag){return virtual_flag ? F : G;},
            ae,
            function(self_1, override_flag){return override_flag ? D : E;},
            aG,
            function(self_1, closed_flag){return closed_flag ? B : C;},
            n,
            function(self_1, variance){
             switch(variance){
               case 0:
                return y;
               case 1:
                return z;
               default: return A;
             }
            },
            av,
            function(self_1, injectivity){return injectivity ? w : x;}]);
         return function(c, b){
          var a = caml_call2(CamlinternalOO[24], b, h);
          caml_call1(aV, a);
          a[f + 1] = default$;
          return caml_call3(CamlinternalOO[26], b, a, h);};
        });
   function Make(Conf){
    var lsv = caml_call1(lift_simple_val[1], 0);
    caml_call2
     (caml_get_cached_method(lsv, 1003971839, cache_id), lsv, Conf[1]);
    function structure(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_cached_method(lsv, -951102413, cache_id$0), lsv, str));
    }
    function structure_item(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_cached_method(lsv, 832861151, cache_id$1), lsv, str));
    }
    function signature(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_cached_method(lsv, 359375608, cache_id$2), lsv, str));
    }
    function signature_item(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_cached_method(lsv, -662996230, cache_id$3), lsv, str));
    }
    function expression(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_cached_method(lsv, 782176664, cache_id$4), lsv, str));
    }
    function pattern(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_cached_method(lsv, 293013072, cache_id$5), lsv, str));
    }
    function core_type(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_cached_method(lsv, -957384486, cache_id$6), lsv, str));
    }
    return [0,
            structure,
            structure_item,
            signature,
            signature_item,
            expression,
            pattern,
            core_type];
   }
   function make$0(config){return Make([0, config]);}
   var
    Default = Make([0, default$]),
    lift_simple_val$0 = caml_call1(lift_simple_val[1], 0);
   function pp_with_config(lifter, opt, fmt, x){
    var
     config = opt ? opt[1] : default$,
     old_config =
       caml_call2
        (caml_get_cached_method(lift_simple_val$0, 945407627, cache_id$7),
         lift_simple_val$0,
         0);
    caml_call2
     (caml_get_cached_method(lift_simple_val$0, 1003971839, cache_id$8),
      lift_simple_val$0,
      config);
    var res = pp_simple_val(fmt, caml_call1(lifter, x));
    caml_call2
     (caml_get_cached_method(lift_simple_val$0, 1003971839, cache_id$9),
      lift_simple_val$0,
      old_config);
    return res;
   }
   var
    W =
      caml_call1
       (caml_get_cached_method(lift_simple_val$0, -951102413, cache_id$10),
        lift_simple_val$0);
   function structure(a, b, c){return pp_with_config(W, a, b, c);}
   var
    X =
      caml_call1
       (caml_get_cached_method(lift_simple_val$0, 832861151, cache_id$11),
        lift_simple_val$0);
   function structure_item(a, b, c){return pp_with_config(X, a, b, c);}
   var
    Y =
      caml_call1
       (caml_get_cached_method(lift_simple_val$0, 359375608, cache_id$12),
        lift_simple_val$0);
   function signature(a, b, c){return pp_with_config(Y, a, b, c);}
   var
    Z =
      caml_call1
       (caml_get_cached_method(lift_simple_val$0, -662996230, cache_id$13),
        lift_simple_val$0);
   function signature_item(a, b, c){return pp_with_config(Z, a, b, c);}
   var
    _ =
      caml_call1
       (caml_get_cached_method(lift_simple_val$0, 782176664, cache_id$14),
        lift_simple_val$0);
   function expression(a, b, c){return pp_with_config(_, a, b, c);}
   var
    $ =
      caml_call1
       (caml_get_cached_method(lift_simple_val$0, 293013072, cache_id$15),
        lift_simple_val$0);
   function pattern(a, b, c){return pp_with_config($, a, b, c);}
   var
    aa =
      caml_call1
       (caml_get_cached_method(lift_simple_val$0, -957384486, cache_id$16),
        lift_simple_val$0);
   function core_type(a, b, c){return pp_with_config(aa, a, b, c);}
   var
    Ppxlib_Pp_ast =
      [0,
       [0, make],
       Make,
       make$0,
       Default,
       structure,
       structure_item,
       signature,
       signature_item,
       expression,
       pattern,
       core_type];
   runtime.caml_register_global(69, Ppxlib_Pp_ast, "Ppxlib__Pp_ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Driver
//# unitInfo: Requires: Astlib, Astlib__Ast_metadata, Astlib__Keyword, Astlib__Location, Astlib__Pprintast, CamlinternalLazy, CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse, Ppxlib__Attribute, Ppxlib__Caller_id, Ppxlib__Common, Ppxlib__Context_free, Ppxlib__Expansion_context, Ppxlib__Extension, Ppxlib__Import, Ppxlib__Location, Ppxlib__Location_check, Ppxlib__Name, Ppxlib__Options, Ppxlib__Pp_ast, Ppxlib__Reconcile, Ppxlib__Utils, Ppxlib_ast__Import, Ppxlib_ast__Warn, Ppxlib_print_diff, Sexplib0__Sexp, Stdlib, Stdlib__Arg, Stdlib__ArrayLabels, Stdlib__Filename, Stdlib__Format, Stdlib__Lexing, Stdlib__Printf, Stdlib__Sys
//# shape: Ppxlib__Driver:[F(3),[F(2)*],N,N,F(10)->F(3),F(2)->F(2),F(4),F(2),F(1),[F(13),F(4)],F(2),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "",
    cst_s = "%s",
    cst_s$0 = "%s\n",
    cst$9 = "-",
    cst_as_ppx = "--as-ppx",
    cst_apply_called_too_many_time$1 = "-apply called too many times",
    cst_as_ppx$0 = "-as-ppx",
    cst_dparsetree$0 = "-dparsetree",
    cst_dump_ast$0 = "-dump-ast",
    cst_null$0 = "-null",
    cst_reconcile$0 = "-reconcile",
    cst_reconcile_with_comments$0 = "-reconcile-with-comments",
    cst_builtin_check_unused_attri = "<builtin:check-unused-attributes>\n",
    cst_builtin_check_unused_exten = "<builtin:check-unused-extensions>\n",
    cst_builtin_freshen_and_collec =
      "<builtin:freshen-and-collect-attributes>\n",
    cst_Expected_a_binary_AST_as_i = "Expected a binary AST as input",
    cst_none$1 = "_none_",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expand_inline = "expand_inline",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_ocaml_ppx_context = "ocaml.ppx.context",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_ppxlib_driver$1 = "ppxlib_driver",
    cst_ppxlib_driver_cannot_use_r =
      "ppxlib_driver: cannot use -reconcile with binary AST files",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_driver_ml = "src/driver.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_oo_cache_id = runtime.caml_oo_cache_id,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_remove = runtime.caml_sys_remove,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$7 = cst$9,
    cst$6 = cst$10,
    cst$4 = "\n",
    cst$5 = cst$10,
    tool_name$0 = "ppx_driver",
    cst$3 = cst$9,
    cst$2 = cst$10,
    tool_name = cst_ppxlib_driver$1,
    cst$1 = ", ",
    pos = [0, cst$10, 1, 0, 0],
    cst$0 = cst$10,
    cst = cst$10,
    prefix = "./",
    d =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    e =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    cst$8 = cst$9,
    Ppxlib_Utils = global_data.Ppxlib__Utils,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib = global_data.Stdlib,
    Astlib = global_data.Astlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Astlib_Ast_metadata = global_data.Astlib__Ast_metadata,
    Ppxlib_Context_free = global_data.Ppxlib__Context_free,
    Astlib_Keyword = global_data.Astlib__Keyword,
    Ppxlib_ast_Warn = global_data.Ppxlib_ast__Warn,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    Ppxlib_Pp_ast = global_data.Ppxlib__Pp_ast,
    Astlib_Pprintast = global_data.Astlib__Pprintast,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Ppxlib_Reconcile = global_data.Ppxlib__Reconcile,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppxlib_print_diff = global_data.Ppxlib_print_diff,
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Ppxlib_Extension = global_data.Ppxlib__Extension,
    Ppxlib_Location_check = global_data.Ppxlib__Location_check,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Caller_id = global_data.Ppxlib__Caller_id,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Ppxlib_Options = global_data.Ppxlib__Options,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Astlib_Location = global_data.Astlib__Location,
    Ppxlib_Name = global_data.Ppxlib__Name,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    cache_id$3 = caml_oo_cache_id(),
    cache_id$4 = caml_oo_cache_id(),
    cache_id$5 = caml_oo_cache_id(),
    cache_id$6 = caml_oo_cache_id(),
    cache_id$7 = caml_oo_cache_id(),
    cache_id$8 = caml_oo_cache_id(),
    cache_id$9 = caml_oo_cache_id(),
    cache_id$10 = caml_oo_cache_id(),
    cache_id$11 = caml_oo_cache_id(),
    cache_id$12 = caml_oo_cache_id(),
    cache_id$13 = caml_oo_cache_id(),
    cache_id$14 = caml_oo_cache_id(),
    exe_name = caml_call1(Stdlib_Filename[13], Stdlib_Sys[1]),
    args = [0, 0];
   function add_arg(key, spec, doc){
    args[1] = [0, [0, key, spec, doc], args[1]];
    return 0;
   }
   var
    loc_fname = [0, 0],
    perform_checks = [0, Ppxlib_Options[4]],
    perform_checks_on_extensions = [0, Ppxlib_Options[5]],
    perform_locations_check = [0, Ppxlib_Options[6]],
    debug_attribute_drop = [0, 0],
    apply_list = [0, 0],
    preprocessor = [0, 0],
    no_merge = [0, 0],
    request_print_passes = [0, 0],
    request_print_transformations = [0, 0],
    use_color = [0, 1],
    diff_command = [0, Ppxlib_Options[8]],
    pretty = [0, 0],
    styler = [0, 0],
    output_metadata_filename = [0, 0],
    corrected_suffix = [0, ".ppx-corrected"],
    keywords = [0, 0],
    raise_embedded_errors_flag = [0, 0],
    a = caml_call1(CamlinternalOO[16], shared),
    j = caml_call2(CamlinternalOO[8], a, d)[49],
    k =
      caml_call6(CamlinternalOO[18], a, 0, 0, e, Ppxlib_Ast_traverse[1], 1)[1];
   caml_call3
    (CamlinternalOO[10],
     a,
     j,
     function(self_1, loc){return [0, loc[1], loc[2], 1];});
   caml_call1(CamlinternalOO[17], a);
   var f = caml_call2(CamlinternalOO[24], 0, a);
   caml_call1(k, f);
   var
    ghost = caml_call3(CamlinternalOO[26], 0, f, a),
    b = caml_call1(CamlinternalOO[16], shared),
    l = caml_call2(CamlinternalOO[8], b, d)[66],
    g = caml_call6(CamlinternalOO[18], b, 0, 0, e, Ppxlib_Ast_traverse[1], 1),
    n = g[37],
    m = g[1];
   caml_call3
    (CamlinternalOO[10],
     b,
     l,
     function(self_2, extension){
      if(raise_embedded_errors_flag[1]){
       var a = caml_call1(Ppxlib_Location[14][11], extension);
       caml_call2(Ppxlib_Import[95][2], a, Ppxlib_Location[14][8]);
      }
      return caml_call1(caml_call1(n, self_2), extension);
     });
   caml_call1(CamlinternalOO[17], b);
   var h = caml_call2(CamlinternalOO[24], 0, b);
   caml_call1(m, h);
   var raise_embedded_errors = caml_call3(CamlinternalOO[26], 0, h, b);
   function get_default_path(loc){
    var
     fname = loc[1][1],
     match =
       caml_call2(Ppxlib_Import[99][58], fname, prefix)
        ? [0, caml_call2(Ppxlib_Import[99][56], fname, 2)]
        : 0;
    if(! match) return fname;
    var fname$0 = match[1];
    return fname$0;
   }
   function get_default_path_str(param){
    if(! param) return cst;
    var loc = param[1][2];
    return get_default_path(loc);
   }
   function get_default_path_sig(param){
    if(! param) return cst$0;
    var loc = param[1][2];
    return get_default_path(loc);
   }
   function of_string(loc, s){return [0, loc, s];}
   var Lint_error = [0, of_string], given_through_cli = [0, 0], o = [0, 0];
   function get(param, name, pattern){
    var a = caml_call1(Astlib_Ast_metadata[7], name);
    return caml_call2
            (Ppxlib_Import[95][3],
             a,
             function(e){
              var e$0 = caml_call2(Ppxlib_ast_Import[2][9], 4, e);
              return Ppxlib_Ast_pattern[1].call
                      (null, pattern, e$0[2], 0, e$0, Ppxlib_Import[89][1]);
             });
   }
   function get_res(param, name, pattern){
    var
     a = caml_call1(Astlib_Ast_metadata[7], name),
     match =
       caml_call2
        (Ppxlib_Import[95][3],
         a,
         function(e){
          var e$0 = caml_call2(Ppxlib_ast_Import[2][9], 4, e);
          return Ppxlib_Ast_pattern[2].call
                  (null, pattern, e$0[2], 0, e$0, Ppxlib_Import[89][1]);
         });
    if(! match) return o;
    var match$0 = match[1];
    if(0 === match$0[0]){var e = match$0[1]; return [0, [0, e]];}
    var e$0 = match$0[1];
    return [1, e$0];
   }
   function set(param, name, expr){
    var a = caml_call2(Ppxlib_ast_Import[2][10], 4, expr);
    return caml_call2(Astlib_Ast_metadata[6], name, a);
   }
   var handlers = [0, 0];
   function add_handler(f){
    handlers[1] = caml_call2(Ppxlib_Import[100], handlers[1], [0, f, 0]);
    return 0;
   }
   function add_simple_handler(name, pattern, f){
    return add_handler
            (function(param){return caml_call1(f, get(0, name, pattern));});
   }
   function acknowledge_cookies(param){
    return caml_call2
            (Ppxlib_Import[94][77],
             handlers[1],
             function(f){return caml_call1(f, 0);});
   }
   var post_handlers = [0, 0];
   function add_post_handler(f){
    post_handlers[1] =
     caml_call2(Ppxlib_Import[100], post_handlers[1], [0, f, 0]);
    return 0;
   }
   function call_post_handlers(param){
    return caml_call2
            (Ppxlib_Import[94][77],
             post_handlers[1],
             function(f){return caml_call1(f, 0);});
   }
   function make(transformation, position){
    function transformation$0(ctx, st){
     var a = caml_call2(transformation, ctx, st);
     return Ppxlib_Common[24][1].call(null, a);
    }
    return [0, transformation$0, position];
   }
   var V2 = [0, make];
   function make$0(transformation, position){
    function transformation$0(param, st){
     return caml_call1(transformation, st);
    }
    return make(transformation$0, position);
   }
   function has_name(t, name){
    var a = caml_call2(Ppxlib_Import[99][73], name, t[1]);
    if(a) return a;
    var b = t[2], c = caml_call1(Ppxlib_Import[99][73], name);
    return caml_call2(Ppxlib_Import[94][22], c, b);
   }
   var
    all = [0, 0],
    p = [0, [2, 0, [12, 58, [4, 0, 0, 0, 0]]], "%s:%d"],
    cst_unknown_location = "<unknown location>",
    q = [0, cst_src_driver_ml, 0],
    r =
      [0,
       [11,
        "Warning: code transformation ",
        [2, 0, [11, " registered twice.\n", 0]]],
       "Warning: code transformation %s registered twice.\n"],
    s =
      [0,
       [11, "  - first time was at ", [15, [12, 10, 0]]],
       "  - first time was at %a\n"],
    t =
      [0,
       [11, "  - second time is at ", [15, [12, 10, 0]]],
       "  - second time is at %a\n"],
    cst_none = cst_none$1;
   function print_caller_id(oc, caller_id){
    if(! caller_id) return caml_call2(Stdlib[66], oc, cst_unknown_location);
    var loc = caller_id[1];
    return caml_call4(Stdlib_Printf[1], oc, p, loc[1], loc[2]);
   }
   function register_transformation
   (b,
    a,
    enclose_impl,
    enclose_intf,
    impl,
    intf,
    lint_impl,
    lint_intf,
    preprocess_impl,
    preprocess_intf,
    instrument,
    opt,
    name){
    var
     extensions = b ? b[1] : 0,
     rules = a ? a[1] : 0,
     aliases = opt ? opt[1] : 0,
     c =
       caml_call2
        (Ppxlib_Import[94][55], extensions, Ppxlib_Context_free[1][1]),
     rules$0 = caml_call2(Ppxlib_Import[100], c, rules),
     caller_id = Ppxlib_Caller_id[1].call(null, q),
     match =
       caml_call2
        (Ppxlib_Import[94][31],
         function(ct){return has_name(ct, name);},
         all[1]);
    if(match){
     var ct = match[1];
     caml_call2(Stdlib_Printf[3], r, name);
     caml_call3(Stdlib_Printf[3], s, print_caller_id, ct[13]);
     caml_call3(Stdlib_Printf[3], t, print_caller_id, caller_id);
    }
    var
     impl$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         impl,
         function(f, ctx, ast){
          var a = caml_call2(f, ctx, ast);
          return Ppxlib_Common[24][1].call(null, a);
         }),
     intf$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         intf,
         function(f, ctx, ast){
          var a = caml_call2(f, ctx, ast);
          return Ppxlib_Common[24][1].call(null, a);
         }),
     preprocess_impl$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         preprocess_impl,
         function(f, ctx, ast){
          var a = caml_call2(f, ctx, ast);
          return Ppxlib_Common[24][1].call(null, a);
         }),
     preprocess_intf$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         preprocess_intf,
         function(f, ctx, ast){
          var a = caml_call2(f, ctx, ast);
          return Ppxlib_Common[24][1].call(null, a);
         }),
     ct$0 =
       [0,
        name,
        aliases,
        impl$0,
        intf$0,
        lint_impl,
        lint_intf,
        preprocess_impl$0,
        preprocess_intf$0,
        enclose_impl,
        enclose_intf,
        instrument,
        rules$0,
        caller_id];
    all[1] = [0, ct$0, all[1]];
    return 0;
   }
   function loc_of_list(get_loc, l$1){
    if(! l$1) return 0;
    var
     l$2 = l$1[2],
     prev$1 = l$1[1],
     first = caml_call1(get_loc, prev$1),
     prev = prev$1,
     l = l$2;
    for(;;){
     if(! l){
      var last = caml_call1(get_loc, prev);
      return [0, [0, first[1], last[2], first[3]]];
     }
     var l$0 = l[2], prev$0 = l[1];
     prev = prev$0;
     l = l$0;
    }
   }
   function merge_into_generic_mappers
   (t, embed_errors, hook, expect_mismatch_handler, tool_name, input_name){
    var
     rules = t[12],
     enclose_intf = t[10],
     enclose_impl = t[9],
     intf = t[4],
     impl = t[3],
     map =
       caml_call5
        (Ppxlib_Context_free[4][1],
         0,
         [0, expect_mismatch_handler],
         [0, hook],
         [0, embed_errors],
         rules);
    function gen_header_and_footer(context, whole_loc, f){
     var
      match = caml_call1(f, whole_loc),
      footer = match[2],
      header = match[1];
     if(whole_loc){
      var
       loc = whole_loc[1],
       loc_header = [0, loc[1], loc[1], loc[3]],
       loc_footer = [0, loc[2], loc[2], loc[3]];
      if(header) caml_call3(hook[1], context, loc_header, [1, header]);
      if(footer) caml_call3(hook[1], context, loc_footer, [1, footer]);
     }
     else{
      var l = caml_call2(Ppxlib_Import[100], header, footer);
      if(l){
       var loc$0 = [0, pos, pos, 0];
       caml_call3(hook[1], context, loc$0, [1, l]);
      }
     }
     return [0, header, footer];
    }
    if(input_name)
     var input_name$0 = input_name[1], input_name$1 = input_name$0;
    else
     var input_name$1 = cst_none;
    function map_impl(ctxt, st_with_attrs){
     var
      match =
        caml_call2
         (Ppxlib_Import[94][74],
          st_with_attrs,
          function(param){return 13 === param[1][0] ? 1 : 0;}),
      st = match[2],
      attrs = match[1],
      file_path = get_default_path_str(st),
      base_ctxt =
        caml_call3
         (Ppxlib_Expansion_context[1][4], tool_name, file_path, input_name$1);
     if(enclose_impl)
      var
       f = enclose_impl[1],
       whole_loc = loc_of_list(function(st){return st[2];}, st),
       a = gen_header_and_footer(10, whole_loc, caml_call1(f, base_ctxt)),
       footer = a[2],
       header = a[1];
     else
      var footer = 0, header = 0;
     var
      b =
        caml_call3
         (caml_get_cached_method(map, -951102413, cache_id),
          map,
          base_ctxt,
          caml_call1
           (Ppxlib_Import[94][59],
            [0, attrs, [0, header, [0, st, [0, footer, 0]]]]));
     return Ppxlib_Common[24][2].call
             (null,
              b,
              function(st){
               if(! impl) return Ppxlib_Common[24][1].call(null, st);
               var f = impl[1];
               return caml_call2(f, ctxt, st);
              });
    }
    function map_intf(ctxt, sg_with_attrs){
     var
      match =
        caml_call2
         (Ppxlib_Import[94][74],
          sg_with_attrs,
          function(param){return 14 === param[1][0] ? 1 : 0;}),
      sg = match[2],
      attrs = match[1],
      file_path = get_default_path_sig(sg),
      base_ctxt =
        caml_call3
         (Ppxlib_Expansion_context[1][4], tool_name, file_path, input_name$1);
     if(enclose_intf)
      var
       f = enclose_intf[1],
       whole_loc = loc_of_list(function(sg){return sg[2];}, sg),
       a = gen_header_and_footer(9, whole_loc, caml_call1(f, base_ctxt)),
       footer = a[2],
       header = a[1];
     else
      var footer = 0, header = 0;
     var
      b =
        caml_call3
         (caml_get_cached_method(map, 359375608, cache_id$0),
          map,
          base_ctxt,
          caml_call1
           (Ppxlib_Import[94][59],
            [0, attrs, [0, header, [0, sg, [0, footer, 0]]]]));
     return Ppxlib_Common[24][2].call
             (null,
              b,
              function(sg){
               if(! intf) return Ppxlib_Common[24][1].call(null, sg);
               var f = intf[1];
               return caml_call2(f, ctxt, sg);
              });
    }
    return [0,
            t[1],
            t[2],
            [0, map_impl],
            [0, map_intf],
            t[5],
            t[6],
            t[7],
            t[8],
            t[9],
            t[10],
            t[11],
            t[12],
            t[13]];
   }
   function register_transformation_using_(impl, intf, aliases, name){
    var
     a = caml_call1(Ppxlib_ast_Import[2][11], 0),
     impl$0 = caml_call2(Ppxlib_Import[95][3], impl, a),
     b = caml_call1(Ppxlib_ast_Import[2][11], 1),
     intf$0 = caml_call2(Ppxlib_Import[95][3], intf, b);
    return register_transformation
            (0, 0, 0, 0, impl$0, intf$0, 0, 0, 0, 0, 0, aliases, name);
   }
   var
    V2$0 = [0, register_transformation, register_transformation_using_],
    cst_builtin_context_free = "<builtin:context-free>",
    u = [0, 0, 0, 0],
    v = [0, [11, "<preprocess:", [2, 0, [12, 62, 0]]], "<preprocess:%s>"],
    w = [0, [11, "<lint:", [2, 0, [12, 62, 0]]], "<lint:%s>"],
    x =
      [0,
       [11,
        "The following attributes ",
        [2, 0, [11, " after applying ", [2, 0, [11, ":\n", 0]]]]],
       "The following attributes %s after applying %s:\n"],
    y = [0, [11, "- ", [15, [11, ": ", [2, 0, [12, 10, 0]]]]], "- %a: %s\n"],
    z = [0, [17, 4, 0], "@."],
    cst_disappeared = "disappeared",
    cst_reappeared = "reappeared",
    A =
      [0,
       [11, "At most one preprocessor is allowed, while got: ", [2, 0, 0]],
       "At most one preprocessor is allowed, while got: %s"],
    cst_none$0 = cst_none$1;
   function add_ctxt_arg(f){
    return function(param, x){return caml_call1(f, x);};
   }
   function register_transformation$0
   (extensions,
    rules,
    enclose_impl,
    enclose_intf,
    impl,
    intf,
    lint_impl,
    lint_intf,
    preprocess_impl,
    preprocess_intf){
    var
     impl$0 = caml_call2(Ppxlib_Import[95][3], impl, add_ctxt_arg),
     intf$0 = caml_call2(Ppxlib_Import[95][3], intf, add_ctxt_arg),
     preprocess_impl$0 =
       caml_call2(Ppxlib_Import[95][3], preprocess_impl, add_ctxt_arg),
     preprocess_intf$0 =
       caml_call2(Ppxlib_Import[95][3], preprocess_intf, add_ctxt_arg),
     lint_impl$0 = caml_call2(Ppxlib_Import[95][3], lint_impl, add_ctxt_arg),
     lint_intf$0 = caml_call2(Ppxlib_Import[95][3], lint_intf, add_ctxt_arg),
     enclose_impl$0 =
       caml_call2(Ppxlib_Import[95][3], enclose_impl, add_ctxt_arg),
     enclose_intf$0 =
       caml_call2(Ppxlib_Import[95][3], enclose_intf, add_ctxt_arg);
    return function(a, b, c){
     return register_transformation
             (extensions,
              rules,
              enclose_impl$0,
              enclose_intf$0,
              impl$0,
              intf$0,
              lint_impl$0,
              lint_intf$0,
              preprocess_impl$0,
              preprocess_intf$0,
              a,
              b,
              c);};
   }
   function register_code_transformation(name, opt, impl, intf){
    var aliases = opt ? opt[1] : 0;
    return register_transformation$0
             (0, 0, 0, 0, [0, impl], [0, intf], 0, 0, 0, 0)
            (0, [0, aliases], name);
   }
   function register_transformation_using_$0(impl, intf){
    var
     impl$0 = caml_call2(Ppxlib_Import[95][3], impl, add_ctxt_arg),
     intf$0 = caml_call2(Ppxlib_Import[95][3], intf, add_ctxt_arg);
    return function(a, b){
     return register_transformation_using_(impl$0, intf$0, a, b);};
   }
   function debug_dropped_attribute(name, old_dropped, new_dropped){
    function print_diff(what, a, b){
     var
      diff =
        caml_call2
         (Ppxlib_Import[94][31],
          function(name){
           return 1
                  -
                   caml_call2
                    (Ppxlib_Import[94][22],
                     function(name$0){return name[1] === name$0[1] ? 1 : 0;},
                     b);
          },
          a),
      c = 1 - caml_call1(Ppxlib_Import[94][66], diff);
     return c
             ? (caml_call3
                (Stdlib_Printf[3], x, what, name),
               caml_call2
                (Ppxlib_Import[94][77],
                 diff,
                 function(param){
                  var loc = param[2], txt = param[1];
                  return caml_call4
                          (Stdlib_Format[145], y, Ppxlib_Location[9], loc, txt);
                 }),
               caml_call1(Stdlib_Format[145], z))
             : c;
    }
    print_diff(cst_disappeared, new_dropped, old_dropped);
    return print_diff(cst_reappeared, old_dropped, new_dropped);
   }
   function get_whole_ast_passes
   (embed_errors, hook, expect_mismatch_handler, tool_name, input_name){
    var match$0 = apply_list[1];
    if(match$0)
     var
      names = match$0[1],
      cts =
        caml_call2
         (Ppxlib_Import[94][55],
          names,
          function(name){
           return caml_call2
                   (Ppxlib_Import[94][27],
                    function(ct){return has_name(ct, name);},
                    all[1]);
          });
    else
     var cts = caml_call1(Ppxlib_Import[94][9], all[1]);
    var
     match =
       caml_call3
        (Ppxlib_Import[94][17],
         function(param, t){
          var
           rest = param[3],
           aft_i = param[2],
           bef_i = param[1],
           reduced_t =
             [0,
              t[1],
              t[2],
              t[3],
              t[4],
              0,
              0,
              0,
              0,
              t[9],
              t[10],
              t[11],
              t[12],
              t[13]];
          function f(instr){return [0, instr[2], instr[1]];}
          var match = caml_call2(Ppxlib_Import[95][3], t[11], f);
          if(! match) return [0, bef_i, aft_i, [0, reduced_t, rest]];
          var a = match[1];
          if(a[1]){
           var transf = a[2];
           return [0,
                   bef_i,
                   [0,
                    [0,
                     reduced_t[1],
                     reduced_t[2],
                     [0, transf],
                     reduced_t[4],
                     reduced_t[5],
                     reduced_t[6],
                     reduced_t[7],
                     reduced_t[8],
                     reduced_t[9],
                     reduced_t[10],
                     reduced_t[11],
                     0,
                     reduced_t[13]],
                    aft_i],
                   [0, reduced_t, rest]];
          }
          var transf$0 = a[2];
          return [0,
                  [0,
                   [0,
                    reduced_t[1],
                    reduced_t[2],
                    [0, transf$0],
                    reduced_t[4],
                    reduced_t[5],
                    reduced_t[6],
                    reduced_t[7],
                    reduced_t[8],
                    reduced_t[9],
                    reduced_t[10],
                    reduced_t[11],
                    0,
                    reduced_t[13]],
                   bef_i],
                  aft_i,
                  [0, reduced_t, rest]];
         },
         u,
         cts),
     transforms = match[3],
     after_instrs = match[2],
     before_instrs = match[1],
     preprocess =
       caml_call2
        (Ppxlib_Import[94][69],
         cts,
         function(t){
          if
           (!
            caml_call1(Ppxlib_Import[95][1], t[7])
            && ! caml_call1(Ppxlib_Import[95][1], t[8]))
           return 0;
          var a = t[13], b = t[8], c = t[7];
          return [0,
                  [0,
                   caml_call2(Stdlib_Printf[4], v, t[1]),
                   0,
                   c,
                   b,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   a]];
         }),
     linters =
       caml_call2
        (Ppxlib_Import[94][69],
         cts,
         function(t){
          if
           (!
            caml_call1(Ppxlib_Import[95][1], t[5])
            && ! caml_call1(Ppxlib_Import[95][1], t[6]))
           return 0;
          var a = t[13], b = t[6], c = t[5];
          return [0,
                  [0,
                   caml_call2(Stdlib_Printf[4], w, t[1]),
                   0,
                   0,
                   0,
                   c,
                   b,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   a]];
         }),
     d = caml_call1(Ppxlib_Import[94][1], preprocess);
    if(caml_call2(Ppxlib_Import[78], d, 1)){
     var
      e =
        caml_call2
         (Ppxlib_Import[94][55], preprocess, function(t){return t[1];}),
      pp = caml_call2(Ppxlib_Import[99][7], cst$1, e),
      err = caml_call2(Stdlib_Printf[4], A, pp);
     caml_call1(Stdlib[2], err);
    }
    if(no_merge[1])
     var
      b =
        caml_call2
         (Ppxlib_Import[94][55],
          transforms,
          function(a){
           return merge_into_generic_mappers
                   (a,
                    embed_errors,
                    hook,
                    expect_mismatch_handler,
                    tool_name,
                    input_name);
          });
    else{
     var
      get_enclosers =
        function(f){
         var
          a =
            caml_call2
             (Ppxlib_Import[94][69],
              transforms,
              function(ct){
               var match = caml_call1(f, ct);
               if(! match) return 0;
               var x = match[1];
               return [0, [0, ct[1], x]];
              }),
          b =
            caml_call1
             (caml_call1
               (Ppxlib_Import[94][44],
                function(c, param){
                 var b = param[1], a = c[1];
                 return caml_call2(Ppxlib_Import[99][72], a, b);
                }),
              a);
         return caml_call2
                 (Ppxlib_Import[94][55], b, function(a){return a[2];});
        },
      f =
        caml_call2
         (Ppxlib_Import[94][55], transforms, function(ct){return ct[12];}),
      rules = caml_call1(Ppxlib_Import[94][59], f),
      impl_enclosers = get_enclosers(function(ct){return ct[9];}),
      intf_enclosers = get_enclosers(function(ct){return ct[10];});
     a:
     {
      if(! rules && ! impl_enclosers && ! intf_enclosers){var a = transforms; break a;}
      var
       merge_encloser =
         function(enclosers){
          return enclosers
                  ? [0,
                    function(ctxt, loc){
                     var
                      a =
                        caml_call2
                         (Ppxlib_Import[94][55],
                          enclosers,
                          function(f){return caml_call2(f, ctxt, loc);}),
                      match = caml_call1(Ppxlib_Import[94][62], a),
                      footers = match[2],
                      headers = match[1],
                      headers$0 = caml_call1(Ppxlib_Import[94][59], headers),
                      b = caml_call1(Ppxlib_Import[94][9], footers),
                      footers$0 = caml_call1(Ppxlib_Import[94][59], b);
                     return [0, headers$0, footers$0];
                    }]
                  : 0;
         },
       enclose_intf = merge_encloser(intf_enclosers),
       enclose_impl = merge_encloser(impl_enclosers),
       c =
         [0,
          cst_builtin_context_free,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          enclose_impl,
          enclose_intf,
          0,
          rules,
          Ppxlib_Caller_id[1].call(null, 0)],
       a =
         [0,
          caml_call1
           (function(b){
               function a(a, d, e){
                return merge_into_generic_mappers(c, b, hook, a, d, e);
               }
               return function(c){
                function b(e, f){var d = f, b = e; return a(c, b, d);}
                return function(a){return b(a, input_name);};};
              }
              (embed_errors)
             (expect_mismatch_handler),
            tool_name),
          transforms];
     }
     var
      b =
        caml_call1
         (caml_call1
           (Ppxlib_Import[94][31],
            function(ct){
             var match = ct[4];
             if(! ct[3] && ! match) return 0;
             return 1;
            }),
          a);
    }
    var
     g = caml_call2(Ppxlib_Import[100], b, after_instrs),
     h = caml_call2(Ppxlib_Import[100], before_instrs, g),
     i = caml_call2(Ppxlib_Import[100], preprocess, h);
    return caml_call2(Ppxlib_Import[100], linters, i);
   }
   function apply_transforms
   (tool_name,
    file_path,
    field,
    lint_field,
    dropped_so_far,
    hook,
    expect_mismatch_handler,
    input_name,
    embed_errors,
    ast){
    var
     cts =
       get_whole_ast_passes
        (embed_errors, hook, expect_mismatch_handler, tool_name, input_name),
     acc =
       caml_call3
        (Ppxlib_Import[94][17],
         function(param, ct){
          var
           errors = param[4],
           lint_errors = param[3],
           dropped = param[2],
           ast = param[1];
          if(input_name)
           var input_name$0 = input_name[1], input_name$1 = input_name$0;
          else
           var input_name$1 = cst_none$0;
          var
           ctxt =
             caml_call3
              (Ppxlib_Expansion_context[1][4],
               tool_name,
               file_path,
               input_name$1),
           match = caml_call1(lint_field, ct);
          if(match){
           var f = match[1];
           try{
            var
             d = caml_call2(f, ctxt, ast),
             e = caml_call2(Ppxlib_Import[100], lint_errors, d),
             errors$0 = errors,
             lint_errors$0 = e;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
            var
             errors$0 = [0, Ppxlib_Common[23].call(null, exn), errors],
             lint_errors$0 = lint_errors;
           }
          }
          else
           var errors$0 = errors, lint_errors$0 = lint_errors;
          var match$0 = caml_call1(field, ct);
          if(! match$0) return [0, ast, dropped, lint_errors$0, errors$0];
          var f$0 = match$0[1];
          try{
           var
            a = caml_call2(f$0, ctxt, ast),
            b = a[2],
            c = a[1],
            errors$1 = errors$0,
            more_errors = b,
            ast$0 = c;
          }
          catch(exn){
           var exn$0 = caml_wrap_exception(exn);
           if(! embed_errors) throw caml_maybe_attach_backtrace(exn$0, 0);
           var
            errors$1 = [0, Ppxlib_Common[23].call(null, exn$0), errors$0],
            more_errors = 0,
            ast$0 = ast;
          }
          if(debug_attribute_drop[1]){
           var new_dropped = caml_call1(dropped_so_far, ast$0);
           debug_dropped_attribute(ct[1], dropped, new_dropped);
           var dropped$0 = new_dropped;
          }
          else
           var dropped$0 = 0;
          return [0,
                  ast$0,
                  dropped$0,
                  lint_errors$0,
                  caml_call2(Ppxlib_Import[100], errors$1, more_errors)];
         },
         [0, ast, 0, 0, 0],
         cts),
     errors = acc[4],
     lint_errors = acc[3],
     ast$0 = acc[1];
    return [0,
            ast$0,
            caml_call2
             (Ppxlib_Import[94][55],
              lint_errors,
              function(param){
               var s = param[2], loc = param[1];
               return Ppxlib_Common[20].call(null, loc, s);
              }),
            errors];
   }
   function error_to_extension(error, kind){
    if(kind){
     var
      loc = Ppxlib_Location[3],
      ext = caml_call1(Ppxlib_Location[14][7], error);
     return [1, [0, caml_call3(Ppxlib_Ast_builder[1][7], loc, ext, 0), 0]];
    }
    var
     loc$0 = Ppxlib_Location[3],
     ext$0 = caml_call1(Ppxlib_Location[14][7], error);
    return [0, [0, caml_call3(Ppxlib_Ast_builder[1][22], loc$0, ext$0, 0), 0]];
   }
   function exn_to_extension(exn, kind){
    return error_to_extension(Ppxlib_Common[23].call(null, exn), kind);
   }
   function sort_errors_by_loc(errors){
    return caml_call2
            (Ppxlib_Import[94][44],
             function(error$0, error){
              var
               loc = caml_call1(Ppxlib_Location[14][10], error$0),
               loc$0 = caml_call1(Ppxlib_Location[14][10], error);
              return Ppxlib_Location[13].call(null, loc, loc$0);
             },
             errors);
   }
   function map_structure_gen
   (st, tool_name, hook, expect_mismatch_handler, input_name, embed_errors){
    acknowledge_cookies(0);
    if(perform_checks[1]){
     Ppxlib_Attribute[26].call(null, 0);
     var a = Ppxlib_Attribute[20];
     caml_call2(caml_get_cached_method(a, -951102413, cache_id$1), a, st);
    }
    function with_errors(errors, st){
     var
      sorted = sort_errors_by_loc(errors),
      a =
        caml_call2
         (Ppxlib_Import[94][55],
          sorted,
          function(error){
           var
            a = caml_call1(Ppxlib_Location[14][7], error),
            b = caml_call1(Ppxlib_Location[14][10], error);
           return caml_call2
                   (caml_get_cached_method(ghost, 832861151, cache_id$2),
                    ghost,
                    caml_call3(Ppxlib_Ast_builder[1][7], b, a, 0));
          });
     return caml_call2(Ppxlib_Import[100], a, st);
    }
    var
     file_path = get_default_path_str(st),
     match =
       apply_transforms
        (tool_name,
         file_path,
         function(ct){return ct[3];},
         function(ct){return ct[5];},
         Ppxlib_Attribute[24],
         hook,
         expect_mismatch_handler,
         input_name,
         embed_errors,
         st),
     errors$0 = match[3],
     lint_errors = match[2],
     st$1 = match[1];
    if(lint_errors)
     var
      e =
        caml_call2
         (Ppxlib_Import[94][55],
          lint_errors,
          function(attr){
           var loc = attr[1][2];
           return caml_call2(Ppxlib_Ast_builder[1][8], loc, attr);
          }),
      st$0 = caml_call2(Ppxlib_Import[100], e, st$1);
    else
     var st$0 = st$1;
    call_post_handlers(0);
    if(perform_checks[1]){
     var
      b = Ppxlib_Attribute[19],
      unused_attributes_errors =
        caml_call3
         (caml_get_cached_method(b, -951102413, cache_id$3), b, st$0, 0);
     if(perform_checks_on_extensions[1])
      var
       c = Ppxlib_Extension[10],
       unused_extension_errors =
         caml_call3
          (caml_get_cached_method(c, -951102413, cache_id$4), c, st$0, 0);
     else
      var unused_extension_errors = 0;
     var
      not_seen_errors = Ppxlib_Attribute[21].call(null, 0),
      f =
        caml_call2
         (Ppxlib_Import[100], unused_extension_errors, not_seen_errors),
      errors = caml_call2(Ppxlib_Import[100], unused_attributes_errors, f);
    }
    else
     var errors = 0;
    if(perform_locations_check[1]){
     var
      g = Ppxlib_Location_check[1][1],
      d = Ppxlib_Location_check[2].call(null, loc_fname[1]);
     caml_call3(caml_get_cached_method(d, -951102413, cache_id$5), d, st$0, g);
    }
    var h = with_errors(errors, st$0);
    return caml_call2
            (caml_get_cached_method
              (raise_embedded_errors, -951102413, cache_id$6),
             raise_embedded_errors,
             with_errors(caml_call1(Ppxlib_Import[94][9], errors$0), h));
   }
   function map_signature_gen
   (sg, tool_name, hook, expect_mismatch_handler, input_name, embed_errors){
    acknowledge_cookies(0);
    if(perform_checks[1]){
     Ppxlib_Attribute[26].call(null, 0);
     var a = Ppxlib_Attribute[20];
     caml_call2(caml_get_cached_method(a, 359375608, cache_id$7), a, sg);
    }
    function with_errors(errors, sg){
     var
      sorted = sort_errors_by_loc(errors),
      a =
        caml_call2
         (Ppxlib_Import[94][55],
          sorted,
          function(error){
           var
            a = caml_call1(Ppxlib_Location[14][7], error),
            b = caml_call1(Ppxlib_Location[14][10], error);
           return caml_call2
                   (caml_get_cached_method(ghost, -662996230, cache_id$8),
                    ghost,
                    caml_call3(Ppxlib_Ast_builder[1][22], b, a, 0));
          });
     return caml_call2(Ppxlib_Import[100], a, sg);
    }
    var
     file_path = get_default_path_sig(sg),
     match =
       apply_transforms
        (tool_name,
         file_path,
         function(ct){return ct[4];},
         function(ct){return ct[6];},
         Ppxlib_Attribute[25],
         hook,
         expect_mismatch_handler,
         input_name,
         embed_errors,
         sg),
     errors$0 = match[3],
     lint_errors = match[2],
     sg$1 = match[1];
    if(lint_errors)
     var
      e =
        caml_call2
         (Ppxlib_Import[94][55],
          lint_errors,
          function(attr){
           var loc = attr[1][2];
           return caml_call2(Ppxlib_Ast_builder[1][23], loc, attr);
          }),
      sg$0 = caml_call2(Ppxlib_Import[100], e, sg$1);
    else
     var sg$0 = sg$1;
    call_post_handlers(0);
    if(perform_checks[1]){
     var
      b = Ppxlib_Attribute[19],
      unused_attributes_errors =
        caml_call3
         (caml_get_cached_method(b, 359375608, cache_id$9), b, sg$0, 0);
     if(perform_checks_on_extensions[1])
      var
       c = Ppxlib_Extension[10],
       unused_extension_errors =
         caml_call3
          (caml_get_cached_method(c, 359375608, cache_id$10), c, sg$0, 0);
     else
      var unused_extension_errors = 0;
     var
      not_seen_errors = Ppxlib_Attribute[21].call(null, 0),
      f =
        caml_call2
         (Ppxlib_Import[100], unused_extension_errors, not_seen_errors),
      errors = caml_call2(Ppxlib_Import[100], unused_attributes_errors, f);
    }
    else
     var errors = 0;
    if(perform_locations_check[1]){
     var
      g = Ppxlib_Location_check[1][1],
      d = Ppxlib_Location_check[2].call(null, loc_fname[1]);
     caml_call3(caml_get_cached_method(d, 359375608, cache_id$11), d, sg$0, g);
    }
    var h = with_errors(errors, sg$0);
    return caml_call2
            (caml_get_cached_method
              (raise_embedded_errors, 359375608, cache_id$12),
             raise_embedded_errors,
             with_errors(caml_call1(Ppxlib_Import[94][9], errors$0), h));
   }
   function map_signature(sg){
    var
     a = Ppxlib_Context_free[3][1],
     b = Ppxlib_Context_free[2][1],
     ast =
       map_signature_gen
        (sg, caml_call1(Astlib_Ast_metadata[5], 0), b, a, 0, 0);
    return ast;
   }
   function versioned_errorf(input_version, input_file_name){
    return caml_call1
            (Stdlib_Printf[10],
             function(msg){
              var
               a = Ppxlib_Location[1].call(null, input_file_name),
               err = caml_call3(Ppxlib_Location[14][1], a, msg, 0);
              return [1, [0, err, input_version]];
             });
   }
   function remove_no_error(fn){
    try{caml_sys_remove(fn); return;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[11]) return;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    c = caml_call1(CamlinternalOO[16], shared),
    G = caml_call2(CamlinternalOO[8], c, d)[25],
    H =
      caml_call6(CamlinternalOO[18], c, 0, 0, e, Ppxlib_Ast_traverse[5], 1)[1];
   caml_call3
    (CamlinternalOO[10],
     c,
     G,
     function(self_3, param, pos){
      var new_fn = param[2], old_fn = param[1];
      return caml_call2(Ppxlib_Import[99][73], pos[1], old_fn)
              ? [0, new_fn, pos[2], pos[3], pos[4]]
              : pos;
     });
   caml_call1(CamlinternalOO[17], c);
   var i = caml_call2(CamlinternalOO[24], 0, c);
   caml_call1(H, i);
   var
    relocate_mapper = caml_call3(CamlinternalOO[26], 0, i, c),
    set_input_name = Astlib_Location[2],
    I =
      [0,
       [11,
        "File contains a binary ",
        [2, 0, [11, " AST but an ", [2, 0, [11, " was expected", 0]]]]],
       "File contains a binary %s AST but an %s was expected"],
    J = [0, cst_src_driver_ml, 887, 30],
    K =
      [0,
       [11,
        "File is a binary ast for an unknown version of OCaml with magic number '",
        [2, 0, [12, 39, 0]]],
       "File is a binary ast for an unknown version of OCaml with magic number '%s'"],
    N =
      [0,
       [11, cst_ppxlib_driver_cannot_use_r, 0],
       cst_ppxlib_driver_cannot_use_r],
    O = [0, cst_src_driver_ml, 949, 8],
    P = [0, cst_src_driver_ml, 979, 8];
   function load_input(kind, input_name, relocate, fn){
    caml_call1(set_input_name, input_name);
    var
     input_source = caml_call2(Ppxlib_Import[99][73], fn, cst$3) ? 0 : [0, fn],
     input_kind = [0, kind, input_name],
     a = caml_call2(Ppxlib_Utils[5][1], input_source, input_kind);
    if(0 === a[0]){
     var
      match = a[1],
      ast = match[3],
      input_version = match[2],
      ast_input_name = match[1],
      ast_kind = Ppxlib_Utils[4][3].call(null, ast);
     if(! caml_call2(Ppxlib_Utils[3][3], kind, ast_kind)){
      var
       b = Ppxlib_Utils[3][2].call(null, kind),
       c = Ppxlib_Utils[3][2].call(null, ast_kind);
      return caml_call3(versioned_errorf(input_version, fn), I, c, b);
     }
     if
      (!
       caml_call2(Ppxlib_Import[99][73], ast_input_name, input_name)
       && relocate)
      return [0,
              [0,
               input_name,
               input_version,
               Ppxlib_Utils[4][2].call
                (null, ast, relocate_mapper, [0, ast_input_name, input_name])]];
     caml_call1(set_input_name, ast_input_name);
     return [0, [0, ast_input_name, input_version, ast]];
    }
    var match$0 = a[1];
    if(typeof match$0 === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, J], 1);
    if(0 === match$0[0]){
     var fall_back_version = match$0[2], unknown_magic = match$0[1];
     return caml_call2
             (versioned_errorf(fall_back_version, fn), K, unknown_magic);
    }
    var fall_back_version$0 = match$0[2], error = match$0[1];
    return [1, [0, error, fall_back_version$0]];
   }
   function load_source_file(fn){
    var s = caml_call1(Ppxlib_Import[91][4], fn);
    function test(magic_number){
     var a = caml_call3(Ppxlib_Import[99][14], magic_number, 0, 9);
     return caml_call2(Ppxlib_Import[99][58], s, a);
    }
    var
     a = test(Ppxlib_ast_Import[2][1][3][2]),
     b = a || test(Ppxlib_ast_Import[2][1][3][1]);
    if(b){
     var c = [0, Ppxlib_Location[1].call(null, fn)];
     Ppxlib_Location[6].call(null, c, N);
    }
    return s;
   }
   function extract_cookies(ast){
    if(0 === ast[0]){
     var sg$1 = ast[1];
     if(sg$1){
      var prefix$1 = sg$1[1], b = prefix$1[1];
      if(14 === b[0] && ! (b[1][1][1] !== cst_ocaml_ppx_context)){
       var
        sg$0 = sg$1[2],
        prefix$2 = caml_call2(Ppxlib_ast_Import[2][10], 1, [0, prefix$1, 0]),
        d = caml_call2(Astlib_Ast_metadata[4], 1, prefix$2);
       if(! caml_call1(Ppxlib_Import[94][66], d))
        throw caml_maybe_attach_backtrace([0, Assert_failure, P], 1);
       var sg = sg$0;
      }
      else
       var sg = sg$1;
     }
     else
      var sg = sg$1;
     caml_call2
      (Ppxlib_Import[94][77],
       given_through_cli[1],
       function(param){
        var expr = param[2], name = param[1];
        return set(0, name, expr);
       });
     return [0, sg];
    }
    var st$1 = ast[1];
    if(st$1){
     var prefix = st$1[1], a = prefix[1];
     if(13 === a[0] && ! (a[1][1][1] !== cst_ocaml_ppx_context)){
      var
       st$0 = st$1[2],
       prefix$0 = caml_call2(Ppxlib_ast_Import[2][10], 0, [0, prefix, 0]),
       c = caml_call2(Astlib_Ast_metadata[2], 1, prefix$0);
      if(! caml_call1(Ppxlib_Import[94][66], c))
       throw caml_maybe_attach_backtrace([0, Assert_failure, O], 1);
      var st = st$0;
     }
     else
      var st = st$1;
    }
    else
     var st = st$1;
    caml_call2
     (Ppxlib_Import[94][77],
      given_through_cli[1],
      function(param){
       var expr = param[2], name = param[1];
       return set(0, name, expr);
      });
    return [1, st];
   }
   var corrections = [0, 0];
   function add_to_list(r, x){r[1] = [0, x, r[1]]; return 0;}
   function register_correction(loc, repl){
    return add_to_list
            (corrections,
             caml_call4(Ppxlib_Reconcile[2][2], loc[1], loc[2], repl, 0));
   }
   var process_file_hooks = [0, 0];
   function register_process_file_hook(f){
    return add_to_list(process_file_hooks, f);
   }
   var
    all$0 = [0, 0],
    F =
      [0,
       [11,
        "Error while running external preprocessor\nCommand line: ",
        [2, 0, [12, 10, 0]]],
       "Error while running external preprocessor\nCommand line: %s\n"],
    cst_ocamlpp = "ocamlpp",
    cst_ppxlib_driver = cst_ppxlib_driver$1,
    cst_ppxlib_driver$0 = cst_ppxlib_driver$1;
   function dump_and_reset_all(param){
    var a = caml_call1(Ppxlib_Import[94][9], all$0[1]);
    return caml_call2
            (Ppxlib_Import[94][69],
             a,
             function(param){
              var t = param[1], match = t[2];
              if(! match) return 0;
              var v = match[1];
              t[2] = 0;
              var a = caml_call1(t[3], v);
              return [0, [0, t[1], a]];
             });
   }
   function process_ast
   (ast, input_name, tool_name, hook, expect_mismatch_handler, embed_errors){
    if(0 === ast[0]){
     var
      x = ast[1],
      ast$0 =
        map_signature_gen
         (x,
          tool_name,
          hook,
          expect_mismatch_handler,
          [0, input_name],
          embed_errors);
     return [0, ast$0];
    }
    var
     x$0 = ast[1],
     ast$1 =
       map_structure_gen
        (x$0,
         tool_name,
         hook,
         expect_mismatch_handler,
         [0, input_name],
         embed_errors);
    return [1, ast$1];
   }
   function process_file
   (kind,
    fn,
    input_name,
    relocate,
    use_compiler_pprint,
    output_mode,
    embed_errors,
    output){
    caml_call2
     (Ppxlib_Import[94][77],
      all$0[1],
      function(param){var t = param[1]; t[2] = 0; return 0;});
    var i = caml_call1(Ppxlib_Import[94][9], process_file_hooks[1]);
    caml_call2
     (Ppxlib_Import[94][77], i, function(f){return caml_call1(f, 0);});
    corrections[1] = 0;
    var
     replacements = [0, 0],
     hook =
       typeof output_mode === "number"
        ? Ppxlib_Context_free[2][1]
        : [0,
          function(context, loc, generated){
           return add_to_list
                   (replacements,
                    caml_call5
                     (Ppxlib_Reconcile[2][1],
                      [0, context],
                      loc[1],
                      loc[2],
                      generated,
                      0));
          }],
     expect_mismatch_handler =
       [0,
        function(context, loc, generated){
         return add_to_list
                 (corrections,
                  caml_call5
                   (Ppxlib_Reconcile[2][1],
                    [1, context],
                    loc[1],
                    loc[2],
                    [1, generated],
                    0));
        }],
     match = preprocessor[1];
    if(match){
     var
      pp = match[1],
      tmpfile = caml_call3(Stdlib_Filename[16], 0, cst_ocamlpp, cst$2);
     try{
      var match$0 = Ppxlib_Utils[6][1].call(null, pp, fn, tmpfile);
      if(0 === match$0[0])
       var v = load_input(kind, input_name, relocate, tmpfile);
      else
       var
        match$1 = match$0[1],
        fall_back_version = match$1[2],
        failed_command = match$1[1],
        v =
          caml_call2
           (versioned_errorf(fall_back_version, fn), F, failed_command);
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      remove_no_error(tmpfile);
      throw caml_maybe_attach_backtrace(e, 0);
     }
     remove_no_error(tmpfile);
     var preprocessed_and_loaded = v;
    }
    else
     var preprocessed_and_loaded = load_input(kind, input_name, relocate, fn);
    if(0 === preprocessed_and_loaded[0]){
     var
      match$2 = preprocessed_and_loaded[1],
      ast = match$2[3],
      input_version = match$2[2],
      input_fname = match$2[1];
     try{
      var
       ast$1 =
         process_ast
          (extract_cookies(ast),
           input_name,
           tool_name$0,
           hook,
           expect_mismatch_handler,
           embed_errors),
       ast$0 = ast$1,
       input_version$0 = input_version,
       input_name$0 = input_fname;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
      var
       ast$0 = exn_to_extension(exn, kind),
       input_version$0 = input_version,
       input_name$0 = input_fname;
     }
    }
    else{
     var
      match$3 = preprocessed_and_loaded[1],
      error = match$3[1],
      input_version$1 = match$3[2];
     if(embed_errors)
      var
       ast$0 = error_to_extension(error, kind),
       input_version$0 = input_version$1,
       input_name$0 = input_name;
     else
      var
       m = caml_call1(Ppxlib_Location[14][10], error),
       n = Ppxlib_Location[2].call(null, m, fn),
       o = caml_call1(caml_call1(Ppxlib_Location[14][9], error), n),
       g = caml_call1(Ppxlib_Location[14][8], o),
       ast$2 = g[3],
       input_version$2 = g[2],
       input_name$1 = g[1],
       ast$0 = ast$2,
       input_version$0 = input_version$2,
       input_name$0 = input_name$1;
    }
    caml_call2
     (Ppxlib_Import[95][2],
      output_metadata_filename[1],
      function(fn){
       var
        metadata = dump_and_reset_all(0),
        a =
          caml_call2
           (Ppxlib_Import[94][55],
            metadata,
            function(param){
             var
              sexp = param[2],
              s = param[1],
              a =
                caml_call2
                 (Sexplib0_Sexp[13], 0, [1, [0, [0, s], [0, sexp, 0]]]);
             return caml_call2(Stdlib[28], a, cst$4);
            }),
        b = caml_call1(caml_call1(Ppxlib_Import[99][7], cst$5), a);
       return caml_call2(Ppxlib_Import[98][3], fn, b);
      });
    var
     input_contents = [246, function(a){return load_source_file(fn);}],
     corrected = caml_call2(Stdlib[28], fn, corrected_suffix[1]),
     corrections$0 = corrections[1];
    if(corrections$0){
     var b = caml_obj_tag(input_contents);
     a:
     {
      var j = 0, k = [0, corrected];
      if(250 === b)
       var c = input_contents[1];
      else{
       if(246 !== b && 244 !== b){var c = input_contents; break a;}
       var c = caml_call1(CamlinternalLazy[2], input_contents);
      }
     }
     Ppxlib_Reconcile[3].call
      (null,
       styler[1],
       corrections$0,
       kind,
       c,
       fn,
       k,
       input_name$0,
       j,
       use_compiler_pprint);
     var mismatches_found = 1;
    }
    else{
     if(runtime.caml_sys_file_exists(corrected)) caml_sys_remove(corrected);
     var mismatches_found = 0;
    }
    if(typeof output_mode === "number")
     switch(output_mode){
       case 0:
        Ppxlib_Utils[2].call
         (null,
          output,
          0,
          function(oc){
           var ppf = caml_call1(Stdlib_Format[114], oc);
           if(use_compiler_pprint)
            Ppxlib_Utils[7].call(null, ppf, ast$0);
           else if(0 === ast$0[0]){
            var ast = ast$0[1];
            caml_call2(Astlib_Pprintast[7], ppf, ast);
           }
           else{
            var ast$1 = ast$0[1];
            caml_call2(Astlib_Pprintast[8], ppf, ast$1);
           }
           var null_ast = ast$0[1] ? 0 : 1, a = 1 - null_ast;
           return a ? caml_call2(Stdlib_Format[45], ppf, 0) : a;
          });
        break;
       case 1:
        Ppxlib_Utils[2].call
         (null,
          output,
          1,
          function(oc){
           return caml_call3
                   (Ppxlib_Utils[5][2],
                    oc,
                    [0, input_name$0, input_version$0, ast$0],
                    1);
          });
        break;
       case 2:
        Ppxlib_Utils[2].call
         (null,
          output,
          0,
          function(oc){
           var ppf = caml_call1(Stdlib_Format[114], oc);
           if(0 === ast$0[0])
            var
             sg = ast$0[1],
             b = caml_call2(Astlib_Ast_metadata[3], cst_ppxlib_driver$0, 0),
             prefix$0 = caml_call1(caml_call1(Ppxlib_ast_Import[2][9], 1), b),
             ast = [0, caml_call2(Ppxlib_Import[100], prefix$0, sg)];
           else
            var
             st = ast$0[1],
             a = caml_call2(Astlib_Ast_metadata[1], cst_ppxlib_driver, 0),
             prefix = caml_call1(caml_call1(Ppxlib_ast_Import[2][9], 0), a),
             ast = [1, caml_call2(Ppxlib_Import[100], prefix, st)];
           if(0 === ast[0]){
            var ast$1 = ast[1];
            Ppxlib_Pp_ast[7].call(null, 0, ppf, ast$1);
           }
           else{
            var ast$2 = ast[1];
            Ppxlib_Pp_ast[5].call(null, 0, ppf, ast$2);
           }
           return caml_call2(Stdlib_Format[45], ppf, 0);
          });
        break;
     }
    else{
     var mode = output_mode[1], d = caml_obj_tag(input_contents);
     a:
     {
      var l = [0, mode];
      if(250 === d)
       var f = input_contents[1];
      else{
       if(246 !== d && 244 !== d){var f = input_contents; break a;}
       var f = caml_call1(CamlinternalLazy[2], input_contents);
      }
     }
     Ppxlib_Reconcile[3].call
      (null,
       styler[1],
       replacements[1],
       kind,
       f,
       fn,
       output,
       input_name$0,
       l,
       use_compiler_pprint);
    }
    a:
    if(mismatches_found){
     var h = diff_command[1];
     if(h && h[1] === cst$9){var a = 0; break a;}
     var a = 1;
    }
    else
     var a = mismatches_found;
    return a
            ? (caml_call6
               (Ppxlib_print_diff[1],
                diff_command[1],
                0,
                [0, use_color[1]],
                fn,
                corrected,
                0),
              caml_call1(Stdlib[99], 1))
            : a;
   }
   var
    output_mode = [0, 0],
    output = [0, 0],
    kind = [0, 0],
    input = [0, 0],
    embed_errors = [0, 0],
    use_compiler_pprint = [0, 0],
    cst_too_many_input_files = "too many input files",
    cst_must_specify_at_most_one_o =
      "must specify at most one of -impl or -intf",
    Q = [0, cst_src_driver_ml, 1218, 26],
    cst_dump_ast = cst_dump_ast$0,
    cst_dparsetree = cst_dparsetree$0,
    cst_null = cst_null$0,
    cst_reconcile_with_comments = cst_reconcile_with_comments$0,
    cst_reconcile = cst_reconcile$0,
    R =
      [0,
       [2, 0, [11, " and ", [2, 0, [11, " are incompatible", 0]]]],
       "%s and %s are incompatible"],
    S = [0, cst_src_driver_ml, 1213, 23],
    U =
      [0,
       [11, "code transformation '", [2, 0, [11, "' does not exist", 0]]],
       "code transformation '%s' does not exist"];
   function set_input(fn){
    if(input[1])
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_too_many_input_files], 1);
    input[1] = [0, fn];
    return 0;
   }
   function set_kind(k){
    var match = kind[1];
    if(match){
     var k$0 = match[1];
     if(! caml_call2(Ppxlib_Utils[3][3], k, k$0))
      throw caml_maybe_attach_backtrace
             ([0, Stdlib_Arg[8], cst_must_specify_at_most_one_o], 1);
    }
    kind[1] = [0, k];
    return 0;
   }
   function set_output_mode(mode){
    var match = output_mode[1];
    a:
    {
     b:
     {
      if(typeof match === "number"){
       switch(match){
         case 0:
          output_mode[1] = mode; return 0;
         case 1:
          if(typeof mode !== "number") break a;
          if(1 !== mode){if(mode) break a; break b;}
          break;
         case 2:
          if(typeof mode !== "number") break a;
          if(3 <= mode) break a;
          switch(mode){case 0: break b;case 1: break a;
          }
          break;
         default: break b;
       }
       return 0;
      }
      var a = match[1];
      if(typeof mode !== "number"){
       var b = mode[1];
       if(caml_call2(Ppxlib_Import[73][2], a, b)) return 0;
       break a;
      }
      if(mode) break a;
     }
     if(typeof mode === "number" && ! mode)
      throw caml_maybe_attach_backtrace([0, Assert_failure, S], 1);
    }
    function arg_of_output_mode(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         throw caml_maybe_attach_backtrace([0, Assert_failure, Q], 1);
        case 1:
         return cst_dump_ast;
        case 2:
         return cst_dparsetree;
        default: return cst_null;
      }
     return param[1] ? cst_reconcile_with_comments : cst_reconcile;
    }
    var
     c = arg_of_output_mode(mode),
     d = arg_of_output_mode(match),
     e = caml_call3(Stdlib_Printf[4], R, d, c);
    throw caml_maybe_attach_backtrace([0, Stdlib_Arg[8], e], 1);
   }
   function parse_apply_list(s){
    var
     names =
       caml_call2(Ppxlib_Import[99][73], s, cst$6)
        ? 0
        : caml_call2(Ppxlib_Import[99][70], s, 44);
    caml_call2
     (Ppxlib_Import[94][77],
      names,
      function(name){
       var
        a =
          1
          -
           caml_call2
            (Ppxlib_Import[94][22],
             function(ct){return has_name(ct, name);},
             all[1]);
       if(! a) return a;
       var b = caml_call2(Stdlib_Printf[4], U, name);
       throw caml_maybe_attach_backtrace([0, Stdlib_Arg[8], b], 1);
      });
    return names;
   }
   var
    mask = [0, 0, 0],
    cst_apply_called_too_many_time = cst_apply_called_too_many_time$1,
    cst_apply_must_be_called_befor =
      "-apply must be called before -dont-apply",
    cst_apply_called_too_many_time$0 = cst_apply_called_too_many_time$1,
    V = [0, "<command-line>", 1, 0, 0],
    cst_invalid_cookie_must_be_of_ =
      'invalid cookie, must be of the form "<name>=<expr>"';
   function handle_apply(s){
    if(caml_call1(Ppxlib_Import[95][1], mask[1]))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_apply_called_too_many_time], 1);
    if(caml_call1(Ppxlib_Import[95][1], mask[2]))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_apply_must_be_called_befor], 1);
    mask[1] = [0, parse_apply_list(s)];
    return 0;
   }
   function handle_dont_apply(s){
    if(caml_call1(Ppxlib_Import[95][1], mask[2]))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_apply_called_too_many_time$0], 1);
    mask[2] = [0, parse_apply_list(s)];
    return 0;
   }
   function interpret_mask(param){
    var
     a = caml_call1(Ppxlib_Import[95][1], mask[1]),
     b = a || caml_call1(Ppxlib_Import[95][1], mask[2]);
    if(b){
     var
      selected_transform_name =
        function(ct){
         var match = mask[1];
         if(match)
          var
           names = match[1],
           is_candidate =
             caml_call2
              (Ppxlib_Import[94][22],
               function(a){return has_name(ct, a);},
               names);
         else
          var is_candidate = 1;
         var match$0 = mask[2];
         if(match$0)
          var
           names$0 = match$0[1],
           is_selected =
             is_candidate
              ? 1
               -
                caml_call2
                 (Ppxlib_Import[94][22],
                  function(a){return has_name(ct, a);},
                  names$0)
              : is_candidate;
         else
          var is_selected = is_candidate;
         return is_selected ? [0, ct[1]] : 0;
        };
     apply_list[1] =
      [0, caml_call2(Ppxlib_Import[94][69], all[1], selected_transform_name)];
    }
   }
   function set_cookie(s){
    var match = caml_call2(Ppxlib_Import[99][66], s, 61);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_invalid_cookie_must_be_of_], 1);
    var
     match$0 = match[1],
     value = match$0[2],
     name = match$0[1],
     lexbuf = caml_call2(Stdlib_Lexing[3], 0, value);
    lexbuf[12] = V;
    var expr = caml_call1(Ppxlib_ast_Import[3][7], lexbuf);
    given_through_cli[1] = [0, [0, name, expr], given_through_cli[1]];
    return 0;
   }
   var
    shared_args =
      [0,
       [0,
        "-loc-filename",
        [4, function(s){loc_fname[1] = [0, s]; return 0;}],
        "<string> File name to use in locations"],
       [0,
        [0,
         "-reserve-namespace",
         [4, Ppxlib_Name[6][1]],
         "<string> Mark the given namespace as reserved"],
        [0,
         [0, "-no-check", [3, perform_checks], " Disable checks (unsafe)"],
         [0,
          [0, "-check", [2, perform_checks], " Enable checks"],
          [0,
           [0,
            "-no-check-on-extensions",
            [3, perform_checks_on_extensions],
            " Disable checks on extension point only"],
           [0,
            [0,
             "-check-on-extensions",
             [2, perform_checks_on_extensions],
             " Enable checks on extension point only"],
            [0,
             [0,
              "-no-locations-check",
              [3, perform_locations_check],
              " Disable locations check only"],
             [0,
              [0,
               "-locations-check",
               [2, perform_locations_check],
               " Enable locations check only"],
              [0,
               [0,
                "-apply",
                [4, handle_apply],
                "<names> Apply these transformations in order (comma-separated list)"],
               [0,
                [0,
                 "-dont-apply",
                 [4, handle_dont_apply],
                 "<names> Exclude these transformations"],
                [0,
                 [0,
                  "-no-merge",
                  [2, no_merge],
                  " Do not merge context free transformations (better for debugging rewriters). As a result, the context-free transformations are not all applied before all impl and intf."],
                 [0,
                  [0,
                   "-cookie",
                   [4, set_cookie],
                   "NAME=EXPR Set the cookie NAME to EXPR"],
                  [0,
                   [0, "--cookie", [4, set_cookie], " Same as -cookie"],
                   [0,
                    [0,
                     "-raise-embedded-errors",
                     [2, raise_embedded_errors_flag],
                     " Raise the first embedded error found in the processed AST"],
                    0]]]]]]]]]]]]]];
   caml_call2
    (Ppxlib_Import[94][77],
     shared_args,
     function(param){
      var doc = param[3], spec = param[2], key = param[1];
      return add_arg(key, spec, doc);
     });
   function as_pp(param){set_output_mode(1); embed_errors[1] = 1; return 0;}
   var
    W = [0, 1],
    X = [0, 0],
    Y =
      [0,
       [11,
        "Warning: the -ite-check flag is deprecated and has no effect.\n",
        [10, 0]],
       "Warning: the -ite-check flag is deprecated and has no effect.\n%!"],
    cst_as_ppx_must_be_the_first_a = "--as-ppx must be the first argument",
    cst_as_ppx_must_be_the_first_a$0 = "-as-ppx must be the first argument",
    standalone_args =
      [0,
       [0,
        cst_as_ppx$0,
        [0,
         function(param){
          throw caml_maybe_attach_backtrace
                 ([0, Stdlib_Arg[8], cst_as_ppx_must_be_the_first_a$0], 1);
         }],
        " Run as a -ppx rewriter (must be the first argument)"],
       [0,
        [0,
         cst_as_ppx,
         [0,
          function(param){
           throw caml_maybe_attach_backtrace
                  ([0, Stdlib_Arg[8], cst_as_ppx_must_be_the_first_a], 1);
          }],
         " Same as -as-ppx"],
        [0,
         [0, "-as-pp", [0, as_pp], " Shorthand for: -dump-ast -embed-errors"],
         [0,
          [0, "--as-pp", [0, as_pp], " Same as -as-pp"],
          [0,
           [0,
            "-o",
            [4, function(s){output[1] = [0, s]; return 0;}],
            "<filename> Output file (use '-' for stdout)"],
           [0,
            [0,
             cst$8,
             [0, function(param){return set_input(cst$7);}],
             " Read input from stdin"],
            [0,
             [0,
              cst_dump_ast$0,
              [0, function(param){return set_output_mode(1);}],
              " Dump the marshaled ast to the output file instead of pretty-printing it"],
             [0,
              [0,
               "--dump-ast",
               [0, function(param){return set_output_mode(1);}],
               " Same as -dump-ast"],
              [0,
               [0,
                cst_dparsetree$0,
                [0, function(param){return set_output_mode(2);}],
                " Print the parsetree (same as ocamlc -dparsetree)"],
               [0,
                [0,
                 "-embed-errors",
                 [2, embed_errors],
                 " Embed errors in the output AST (default: true when -as-pp, false otherwise)"],
                [0,
                 [0,
                  cst_null$0,
                  [0, function(param){return set_output_mode(3);}],
                  " Produce no output, except for errors"],
                 [0,
                  [0,
                   "-impl",
                   [0, function(param){return set_kind(1);}],
                   "<file> Treat the input as a .ml file"],
                  [0,
                   [0,
                    "--impl",
                    [0, function(param){return set_kind(1);}],
                    "<file> Same as -impl"],
                   [0,
                    [0,
                     "-intf",
                     [0, function(param){return set_kind(0);}],
                     "<file> Treat the input as a .mli file"],
                    [0,
                     [0,
                      "--intf",
                      [0, function(param){return set_kind(0);}],
                      "<file> Same as -intf"],
                     [0,
                      [0,
                       "-debug-attribute-drop",
                       [2, debug_attribute_drop],
                       " Debug attribute dropping"],
                      [0,
                       [0,
                        "-print-transformations",
                        [2, request_print_transformations],
                        " Print linked-in code transformations, in the order they are applied"],
                       [0,
                        [0,
                         "-print-passes",
                         [2, request_print_passes],
                         " Print the actual passes over the whole AST in the order they are applied"],
                        [0,
                         [0,
                          "-ite-check",
                          [0,
                           function(param){
                            caml_call1(Stdlib_Printf[3], Y);
                            Ppxlib_ast_Warn[1][1] = 1;
                            return 0;
                           }],
                          " (no effect -- kept for compatibility)"],
                         [0,
                          [0,
                           "-pp",
                           [4, function(s){preprocessor[1] = [0, s]; return 0;}],
                           "<command>  Pipe sources through preprocessor <command> (incompatible with -as-ppx)"],
                          [0,
                           [0,
                            cst_reconcile$0,
                            [0, function(param){return set_output_mode(X);}],
                            " (WIP) Pretty print the output using a mix of the input source and the generated code"],
                           [0,
                            [0,
                             cst_reconcile_with_comments$0,
                             [0, function(param){return set_output_mode(W);}],
                             " (WIP) same as -reconcile but uses comments to enclose the generated code"],
                            [0,
                             [0,
                              "-no-color",
                              [3, use_color],
                              " Don't use colors when printing errors"],
                             [0,
                              [0,
                               "-diff-cmd",
                               [4, function(s){diff_command[1] = [0, s]; return 0;}],
                               " Diff command when using code expectations (use - to disable diffing)"],
                              [0,
                               [0,
                                "-pretty",
                                [2, pretty],
                                " Instruct code generators to improve the prettiness of the generated code"],
                               [0,
                                [0,
                                 "-styler",
                                 [4, function(s){styler[1] = [0, s]; return 0;}],
                                 " Code styler"],
                                [0,
                                 [0,
                                  "-output-metadata",
                                  [4,
                                   function(s){output_metadata_filename[1] = [0, s]; return 0;}],
                                  "FILE Where to store the output metadata"],
                                 [0,
                                  [0,
                                   "-corrected-suffix",
                                   [5, corrected_suffix],
                                   "SUFFIX Suffix to append to corrected files"],
                                  [0,
                                   [0,
                                    "-keywords",
                                    [4, function(s){keywords[1] = [0, s]; return 0;}],
                                    "<version+list> Set keywords according to the version+list specification. Allows using a set of keywords different from the one of the current compiler for backward compatibility."],
                                   [0,
                                    [0,
                                     "--keywords",
                                     [4, function(s){keywords[1] = [0, s]; return 0;}],
                                     "<version+list> Same as -keywords"],
                                    [0,
                                     [0,
                                      "--use-compiler-pp",
                                      [2, use_compiler_pprint],
                                      "Force migrating the AST back to the compiler's version before printing it as source code using the compiler's Pprintast utilities."],
                                     0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
    B =
      [0,
       [11, cst_builtin_freshen_and_collec, 0],
       cst_builtin_freshen_and_collec],
    C = [0, [2, 0, [12, 10, 0]], cst_s$0],
    D =
      [0,
       [11, cst_builtin_check_unused_attri, 0],
       cst_builtin_check_unused_attri],
    E =
      [0,
       [11, cst_builtin_check_unused_exten, 0],
       cst_builtin_check_unused_exten],
    L =
      [0,
       [11, cst_Expected_a_binary_AST_as_i, 0],
       cst_Expected_a_binary_AST_as_i],
    M =
      [0,
       [11,
        "The input is a binary ast for an unknown version of OCaml with magic number '",
        [2, 0, [12, 39, 0]]],
       "The input is a binary ast for an unknown version of OCaml with magic number '%s'"],
    T = [0, [2, 0, [12, 10, 0]], cst_s$0],
    Z =
      [0,
       [2, 0, [11, " [extra_args] [<files>]", 0]],
       "%s [extra_args] [<files>]"],
    _ =
      [0,
       [2,
        0,
        [11,
         ": don't know what to do with '",
         [2, 0, [11, "', use -impl or -intf.\n", 0]]]],
       "%s: don't know what to do with '%s', use -impl or -intf.\n"],
    $ =
      [0,
       [2, 0, [11, ": no input file given\n", [10, 0]]],
       "%s: no input file given\n%!"],
    aa = [0, [2, 0, 0], cst_s],
    ab = [0, [2, 0, 0], cst_s],
    cst_anonymous_arguments_not_ac = "anonymous arguments not accepted",
    ac = [0, [11, "Usage: ", [2, 0, [12, 10, [10, 0]]]], "Usage: %s\n%!"],
    cst_help = "-help",
    ad = [0, cst_src_driver_ml, 1528, 6],
    cst_help$0 = "--help",
    ae =
      [0,
       [2, 0, [11, " -as-ppx [extra_args] <infile> <outfile>", 0]],
       "%s -as-ppx [extra_args] <infile> <outfile>"],
    cst_Unused_with_as_ppx = " Unused with -as-ppx",
    af =
      [0,
       [2, 0, [11, " [extra_args] <infile> <outfile>", 0]],
       "%s [extra_args] <infile> <outfile>"];
   function get_args(opt, param){
    var
     standalone_args$0 = opt ? opt[1] : standalone_args,
     a = caml_call1(Ppxlib_Import[94][9], args[1]);
    return caml_call2(Ppxlib_Import[100], standalone_args$0, a);
   }
   function parse_input(passed_in_args, valid_args, incorrect_input_msg){
    try{
     var a = caml_call2(Stdlib_Arg[11], 0, valid_args);
     caml_call5
      (Stdlib_Arg[3],
       0,
       passed_in_args,
       a,
       function(param){
        throw caml_maybe_attach_backtrace
               ([0, Stdlib_Arg[8], cst_anonymous_arguments_not_ac], 1);
       },
       incorrect_input_msg);
     return;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib_Arg[8]){
      var msg = exn[2];
      caml_call2(Stdlib_Printf[3], aa, msg);
      return caml_call1(Stdlib[99], 2);
     }
     var tag$0 = exn[1];
     if(tag$0 !== Stdlib_Arg[7]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$0 = exn[2];
     caml_call2(Stdlib_Printf[3], ab, msg$0);
     return caml_call1(Stdlib[99], 0);
    }
   }
   function run_as_ppx_rewriter_main(standalone_args, usage, input){
    var
     valid_args = get_args([0, standalone_args], 0),
     h = caml_call1(Stdlib_ArrayLabels[10], input),
     match$3 = caml_call1(Ppxlib_Import[94][9], h);
    a:
    if(match$3){
     var match$4 = match$3[2];
     if(match$4){
      var
       flags_and_prog_name = match$4[2],
       input_fn = match$4[1],
       output_fn = match$3[1],
       i = caml_call1(Ppxlib_Import[94][1], flags_and_prog_name);
      if(caml_call2(Ppxlib_Import[78], i, 0)){
       var
        j = caml_call1(Ppxlib_Import[94][9], flags_and_prog_name),
        prog_name_and_flags = caml_call1(Stdlib_ArrayLabels[11], j);
       parse_input(prog_name_and_flags, valid_args, usage);
       interpret_mask(0);
       var a = caml_call2(Ppxlib_Utils[5][1], [0, input_fn], 0);
       if(0 === a[0]){
        var
         match = a[1],
         ast = match[3],
         input_version = match[2],
         ast_input_name = match[1],
         match$0 = loc_fname[1];
        if(match$0){
         var input_name = match$0[1];
         caml_call1(set_input_name, input_name);
         var
          ast$0 =
            caml_call2(Ppxlib_Import[99][73], ast_input_name, input_name)
             ? ast
             : Ppxlib_Utils
                 [4]
                [2].call
               (null, ast, relocate_mapper, [0, ast_input_name, input_name]);
        }
        else{caml_call1(set_input_name, ast_input_name); var ast$0 = ast;}
        var match$2 = [0, ast_input_name, input_version, ast$0];
       }
       else{
        var match$1 = a[1];
        if(typeof match$1 === "number")
         var
          b = [0, Ppxlib_Location[1].call(null, input_fn)],
          match$2 = Ppxlib_Location[6].call(null, b, L);
        else if(0 === match$1[0])
         var
          unknown_magic = match$1[1],
          c = [0, Ppxlib_Location[1].call(null, input_fn)],
          match$2 =
            caml_call1(Ppxlib_Location[6].call(null, c, M), unknown_magic);
        else
         var
          error = match$1[1],
          d = caml_call1(Ppxlib_Location[14][10], error),
          e = Ppxlib_Location[2].call(null, d, input_fn),
          f = caml_call1(caml_call1(Ppxlib_Location[14][9], error), e),
          match$2 = caml_call1(Ppxlib_Location[14][8], f);
       }
       var
        ast$1 = match$2[3],
        input_version$0 = match$2[2],
        input_name$0 = match$2[1];
       try{
        var
         ast$3 = extract_cookies(ast$1),
         tool_name = caml_call1(Astlib_Ast_metadata[5], 0),
         hook = Ppxlib_Context_free[2][1],
         expect_mismatch_handler = Ppxlib_Context_free[3][1],
         g =
           process_ast
            (ast$3, input_name$0, tool_name, hook, expect_mismatch_handler, 1),
         ast$2 = g;
       }
       catch(exn$0){
        var
         exn = caml_wrap_exception(exn$0),
         ast$2 = exn_to_extension(exn, Ppxlib_Utils[4][3].call(null, ast$1));
       }
       Ppxlib_Utils[2].call
        (null,
         [0, output_fn],
         1,
         function(oc){
          return caml_call3
                  (Ppxlib_Utils[5][2],
                   oc,
                   [0, input_name$0, input_version$0, ast$2],
                   1);
         });
       return caml_call1(Stdlib[99], 0);
      }
      if(! flags_and_prog_name){
       if
        (!
         caml_call2(Ppxlib_Import[99][73], output_fn, cst_help)
         && ! caml_call2(Ppxlib_Import[99][73], output_fn, cst_help$0))
        break a;
       parse_input(input, valid_args, usage);
       throw caml_maybe_attach_backtrace([0, Assert_failure, ad], 1);
      }
     }
    }
    caml_call2(Stdlib_Printf[3], ac, usage);
    return caml_call1(Stdlib[99], 2);
   }
   function standalone(param){
    caml_call1(Astlib[2], 0);
    try{
     var j = caml_sys_argv(0).length - 1;
     a:
     {
      if(caml_call2(Ppxlib_Import[81], j, 2)){
       var match$3 = caml_check_bound(caml_sys_argv(0), 1)[2];
       b:
       {
        if(match$3 !== cst_as_ppx && match$3 !== cst_as_ppx$0){var c = 0; break b;}
        var c = 1;
       }
       if(c){
        var
         n = caml_sys_argv(0).length - 1,
         usage$0 = caml_call2(Stdlib_Printf[4], ae, exe_name),
         argv = runtime.caml_array_make(n - 1 | 0, cst$10),
         e = caml_check_bound(caml_sys_argv(0), 0)[1];
        caml_check_bound(argv, 0)[1] = e;
        var a = n - 2 | 0, f = 1;
        if(a >= 1){
         var i = f;
         for(;;){
          var b = i + 1 | 0, g = caml_check_bound(caml_sys_argv(0), b)[b + 1];
          caml_check_bound(argv, i)[i + 1] = g;
          var h = i + 1 | 0;
          if(a === i) break;
          i = h;
         }
        }
        var
         standalone_args$0 =
           caml_call2
            (Ppxlib_Import[94][55],
             standalone_args,
             function(param){
              var spec = param[2], arg = param[1];
              return [0, arg, spec, cst_Unused_with_as_ppx];
             });
        run_as_ppx_rewriter_main(standalone_args$0, usage$0, argv);
        break a;
       }
      }
      var
       usage = caml_call2(Stdlib_Printf[4], Z, exe_name),
       args = get_args(0, 0),
       d = caml_call2(Stdlib_Arg[11], 0, args);
      caml_call3(Stdlib_Arg[1], d, set_input, usage);
      caml_call2(Astlib_Keyword[2], keywords[1], 0);
      interpret_mask(0);
      if(request_print_transformations[1]){
       caml_call2
        (Ppxlib_Import[94][77],
         all[1],
         function(ct){return caml_call2(Stdlib_Printf[2], T, ct[1]);});
       caml_call1(Stdlib[99], 0);
      }
      if(request_print_passes[1]){
       var
        hook = Ppxlib_Context_free[2][1],
        expect_mismatch_handler = Ppxlib_Context_free[3][1],
        cts =
          get_whole_ast_passes(0, hook, expect_mismatch_handler, tool_name, 0);
       if(perform_checks[1]) caml_call1(Stdlib_Printf[2], B);
       caml_call2
        (Ppxlib_Import[94][77],
         cts,
         function(ct){return caml_call2(Stdlib_Printf[2], C, ct[1]);});
       if(perform_checks[1]){
        caml_call1(Stdlib_Printf[2], D);
        if(perform_checks_on_extensions[1]) caml_call1(Stdlib_Printf[2], E);
       }
       caml_call1(Stdlib[99], 0);
      }
      var match = input[1];
      if(match){
       var fn = match[1], match$0 = kind[1];
       if(match$0)
        var k = match$0[1], kind$0 = k;
       else{
        var match$2 = Ppxlib_Utils[3][1].call(null, fn);
        if(match$2)
         var k$0 = match$2[1], kind$0 = k$0;
        else{
         caml_call3(Stdlib_Printf[3], _, exe_name, fn);
         var kind$0 = caml_call1(Stdlib[99], 2);
        }
       }
       var match$1 = loc_fname[1];
       if(match$1)
        var fn$0 = match$1[1], relocate = 1, input_name = fn$0;
       else
        var relocate = 0, input_name = fn;
       process_file
        (kind$0,
         fn,
         input_name,
         relocate,
         use_compiler_pprint[1],
         output_mode[1],
         embed_errors[1],
         output[1]);
      }
      else{
       caml_call2(Stdlib_Printf[3], $, exe_name);
       caml_call1(Stdlib[99], 2);
      }
     }
     var l = caml_call1(Stdlib[99], 0);
     return l;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call2(Ppxlib_Location[8], Stdlib_Format[118], exn);
     return caml_call1(Stdlib[99], 1);
    }
   }
   function run_as_ppx_rewriter(param){
    var
     usage = caml_call2(Stdlib_Printf[4], af, exe_name),
     input = caml_sys_argv(0);
    try{var a = run_as_ppx_rewriter_main(0, usage, input); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call2(Ppxlib_Location[8], Stdlib_Format[118], exn);
     return caml_call1(Stdlib[99], 1);
    }
   }
   function pretty$0(param){return pretty[1];}
   function enable_checks(param){
    perform_checks[1] = 1;
    perform_checks_on_extensions[1] = 1;
    return 0;
   }
   function enable_location_check(param){
    perform_locations_check[1] = 1;
    return 0;
   }
   function disable_location_check(param){
    perform_locations_check[1] = 0;
    return 0;
   }
   function map_structure(st){
    var
     a = Ppxlib_Context_free[3][1],
     b = Ppxlib_Context_free[2][1],
     ast =
       map_structure_gen
        (st, caml_call1(Astlib_Ast_metadata[5], 0), b, a, 0, 0);
    return ast;
   }
   var
    ag = Ppxlib_Import[89][1],
    ah = Ppxlib_Ast_pattern[241].call(null, Ppxlib_Ast_pattern[4]),
    ai = caml_call4(Ppxlib_Attribute[16][2], cst_expand_inline, 1, ah, ag),
    aj =
      [0,
       caml_call2
        (Ppxlib_Context_free[1][27],
         ai,
         function(param, items){
          var a = Ppxlib_Utils[1];
          return caml_call2
                  (caml_get_cached_method(a, 359375608, cache_id$13),
                   a,
                   items);
         }),
       0],
    ak = Ppxlib_Import[89][1],
    al = Ppxlib_Ast_pattern[240].call(null, Ppxlib_Ast_pattern[4]),
    am = caml_call4(Ppxlib_Attribute[16][2], cst_expand_inline, 0, al, ak);
   register_transformation$0
     (0,
      [0,
       [0,
        caml_call2
         (Ppxlib_Context_free[1][26],
          am,
          function(param, items){
           var a = Ppxlib_Utils[1];
           return caml_call2
                   (caml_get_cached_method(a, -951102413, cache_id$14),
                    a,
                    items);
          }),
        aj]],
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0)
    (0, 0, cst_expand_inline);
   var
    Ppxlib_Driver =
      [0,
       add_arg,
       Lint_error,
       [0,
        get,
        get_res,
        set,
        add_handler,
        add_simple_handler,
        add_post_handler],
       [0, make$0, V2],
       register_transformation$0,
       register_transformation_using_$0,
       register_code_transformation,
       register_correction,
       register_process_file_hook,
       V2$0,
       function(Name, T){
        var t = [0, Name[1], 0, T[2]];
        add_to_list(all$0, [0, t]);
        function set(x){t[2] = [0, x]; return 0;}
        return [0, set];
       },
       standalone,
       run_as_ppx_rewriter,
       pretty$0,
       map_structure,
       map_signature,
       enable_checks,
       enable_location_check,
       disable_location_check,
       load_input];
   runtime.caml_register_global(223, Ppxlib_Driver, "Ppxlib__Driver");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ignore_unused_warning
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_traverse, Ppxlib__Import
//# shape: Ppxlib__Ignore_unused_warning:[N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    f =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_constraint,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_type_constraint,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_function_param_desc,
       cst_function_param,
       cst_function_body,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    g =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_function_body,
       cst_function_param,
       cst_function_param_desc,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_constraint,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_constraint,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    cache_id = runtime.caml_oo_cache_id(),
    a = caml_call1(CamlinternalOO[16], shared),
    n = caml_call2(CamlinternalOO[8], a, f)[28],
    h = caml_call6(CamlinternalOO[18], a, 0, 0, g, Ppxlib_Ast_traverse[3], 1),
    p = h[75],
    o = h[1];
   caml_call3
    (CamlinternalOO[10],
     a,
     n,
     function(self_1, patt, acc){
      var match = patt[1];
      if(typeof match !== "number" && 0 === match[0]){
       var v = match[1];
       return [0,
               caml_call2
                (Ppxlib_Ast_builder[1][1][3],
                 function(var$){return [0, var$];},
                 v),
               acc];
      }
      return caml_call2(caml_call1(p, self_1), patt, acc);
     });
   caml_call1(CamlinternalOO[17], a);
   var i = caml_call2(CamlinternalOO[24], 0, a);
   caml_call1(o, i);
   var
    vars_of = caml_call3(CamlinternalOO[26], 0, i, a),
    b = caml_call1(CamlinternalOO[16], shared),
    q = caml_call2(CamlinternalOO[8], b, f)[16],
    j = caml_call6(CamlinternalOO[18], b, 0, 0, g, Ppxlib_Ast_traverse[1], 1),
    s = j[87],
    r = j[1];
   caml_call3
    (CamlinternalOO[10],
     b,
     q,
     function(self_2, st){
      var st$1 = caml_call1(caml_call1(s, self_2), st), st$0 = st$1, acc = 0;
      for(;;){
       if(! st$0) return caml_call1(Ppxlib_Import[94][9], acc);
       var item = st$0[1], match = item[1];
       if(1 === match[0]){
        var
         rest$0 = st$0[2],
         loc = item[2],
         vbs = match[2],
         vars =
           caml_call3
            (Ppxlib_Import[94][17],
             function(acc, vb){
              return caml_call3
                      (runtime.caml_get_cached_method
                        (vars_of, 293013072, cache_id),
                       vars_of,
                       vb[1],
                       acc);
             },
             0,
             vbs),
         a =
           caml_call2
            (Ppxlib_Import[94][15],
             function(v){
              var
               exp = caml_call2(Ppxlib_Ast_builder[1][119], v[2], v),
               loc = exp[2],
               a = caml_call1(Ppxlib_Ast_builder[1][57], loc);
              return caml_call3(Ppxlib_Ast_builder[1][209], loc, a, exp);
             },
             vars),
         ign = caml_call3(Ppxlib_Ast_builder[1][210], loc, 0, a),
         acc$1 = caml_call2(Ppxlib_Import[100], ign, [0, item, acc]);
        st$0 = rest$0;
        acc = acc$1;
       }
       else{
        var rest = st$0[2], acc$0 = [0, item, acc];
        st$0 = rest;
        acc = acc$0;
       }
      }
     });
   caml_call1(CamlinternalOO[17], b);
   var k = caml_call2(CamlinternalOO[24], 0, b);
   caml_call1(r, k);
   var
    add_dummy_user_for_values = caml_call3(CamlinternalOO[26], 0, k, b),
    c = caml_call1(CamlinternalOO[16], shared),
    d = caml_call2(CamlinternalOO[8], c, f),
    t = d[28],
    u = d[41],
    v = d[44],
    w = d[45],
    x = d[60],
    y = d[68],
    e = caml_call6(CamlinternalOO[18], c, 0, 0, g, Ppxlib_Ast_traverse[3], 1),
    l = e[35],
    A = e[43],
    B = e[58],
    C = e[59],
    D = e[75],
    z = e[1];
   caml_call2
    (CamlinternalOO[11],
     c,
     [0,
      w,
      function(self_3, mb, acc){
       return mb[1][1] ? 1 : caml_call2(caml_call1(B, self_3), mb, acc);
      },
      v,
      function(self_3, md, acc){
       return md[1][1] ? 1 : caml_call2(caml_call1(C, self_3), md, acc);
      },
      u,
      function(self_3, ms, param){return 1;},
      x,
      function(self_3, fp, acc){
       if(! fp) return acc;
       var name = fp[1];
       return name[1] ? 1 : caml_call2(caml_call1(A, self_3), fp, acc);
      },
      t,
      function(self_3, pat, acc){
       var match = pat[1];
       if(typeof match !== "number" && 13 === match[0]){var name = match[1]; return name[1] ? 1 : acc;}
       return caml_call2(caml_call1(D, self_3), pat, acc);
      },
      y,
      function(self_3, expr, acc){
       var match = expr[1];
       if(typeof match !== "number" && 24 === match[0]){
        var name = match[1];
        return name[1] ? 1 : caml_call2(caml_call1(l, self_3), expr, acc);
       }
       return caml_call2(caml_call1(l, self_3), expr, acc);
      }]);
   caml_call1(CamlinternalOO[17], c);
   var m = caml_call2(CamlinternalOO[24], 0, c);
   caml_call1(z, m);
   var
    binds_module_names = caml_call3(CamlinternalOO[26], 0, m, c),
    Ppxlib_Ignore_unused_warning =
      [0, add_dummy_user_for_values, binds_module_names];
   runtime.caml_register_global
    (7, Ppxlib_Ignore_unused_warning, "Ppxlib__Ignore_unused_warning");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Deriving
//# unitInfo: Requires: Ppx_derivers, Ppxlib__Ast_builder, Ppxlib__Ast_pattern, Ppxlib__Attribute, Ppxlib__Common, Ppxlib__Context_free, Ppxlib__Driver, Ppxlib__Expansion_context, Ppxlib__Extension, Ppxlib__Ignore_unused_warning, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Ppxlib__Merlin_helpers, Ppxlib__Options, Ppxlib__Spellcheck, Stdlib
//# shape: Ppxlib__Deriving:[N,N,F(12),F(12),F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$9 = "",
    cst$10 = ".\n",
    cst_Deriver = "Deriver ",
    cst_Ppxlib_Deriving_generator_ =
      "Ppxlib.Deriving: generator arguments must be labelled",
    cst_attribute = "attribute",
    cst_both = "both",
    cst_code = "code",
    cst_deriving$0 = "deriving",
    cst_impl = "impl",
    cst_intf = "intf",
    cst_src_deriving_ml = "src/deriving.ml",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_oo_cache_id = runtime.caml_oo_cache_id,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    prefix = "ppxlib.",
    cst$8 = cst$9,
    warnings = [0, 32, 0],
    cst$6 = "-",
    cst$7 = cst$9,
    cst$5 = ".",
    cst$2 = cst$10,
    cst$3 = cst$9,
    cst$4 = cst$9,
    cst$0 = cst$10,
    cst$1 = cst$9,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Ignore_unused_warning = global_data.Ppxlib__Ignore_unused_warning,
    Ppxlib_Merlin_helpers = global_data.Ppxlib__Merlin_helpers,
    Stdlib = global_data.Stdlib,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Ppx_derivers = global_data.Ppx_derivers,
    Ppxlib_Extension = global_data.Ppxlib__Extension,
    Ppxlib_Context_free = global_data.Ppxlib__Context_free,
    Ppxlib_Driver = global_data.Ppxlib__Driver,
    Ppxlib_Options = global_data.Ppxlib__Options,
    Ppxlib_Spellcheck = global_data.Ppxlib__Spellcheck,
    Assert_failure = global_data.Assert_failure,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    do_insert_unused_warning_attri = [0, 0],
    keep_w32_impl = [0, 0],
    keep_w32_intf = [0, 0],
    a = [0, cst_src_deriving_ml, 21, 15],
    keep_w32_spec =
      [11,
       [0, cst_impl, [0, cst_intf, [0, cst_both, 0]]],
       function(param){
        if(param === cst_both){
         keep_w32_impl[1] = 1;
         keep_w32_intf[1] = 1;
         return 0;
        }
        if(param === cst_impl){keep_w32_impl[1] = 1; return 0;}
        if(param !== cst_intf)
         throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
        keep_w32_intf[1] = 1;
        return 0;
       }],
    b = [0, cst_src_deriving_ml, 29, 15],
    conv_w32_spec =
      [11,
       [0, cst_code, [0, cst_attribute, 0]],
       function(param){
        if(param === cst_attribute){
         do_insert_unused_warning_attri[1] = 1;
         return 0;
        }
        if(param !== cst_code)
         throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
        do_insert_unused_warning_attri[1] = 0;
        return 0;
       }];
   Ppxlib_Driver[1].call
    (null,
     "-deriving-keep-w32",
     keep_w32_spec,
     " Do not try to disable warning 32 for the generated code");
   Ppxlib_Driver[1].call
    (null,
     "-deriving-disable-w32-method",
     conv_w32_spec,
     " How to disable warning 32 for the generated code");
   Ppxlib_Driver[1].call
    (null,
     "-type-conv-keep-w32",
     keep_w32_spec,
     " Deprecated, use -deriving-keep-w32");
   Ppxlib_Driver[1].call
    (null,
     "-type-conv-w32",
     conv_w32_spec,
     " Deprecated, use -deriving-disable-w32-method");
   function keep_w32_impl$0(param){
    var a = keep_w32_impl[1];
    return a ? a : Ppxlib_Driver[14].call(null, 0);
   }
   var
    keep_w60_impl = [0, 0],
    keep_w60_intf = [0, 0],
    c = [0, cst_src_deriving_ml, 55, 15],
    keep_w60_spec =
      [11,
       [0, cst_impl, [0, cst_intf, [0, cst_both, 0]]],
       function(param){
        if(param === cst_both){
         keep_w60_impl[1] = 1;
         keep_w60_intf[1] = 1;
         return 0;
        }
        if(param === cst_impl){keep_w60_impl[1] = 1; return 0;}
        if(param !== cst_intf)
         throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
        keep_w60_intf[1] = 1;
        return 0;
       }];
   Ppxlib_Driver[1].call
    (null,
     "-deriving-keep-w60",
     keep_w60_spec,
     " Do not try to disable warning 60 for the generated code");
   var
    allow_unused_code_warnings = [0, Ppxlib_Options[2]],
    d = Ppxlib_Options[1][1].call(null, allow_unused_code_warnings);
   Ppxlib_Driver[1].call
    (null,
     "-unused-code-warnings",
     d,
     " Allow ppx derivers to enable unused code warnings (default: false)");
   function allow_unused_code_warnings$0(ppx_allows_unused_code_warning){
    switch(allow_unused_code_warnings[1]){
      case 0:
       return ppx_allows_unused_code_warning;
      case 1:
       return 0;
      default: return 1;
    }
   }
   var
    allow_unused_type_warnings = [0, Ppxlib_Options[3]],
    e = Ppxlib_Options[1][1].call(null, allow_unused_type_warnings);
   Ppxlib_Driver[1].call
    (null,
     "-unused-type-warnings",
     e,
     " Allow unused type warnings for types with [@@deriving ...] (default: false)");
   var
    fail = Ppxlib_Ast_pattern[342],
    to_func = Ppxlib_Ast_pattern[341],
    of_func = Ppxlib_Ast_pattern[340],
    esequence = Ppxlib_Ast_pattern[339],
    elist = Ppxlib_Ast_pattern[338],
    extension = Ppxlib_Ast_pattern[337],
    attribute = Ppxlib_Ast_pattern[336],
    no_label = Ppxlib_Ast_pattern[335],
    single_expr_payload = Ppxlib_Ast_pattern[334],
    pnativeint = Ppxlib_Ast_pattern[333],
    pint64 = Ppxlib_Ast_pattern[332],
    pint32 = Ppxlib_Ast_pattern[331],
    pfloat = Ppxlib_Ast_pattern[330],
    pstring = Ppxlib_Ast_pattern[329],
    pchar = Ppxlib_Ast_pattern[328],
    pint = Ppxlib_Ast_pattern[327],
    enativeint = Ppxlib_Ast_pattern[326],
    eint64 = Ppxlib_Ast_pattern[325],
    eint32 = Ppxlib_Ast_pattern[324],
    efloat = Ppxlib_Ast_pattern[323],
    estring = Ppxlib_Ast_pattern[322],
    echar = Ppxlib_Ast_pattern[321],
    eint = Ppxlib_Ast_pattern[320],
    false$ = Ppxlib_Ast_pattern[319],
    true$ = Ppxlib_Ast_pattern[318],
    pwith_modsubst = Ppxlib_Ast_pattern[317],
    pwith_typesubst = Ppxlib_Ast_pattern[316],
    pwith_modtypesubst = Ppxlib_Ast_pattern[315],
    pwith_modtype = Ppxlib_Ast_pattern[314],
    pwith_module = Ppxlib_Ast_pattern[313],
    pwith_type = Ppxlib_Ast_pattern[312],
    concrete = Ppxlib_Ast_pattern[311],
    virtual = Ppxlib_Ast_pattern[310],
    novariance = Ppxlib_Ast_pattern[309],
    contravariant = Ppxlib_Ast_pattern[308],
    covariant = Ppxlib_Ast_pattern[307],
    value_description = Ppxlib_Ast_pattern[306],
    value_description_attributes = Ppxlib_Ast_pattern[305],
    pvc_coercion = Ppxlib_Ast_pattern[304],
    pvc_constraint = Ppxlib_Ast_pattern[303],
    value_binding = Ppxlib_Ast_pattern[302],
    value_binding_attributes = Ppxlib_Ast_pattern[301],
    ptype_open = Ppxlib_Ast_pattern[300],
    ptype_record = Ppxlib_Ast_pattern[299],
    ptype_variant = Ppxlib_Ast_pattern[298],
    ptype_abstract = Ppxlib_Ast_pattern[297],
    type_extension = Ppxlib_Ast_pattern[296],
    type_extension_attributes = Ppxlib_Ast_pattern[295],
    type_exception = Ppxlib_Ast_pattern[294],
    type_exception_attributes = Ppxlib_Ast_pattern[293],
    type_declaration = Ppxlib_Ast_pattern[292],
    type_declaration_attributes = Ppxlib_Ast_pattern[291],
    pcoerce = Ppxlib_Ast_pattern[290],
    pconstraint = Ppxlib_Ast_pattern[289],
    ptop_dir = Ppxlib_Ast_pattern[288],
    ptop_def = Ppxlib_Ast_pattern[287],
    toplevel_directive = Ppxlib_Ast_pattern[286],
    pstr_extension = Ppxlib_Ast_pattern[285],
    pstr_attribute = Ppxlib_Ast_pattern[284],
    pstr_include = Ppxlib_Ast_pattern[283],
    pstr_class_type = Ppxlib_Ast_pattern[282],
    pstr_class = Ppxlib_Ast_pattern[281],
    pstr_open = Ppxlib_Ast_pattern[280],
    pstr_modtype = Ppxlib_Ast_pattern[279],
    pstr_recmodule = Ppxlib_Ast_pattern[278],
    pstr_module = Ppxlib_Ast_pattern[277],
    pstr_exception = Ppxlib_Ast_pattern[276],
    pstr_typext = Ppxlib_Ast_pattern[275],
    pstr_type = Ppxlib_Ast_pattern[274],
    pstr_primitive = Ppxlib_Ast_pattern[273],
    pstr_value = Ppxlib_Ast_pattern[272],
    pstr_eval = Ppxlib_Ast_pattern[271],
    pstr_loc = Ppxlib_Ast_pattern[270],
    psig_extension = Ppxlib_Ast_pattern[269],
    psig_attribute = Ppxlib_Ast_pattern[268],
    psig_class_type = Ppxlib_Ast_pattern[267],
    psig_class = Ppxlib_Ast_pattern[266],
    psig_include = Ppxlib_Ast_pattern[265],
    psig_open = Ppxlib_Ast_pattern[264],
    psig_modtypesubst = Ppxlib_Ast_pattern[263],
    psig_modtype = Ppxlib_Ast_pattern[262],
    psig_recmodule = Ppxlib_Ast_pattern[261],
    psig_modsubst = Ppxlib_Ast_pattern[260],
    psig_module = Ppxlib_Ast_pattern[259],
    psig_exception = Ppxlib_Ast_pattern[258],
    psig_typext = Ppxlib_Ast_pattern[257],
    psig_typesubst = Ppxlib_Ast_pattern[256],
    psig_type = Ppxlib_Ast_pattern[255],
    psig_value = Ppxlib_Ast_pattern[254],
    psig_loc = Ppxlib_Ast_pattern[253],
    rinherit = Ppxlib_Ast_pattern[252],
    rtag = Ppxlib_Ast_pattern[251],
    prf_attributes = Ppxlib_Ast_pattern[250],
    prf_loc = Ppxlib_Ast_pattern[249],
    recursive = Ppxlib_Ast_pattern[248],
    nonrecursive = Ppxlib_Ast_pattern[247],
    public$ = Ppxlib_Ast_pattern[246],
    private$ = Ppxlib_Ast_pattern[245],
    position = Ppxlib_Ast_pattern[244],
    ppat = Ppxlib_Ast_pattern[243],
    ptyp = Ppxlib_Ast_pattern[242],
    psig = Ppxlib_Ast_pattern[241],
    pstr = Ppxlib_Ast_pattern[240],
    ppat_open = Ppxlib_Ast_pattern[239],
    ppat_extension = Ppxlib_Ast_pattern[238],
    ppat_exception = Ppxlib_Ast_pattern[237],
    ppat_unpack = Ppxlib_Ast_pattern[236],
    ppat_lazy = Ppxlib_Ast_pattern[235],
    ppat_type = Ppxlib_Ast_pattern[234],
    ppat_constraint = Ppxlib_Ast_pattern[233],
    ppat_or = Ppxlib_Ast_pattern[232],
    ppat_array = Ppxlib_Ast_pattern[231],
    ppat_record = Ppxlib_Ast_pattern[230],
    ppat_variant = Ppxlib_Ast_pattern[229],
    ppat_construct = Ppxlib_Ast_pattern[228],
    ppat_tuple = Ppxlib_Ast_pattern[227],
    ppat_interval = Ppxlib_Ast_pattern[226],
    ppat_constant = Ppxlib_Ast_pattern[225],
    ppat_alias = Ppxlib_Ast_pattern[224],
    ppat_var = Ppxlib_Ast_pattern[223],
    ppat_any = Ppxlib_Ast_pattern[222],
    ppat_attributes = Ppxlib_Ast_pattern[221],
    ppat_loc = Ppxlib_Ast_pattern[220],
    fresh = Ppxlib_Ast_pattern[219],
    override = Ppxlib_Ast_pattern[218],
    open_infos = Ppxlib_Ast_pattern[217],
    open_infos_attributes = Ppxlib_Ast_pattern[216],
    oinherit = Ppxlib_Ast_pattern[215],
    otag = Ppxlib_Ast_pattern[214],
    pof_attributes = Ppxlib_Ast_pattern[213],
    pof_loc = Ppxlib_Ast_pattern[212],
    mutable = Ppxlib_Ast_pattern[211],
    immutable = Ppxlib_Ast_pattern[210],
    module_type_declaration = Ppxlib_Ast_pattern[209],
    module_type_declaration_attrib = Ppxlib_Ast_pattern[208],
    pmty_alias = Ppxlib_Ast_pattern[207],
    pmty_extension = Ppxlib_Ast_pattern[206],
    pmty_typeof = Ppxlib_Ast_pattern[205],
    pmty_with = Ppxlib_Ast_pattern[204],
    pmty_functor = Ppxlib_Ast_pattern[203],
    pmty_signature = Ppxlib_Ast_pattern[202],
    pmty_ident = Ppxlib_Ast_pattern[201],
    pmty_attributes = Ppxlib_Ast_pattern[200],
    pmty_loc = Ppxlib_Ast_pattern[199],
    module_substitution = Ppxlib_Ast_pattern[198],
    module_substitution_attributes = Ppxlib_Ast_pattern[197],
    pmod_extension = Ppxlib_Ast_pattern[196],
    pmod_unpack = Ppxlib_Ast_pattern[195],
    pmod_constraint = Ppxlib_Ast_pattern[194],
    pmod_apply_unit = Ppxlib_Ast_pattern[193],
    pmod_apply = Ppxlib_Ast_pattern[192],
    pmod_functor = Ppxlib_Ast_pattern[191],
    pmod_structure = Ppxlib_Ast_pattern[190],
    pmod_ident = Ppxlib_Ast_pattern[189],
    pmod_attributes = Ppxlib_Ast_pattern[188],
    pmod_loc = Ppxlib_Ast_pattern[187],
    module_declaration = Ppxlib_Ast_pattern[186],
    module_declaration_attributes = Ppxlib_Ast_pattern[185],
    module_binding = Ppxlib_Ast_pattern[184],
    module_binding_attributes = Ppxlib_Ast_pattern[183],
    lapply = Ppxlib_Ast_pattern[182],
    ldot = Ppxlib_Ast_pattern[181],
    lident = Ppxlib_Ast_pattern[180],
    location = Ppxlib_Ast_pattern[179],
    letop = Ppxlib_Ast_pattern[178],
    label_declaration = Ppxlib_Ast_pattern[177],
    label_declaration_attributes = Ppxlib_Ast_pattern[176],
    noinjectivity = Ppxlib_Ast_pattern[175],
    injective = Ppxlib_Ast_pattern[174],
    include_infos = Ppxlib_Ast_pattern[173],
    include_infos_attributes = Ppxlib_Ast_pattern[172],
    named = Ppxlib_Ast_pattern[171],
    unit = Ppxlib_Ast_pattern[170],
    pparam_newtype = Ppxlib_Ast_pattern[169],
    pparam_val = Ppxlib_Ast_pattern[168],
    pparam_loc = Ppxlib_Ast_pattern[167],
    pfunction_cases = Ppxlib_Ast_pattern[166],
    pfunction_body = Ppxlib_Ast_pattern[165],
    pext_rebind = Ppxlib_Ast_pattern[164],
    pext_decl = Ppxlib_Ast_pattern[163],
    extension_constructor = Ppxlib_Ast_pattern[162],
    extension_constructor_attribut = Ppxlib_Ast_pattern[161],
    pexp_unreachable = Ppxlib_Ast_pattern[160],
    pexp_extension = Ppxlib_Ast_pattern[159],
    pexp_letop = Ppxlib_Ast_pattern[158],
    pexp_open = Ppxlib_Ast_pattern[157],
    pexp_pack = Ppxlib_Ast_pattern[156],
    pexp_newtype = Ppxlib_Ast_pattern[155],
    pexp_object = Ppxlib_Ast_pattern[154],
    pexp_poly = Ppxlib_Ast_pattern[153],
    pexp_lazy = Ppxlib_Ast_pattern[152],
    pexp_assert = Ppxlib_Ast_pattern[151],
    pexp_letexception = Ppxlib_Ast_pattern[150],
    pexp_letmodule = Ppxlib_Ast_pattern[149],
    pexp_override = Ppxlib_Ast_pattern[148],
    pexp_setinstvar = Ppxlib_Ast_pattern[147],
    pexp_new = Ppxlib_Ast_pattern[146],
    pexp_send = Ppxlib_Ast_pattern[145],
    pexp_coerce = Ppxlib_Ast_pattern[144],
    pexp_constraint = Ppxlib_Ast_pattern[143],
    pexp_for = Ppxlib_Ast_pattern[142],
    pexp_while = Ppxlib_Ast_pattern[141],
    pexp_sequence = Ppxlib_Ast_pattern[140],
    pexp_ifthenelse = Ppxlib_Ast_pattern[139],
    pexp_array = Ppxlib_Ast_pattern[138],
    pexp_setfield = Ppxlib_Ast_pattern[137],
    pexp_field = Ppxlib_Ast_pattern[136],
    pexp_record = Ppxlib_Ast_pattern[135],
    pexp_variant = Ppxlib_Ast_pattern[134],
    pexp_construct = Ppxlib_Ast_pattern[133],
    pexp_tuple = Ppxlib_Ast_pattern[132],
    pexp_try = Ppxlib_Ast_pattern[131],
    pexp_match = Ppxlib_Ast_pattern[130],
    pexp_apply = Ppxlib_Ast_pattern[129],
    pexp_function = Ppxlib_Ast_pattern[128],
    pexp_let = Ppxlib_Ast_pattern[127],
    pexp_constant = Ppxlib_Ast_pattern[126],
    pexp_ident = Ppxlib_Ast_pattern[125],
    pexp_attributes = Ppxlib_Ast_pattern[124],
    pexp_loc = Ppxlib_Ast_pattern[123],
    pdir_bool = Ppxlib_Ast_pattern[122],
    pdir_ident = Ppxlib_Ast_pattern[121],
    pdir_int = Ppxlib_Ast_pattern[120],
    pdir_string = Ppxlib_Ast_pattern[119],
    pdira_loc = Ppxlib_Ast_pattern[118],
    downto = Ppxlib_Ast_pattern[117],
    upto = Ppxlib_Ast_pattern[116],
    ptyp_extension = Ppxlib_Ast_pattern[115],
    ptyp_open = Ppxlib_Ast_pattern[114],
    ptyp_package = Ppxlib_Ast_pattern[113],
    ptyp_poly = Ppxlib_Ast_pattern[112],
    ptyp_variant = Ppxlib_Ast_pattern[111],
    ptyp_alias = Ppxlib_Ast_pattern[110],
    ptyp_class = Ppxlib_Ast_pattern[109],
    ptyp_object = Ppxlib_Ast_pattern[108],
    ptyp_constr = Ppxlib_Ast_pattern[107],
    ptyp_tuple = Ppxlib_Ast_pattern[106],
    ptyp_arrow = Ppxlib_Ast_pattern[105],
    ptyp_var = Ppxlib_Ast_pattern[104],
    ptyp_any = Ppxlib_Ast_pattern[103],
    ptyp_attributes = Ppxlib_Ast_pattern[102],
    ptyp_loc = Ppxlib_Ast_pattern[101],
    constructor_declaration = Ppxlib_Ast_pattern[100],
    constructor_declaration_attrib = Ppxlib_Ast_pattern[99],
    pcstr_record = Ppxlib_Ast_pattern[98],
    pcstr_tuple = Ppxlib_Ast_pattern[97],
    pconst_float = Ppxlib_Ast_pattern[96],
    pconst_string = Ppxlib_Ast_pattern[95],
    pconst_char = Ppxlib_Ast_pattern[94],
    pconst_integer = Ppxlib_Ast_pattern[93],
    open = Ppxlib_Ast_pattern[92],
    closed = Ppxlib_Ast_pattern[91],
    pctf_extension = Ppxlib_Ast_pattern[90],
    pctf_attribute = Ppxlib_Ast_pattern[89],
    pctf_constraint = Ppxlib_Ast_pattern[88],
    pctf_method = Ppxlib_Ast_pattern[87],
    pctf_val = Ppxlib_Ast_pattern[86],
    pctf_inherit = Ppxlib_Ast_pattern[85],
    pctf_attributes = Ppxlib_Ast_pattern[84],
    pctf_loc = Ppxlib_Ast_pattern[83],
    pcty_open = Ppxlib_Ast_pattern[82],
    pcty_extension = Ppxlib_Ast_pattern[81],
    pcty_arrow = Ppxlib_Ast_pattern[80],
    pcty_signature = Ppxlib_Ast_pattern[79],
    pcty_constr = Ppxlib_Ast_pattern[78],
    pcty_attributes = Ppxlib_Ast_pattern[77],
    pcty_loc = Ppxlib_Ast_pattern[76],
    class_structure = Ppxlib_Ast_pattern[75],
    class_signature = Ppxlib_Ast_pattern[74],
    class_infos = Ppxlib_Ast_pattern[73],
    class_infos_attributes = Ppxlib_Ast_pattern[72],
    cfk_concrete = Ppxlib_Ast_pattern[71],
    cfk_virtual = Ppxlib_Ast_pattern[70],
    pcf_extension = Ppxlib_Ast_pattern[69],
    pcf_attribute = Ppxlib_Ast_pattern[68],
    pcf_initializer = Ppxlib_Ast_pattern[67],
    pcf_constraint = Ppxlib_Ast_pattern[66],
    pcf_method = Ppxlib_Ast_pattern[65],
    pcf_val = Ppxlib_Ast_pattern[64],
    pcf_inherit = Ppxlib_Ast_pattern[63],
    pcf_attributes = Ppxlib_Ast_pattern[62],
    pcf_loc = Ppxlib_Ast_pattern[61],
    pcl_open = Ppxlib_Ast_pattern[60],
    pcl_extension = Ppxlib_Ast_pattern[59],
    pcl_constraint = Ppxlib_Ast_pattern[58],
    pcl_let = Ppxlib_Ast_pattern[57],
    pcl_apply = Ppxlib_Ast_pattern[56],
    pcl_fun = Ppxlib_Ast_pattern[55],
    pcl_structure = Ppxlib_Ast_pattern[54],
    pcl_constr = Ppxlib_Ast_pattern[53],
    pcl_attributes = Ppxlib_Ast_pattern[52],
    pcl_loc = Ppxlib_Ast_pattern[51],
    case$ = Ppxlib_Ast_pattern[50],
    binding_op = Ppxlib_Ast_pattern[49],
    optional = Ppxlib_Ast_pattern[48],
    labelled = Ppxlib_Ast_pattern[47],
    nolabel = Ppxlib_Ast_pattern[46],
    pack3 = Ppxlib_Ast_pattern[45],
    pack2 = Ppxlib_Ast_pattern[44],
    pack0 = Ppxlib_Ast_pattern[43],
    loc = Ppxlib_Ast_pattern[42],
    triple = Ppxlib_Ast_pattern[41],
    symbol = Ppxlib_Ast_pattern[40],
    pair = Ppxlib_Ast_pattern[39],
    some = Ppxlib_Ast_pattern[38],
    none = Ppxlib_Ast_pattern[37],
    cst = Ppxlib_Ast_pattern[36],
    pbool = Ppxlib_Ast_pattern[35],
    ebool = Ppxlib_Ast_pattern[34],
    bool = Ppxlib_Ast_pattern[33],
    nativeint = Ppxlib_Ast_pattern[32],
    int64 = Ppxlib_Ast_pattern[31],
    int32 = Ppxlib_Ast_pattern[30],
    float = Ppxlib_Ast_pattern[29],
    string = Ppxlib_Ast_pattern[28],
    char = Ppxlib_Ast_pattern[27],
    int = Ppxlib_Ast_pattern[26],
    many = Ppxlib_Ast_pattern[25],
    symbol$0 = Ppxlib_Ast_pattern[24],
    nil = Ppxlib_Ast_pattern[23],
    map_value = Ppxlib_Ast_pattern[22],
    map_value$0 = Ppxlib_Ast_pattern[21],
    map2 = Ppxlib_Ast_pattern[20],
    map1 = Ppxlib_Ast_pattern[19],
    map0 = Ppxlib_Ast_pattern[18],
    map2$0 = Ppxlib_Ast_pattern[17],
    map1$0 = Ppxlib_Ast_pattern[16],
    map0$0 = Ppxlib_Ast_pattern[15],
    symbol_map = Ppxlib_Ast_pattern[14],
    map_result = Ppxlib_Ast_pattern[13],
    map = Ppxlib_Ast_pattern[12],
    map$0 = Ppxlib_Ast_pattern[11],
    symbol$1 = Ppxlib_Ast_pattern[10],
    alt_option = Ppxlib_Ast_pattern[9],
    alt = Ppxlib_Ast_pattern[8],
    as = Ppxlib_Ast_pattern[7],
    drop = Ppxlib_Ast_pattern[6],
    symbol$2 = Ppxlib_Ast_pattern[5],
    symbol$3 = Ppxlib_Ast_pattern[4],
    parse_res = Ppxlib_Ast_pattern[2],
    parse = Ppxlib_Ast_pattern[1];
   function arg(name, pattern){
    return [0,
            name,
            caml_call2
             (Ppxlib_Ast_pattern[3][1], pattern, function(x){return [0, x];}),
            0];
   }
   function flag(name){
    var pattern = pexp_ident(lident(string(name)));
    return [0, name, caml_call2(Ppxlib_Ast_pattern[3][1], pattern, 1), 0];
   }
   var empty = 0;
   function symbol$4(a, b){return [0, a, b];}
   function names(param){
    if(! param) return 0;
    var p = param[2], t = param[1], a = names(t);
    return [0, p[1], a];
   }
   function create(spec, args){
    if(! spec) return 0;
    var
     p = spec[2],
     t = spec[1],
     match = caml_call2(Ppxlib_Import[94][76], p[1], args);
    if(match)
     var
      expr = match[1],
      value = caml_call3(Ppxlib_Ast_pattern[3][2], p[2], expr[2], expr);
    else
     var value = p[3];
    return [0, create(t, args), value];
   }
   function apply(t, f){
    if(! t) return f;
    var x = t[2], t$0 = t[1];
    return caml_call1(apply(t$0, f), x);
   }
   function ignore(param){return 0;}
   function make(c, a, opt, spec, gen){
    var
     deps = a ? a[1] : 0,
     unused_code_warnings = opt ? opt[1] : 0,
     b = names(spec),
     arg_names = caml_call1(Ppxlib_Import[99][83][38], b);
    return [0, spec, gen, arg_names, deps, unused_code_warnings];
   }
   function make_noarg(attributes, deps, unused_code_warnings, gen){
    return make(attributes, deps, unused_code_warnings, empty, gen);
   }
   var
    V2 = [0, make, make_noarg],
    f =
      [0,
       [11, cst_Ppxlib_Deriving_generator_, 0],
       cst_Ppxlib_Deriving_generator_],
    g =
      [0,
       [11,
        "Ppxlib.Deriving: argument labelled '",
        [2, 0, [11, "' appears more than once", 0]]],
       "Ppxlib.Deriving: argument labelled '%s' appears more than once"],
    h =
      [0,
       [11,
        "Ppxlib.Deriving: generator '",
        [2,
         0,
         [11, "' doesn't accept argument '", [2, 0, [12, 39, [2, 0, 0]]]]]],
       "Ppxlib.Deriving: generator '%s' doesn't accept argument '%s'%s"],
    i = [0, 0];
   function make$0(attributes, deps, unused_code_warnings, spec, gen){
    return make
            (attributes,
             deps,
             unused_code_warnings,
             spec,
             caml_call1(Ppxlib_Expansion_context[3][5], gen));
   }
   function make_noarg$0(attributes, deps, unused_code_warnings, gen){
    return make$0(attributes, deps, unused_code_warnings, empty, gen);
   }
   function apply$0(t, param, ctxt, x, args){
    var f = caml_call2(t[2], ctxt, x), t$0 = t[1];
    return apply(create(t$0, args), f);
   }
   function j(ctxt, entry, param$0){
    var
     args = param$0[3],
     generators = param$0[2],
     name = param$0[1],
     name$0 = name[1],
     empty_label_error =
       caml_call2
        (Ppxlib_Import[94][69],
         args,
         function(param){
          var e = param[2], label = param[1];
          return caml_call1(Ppxlib_Import[99][53], label)
                  ? [0, Ppxlib_Location[15].call(null, e[2], f)]
                  : 0;
         }),
     a =
       caml_call2
        (Ppxlib_Import[94][75],
         args,
         function(c, param){
          var b = param[1], a = c[1];
          return caml_call2(Ppxlib_Import[99][72], a, b);
         }),
     b =
       caml_call2
        (Ppxlib_Import[95][3],
         a,
         function(param){
          var e = param[2], label = param[1];
          return caml_call1(Ppxlib_Location[15].call(null, e[2], g), label);
         }),
     duplicate_argument_error = caml_call1(Ppxlib_Import[95][5], b),
     acc$0 = Ppxlib_Import[99][83][1],
     accepted_args = acc$0,
     param = generators;
    function e(param){
     return caml_call2
             (Ppxlib_Import[94][55],
              generators,
              function(param){
               var a = param[5];
               return [0, apply$0(param, name[1], ctxt, entry, args), a];
              });
    }
    for(;;){
     if(! param) break;
     var
      rest = param[2],
      acc = caml_call2(Ppxlib_Import[99][83][5], accepted_args, param[1][3]);
     accepted_args = acc;
     param = rest;
    }
    var
     unaccepted_argument =
       caml_call2
        (Ppxlib_Import[94][69],
         args,
         function(param){
          var e = param[2], label = param[1];
          if(caml_call2(Ppxlib_Import[99][83][31], label, accepted_args))
           return 0;
          var
           a = caml_call1(Ppxlib_Import[99][83][10], accepted_args),
           match = Ppxlib_Spellcheck[3].call(null, a, label);
          if(match)
           var
            s = match[1],
            spellcheck_msg = caml_call2(Stdlib[28], cst$0, s);
          else
           var spellcheck_msg = cst$1;
          return [0,
                  caml_call3
                   (Ppxlib_Location[15].call(null, e[2], h),
                    name$0,
                    label,
                    spellcheck_msg)];
         }),
     c =
       caml_call2
        (Ppxlib_Import[100], duplicate_argument_error, unaccepted_argument),
     errors = caml_call2(Ppxlib_Import[100], empty_label_error, c),
     d = caml_call1(Ppxlib_Import[94][1], errors),
     j = caml_call2(Ppxlib_Import[76], d, 0) ? i : [1, errors];
    return caml_call2(Ppxlib_Import[96][5], j, e);
   }
   function apply_all(ctxt, entry, generators, ext_to_item){
    var
     l =
       caml_call2
        (Ppxlib_Import[94][55],
         generators,
         function(a){return j(ctxt, entry, a);}),
     match =
       caml_call2
        (Ppxlib_Import[94][64],
         function(param){
          if(0 === param[0]){var e = param[1]; return [0, e];}
          var e$0 = param[1];
          return [1, e$0];
         },
         l),
     lerr = match[2],
     l1 = match[1],
     a = caml_call1(Ppxlib_Import[94][59], lerr),
     lerr$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         a,
         function(err){
          return caml_call3(ext_to_item, Ppxlib_Location[3], err, 0);
         }),
     b = caml_call1(Ppxlib_Import[94][59], l1);
    return caml_call2(Ppxlib_Import[100], b, [0, [0, lerr$0, 0], 0]);
   }
   var
    str_type_decl =
      [0, "type", function(t){return t[2];}, function(t){return t[1];}],
    str_class_type_decl =
      [0,
       "class type declaration",
       function(t){return t[3];},
       function(t){return t[2];}],
    str_type_ext =
      [0,
       "type extension",
       function(t){return t[4];},
       function(t){return t[3];}],
    str_exception =
      [0, "exception", function(t){return t[5];}, function(t){return t[4];}],
    str_module_type_decl =
      [0, "module type", function(t){return t[6];}, function(t){return t[5];}],
    sig_type_decl =
      [0,
       "signature type",
       function(t){return t[7];},
       function(t){return t[6];}],
    sig_class_type_decl =
      [0,
       "signature class type",
       function(t){return t[8];},
       function(t){return t[7];}],
    sig_type_ext =
      [0,
       "signature type extension",
       function(t){return t[9];},
       function(t){return t[8];}],
    sig_exception =
      [0,
       "signature exception",
       function(t){return t[10];},
       function(t){return t[9];}],
    sig_module_type_decl =
      [0,
       "signature module type",
       function(t){return t[11];},
       function(t){return t[10];}],
    T = [248, "Ppxlib__Deriving.Deriver.T", caml_fresh_oo_id(0)],
    Not_supported =
      [248, "Ppxlib__Deriving.Deriver.Not_supported", caml_fresh_oo_id(0)],
    k =
      [0,
       [11,
        "Ppxlib.Deriving: '",
        [2,
         0,
         [11,
          "' is not a supported ",
          [2, 0, [11, " deriving generator", [2, 0, 0]]]]]],
       "Ppxlib.Deriving: '%s' is not a supported %s deriving generator%s"],
    l = [0, [11, "Ppxlib.Deriving: ", [2, 0, 0]], "Ppxlib.Deriving: %s"],
    m = [0, 0],
    n = [0, 0, 0],
    o =
      [0,
       [11, cst_Deriver, [2, 0, [11, " appears twice", 0]]],
       "Deriver %s appears twice"],
    p =
      [0,
       [11,
        cst_Deriver,
        [2,
         0,
         [11,
          " is needed for ",
          [2, 0, [11, ", you need to add it before in the list", 0]]]]],
       "Deriver %s is needed for %s, you need to add it before in the list"],
    cst_Ppxlib_Deriving = "Ppxlib.Deriving.";
   function resolve_actual_derivers(field, name){
    function loop(name, collected){
     if
      (caml_call2
        (Ppxlib_Import[94][22],
         function(d){return caml_call2(Ppxlib_Import[99][73], d[1], name);},
         collected))
      return collected;
     var match = caml_call1(Ppx_derivers[2], name);
     if(match){
      var a = match[1], tag = a[1];
      if(tag === T){
       var match$0 = a[2];
       if(0 === match$0[0]){var drv = match$0[1]; return [0, drv, collected];}
       var alias = match$0[1], set = caml_call1(field[3], alias);
       return caml_call3(Ppxlib_Import[94][57], set, collected, loop);
      }
     }
     throw caml_maybe_attach_backtrace([0, Not_supported, name], 1);
    }
    var a = loop(name, 0);
    return caml_call1(Ppxlib_Import[94][9], a);
   }
   function resolve_internal(field, name){
    var a = resolve_actual_derivers(field, name);
    return caml_call2
            (Ppxlib_Import[94][55],
             a,
             function(drv){
              var match = caml_call1(field[2], drv);
              if(! match)
               throw caml_maybe_attach_backtrace([0, Not_supported, name], 1);
              var g = match[1];
              return [0, drv[1], g];
             });
   }
   function not_supported(field, opt, name){
    var spellcheck = opt ? opt[1] : 1;
    if(spellcheck){
     var
      e = name[1],
      a = caml_call1(Ppx_derivers[3], 0),
      b =
        caml_call2
         (Ppxlib_Import[94][69],
          a,
          function(param){
           var match = param[2], tag = match[1];
           if(tag !== T) return 0;
           var t = match[2], name = param[1];
           return [0, [0, name, t]];
          }),
      c =
        caml_call3
         (Ppxlib_Import[94][17],
          function(acc, param){
           var name = param[1];
           try{resolve_internal(field, name);}
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0), tag = exn[1];
            if(tag === Not_supported) return acc;
            throw caml_maybe_attach_backtrace(exn, 0);
           }
           return caml_call2(Ppxlib_Import[99][83][2], name, acc);
          },
          Ppxlib_Import[99][83][1],
          b),
      d = caml_call1(Ppxlib_Import[99][83][10], c),
      match = Ppxlib_Spellcheck[3].call(null, d, e);
     if(match)
      var s = match[1], spellcheck_msg = caml_call2(Stdlib[28], cst$2, s);
     else
      var spellcheck_msg = cst$3;
    }
    else
     var spellcheck_msg = cst$4;
    var f = field[1], g = name[1];
    return caml_call3
            (Ppxlib_Location[15].call(null, name[2], k), g, f, spellcheck_msg);
   }
   function resolve_all(field, derivers){
    var
     param =
       caml_call2
        (Ppxlib_Import[94][64],
         function(param){
          var
           args = param[2],
           name = param[1],
           match = caml_call1(Ppx_derivers[2], name[1]);
          if(! match) return [1, not_supported(field, 0, name)];
          var tag = match[1][1];
          if(tag !== T) return m;
          if(0 === args[0]){
           var l$0 = args[1];
           return [0, [0, [0, name, l$0]]];
          }
          var msg = args[2], loc = args[1];
          return [1, caml_call1(Ppxlib_Location[15].call(null, loc, l), msg)];
         },
         derivers),
     derivers_and_args_errors = param[2],
     l1 = param[1],
     derivers_and_args = caml_call1(Ppxlib_Import[94][68], l1),
     seen = caml_call2(Ppxlib_Import[90][1], 0, 16),
     match =
       caml_call3
        (Ppxlib_Import[94][17],
         function(b, param){
          var
           args = param[2],
           name$0 = param[1],
           errors = b[2],
           result = b[1];
          try{var a = [0, resolve_internal(field, name$0[1])], match = a;}
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0), tag = exn[1];
           if(tag !== Not_supported)
            throw caml_maybe_attach_backtrace(exn, 0);
           var
            name = exn[2],
            match =
              [1,
               not_supported
                (field,
                 [0, caml_call2(Ppxlib_Import[99][73], name$0[1], name)],
                 name$0)];
          }
          if(0 === match[0]){
           var
            named_generators = match[1],
            l_err =
              caml_call2
               (Ppxlib_Import[94][70],
                named_generators,
                function(param){
                 var gen = param[2], actual_deriver_name = param[1];
                 a:
                 {
                  if
                   (Ppxlib_Options[7]
                    &&
                     caml_call2(Ppxlib_Import[90][7], seen, actual_deriver_name)){
                   var
                    dup_error =
                      [0,
                       caml_call1
                        (Ppxlib_Location[15].call(null, name$0[2], o),
                         actual_deriver_name),
                       0];
                   break a;
                  }
                  var dup_error = 0;
                 }
                 var
                  l_err =
                    caml_call2
                     (Ppxlib_Import[94][70],
                      gen[4],
                      function(dep){
                       var a = resolve_actual_derivers(field, dep);
                       return caml_call2
                               (Ppxlib_Import[94][69],
                                a,
                                function(drv){
                                 var dep_name = drv[1];
                                 if(caml_call2(Ppxlib_Import[90][7], seen, dep_name))
                                  return 0;
                                 var a = name$0[1];
                                 return [0,
                                         caml_call2
                                          (Ppxlib_Location[15].call(null, name$0[2], p), dep_name, a)];
                                });
                      });
                 caml_call3
                  (Ppxlib_Import[90][30], seen, actual_deriver_name, 0);
                 return caml_call2(Ppxlib_Import[100], dup_error, l_err);
                }),
            c = caml_call2(Ppxlib_Import[100], errors, l_err),
            d =
              [0,
               [0,
                name$0,
                caml_call2
                 (Ppxlib_Import[94][55],
                  named_generators,
                  function(a){return a[2];}),
                args],
               0];
           return [0, caml_call2(Ppxlib_Import[100], result, d), c];
          }
          var e = match[1];
          return [0,
                  result,
                  caml_call2(Ppxlib_Import[100], errors, [0, e, 0])];
         },
         n,
         derivers_and_args),
     dep_errors = match[2],
     result = match[1];
    return [0,
            result,
            caml_call2
             (Ppxlib_Import[100], derivers_and_args_errors, dep_errors)];
   }
   function add
   (str_type_decl,
    str_class_type_decl,
    str_type_ext,
    str_exception,
    str_module_type_decl,
    sig_type_decl,
    sig_class_type_decl,
    sig_type_ext,
    sig_exception,
    sig_module_type_decl,
    extension,
    name){
    var
     actual_deriver =
       [0,
        name,
        str_type_decl,
        str_class_type_decl,
        str_type_ext,
        str_exception,
        str_module_type_decl,
        sig_type_decl,
        sig_class_type_decl,
        sig_type_ext,
        sig_exception,
        sig_module_type_decl];
    caml_call2(Ppx_derivers[1], name, [0, T, [0, actual_deriver]]);
    if(extension){
     var
      f = extension[1],
      a = Ppxlib_Ast_pattern[242].call(null, Ppxlib_Ast_pattern[4]),
      extension$0 = Ppxlib_Extension[2].call(null, name, 5, a, f),
      b = caml_call2(Stdlib[28], cst_Ppxlib_Deriving, name),
      c = [0, [0, caml_call1(Ppxlib_Context_free[1][1], extension$0), 0]];
     Ppxlib_Driver[5].call(null, 0, c, 0, 0, 0, 0, 0, 0, 0, 0)(0, 0, b);
    }
    return name;
   }
   function add_alias
   (name,
    str_type_decl,
    str_class_type_decl,
    str_type_ext,
    str_exception,
    str_module_type_decl,
    sig_type_decl,
    sig_class_type_decl,
    sig_type_ext,
    sig_exception,
    sig_module_type_decl,
    set){
    function get(param){
     if(! param) return set;
     var set$0 = param[1];
     return set$0;
    }
    var
     a = get(sig_module_type_decl),
     b = get(sig_exception),
     c = get(sig_type_ext),
     d = get(sig_class_type_decl),
     e = get(sig_type_decl),
     f = get(str_module_type_decl),
     g = get(str_exception),
     h = get(str_type_ext),
     i = get(str_class_type_decl),
     alias = [0, get(str_type_decl), i, h, g, f, e, d, c, b, a];
    caml_call2(Ppx_derivers[1], name, [0, T, [1, alias]]);
    return name;
   }
   var
    Unknown_syntax =
      [248, "Ppxlib__Deriving.Unknown_syntax", caml_fresh_oo_id(0)],
    q =
      [0,
       [11, "invalid [", [17, 5, [11, "deriving ] attribute syntax", 0]]],
       "invalid [@@deriving ] attribute syntax"],
    cst_non_optional_labelled_argu = "non-optional labelled argument expected",
    cst_non_optional_labelled_argu$0 =
      "non-optional labelled argument or record expected",
    cst_simple_identifier_expected = "simple identifier expected",
    r = [0, 0],
    cst_deriving = cst_deriving$0,
    cst_ocaml_warning = "ocaml.warning";
   function parse_arguments(l){
    try{
     a:
     {
      if(l){
       var b = l[1];
       if(typeof b[1] === "number" && ! l[2]){
        var e = b[2], a = e[1];
        if(typeof a !== "number" && 10 === a[0] && ! a[2]){
         var
          fields = a[1],
          c =
            caml_call2
             (Ppxlib_Import[94][55],
              fields,
              function(param){
               var expr = param[2], id = param[1], match = id[1];
               if(0 !== match[0])
                throw [0,
                       Unknown_syntax,
                       id[2],
                       cst_simple_identifier_expected];
               var name = match[1];
               return [0, name, expr];
              });
         break a;
        }
        throw [0, Unknown_syntax, e[2], cst_non_optional_labelled_argu$0];
       }
      }
      var
       c =
         caml_call2
          (Ppxlib_Import[94][55],
           l,
           function(param){
            var expr = param[2], label = param[1];
            if(typeof label !== "number" && 0 === label[0]){var s = label[1]; return [0, s, expr];}
            throw [0, Unknown_syntax, expr[2], cst_non_optional_labelled_argu];
           });
     }
     var d = [0, c];
     return d;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Unknown_syntax) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[3], loc = exn[2];
     return [1, loc, msg];
    }
   }
   function mk_deriving_attr(context, prefix, suffix){
    function generator_name(param){
     var a = Ppxlib_Ast_pattern[125].call(null, Ppxlib_Ast_pattern[4]);
     return Ppxlib_Ast_pattern[12].call
             (null,
              a,
              function(loc, f, id){
               a:
               {
                try{var l = Ppxlib_Longident[3].call(null, id);}
                catch(exn){
                 var a = Ppxlib_Location[6].call(null, [0, loc], q);
                 break a;
                }
                var a = [0, caml_call2(Ppxlib_Import[99][7], cst$5, l), loc];
               }
               return caml_call1(f, a);
              });
    }
    function generator(param){
     var
      a = Ppxlib_Ast_pattern[25].call(null, Ppxlib_Ast_pattern[4]),
      b = Ppxlib_Ast_pattern[16].call(null, a, parse_arguments),
      c = generator_name(0),
      d = Ppxlib_Ast_pattern[129].call(null, c)(b),
      e = Ppxlib_Ast_pattern[44].call(null, d),
      f = generator_name(0),
      g =
        Ppxlib_Ast_pattern[11].call
         (null, f, function(f, x){return caml_call1(f, [0, x, r]);});
     return Ppxlib_Ast_pattern[10].call(null, g, e);
    }
    var
     a = generator(0),
     b =
       Ppxlib_Ast_pattern[11].call
        (null, a, function(f, x){return caml_call1(f, [0, x, 0]);}),
     c = generator(0),
     d = Ppxlib_Ast_pattern[25].call(null, c),
     e = Ppxlib_Ast_pattern[132].call(null, d),
     generators = Ppxlib_Ast_pattern[10].call(null, e, b),
     f = Ppxlib_Ast_pattern[23],
     g = Ppxlib_Ast_pattern[23],
     h = Ppxlib_Ast_pattern[271].call(null, generators)(g),
     i = Ppxlib_Ast_pattern[24].call(null, h, f),
     j = Ppxlib_Ast_pattern[240].call(null, i),
     k = caml_call2(Stdlib[28], cst_deriving, suffix),
     l = caml_call2(Stdlib[28], prefix, k);
    return Ppxlib_Attribute[2].call
            (null, l, context, j, function(x){return x;});
   }
   function disable_warnings_attribute(warnings){
    var
     loc = Ppxlib_Location[3],
     a = caml_call2(Ppxlib_Import[94][44], Ppxlib_Import[92][3], warnings),
     b =
       caml_call2
        (Ppxlib_Import[94][55],
         a,
         function(warning){
          var a = caml_call1(Ppxlib_Import[92][2], warning);
          return caml_call2(Stdlib[28], cst$6, a);
         }),
     string = caml_call1(caml_call1(Ppxlib_Import[99][7], cst$7), b),
     c = caml_call2(Ppxlib_Ast_builder[1][177], loc, string);
    return [0,
            [0, cst_ocaml_warning, loc],
            [0, [0, caml_call3(Ppxlib_Ast_builder[1][21], loc, c, 0), 0]],
            loc];
   }
   var
    loc$0 = Ppxlib_Location[3],
    s = caml_call2(Ppxlib_Ast_builder[1][177], loc$0, "@inline"),
    inline_doc_attr =
      [0,
       [0, "ocaml.doc", loc$0],
       [0, [0, caml_call3(Ppxlib_Ast_builder[1][21], loc$0, s, 0), 0]],
       loc$0],
    t = [0, 32, 0],
    cst_inline = "_inline";
   function wrap_str(loc, hide, list){
    return caml_call2
            (Ppxlib_Import[94][70],
             list,
             function(param){
              var unused_code_warnings$0 = param[2], items = param[1];
              if(caml_call1(Ppxlib_Import[94][66], items)) return 0;
              var
               loc$0 = [0, loc[1], loc[2], 1],
               unused_code_warnings =
                 allow_unused_code_warnings$0(unused_code_warnings$0);
              a:
              {
               if(! keep_w32_impl$0(0) && ! unused_code_warnings){
                if(do_insert_unused_warning_attri[1]){
                 var st = items, warnings$0 = warnings;
                 break a;
                }
                var
                 b = Ppxlib_Ignore_unused_warning[1],
                 st =
                   caml_call2
                    (caml_get_cached_method(b, -951102413, cache_id$0),
                     b,
                     items),
                 warnings$0 = 0;
                break a;
               }
               var st = items, warnings$0 = 0;
              }
              var
               c = keep_w60_impl[1],
               e = c || Ppxlib_Driver[14].call(null, 0);
              if(e || unused_code_warnings)
               var warnings$1 = warnings$0;
              else{
               var a = Ppxlib_Ignore_unused_warning[2];
               if
                (caml_call3
                  (caml_get_cached_method(a, -951102413, cache_id), a, st, 0))
                var warnings$2 = [0, 60, warnings$0], warnings$1 = warnings$2;
               else
                var warnings$1 = warnings$0;
              }
              if(caml_call1(Ppxlib_Import[94][66], warnings$1))
               var st$0 = st, wrap = hide;
              else
               var
                f = disable_warnings_attribute(warnings$1),
                st$1 = [0, caml_call2(Ppxlib_Ast_builder[1][8], loc$0, f), st],
                st$0 = st$1,
                wrap = 1;
              if(! wrap) return st$0;
              var
               d = caml_call2(Ppxlib_Ast_builder[1][75], loc$0, st$0),
               include_infos =
                 caml_call2(Ppxlib_Ast_builder[1][169], loc$0, d),
               pincl_attributes =
                 hide
                  ? [0, inline_doc_attr, [0, Ppxlib_Merlin_helpers[1], 0]]
                  : [0, inline_doc_attr, 0];
              return [0,
                      caml_call2
                       (Ppxlib_Ast_builder[1][9],
                        loc$0,
                        [0, include_infos[1], include_infos[2], pincl_attributes]),
                      0];
             });
   }
   function wrap_sig(loc, hide, list){
    return caml_call2
            (Ppxlib_Import[94][70],
             list,
             function(param){
              var unused_code_warnings$0 = param[2], items = param[1];
              if(caml_call1(Ppxlib_Import[94][66], items)) return 0;
              var
               loc$0 = [0, loc[1], loc[2], 1],
               unused_code_warnings =
                 allow_unused_code_warnings$0(unused_code_warnings$0),
               b = keep_w32_intf[1],
               e = b || Ppxlib_Driver[14].call(null, 0);
              a:
              {
               if(! e && ! unused_code_warnings){var warnings = t; break a;}
               var warnings = 0;
              }
              var
               c = keep_w60_intf[1],
               f = c || Ppxlib_Driver[14].call(null, 0);
              if(f)
               var warnings$0 = warnings;
              else
               var
                a = Ppxlib_Ignore_unused_warning[2],
                warnings$0 =
                  caml_call3
                    (caml_get_cached_method(a, 359375608, cache_id$1),
                     a,
                     items,
                     0)
                   ? unused_code_warnings ? warnings : [0, 60, warnings]
                   : warnings;
              if(caml_call1(Ppxlib_Import[94][66], warnings$0))
               var sg = items, wrap = hide;
              else
               var
                g = disable_warnings_attribute(warnings$0),
                sg$0 =
                  [0, caml_call2(Ppxlib_Ast_builder[1][23], loc$0, g), items],
                sg = sg$0,
                wrap = 1;
              if(! wrap) return sg;
              var
               d = caml_call2(Ppxlib_Ast_builder[1][66], loc$0, sg),
               include_infos =
                 caml_call2(Ppxlib_Ast_builder[1][169], loc$0, d),
               pincl_attributes =
                 hide
                  ? [0, inline_doc_attr, [0, Ppxlib_Merlin_helpers[1], 0]]
                  : [0, inline_doc_attr, 0];
              return [0,
                      caml_call2
                       (Ppxlib_Ast_builder[1][26],
                        loc$0,
                        [0, include_infos[1], include_infos[2], pincl_attributes]),
                      0];
             });
   }
   function merge_generators(field, l){
    var a = caml_call2(Ppxlib_Import[94][69], l, function(x){return x;});
    return resolve_all(field, caml_call1(Ppxlib_Import[94][59], a));
   }
   function merge_derived(lists){
    return caml_call3
            (Ppxlib_Import[94][57],
             lists,
             0,
             function(derived, acc){
              if(acc){
               var others = acc[2], other = acc[1];
               if(caml_call2(Ppxlib_Import[84][3], derived[2], other[2])){
                var a = other[2];
                return [0,
                        [0, caml_call2(Ppxlib_Import[100], derived[1], other[1]), a],
                        others];
               }
              }
              return [0, derived, acc];
             });
   }
   function expand_str_type_decls(ctxt, rec_flag, tds, values){
    var
     match = merge_generators(str_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][7], Ppxlib_Location[3], err, 0);
         }),
     ppx_allows_unused_code_warning =
       caml_call2
        (Ppxlib_Import[94][21],
         function(param){
          var generators = param[2];
          return caml_call2
                  (Ppxlib_Import[94][21],
                   function(param){return param[5];},
                   generators);
         },
         generators),
     b =
       apply_all
        (ctxt, [0, rec_flag, tds], generators, Ppxlib_Ast_builder[1][7]),
     unused_code_warnings =
       allow_unused_code_warnings$0(ppx_allows_unused_code_warning),
     c = 0;
    switch(allow_unused_type_warnings[1]){
      case 1:
       var unused_type_warnings = 0; break;
      case 2:
       var unused_type_warnings = 1; break;
      default: var unused_type_warnings = ppx_allows_unused_code_warning;
    }
    a:
    {
     if
      (!
       keep_w32_impl$0(0)
       && ! unused_code_warnings && ! unused_type_warnings){
      var
       a =
         caml_call2
          (Ppxlib_Import[94][55],
           tds,
           function(td){
            var
             typ = Ppxlib_Common[2].call(null, td),
             loc = td[8],
             a = caml_call1(Ppxlib_Ast_builder[1][191], loc),
             b = caml_call1(Ppxlib_Ast_builder[1][57], loc),
             c = caml_call3(Ppxlib_Ast_builder[1][47], loc, b, typ),
             d = caml_call5(Ppxlib_Ast_builder[1][200], loc, 0, 0, c, a),
             e = caml_call1(Ppxlib_Ast_builder[1][57], loc),
             f = [0, caml_call3(Ppxlib_Ast_builder[1][209], loc, e, d), 0];
            return caml_call3(Ppxlib_Ast_builder[1][20], loc, 0, f);
           });
      break a;
     }
     var a = 0;
    }
    var
     generated =
       merge_derived
        ([0, [0, caml_call2(Ppxlib_Import[100], a, l_err$0), c], b]),
     d = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), d, generated);
   }
   function expand_sig_type_decls(ctxt, rec_flag, tds, values){
    var
     match = merge_generators(sig_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][22], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all
           (ctxt, [0, rec_flag, tds], generators, Ppxlib_Ast_builder[1][22])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_str_module_type_decl(ctxt, mtd, generators){
    var
     match = resolve_all(str_module_type_decl, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][7], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, mtd, generators$0, Ppxlib_Ast_builder[1][7])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_sig_module_type_decl(ctxt, mtd, generators){
    var
     match = resolve_all(sig_module_type_decl, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][22], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, mtd, generators$0, Ppxlib_Ast_builder[1][22])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_str_exception(ctxt, ec, generators){
    var
     match = resolve_all(str_exception, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][7], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, ec, generators$0, Ppxlib_Ast_builder[1][7])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_sig_exception(ctxt, ec, generators){
    var
     match = resolve_all(sig_exception, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][22], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, ec, generators$0, Ppxlib_Ast_builder[1][22])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_str_type_ext(ctxt, te, generators){
    var
     match = resolve_all(str_type_ext, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][7], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, te, generators$0, Ppxlib_Ast_builder[1][7])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_sig_type_ext(ctxt, te, generators){
    var
     match = resolve_all(sig_type_ext, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][22], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, te, generators$0, Ppxlib_Ast_builder[1][22])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_str_class_type_decls(ctxt, rec_flag, cds, values){
    var
     match = merge_generators(str_class_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][7], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, cds, generators, Ppxlib_Ast_builder[1][7])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function expand_sig_class_decls(ctxt, rec_flag, cds, values){
    var
     match = merge_generators(sig_class_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][22], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, cds, generators, Ppxlib_Ast_builder[1][22])]),
     a = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), a, generated);
   }
   function rules
   (typ,
    expand_sig,
    expand_str,
    rule_str,
    rule_sig,
    rule_str_expect,
    rule_sig_expect){
    var
     deriving_attr = mk_deriving_attr(typ, prefix, cst$8),
     deriving_attr_expect = mk_deriving_attr(typ, prefix, cst_inline),
     a = [0, caml_call2(rule_sig_expect, deriving_attr_expect, expand_sig), 0],
     b = [0, caml_call2(rule_str_expect, deriving_attr_expect, expand_str), a],
     c = [0, caml_call2(rule_str, deriving_attr, expand_str), b];
    return [0, caml_call2(rule_sig, deriving_attr, expand_sig), c];
   }
   var
    rules_type_decl =
      rules
       (2,
        expand_sig_type_decls,
        expand_str_type_decls,
        Ppxlib_Context_free[1][6],
        Ppxlib_Context_free[1][7],
        Ppxlib_Context_free[1][8],
        Ppxlib_Context_free[1][9]),
    rules_type_ext =
      rules
       (4,
        expand_sig_type_ext,
        expand_str_type_ext,
        Ppxlib_Context_free[1][14],
        Ppxlib_Context_free[1][15],
        Ppxlib_Context_free[1][16],
        Ppxlib_Context_free[1][17]),
    rules_exception =
      rules
       (3,
        expand_sig_exception,
        expand_str_exception,
        Ppxlib_Context_free[1][18],
        Ppxlib_Context_free[1][19],
        Ppxlib_Context_free[1][20],
        Ppxlib_Context_free[1][21]),
    rules_module_type_decl =
      rules
       (18,
        expand_sig_module_type_decl,
        expand_str_module_type_decl,
        Ppxlib_Context_free[1][10],
        Ppxlib_Context_free[1][11],
        Ppxlib_Context_free[1][12],
        Ppxlib_Context_free[1][13]),
    rules_class_type_decl =
      rules
       (15,
        expand_sig_class_decls,
        expand_str_class_type_decls,
        Ppxlib_Context_free[1][22],
        Ppxlib_Context_free[1][23],
        Ppxlib_Context_free[1][24],
        Ppxlib_Context_free[1][25]),
    rules$0 =
      caml_call1
       (Ppxlib_Import[94][59],
        [0,
         rules_type_decl,
         [0,
          rules_type_ext,
          [0,
           rules_exception,
           [0, rules_module_type_decl, [0, rules_class_type_decl, 0]]]]]);
   Ppxlib_Driver[5].call(null, 0, [0, rules$0], 0, 0, 0, 0, 0, 0, 0, 0)
    (0, [0, [0, "type_conv", 0]], cst_deriving$0);
   var
    Ppxlib_Deriving =
      [0,
       [0,
        empty,
        arg,
        flag,
        symbol$4,
        parse,
        parse_res,
        symbol$3,
        symbol$2,
        drop,
        as,
        alt,
        alt_option,
        symbol$1,
        map$0,
        map,
        map_result,
        symbol_map,
        map0$0,
        map1$0,
        map2$0,
        map0,
        map1,
        map2,
        map_value$0,
        map_value,
        nil,
        symbol$0,
        many,
        int,
        char,
        string,
        float,
        int32,
        int64,
        nativeint,
        bool,
        ebool,
        pbool,
        cst,
        none,
        some,
        pair,
        symbol,
        triple,
        loc,
        pack0,
        pack2,
        pack3,
        nolabel,
        labelled,
        optional,
        binding_op,
        case$,
        pcl_loc,
        pcl_attributes,
        pcl_constr,
        pcl_structure,
        pcl_fun,
        pcl_apply,
        pcl_let,
        pcl_constraint,
        pcl_extension,
        pcl_open,
        pcf_loc,
        pcf_attributes,
        pcf_inherit,
        pcf_val,
        pcf_method,
        pcf_constraint,
        pcf_initializer,
        pcf_attribute,
        pcf_extension,
        cfk_virtual,
        cfk_concrete,
        class_infos_attributes,
        class_infos,
        class_signature,
        class_structure,
        pcty_loc,
        pcty_attributes,
        pcty_constr,
        pcty_signature,
        pcty_arrow,
        pcty_extension,
        pcty_open,
        pctf_loc,
        pctf_attributes,
        pctf_inherit,
        pctf_val,
        pctf_method,
        pctf_constraint,
        pctf_attribute,
        pctf_extension,
        closed,
        open,
        pconst_integer,
        pconst_char,
        pconst_string,
        pconst_float,
        pcstr_tuple,
        pcstr_record,
        constructor_declaration_attrib,
        constructor_declaration,
        ptyp_loc,
        ptyp_attributes,
        ptyp_any,
        ptyp_var,
        ptyp_arrow,
        ptyp_tuple,
        ptyp_constr,
        ptyp_object,
        ptyp_class,
        ptyp_alias,
        ptyp_variant,
        ptyp_poly,
        ptyp_package,
        ptyp_open,
        ptyp_extension,
        upto,
        downto,
        pdira_loc,
        pdir_string,
        pdir_int,
        pdir_ident,
        pdir_bool,
        pexp_loc,
        pexp_attributes,
        pexp_ident,
        pexp_constant,
        pexp_let,
        pexp_function,
        pexp_apply,
        pexp_match,
        pexp_try,
        pexp_tuple,
        pexp_construct,
        pexp_variant,
        pexp_record,
        pexp_field,
        pexp_setfield,
        pexp_array,
        pexp_ifthenelse,
        pexp_sequence,
        pexp_while,
        pexp_for,
        pexp_constraint,
        pexp_coerce,
        pexp_send,
        pexp_new,
        pexp_setinstvar,
        pexp_override,
        pexp_letmodule,
        pexp_letexception,
        pexp_assert,
        pexp_lazy,
        pexp_poly,
        pexp_object,
        pexp_newtype,
        pexp_pack,
        pexp_open,
        pexp_letop,
        pexp_extension,
        pexp_unreachable,
        extension_constructor_attribut,
        extension_constructor,
        pext_decl,
        pext_rebind,
        pfunction_body,
        pfunction_cases,
        pparam_loc,
        pparam_val,
        pparam_newtype,
        unit,
        named,
        include_infos_attributes,
        include_infos,
        injective,
        noinjectivity,
        label_declaration_attributes,
        label_declaration,
        letop,
        location,
        lident,
        ldot,
        lapply,
        module_binding_attributes,
        module_binding,
        module_declaration_attributes,
        module_declaration,
        pmod_loc,
        pmod_attributes,
        pmod_ident,
        pmod_structure,
        pmod_functor,
        pmod_apply,
        pmod_apply_unit,
        pmod_constraint,
        pmod_unpack,
        pmod_extension,
        module_substitution_attributes,
        module_substitution,
        pmty_loc,
        pmty_attributes,
        pmty_ident,
        pmty_signature,
        pmty_functor,
        pmty_with,
        pmty_typeof,
        pmty_extension,
        pmty_alias,
        module_type_declaration_attrib,
        module_type_declaration,
        immutable,
        mutable,
        pof_loc,
        pof_attributes,
        otag,
        oinherit,
        open_infos_attributes,
        open_infos,
        override,
        fresh,
        ppat_loc,
        ppat_attributes,
        ppat_any,
        ppat_var,
        ppat_alias,
        ppat_constant,
        ppat_interval,
        ppat_tuple,
        ppat_construct,
        ppat_variant,
        ppat_record,
        ppat_array,
        ppat_or,
        ppat_constraint,
        ppat_type,
        ppat_lazy,
        ppat_unpack,
        ppat_exception,
        ppat_extension,
        ppat_open,
        pstr,
        psig,
        ptyp,
        ppat,
        position,
        private$,
        public$,
        nonrecursive,
        recursive,
        prf_loc,
        prf_attributes,
        rtag,
        rinherit,
        psig_loc,
        psig_value,
        psig_type,
        psig_typesubst,
        psig_typext,
        psig_exception,
        psig_module,
        psig_modsubst,
        psig_recmodule,
        psig_modtype,
        psig_modtypesubst,
        psig_open,
        psig_include,
        psig_class,
        psig_class_type,
        psig_attribute,
        psig_extension,
        pstr_loc,
        pstr_eval,
        pstr_value,
        pstr_primitive,
        pstr_type,
        pstr_typext,
        pstr_exception,
        pstr_module,
        pstr_recmodule,
        pstr_modtype,
        pstr_open,
        pstr_class,
        pstr_class_type,
        pstr_include,
        pstr_attribute,
        pstr_extension,
        toplevel_directive,
        ptop_def,
        ptop_dir,
        pconstraint,
        pcoerce,
        type_declaration_attributes,
        type_declaration,
        type_exception_attributes,
        type_exception,
        type_extension_attributes,
        type_extension,
        ptype_abstract,
        ptype_variant,
        ptype_record,
        ptype_open,
        value_binding_attributes,
        value_binding,
        pvc_constraint,
        pvc_coercion,
        value_description_attributes,
        value_description,
        covariant,
        contravariant,
        novariance,
        virtual,
        concrete,
        pwith_type,
        pwith_module,
        pwith_modtype,
        pwith_modtypesubst,
        pwith_typesubst,
        pwith_modsubst,
        true$,
        false$,
        eint,
        echar,
        estring,
        efloat,
        eint32,
        eint64,
        enativeint,
        pint,
        pchar,
        pstring,
        pfloat,
        pint32,
        pint64,
        pnativeint,
        single_expr_payload,
        no_label,
        attribute,
        extension,
        elist,
        esequence,
        of_func,
        to_func,
        fail],
       [0, make$0, make_noarg$0, V2, apply$0],
       add,
       add_alias,
       ignore];
   runtime.caml_register_global(94, Ppxlib_Deriving, "Ppxlib__Deriving");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Expansion_helpers
//# unitInfo: Requires: Ppxlib__Import, Stdlib
//# shape: Ppxlib__Expansion_helpers:[F(3),F(3),F(3)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$4 = "_";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$4,
    cst$0 = cst$4,
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst$3 = cst$4,
    Stdlib = global_data.Stdlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    cst_t = "t",
    cst_Ppxlib_Expansion_helpers_m =
      "Ppxlib.Expansion_helpers.mangle_lid: Lapply";
   function mangle(opt, affix, name){
    var fixpoint = opt ? opt[1] : cst_t;
    if(! caml_call2(Ppxlib_Import[99][74], name, fixpoint))
     switch(affix[0]){
       case 0:
        var x$0 = affix[1], b = caml_call2(Stdlib[28], cst$0, name);
        return caml_call2(Stdlib[28], x$0, b);
       case 1:
        var x$1 = affix[1], c = caml_call2(Stdlib[28], cst$1, x$1);
        return caml_call2(Stdlib[28], name, c);
       default:
        var
         s$0 = affix[2],
         p$0 = affix[1],
         d = caml_call2(Stdlib[28], cst$2, s$0),
         e = caml_call2(Stdlib[28], name, d),
         f = caml_call2(Stdlib[28], cst$3, e);
        return caml_call2(Stdlib[28], p$0, f);
     }
    if(2 === affix[0]){
     var s = affix[2], p = affix[1], a = caml_call2(Stdlib[28], cst, s);
     return caml_call2(Stdlib[28], p, a);
    }
    var x = affix[1];
    return x;
   }
   function mangle_type_decl(fixpoint, affix, param){
    var name = param[1][1];
    return mangle(fixpoint, affix, name);
   }
   function mangle_lid(fixpoint, affix, lid){
    switch(lid[0]){
      case 0:
       var s = lid[1]; return [0, mangle(fixpoint, affix, s)];
      case 1:
       var s$0 = lid[2], p = lid[1];
       return [1, p, mangle(fixpoint, affix, s$0)];
      default: return caml_call1(Stdlib[1], cst_Ppxlib_Expansion_helpers_m);
    }
   }
   var Ppxlib_Expansion_helpers = [0, mangle, mangle_type_decl, mangle_lid];
   runtime.caml_register_global
    (9, Ppxlib_Expansion_helpers, "Ppxlib__Expansion_helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Keyword
//# unitInfo: Requires: Astlib__Keyword
//# shape: Ppxlib__Keyword:[N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Astlib_Keyword = global_data.Astlib__Keyword,
    is_keyword = Astlib_Keyword[1],
    Ppxlib_Keyword = [0, is_keyword];
   runtime.caml_register_global(1, Ppxlib_Keyword, "Ppxlib__Keyword");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib
//# unitInfo: Requires: Ocaml_shadow, Ppxlib__Common, Ppxlib_ast__Ast
//# shape: Ppxlib:[F(1)*,F(1),F(1),F(1),F(2),F(2),F(1),F(1),N,F(1),N,F(1),F(1),N,F(2),F(1),F(1),F(1),F(1),F(2),F(2),F(4),F(1),[F(1)*,F(2),F(2),F(2),F(1)],F(1),N,N,N,N,N,N,N,[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    lident = Ppxlib_Common[1],
    core_type_of_type_declaration = Ppxlib_Common[2],
    name_type_params_in_td_res = Ppxlib_Common[3],
    name_type_params_in_td = Ppxlib_Common[4],
    combinator_type_of_type_declar = Ppxlib_Common[5],
    gen_symbol = Ppxlib_Common[6],
    string_of_core_type = Ppxlib_Common[7],
    assert_no_attributes = Ppxlib_Common[8],
    assert_no_attributes_in = Ppxlib_Common[9],
    attributes_errors = Ppxlib_Common[10],
    collect_attributes_errors = Ppxlib_Common[11],
    get_type_param_name_res = Ppxlib_Common[12],
    get_type_param_name = Ppxlib_Common[13],
    type_is_recursive = Ppxlib_Common[14],
    really_recursive = Ppxlib_Common[15],
    loc_of_payload = Ppxlib_Common[16],
    loc_of_attribute = Ppxlib_Common[17],
    loc_of_extension = Ppxlib_Common[18],
    curry_applications = Ppxlib_Common[19],
    attribute_of_warning = Ppxlib_Common[20],
    is_polymorphic_variant = Ppxlib_Common[21],
    mk_named_sig = Ppxlib_Common[22],
    exn_to_loc_error = Ppxlib_Common[23],
    With_errors = Ppxlib_Common[24],
    valid_string_constant_delimite = Ppxlib_Common[25],
    map = Ppxlib_ast_Ast[1],
    iter = Ppxlib_ast_Ast[2],
    fold = Ppxlib_ast_Ast[3],
    fold_map = Ppxlib_ast_Ast[4],
    map_with_context = Ppxlib_ast_Ast[5],
    lift = Ppxlib_ast_Ast[6],
    lift_map_with_context = Ppxlib_ast_Ast[7],
    Ppxlib_private = [0],
    Ppxlib =
      [0,
       lident,
       core_type_of_type_declaration,
       name_type_params_in_td_res,
       name_type_params_in_td,
       combinator_type_of_type_declar,
       gen_symbol,
       string_of_core_type,
       assert_no_attributes,
       assert_no_attributes_in,
       attributes_errors,
       collect_attributes_errors,
       get_type_param_name_res,
       get_type_param_name,
       type_is_recursive,
       really_recursive,
       loc_of_payload,
       loc_of_attribute,
       loc_of_extension,
       curry_applications,
       attribute_of_warning,
       is_polymorphic_variant,
       mk_named_sig,
       exn_to_loc_error,
       With_errors,
       valid_string_constant_delimite,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       lift,
       lift_map_with_context,
       Ppxlib_private];
   runtime.caml_register_global(2, Ppxlib, "Ppxlib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
