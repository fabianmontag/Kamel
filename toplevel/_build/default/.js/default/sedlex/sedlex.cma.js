// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Sedlexing
//# unitInfo: Requires: Gen, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Option, Stdlib__Uchar
//# shape: Sedlexing:[N,N,F(2)*,F(3),F(2),F(2)*,F(2),F(2),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(3),F(1),F(1),F(1),F(1),F(2),F(1),F(2)*->F(1),N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_lib_sedlexing_ml = "src/lib/sedlexing.ml",
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Gen = global_data.Gen,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib = global_data.Stdlib,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    InvalidCodepoint =
      [248, "Sedlexing.InvalidCodepoint", caml_fresh_oo_id(0)],
    MalFormed = [248, "Sedlexing.MalFormed", caml_fresh_oo_id(0)],
    to_int = Stdlib_Uchar[10],
    is_char = Stdlib_Uchar[11],
    of_char = Stdlib_Uchar[12],
    to_char = Stdlib_Uchar[13],
    equal = Stdlib_Uchar[15],
    utf_8_byte_length = Stdlib_Uchar[24],
    utf_16_byte_length = Stdlib_Uchar[25];
   function of_int(x){
    if(caml_call1(Stdlib_Uchar[7], x)) return caml_call1(Stdlib_Uchar[9], x);
    throw caml_maybe_attach_backtrace(MalFormed, 1);
   }
   var a = [0, cst_src_lib_sedlexing_ml, 88, 27];
   function empty_lexbuf(bytes_per_char){
    return [0,
            function(c, b, param){
             throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
            },
            bytes_per_char,
            ,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            cst,
            0];
   }
   var dummy_uchar = of_int(0), nl_uchar = of_int(10), chunk_size = 512;
   function create(opt, refill){
    var
     bytes_per_char = opt ? opt[1] : function(param){return 1;},
     init = empty_lexbuf(bytes_per_char);
    return [0,
            refill,
            init[2],
            caml_array_make(512, dummy_uchar),
            init[4],
            init[5],
            init[6],
            init[7],
            init[8],
            init[9],
            init[10],
            init[11],
            init[12],
            init[13],
            init[14],
            init[15],
            init[16],
            init[17],
            init[18],
            init[19],
            init[20],
            init[21],
            init[22],
            init[23],
            init[24]];
   }
   function set_position(bytes_position, lexbuf, position){
    lexbuf[5] = position[4] - lexbuf[7] | 0;
    lexbuf[9] = position[3];
    lexbuf[11] = position[2];
    var
     bytes_position$0 = caml_call2(Stdlib_Option[3], bytes_position, position);
    lexbuf[6] = bytes_position$0[4] - lexbuf[8] | 0;
    lexbuf[10] = bytes_position$0[3];
    return 0;
   }
   function set_filename(lexbuf, fname){lexbuf[23] = fname; return 0;}
   function from_gen(bytes_per_char, gen){
    var malformed = [0, 0];
    function refill(buf, pos, len){
     var i = 0;
     for(;;){
      if(malformed[1]) throw caml_maybe_attach_backtrace(MalFormed, 1);
      if(len <= i) return len;
      try{var val = caml_call1(gen, 0);}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn === MalFormed && 0 !== i){malformed[1] = 1; return i;}
       throw caml_maybe_attach_backtrace(exn, 0);
      }
      if(! val) return i;
      var c = val[1], a = pos + i | 0;
      caml_check_bound(buf, a)[a + 1] = c;
      var i$0 = i + 1 | 0;
      i = i$0;
     }
    }
    return create(bytes_per_char, refill);
   }
   function from_int_array(bytes_per_char, a){
    return from_gen
            (bytes_per_char,
             caml_call2
              (Gen[12],
               [0, a.length - 1],
               function(i){return of_int(caml_check_bound(a, i)[i + 1]);}));
   }
   function from_uchar_array(opt, a){
    var
     bytes_per_char = opt ? opt[1] : function(param){return 1;},
     len = a.length - 1,
     init = empty_lexbuf(bytes_per_char),
     b = init[23],
     c = init[22],
     d = init[21],
     e = init[20],
     f = init[19],
     g = init[18],
     h = init[17],
     i = init[16],
     j = init[15],
     k = init[14],
     l = init[13],
     m = init[12],
     n = init[11],
     o = init[10],
     p = init[9],
     q = init[8],
     r = init[7],
     s = init[6],
     t = init[5],
     u =
       caml_call2
        (Stdlib_Array[1],
         len,
         function(i){return caml_check_bound(a, i)[i + 1];});
    return [0,
            init[1],
            init[2],
            u,
            len,
            t,
            s,
            r,
            q,
            p,
            o,
            n,
            m,
            l,
            k,
            j,
            i,
            h,
            g,
            f,
            e,
            d,
            c,
            b,
            1];
   }
   function new_line(lexbuf){
    lexbuf[11] = lexbuf[11] + 1 | 0;
    lexbuf[9] = lexbuf[7] + lexbuf[5] | 0;
    lexbuf[10] = lexbuf[8] + lexbuf[6] | 0;
    return 0;
   }
   function next_aux(some, none, lexbuf){
    var c = 1 - lexbuf[24];
    if(c)
     var b = lexbuf[4], a = lexbuf[7], d = a === b ? 1 : 0;
    else
     var d = c;
    if(d){
     if(lexbuf[3].length - 1 < (lexbuf[4] + 512 | 0)){
      var s = lexbuf[12], s_bytes = lexbuf[13], ls = lexbuf[4] - s | 0;
      if((ls + 512 | 0) <= lexbuf[3].length - 1)
       caml_call5(Stdlib_Array[9], lexbuf[3], s, lexbuf[3], 0, ls);
      else{
       var
        newlen = (lexbuf[3].length + 511 | 0) * 2 | 0,
        newbuf = caml_array_make(newlen, dummy_uchar);
       caml_call5(Stdlib_Array[9], lexbuf[3], s, newbuf, 0, ls);
       lexbuf[3] = newbuf;
      }
      lexbuf[4] = ls;
      lexbuf[5] = lexbuf[5] + s | 0;
      lexbuf[6] = lexbuf[6] + s_bytes | 0;
      lexbuf[7] = lexbuf[7] - s | 0;
      lexbuf[8] = lexbuf[8] - s_bytes | 0;
      lexbuf[17] = lexbuf[17] - s | 0;
      lexbuf[18] = lexbuf[18] - s_bytes | 0;
      lexbuf[12] = 0;
      lexbuf[13] = 0;
     }
     var n = caml_call3(lexbuf[1], lexbuf[3], lexbuf[7], chunk_size);
     if(n === 0) lexbuf[24] = 1; else lexbuf[4] = lexbuf[4] + n | 0;
    }
    if(lexbuf[24]){
     var b$0 = lexbuf[4], a$0 = lexbuf[7];
     if(a$0 === b$0) return none;
    }
    var e = lexbuf[7], ret = caml_check_bound(lexbuf[3], e)[e + 1];
    lexbuf[7] = lexbuf[7] + 1 | 0;
    var f = caml_call1(lexbuf[2], ret);
    lexbuf[8] = lexbuf[8] + f | 0;
    if(caml_call2(equal, ret, nl_uchar)) new_line(lexbuf);
    return caml_call1(some, ret);
   }
   function next(lexbuf){
    return next_aux(function(x){return [0, x];}, 0, lexbuf);
   }
   function private_next_int(lexbuf){return next_aux(to_int, -1, lexbuf);}
   function mark(lexbuf, i){
    lexbuf[17] = lexbuf[7];
    lexbuf[18] = lexbuf[8];
    lexbuf[19] = lexbuf[9];
    lexbuf[20] = lexbuf[10];
    lexbuf[21] = lexbuf[11];
    lexbuf[22] = i;
    return 0;
   }
   function start(lexbuf){
    lexbuf[12] = lexbuf[7];
    lexbuf[13] = lexbuf[8];
    lexbuf[14] = lexbuf[9];
    lexbuf[15] = lexbuf[10];
    lexbuf[16] = lexbuf[11];
    return mark(lexbuf, -1);
   }
   function backtrack(lexbuf){
    lexbuf[7] = lexbuf[17];
    lexbuf[8] = lexbuf[18];
    lexbuf[9] = lexbuf[19];
    lexbuf[10] = lexbuf[20];
    lexbuf[11] = lexbuf[21];
    return lexbuf[22];
   }
   function rollback(lexbuf){
    lexbuf[7] = lexbuf[12];
    lexbuf[8] = lexbuf[13];
    lexbuf[9] = lexbuf[14];
    lexbuf[10] = lexbuf[15];
    lexbuf[11] = lexbuf[16];
    return 0;
   }
   function lexeme_start(lexbuf){return lexbuf[12] + lexbuf[5] | 0;}
   function lexeme_bytes_start(lexbuf){return lexbuf[13] + lexbuf[6] | 0;}
   function lexeme_end(lexbuf){return lexbuf[7] + lexbuf[5] | 0;}
   function lexeme_bytes_end(lexbuf){return lexbuf[8] + lexbuf[6] | 0;}
   function loc(lexbuf){
    return [0, lexbuf[12] + lexbuf[5] | 0, lexbuf[7] + lexbuf[5] | 0];
   }
   function bytes_loc(lexbuf){
    return [0, lexbuf[13] + lexbuf[6] | 0, lexbuf[8] + lexbuf[6] | 0];
   }
   function lexeme_length(lexbuf){return lexbuf[7] - lexbuf[12] | 0;}
   function lexeme_bytes_length(lexbuf){return lexbuf[8] - lexbuf[13] | 0;}
   function sub_lexeme(lexbuf, pos, len){
    return caml_call3(Stdlib_Array[6], lexbuf[3], lexbuf[12] + pos | 0, len);
   }
   function lexeme(lexbuf){
    return caml_call3
            (Stdlib_Array[6],
             lexbuf[3],
             lexbuf[12],
             lexbuf[7] - lexbuf[12] | 0);
   }
   function lexeme_char(lexbuf, pos){
    var a = lexbuf[12] + pos | 0;
    return caml_check_bound(lexbuf[3], a)[a + 1];
   }
   function lexing_position_start(lexbuf){
    return [0, lexbuf[23], lexbuf[16], lexbuf[14], lexbuf[12] + lexbuf[5] | 0];
   }
   function lexing_position_curr(lexbuf){
    return [0, lexbuf[23], lexbuf[11], lexbuf[9], lexbuf[7] + lexbuf[5] | 0];
   }
   function lexing_positions(lexbuf){
    var
     start_p = lexing_position_start(lexbuf),
     curr_p = lexing_position_curr(lexbuf);
    return [0, start_p, curr_p];
   }
   function lexing_bytes_position_start(lexbuf){
    return [0, lexbuf[23], lexbuf[16], lexbuf[15], lexbuf[13] + lexbuf[6] | 0];
   }
   function lexing_bytes_position_curr(lexbuf){
    return [0, lexbuf[23], lexbuf[11], lexbuf[10], lexbuf[8] + lexbuf[6] | 0];
   }
   function lexing_bytes_positions(lexbuf){
    var
     start_p = lexing_bytes_position_start(lexbuf),
     curr_p = lexing_bytes_position_curr(lexbuf);
    return [0, start_p, curr_p];
   }
   function with_tokenizer(lexer, lexbuf){
    function lexer$0(param){
     var
      token = caml_call1(lexer, lexbuf),
      match = lexing_positions(lexbuf),
      curr_p = match[2],
      start_p = match[1];
     return [0, token, start_p, curr_p];
    }
    return lexer$0;
   }
   var
    Missing_input = [248, "Sedlexing.Chan.Missing_input", caml_fresh_oo_id(0)],
    min_buffer_size = 64,
    cst_Sedlexing_Chan_ensure = "Sedlexing.Chan.ensure",
    cst_advance = "advance",
    b = [0, cst_src_lib_sedlexing_ml, 501, 15];
   function available(t){return t[3] - t[4] | 0;}
   function ensure_bytes_available(t, can_refill, n){
    var a = n <= 0 ? 1 : 0, b = a || (64 < n ? 1 : 0);
    if(b) caml_call1(Stdlib[1], cst_Sedlexing_Chan_ensure);
    for(;;){
     if(n <= available(t)) return;
     if(! can_refill) throw caml_maybe_attach_backtrace(Missing_input, 1);
     var len = t[3] - t[4] | 0;
     if(0 < len) caml_call5(Stdlib_Bytes[11], t[1], t[4], t[1], 0, len);
     var
      read =
        caml_call4
         (Stdlib[84],
          t[2],
          t[1],
          len,
          runtime.caml_ml_bytes_length(t[1]) - len | 0);
     t[3] = len + read | 0;
     t[4] = 0;
     if(read === 0) throw caml_maybe_attach_backtrace(Missing_input, 1);
    }
   }
   function get(t, i){return runtime.caml_bytes_get(t[1], t[4] + i | 0);}
   function advance(t, n){
    if(t[3] < (t[4] + n | 0)) caml_call1(Stdlib[1], cst_advance);
    t[4] = t[4] + n | 0;
   }
   function make_from_channel
   (bytes_per_char, ic, max_bytes_per_uchar, min_bytes_per_uchar, read_uchar){
    var
     len$0 = 512 * max_bytes_per_uchar | 0,
     len = caml_call2(Stdlib[17], len$0, min_buffer_size),
     t = [0, caml_create_bytes(len), ic, 0, 0],
     malformed = [0, 0];
    function refill(buf, pos, len){
     var i = 0;
     for(;;){
      if(malformed[1]) throw caml_maybe_attach_backtrace(MalFormed, 1);
      if(i === len) return i;
      try{
       var can_refill = i === 0 ? 1 : 0;
       ensure_bytes_available(t, can_refill, min_bytes_per_uchar);
       var c = caml_call2(read_uchar, can_refill, t);
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn === MalFormed && 0 !== i){malformed[1] = 1; return i;}
       if(exn !== Missing_input) throw caml_maybe_attach_backtrace(exn, 0);
       var b = i === 0 ? 1 : 0, d = b ? 0 < available(t) ? 1 : 0 : b;
       if(d) throw caml_maybe_attach_backtrace(MalFormed, 1);
       return i;
      }
      var a = pos + i | 0;
      caml_check_bound(buf, a)[a + 1] = c;
      var i$0 = i + 1 | 0;
      i = i$0;
     }
    }
    return create(bytes_per_char, refill);
   }
   function from_gen$0(s){
    return from_gen
            ([0, function(param){return 1;}], caml_call2(Gen[21], of_char, s));
   }
   function from_string(s){
    var
     len = caml_ml_string_length(s),
     init = empty_lexbuf(function(param){return 1;}),
     a = init[23],
     b = init[22],
     c = init[21],
     d = init[20],
     e = init[19],
     f = init[18],
     g = init[17],
     h = init[16],
     i = init[15],
     j = init[14],
     k = init[13],
     l = init[12],
     m = init[11],
     n = init[10],
     o = init[9],
     p = init[8],
     q = init[7],
     r = init[6],
     t = init[5],
     u =
       caml_call2
        (Stdlib_Array[1],
         len,
         function(i){return caml_call1(of_char, caml_string_get(s, i));});
    return [0,
            init[1],
            init[2],
            u,
            len,
            t,
            r,
            q,
            p,
            o,
            n,
            m,
            l,
            k,
            j,
            i,
            h,
            g,
            f,
            e,
            d,
            c,
            b,
            a,
            1];
   }
   function from_channel(ic){
    return make_from_channel
            ([0, function(param){return 1;}],
             ic,
             1,
             1,
             function(param, t){
              var c = get(t, 0);
              advance(t, 1);
              return caml_call1(of_char, c);
             });
   }
   function to_latin1(c){
    if(caml_call1(is_char, c)) return caml_call1(to_char, c);
    throw caml_maybe_attach_backtrace
           ([0, InvalidCodepoint, caml_call1(to_int, c)], 1);
   }
   function lexeme_char$0(lexbuf, pos){
    return to_latin1(lexeme_char(lexbuf, pos));
   }
   function sub_lexeme$0(lexbuf, pos, len){
    var s = caml_create_bytes(len), a = len - 1 | 0, c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var b = (lexbuf[12] + pos | 0) + i | 0;
      runtime.caml_bytes_set
       (s, i, to_latin1(caml_check_bound(lexbuf[3], b)[b + 1]));
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return caml_call1(Stdlib_Bytes[6], s);
   }
   function lexeme$0(lexbuf){
    return sub_lexeme$0(lexbuf, 0, lexbuf[7] - lexbuf[12] | 0);
   }
   function width(param){
    if(192 <= param){
     if(240 > param) return 224 <= param ? 3 : 2;
     if(248 > param) return 4;
    }
    else if(128 > param) return 1;
    throw caml_maybe_attach_backtrace(MalFormed, 1);
   }
   function check_two(n1, n2){
    var a = n1 < 194 ? 1 : 0, b = a || (223 < n1 ? 1 : 0);
    if(b) throw caml_maybe_attach_backtrace(MalFormed, 1);
    var c = n2 < 128 ? 1 : 0, d = c || (191 < n2 ? 1 : 0);
    if(d) throw caml_maybe_attach_backtrace(MalFormed, 1);
    if(2 !== (n2 >>> 6 | 0)) throw caml_maybe_attach_backtrace(MalFormed, 1);
    return (n1 & 31) << 6 | n2 & 63;
   }
   function check_three(n1, n2, n3){
    if(n1 === 224){
     var b = n2 < 160 ? 1 : 0, c = b || (191 < n2 ? 1 : 0);
     if(c) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var d = n3 < 128 ? 1 : 0, e = d || (191 < n3 ? 1 : 0);
     if(e) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    else{
     var i = n1 < 225 ? 1 : 0, j = i || (239 < n1 ? 1 : 0);
     if(j) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var k = n2 < 128 ? 1 : 0, l = k || (191 < n2 ? 1 : 0);
     if(l) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var m = n3 < 128 ? 1 : 0, n = m || (191 < n3 ? 1 : 0);
     if(n) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    var
     f = 2 !== (n2 >>> 6 | 0) ? 1 : 0,
     g = f || (2 !== (n3 >>> 6 | 0) ? 1 : 0);
    if(g) throw caml_maybe_attach_backtrace(MalFormed, 1);
    var
     p = (n1 & 15) << 12 | (n2 & 63) << 6 | n3 & 63,
     a = 55296 <= p ? 1 : 0,
     h = a ? p <= 57088 ? 1 : 0 : a;
    if(h) throw caml_maybe_attach_backtrace(MalFormed, 1);
    return p;
   }
   function check_four(n1, n2, n3, n4){
    if(n1 === 240){
     var c = n2 < 144 ? 1 : 0, d = c || (191 < n2 ? 1 : 0);
     if(d) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var e = n3 < 128 ? 1 : 0, f = e || (191 < n3 ? 1 : 0);
     if(f) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var g = n4 < 128 ? 1 : 0, h = g || (191 < n4 ? 1 : 0);
     if(h) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    else if(n1 === 244){
     var j = n2 < 128 ? 1 : 0, k = j || (143 < n2 ? 1 : 0);
     if(k) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var l = n3 < 128 ? 1 : 0, m = l || (191 < n3 ? 1 : 0);
     if(m) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var n = n4 < 128 ? 1 : 0, o = n || (191 < n4 ? 1 : 0);
     if(o) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    else{
     var p = n1 < 241 ? 1 : 0, q = p || (243 < n1 ? 1 : 0);
     if(q) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var r = n2 < 128 ? 1 : 0, s = r || (191 < n2 ? 1 : 0);
     if(s) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var t = n3 < 128 ? 1 : 0, u = t || (191 < n3 ? 1 : 0);
     if(u) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var v = n4 < 128 ? 1 : 0, w = v || (191 < n4 ? 1 : 0);
     if(w) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    var a = 2 !== (n2 >>> 6 | 0) ? 1 : 0;
    if(a)
     var b = a;
    else
     var
      i = 2 !== (n3 >>> 6 | 0) ? 1 : 0,
      b = i || (2 !== (n4 >>> 6 | 0) ? 1 : 0);
    if(b) throw caml_maybe_attach_backtrace(MalFormed, 1);
    return (n1 & 7) << 18 | (n2 & 63) << 12 | (n3 & 63) << 6 | n4 & 63;
   }
   function from_channel$0(ic){
    return make_from_channel
            ([0, utf_8_byte_length],
             ic,
             4,
             1,
             function(can_refill, t){
              var w = width(get(t, 0));
              ensure_bytes_available(t, can_refill, w);
              var
               i = t[4],
               s = caml_call1(Stdlib_Bytes[44], t[1]),
               c1 = caml_string_get(s, i),
               switcher = width(c1) - 1 | 0;
              if(3 < switcher >>> 0)
               throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
              switch(switcher){
                case 1:
                 var
                  n2 = caml_string_get(s, i + 1 | 0),
                  c = check_two(c1, n2);
                 break;
                case 2:
                 var
                  n2$0 = caml_string_get(s, i + 1 | 0),
                  n3 = caml_string_get(s, i + 2 | 0),
                  c = check_three(c1, n2$0, n3);
                 break;
                case 3:
                 var
                  n2$1 = caml_string_get(s, i + 1 | 0),
                  n3$0 = caml_string_get(s, i + 2 | 0),
                  n4 = caml_string_get(s, i + 3 | 0),
                  c = check_four(c1, n2$1, n3$0, n4);
                 break;
                default: var c = c1;
              }
              advance(t, w);
              return of_int(c);
             });
   }
   function from_gen$1(s){
    function next_or_fail(param){
     var match = caml_call1(Gen[2], s);
     if(! match) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var x = match[1];
     return x;
    }
    return from_gen
            ([0, utf_8_byte_length],
             function(param){
              var o = caml_call1(Gen[2], s);
              if(! o) return 0;
              var c1 = o[1], switcher = width(c1) - 1 | 0;
              if(3 < switcher >>> 0)
               throw caml_maybe_attach_backtrace(MalFormed, 1);
              switch(switcher){
                case 0:
                 var a = caml_call1(of_char, c1); break;
                case 1:
                 var n2 = next_or_fail(0), a = of_int(check_two(c1, n2));
                 break;
                case 2:
                 var
                  n2$0 = next_or_fail(0),
                  n3 = next_or_fail(0),
                  a = of_int(check_three(c1, n2$0, n3));
                 break;
                default:
                 var
                  n2$1 = next_or_fail(0),
                  n3$0 = next_or_fail(0),
                  n4 = next_or_fail(0),
                  a = of_int(check_four(c1, n2$1, n3$0, n4));
              }
              return [0, a];
             });
   }
   function from_string$0(s){
    return from_gen$1
            (caml_call2
              (Gen[12],
               [0, caml_ml_string_length(s)],
               function(i){return caml_string_get(s, i);}));
   }
   function sub_lexeme$1(lexbuf, pos, len){
    var
     buf = caml_call1(Stdlib_Buffer[1], len * 4 | 0),
     apos = lexbuf[12] + pos | 0,
     a = lexbuf[3],
     b = (apos + len | 0) - 1 | 0;
    if(b >= apos){
     var i = apos;
     for(;;){
      var c = caml_check_bound(a, i)[i + 1];
      caml_call2(Stdlib_Buffer[13], buf, c);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function lexeme$1(lexbuf){
    return sub_lexeme$1(lexbuf, 0, lexbuf[7] - lexbuf[12] | 0);
   }
   function number_of_pair(bo, c1, c2){
    return bo ? (c1 << 8) + c2 | 0 : (c2 << 8) + c1 | 0;
   }
   function get_bo(bo, c1, c2){
    var match = bo[1];
    if(match){var o = match[1]; return o;}
    a:
    {if(255 === c1 && 254 === c2){var o$0 = 0; break a;} var o$0 = 1;}
    bo[1] = [0, o$0];
    return o$0;
   }
   function from_channel$1(ic, opt_bo){
    var bo = [0, opt_bo];
    return make_from_channel
            ([0, utf_16_byte_length],
             ic,
             4,
             2,
             function(can_refill, t){
              var
               n1 = get(t, 0),
               n2 = get(t, 1),
               o = get_bo(bo, n1, n2),
               w1 = number_of_pair(o, n1, n2);
              if(w1 === 65534)
               throw caml_maybe_attach_backtrace([0, InvalidCodepoint, w1], 1);
              if(55296 <= w1 && 57343 >= w1){
               if(56319 < w1) throw caml_maybe_attach_backtrace(MalFormed, 1);
               ensure_bytes_available(t, can_refill, 4);
               var
                n3 = get(t, 2),
                n4 = get(t, 3),
                w2 = number_of_pair(o, n3, n4),
                a = w2 < 56320 ? 1 : 0,
                b = a || (57343 < w2 ? 1 : 0);
               if(b) throw caml_maybe_attach_backtrace(MalFormed, 1);
               var upper10 = (w1 & 1023) << 10, lower10 = w2 & 1023;
               advance(t, 4);
               return of_int((65536 + upper10 | 0) + lower10 | 0);
              }
              advance(t, 2);
              return of_int(w1);
             });
   }
   function from_gen$2(s, opt_bo){
    function next_or_fail(param){
     var match = caml_call1(Gen[2], s);
     if(! match) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var x = match[1];
     return x;
    }
    var bo = [0, opt_bo];
    return from_gen
            ([0, utf_16_byte_length],
             function(param){
              var o$0 = caml_call1(Gen[2], s);
              if(! o$0) return 0;
              var
               c1 = o$0[1],
               n2 = next_or_fail(0),
               o = get_bo(bo, c1, n2),
               w1 = number_of_pair(o, c1, n2);
              if(w1 === 65534)
               throw caml_maybe_attach_backtrace([0, InvalidCodepoint, w1], 1);
              a:
              {
               if(55296 <= w1 && 57343 >= w1){
                if(56319 < w1)
                 throw caml_maybe_attach_backtrace(MalFormed, 1);
                var
                 n3 = next_or_fail(0),
                 n4 = next_or_fail(0),
                 w2 = number_of_pair(o, n3, n4),
                 b = w2 < 56320 ? 1 : 0,
                 c = b || (57343 < w2 ? 1 : 0);
                if(c) throw caml_maybe_attach_backtrace(MalFormed, 1);
                var
                 upper10 = (w1 & 1023) << 10,
                 lower10 = w2 & 1023,
                 a = of_int((65536 + upper10 | 0) + lower10 | 0);
                break a;
               }
               var a = of_int(w1);
              }
              return [0, a];
             });
   }
   function from_string$1(s){
    var
     a =
       caml_call2
        (Gen[12],
         [0, caml_ml_string_length(s)],
         function(i){return caml_string_get(s, i);});
    return function(b){return from_gen$2(a, b);};
   }
   function sub_lexeme$2(lb, pos, len, bo, bom){
    var
     buf = caml_call1(Stdlib_Buffer[1], (len * 4 | 0) + 2 | 0),
     apos = lb[12] + pos | 0,
     a = lb[3],
     store =
       bo
        ? caml_call1(Stdlib_Buffer[15], buf)
        : caml_call1(Stdlib_Buffer[14], buf);
    if(bom) caml_call1(store, of_int(65279));
    var b = (apos + len | 0) - 1 | 0;
    if(b >= apos){
     var i = apos;
     for(;;){
      caml_call1(store, caml_check_bound(a, i)[i + 1]);
      var c = i + 1 | 0;
      if(b === i) break;
      i = c;
     }
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function lexeme$2(lb, bo, bom){
    return sub_lexeme$2(lb, 0, lb[7] - lb[12] | 0, bo, bom);
   }
   var
    Sedlexing =
      [0,
       InvalidCodepoint,
       MalFormed,
       create,
       set_position,
       set_filename,
       from_gen,
       from_int_array,
       from_uchar_array,
       lexeme_start,
       lexeme_bytes_start,
       lexeme_end,
       lexeme_bytes_end,
       loc,
       bytes_loc,
       lexeme_length,
       lexeme_bytes_length,
       lexing_positions,
       lexing_position_start,
       lexing_position_curr,
       lexing_bytes_positions,
       lexing_bytes_position_start,
       lexing_bytes_position_curr,
       new_line,
       lexeme,
       lexeme_char,
       sub_lexeme,
       rollback,
       start,
       next,
       private_next_int,
       mark,
       backtrack,
       with_tokenizer,
       [0,
        from_gen$0,
        from_channel,
        from_string,
        lexeme$0,
        sub_lexeme$0,
        lexeme_char$0],
       [0,
        from_gen$1,
        from_channel$0,
        from_string$0,
        lexeme$1,
        sub_lexeme$1,
        [0, width, check_two, check_three, check_four]],
       [0, from_gen$2, from_channel$1, from_string$1, lexeme$2, sub_lexeme$2]];
   runtime.caml_register_global(20, Sedlexing, "Sedlexing");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
