// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Instruct
//# shape: Instruct:[N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Instruct = [0, -1073741824, 1073741823];
   runtime.caml_register_global(0, Instruct, "Instruct");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytegen
//# unitInfo: Requires: Clflags, Config, Debuginfo, Env, Ident, Instruct, Lambda, Matching, Misc, Primitive, Stdlib, Stdlib__Array, Stdlib__Fun, Stdlib__Int, Stdlib__List, Stdlib__Printf, Stdlib__Stack, Subst, Switch
//# shape: Bytegen:[F(2),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_bytecomp_bytegen_ml = "bytecomp/bytegen.ml",
    cst_caml_ge_float = "caml_ge_float",
    cst_caml_gt_float = "caml_gt_float",
    cst_caml_le_float = "caml_le_float",
    cst_caml_lt_float = "caml_lt_float",
    cst_caml_obj_dup$0 = "caml_obj_dup",
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Ident = global_data.Ident,
    Lambda = global_data.Lambda,
    Stdlib = global_data.Stdlib,
    Misc = global_data.Misc,
    Subst = global_data.Subst,
    Env = global_data.Env,
    Debuginfo = global_data.Debuginfo,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Primitive = global_data.Primitive,
    Matching = global_data.Matching,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Config = global_data.Config,
    Instruct = global_data.Instruct,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Clflags = global_data.Clflags,
    Switch = global_data.Switch,
    label_counter = [0, 0];
   function new_label(param){label_counter[1]++; return label_counter[1];}
   var
    empty_env = [0, Ident[29], 0],
    cst_Bytegen_merge_infos = "Bytegen.merge_infos",
    cst_Bytegen_merge_repr = "Bytegen.merge_repr",
    cst_outside_appropriated_catch = ") outside appropriated catch",
    cst_exit = "exit(";
   function add_var(id, pos, env){
    var a = env[2];
    return [0, caml_call3(Ident[30], id, pos, env[1]), a];
   }
   function add_vars(idlist$1, pos$1, env$1){
    var idlist = idlist$1, pos = pos$1, env = env$1;
    for(;;){
     if(! idlist) return env;
     var
      idlist$0 = idlist[2],
      id = idlist[1],
      env$0 = add_var(id, pos, env),
      pos$0 = pos + 1 | 0;
     idlist = idlist$0;
     pos = pos$0;
     env = env$0;
    }
   }
   function closure_entries(fun_defs, fvs){
    if(fun_defs){
     var
      functs = fun_defs[1],
      entries = Ident[29],
      param$0 = functs,
      pos$3 = 0,
      entries$2 = entries;
     for(;;){
      if(! param$0){
       var pos_end_functs = pos$3, funct_entries = entries$2;
       break;
      }
      var
       rem$0 = param$0[2],
       id$0 = param$0[1],
       entries$1 = caml_call3(Ident[30], id$0, [1, pos$3], entries$2),
       pos$2 = pos$3 + 3 | 0;
      param$0 = rem$0;
      pos$3 = pos$2;
      entries$2 = entries$1;
     }
    }
    else
     var
      funct_entries$0 = Ident[29],
      pos_end_functs = 3,
      funct_entries = funct_entries$0;
    var
     pos = pos_end_functs - 1 | 0,
     param = fvs,
     pos$1 = pos,
     all_entries = funct_entries;
    for(;;){
     if(! param) return all_entries;
     var
      rem = param[2],
      id = param[1],
      entries$0 = caml_call3(Ident[30], id, [0, pos$1], all_entries),
      pos$0 = pos$1 + 1 | 0;
     param = rem;
     pos$1 = pos$0;
     all_entries = entries$0;
    }
   }
   function label_code(cont){
    if(cont){
     var match = cont[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 0:
        case 22:
         var lbl$0 = match[1]; return [0, lbl$0, cont];
      }
    }
    var lbl = new_label(0);
    return [0, lbl, [0, [0, lbl], cont]];
   }
   function make_branch_2(lbl$1, n$1, cont, param$0){
    var n = n$1, param = param$0;
    for(;;){
     if(param){
      var match = param[1];
      if(typeof match !== "number")
       switch(match[0]){
         case 0:
          var c = param[2]; param = c; continue;
         case 3:
          var c$0 = param[2], m = match[1], n$0 = n + m | 0;
          n = n$0;
          param = c$0;
          continue;
         case 8:
          var m$0 = match[1]; return [0, [8, n + m$0 | 0], cont];
       }
     }
     if(lbl$1){var lbl = lbl$1[1]; return [0, [22, lbl], cont];}
     var lbl$0 = new_label(0);
     return [0, [22, lbl$0], [0, [0, lbl$0], cont]];
    }
   }
   function make_branch(cont){
    if(cont){
     var branch = cont[1];
     if(typeof branch !== "number")
      switch(branch[0]){
        case 0:
         var lbl = branch[1]; return make_branch_2([0, lbl], 0, cont, cont);
        case 29:
         var k = branch[1]; return [0, [29, k], cont];
        case 8:
        case 22:
         return [0, branch, cont];
      }
    }
    return make_branch_2(0, 0, cont, cont);
   }
   function discard_dead_code(cont$1){
    var cont = cont$1;
    for(;;){
     if(! cont) return 0;
     var a = cont[1];
     a:
     {
      if(typeof a === "number"){if(1 !== a) break a;}
      else
       switch(a[0]){case 0:case 14: break;default: break a;}
      return cont;
     }
     var cont$0 = cont[2];
     cont = cont$0;
    }
   }
   function is_tailcall(param$0){
    var param = param$0;
    for(;;){
     if(param){
      var match = param[1];
      if(typeof match !== "number")
       switch(match[0]){
         case 8:
          return 1;
         case 0:
         case 3:
          var c = param[2]; param = c; continue;
       }
     }
     return 0;
    }
   }
   function add_pop(n$1, cont$2){
    var n = n$1, cont = cont$2;
    for(;;){
     if(0 === n) return cont;
     if(cont){
      var match = cont[1];
      if(typeof match !== "number")
       switch(match[0]){
         case 3:
          var cont$0 = cont[2], m = match[1], n$0 = n + m | 0;
          n = n$0;
          cont = cont$0;
          continue;
         case 8:
          var cont$1 = cont[2], m$0 = match[1];
          return [0, [8, n + m$0 | 0], cont$1];
         case 29:
          return cont;
       }
     }
     return [0, [3, n], cont];
    }
   }
   function add_const_unit(cont){
    if(cont){
     var a = cont[1];
     if(typeof a !== "number")
      switch(a[0]){case 1:case 5:case 13:case 15: return cont;}
    }
    return [0, [15, Lambda[8]], cont];
   }
   function push_dummies(n, k){
    if(0 === n) return k;
    var a = [0, 0, push_dummies(n - 1 | 0, k)];
    return [0, [15, Lambda[8]], a];
   }
   function copy_event(ev, kind, info, repr){
    return [0,
            0,
            ev[2],
            ev[3],
            kind,
            ev[5],
            info,
            ev[7],
            ev[8],
            ev[9],
            ev[10],
            repr];
   }
   function merge_events(ev$0, ev){
    var c = ev$0[4], match$1 = ev[4];
    if
     (typeof c === "number"
      && (c || ! (typeof match$1 === "number" && match$1)))
     var min = ev$0, maj = ev;
    else
     var min = ev, maj = ev$0;
    var x = maj[11], match$0 = min[11];
    a:
    if(typeof x === "number")
     var a = match$0;
    else{
     if(0 === x[0]){
      var r = x[1];
      if(typeof match$0 === "number"){var a = x; break a;}
      if(0 !== match$0[0]){
       var r$0 = match$0[1];
       if(r === r$0 && 1 === r[1]){var a = 0; break a;}
      }
     }
     else{
      var r$1 = x[1];
      if(typeof match$0 === "number"){var a = x; break a;}
      if(0 === match$0[0]){
       var r$2 = match$0[1];
       if(r$1 === r$2){var a = [0, r$1]; break a;}
      }
     }
     var a = caml_call1(Misc[1], cst_Bytegen_merge_repr);
    }
    var info = maj[6], match = min[6];
    a:
    {
     if(typeof info === "number" && info){var b = match; break a;}
     if(typeof match === "number" && match){var b = info; break a;}
     var b = caml_call1(Misc[1], cst_Bytegen_merge_infos);
    }
    return copy_event(maj, maj[4], b, a);
   }
   function weaken_event(ev, cont){
    if(typeof ev[4] === "number") return [0, [35, ev], cont];
    if(cont){
     var d = cont[1];
     if(typeof d === "number" && ! d){
      var a = cont[2];
      if(a){
       var b = a[1];
       if(typeof b !== "number" && 35 === b[0]){
        var ev$0 = b[1];
        if(typeof ev$0[11] === "number"){
         var c = a[2];
         if(typeof ev[6] === "number") return cont;
         var
          repr = [0, 1],
          ev$1 = copy_event(ev, 1, ev[6], [0, repr]),
          ev$2 = copy_event(ev$0, ev$0[4], ev$0[6], [1, repr]);
         return [0, [35, ev$1], [0, 0, [0, [35, ev$2], c]]];
        }
       }
      }
     }
    }
    return [0, [35, ev], cont];
   }
   function add_event(ev, cont){
    if(cont){
     var match = cont[1];
     if(typeof match !== "number" && 35 === match[0]){
      var cont$0 = cont[2], ev$0 = match[1];
      return weaken_event(merge_events(ev, ev$0), cont$0);
     }
    }
    return weaken_event(ev, cont);
   }
   function add_pseudo_event(loc, modname, c){
    if(! Clflags[20][1]) return c;
    var
     ev_defname = caml_call1(Debuginfo[1][10], loc),
     a = Subst[1],
     ev =
       [0,
        0,
        modname,
        caml_call1(Debuginfo[1][9], loc),
        1,
        ev_defname,
        1,
        0,
        a,
        empty_env,
        0,
        0];
    return add_event(ev, c);
   }
   function push_static_raise(stack_info, i, lbl_handler, sz){
    return [0,
            stack_info[1],
            [0, [0, i, [0, lbl_handler, sz, stack_info[1]]], stack_info[2]],
            stack_info[3]];
   }
   function find_raise_label(stack_info, i){
    try{var d = caml_call2(Stdlib_List[53], i, stack_info[2]); return d;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var
      a = caml_call1(Stdlib_Int[12], i),
      b = caml_call2(Stdlib[28], a, cst_outside_appropriated_catch),
      c = caml_call2(Stdlib[28], cst_exit, b);
     return caml_call1(Misc[1], c);
    }
   }
   function code_as_jump(stack_info, l, sz){
    if(11 === l[0] && ! l[2]){
     var
      i = l[1],
      match = find_raise_label(stack_info, i),
      tb = match[3],
      size = match[2],
      label = match[1];
     if(sz === size && tb === stack_info[1]) return [0, label];
     return 0;
    }
    return 0;
   }
   var
    functions_to_compile = caml_call1(Stdlib_Stack[2], 0),
    compunit_name = [0, cst],
    cst_caml_nativeint = "caml_nativeint_",
    cst_caml_int32 = "caml_int32_",
    cst_caml_int64 = "caml_int64_",
    a = [30, "caml_string_of_bytes", 1],
    b = [30, "caml_bytes_of_string", 1],
    cst_Bytegen_comp_primitive = "Bytegen.comp_primitive",
    c = [30, "caml_int_compare", 2],
    d = [30, "caml_float_compare", 2],
    e = [30, "caml_int_of_float", 1],
    f = [30, "caml_float_of_int", 1],
    g = [30, "caml_neg_float", 1],
    h = [30, "caml_abs_float", 1],
    i = [30, "caml_add_float", 2],
    j = [30, "caml_sub_float", 2],
    k = [30, "caml_mul_float", 2],
    l = [30, "caml_div_float", 2],
    m = [30, "caml_ml_string_length", 1],
    n = [30, "caml_string_get", 2],
    o = [30, "caml_ml_bytes_length", 1],
    p = [30, "caml_bytes_get", 2],
    q = [30, "caml_bytes_set", 3],
    r = [30, "caml_bswap16", 1],
    s = [30, "caml_int_as_pointer", 1],
    t = [30, "caml_atomic_exchange", 2],
    u = [30, "caml_atomic_cas", 3],
    v = [30, "caml_atomic_fetch_add", 2],
    w = [30, "caml_domain_dls_get", 1],
    x = [30, "caml_process_pending_actions_with_root", 1],
    y = [30, cst_caml_obj_dup$0, 1],
    cst_compare = "compare",
    z = [30, "caml_floatarray_unsafe_get", 2],
    A = [30, "caml_array_unsafe_get", 2],
    B = [30, "caml_floatarray_unsafe_set", 3],
    C = [30, "caml_array_unsafe_set", 3],
    D = [30, "caml_floatarray_get", 2],
    E = [30, "caml_array_get_addr", 2],
    F = [30, "caml_array_get", 2],
    G = [30, "caml_floatarray_set", 3],
    H = [30, "caml_array_set_addr", 3],
    I = [30, "caml_array_set", 3],
    cst_of_int = "of_int",
    cst_to_int = "to_int",
    cst_Bytegen_comp_primitive_inv =
      "Bytegen.comp_primitive: invalid Pcvtbint cast",
    J = [30, "caml_nativeint_to_int32", 1],
    K = [30, "caml_int64_of_nativeint", 1],
    L = [30, "caml_nativeint_of_int32", 1],
    M = [30, "caml_int64_of_int32", 1],
    N = [30, "caml_int64_to_nativeint", 1],
    O = [30, "caml_int64_to_int32", 1],
    cst_neg = "neg",
    cst_add = "add",
    cst_sub = "sub",
    cst_mul = "mul",
    cst_div = "div",
    cst_mod = "mod",
    cst_and = "and",
    cst_or = "or",
    cst_xor = "xor",
    cst_shift_left = "shift_left",
    cst_shift_right_unsigned = "shift_right_unsigned",
    cst_shift_right = "shift_right",
    P = [30, "caml_equal", 2],
    Q = [30, "caml_notequal", 2],
    R = [30, "caml_lessthan", 2],
    S = [30, "caml_greaterthan", 2],
    T = [30, "caml_lessequal", 2],
    U = [30, "caml_greaterequal", 2],
    cst_caml_ba_get = "caml_ba_get_",
    cst_caml_ba_set = "caml_ba_set_",
    cst_caml_ba_dim = "caml_ba_dim_",
    V = [30, "caml_string_get16", 2],
    W = [30, "caml_string_get32", 2],
    X = [30, "caml_string_get64", 2],
    Y = [30, "caml_bytes_get16", 2],
    Z = [30, "caml_bytes_get32", 2],
    _ = [30, "caml_bytes_get64", 2],
    $ = [30, "caml_bytes_set16", 3],
    aa = [30, "caml_bytes_set32", 3],
    ab = [30, "caml_bytes_set64", 3],
    ac = [30, "caml_ba_uint8_get16", 2],
    ad = [30, "caml_ba_uint8_get32", 2],
    ae = [30, "caml_ba_uint8_get64", 2],
    af = [30, "caml_ba_uint8_set16", 3],
    ag = [30, "caml_ba_uint8_set32", 3],
    ah = [30, "caml_ba_uint8_set64", 3],
    cst_big_endian = "big_endian",
    ai = [0, [11, "caml_sys_const_", [2, 0, 0]], "caml_sys_const_%s"],
    cst_word_size = "word_size",
    cst_int_size = "int_size",
    cst_max_wosize = "max_wosize",
    cst_ostype_unix = "ostype_unix",
    cst_ostype_win32 = "ostype_win32",
    cst_ostype_cygwin = "ostype_cygwin",
    cst_backend_type = "backend_type",
    cst_bswap = "bswap",
    aj = [30, "caml_atomic_load", 1],
    dummy = 0;
   function check_stack(stack_info, sz){
    var curr = stack_info[3];
    if(curr[1] < sz) curr[1] = sz;
   }
   function comp_bint_primitive(bi, suff, args){
    switch(bi){
      case 0:
       var pref = cst_caml_nativeint; break;
      case 1:
       var pref = cst_caml_int32; break;
      default: var pref = cst_caml_int64;
    }
    var a = caml_call1(Stdlib_List[1], args);
    return [30, caml_call2(Stdlib[28], pref, suff), a];
   }
   function comp_primitive(stack_info, p$0, sz, args){
    check_stack(stack_info, sz);
    if(typeof p$0 === "number")
     switch(p$0){
       case 0:
        return a;
       case 1:
        return b;
       case 3:
        return 3;
       case 5:
        check_stack(stack_info, sz + 4 | 0); return 27;
       case 11:
        return 11;
       case 12:
        return 12;
       case 13:
        return 13;
       case 14:
        return 14;
       case 15:
        return 17;
       case 16:
        return 18;
       case 17:
        return 19;
       case 18:
        return 20;
       case 19:
        return 21;
       case 20:
        return 22;
       case 21:
        return c;
       case 22:
        return d;
       case 23:
        return e;
       case 24:
        return f;
       case 25:
        return g;
       case 26:
        return h;
       case 27:
        return i;
       case 28:
        return j;
       case 29:
        return k;
       case 30:
        return l;
       case 31:
        return m;
       case 32:
        return 5;
       case 33:
        return n;
       case 34:
        return o;
       case 35:
        return 6;
       case 36:
        return 7;
       case 37:
        return p;
       case 38:
        return q;
       case 39:
        return 23;
       case 40:
        return 24;
       case 41:
        return r;
       case 42:
        return s;
       case 43:
        return t;
       case 44:
        return u;
       case 45:
        return v;
       case 47:
        return w;
       case 48:
        return x;
     }
    else
     switch(p$0[0]){
       case 0:
        var id = p$0[1]; return [13, id];
       case 1:
        var id$0 = p$0[1]; return [14, id$0];
       case 3:
        var n$0 = p$0[1]; return [18, n$0];
       case 4:
        var n$1 = p$0[1]; return [19, n$1];
       case 5:
        return 4;
       case 7:
        var n$2 = p$0[1]; return [21, n$2];
       case 8:
        return y;
       case 9:
        var p$1 = p$0[1]; return [30, p$1[1], p$1[2]];
       case 11:
        return 15;
       case 12:
        return 16;
       case 13:
        var cmp = p$0[1]; return [31, cmp];
       case 14:
        var bi = p$0[1]; return comp_bint_primitive(bi, cst_compare, args);
       case 15:
        var n$3 = p$0[1]; return [32, n$3];
       case 16:
        var n$4 = p$0[1]; return [33, n$4];
       case 20:
        return 2;
       case 21:
        var match = p$0[1]; return match ? 3 <= match ? z : 3 : A;
       case 22:
        var match$0 = p$0[1]; return match$0 ? 3 <= match$0 ? B : 4 : C;
       case 23:
        var match$1 = p$0[1]; return match$1 ? 3 <= match$1 ? D : E : F;
       case 24:
        var match$2 = p$0[1]; return match$2 ? 3 <= match$2 ? G : H : I;
       case 25:
        var bi$0 = p$0[1]; return comp_bint_primitive(bi$0, cst_of_int, args);
       case 26:
        var bi$1 = p$0[1]; return comp_bint_primitive(bi$1, cst_to_int, args);
       case 27:
        var dst = p$0[2], src = p$0[1];
        switch(src){
          case 0:
           switch(dst){case 1: return J;case 2: return K;} break;
          case 1:
           switch(dst){case 0: return L;case 2: return M;} break;
          default: switch(dst){case 0: return N;case 1: return O;}
        }
        return caml_call1(Misc[1], cst_Bytegen_comp_primitive_inv);
       case 28:
        var bi$2 = p$0[1]; return comp_bint_primitive(bi$2, cst_neg, args);
       case 29:
        var bi$3 = p$0[1]; return comp_bint_primitive(bi$3, cst_add, args);
       case 30:
        var bi$4 = p$0[1]; return comp_bint_primitive(bi$4, cst_sub, args);
       case 31:
        var bi$5 = p$0[1]; return comp_bint_primitive(bi$5, cst_mul, args);
       case 32:
        var bi$6 = p$0[1]; return comp_bint_primitive(bi$6, cst_div, args);
       case 33:
        var bi$7 = p$0[1]; return comp_bint_primitive(bi$7, cst_mod, args);
       case 34:
        var bi$8 = p$0[1]; return comp_bint_primitive(bi$8, cst_and, args);
       case 35:
        var bi$9 = p$0[1]; return comp_bint_primitive(bi$9, cst_or, args);
       case 36:
        var bi$10 = p$0[1]; return comp_bint_primitive(bi$10, cst_xor, args);
       case 37:
        var bi$11 = p$0[1];
        return comp_bint_primitive(bi$11, cst_shift_left, args);
       case 38:
        var bi$12 = p$0[1];
        return comp_bint_primitive(bi$12, cst_shift_right_unsigned, args);
       case 39:
        var bi$13 = p$0[1];
        return comp_bint_primitive(bi$13, cst_shift_right, args);
       case 40:
        switch(p$0[2]){
          case 0:
           return P;
          case 1:
           return Q;
          case 2:
           return R;
          case 3:
           return S;
          case 4:
           return T;
          default: return U;
        }
       case 41:
        var n$5 = p$0[2], ak = caml_call1(Stdlib_Int[12], n$5);
        return [30, caml_call2(Stdlib[28], cst_caml_ba_get, ak), n$5 + 1 | 0];
       case 42:
        var n$6 = p$0[2], al = caml_call1(Stdlib_Int[12], n$6);
        return [30, caml_call2(Stdlib[28], cst_caml_ba_set, al), n$6 + 2 | 0];
       case 43:
        var n$7 = p$0[1], am = caml_call1(Stdlib_Int[12], n$7);
        return [30, caml_call2(Stdlib[28], cst_caml_ba_dim, am), 1];
       case 44:
        return V;
       case 45:
        return W;
       case 46:
        return X;
       case 47:
        return Y;
       case 48:
        return Z;
       case 49:
        return _;
       case 50:
        return $;
       case 51:
        return aa;
       case 52:
        return ab;
       case 53:
        return ac;
       case 54:
        return ad;
       case 55:
        return ae;
       case 56:
        return af;
       case 57:
        return ag;
       case 58:
        return ah;
       case 59:
        var c$0 = p$0[1];
        switch(c$0){
          case 0:
           var const_name = cst_big_endian; break;
          case 1:
           var const_name = cst_word_size; break;
          case 2:
           var const_name = cst_int_size; break;
          case 3:
           var const_name = cst_max_wosize; break;
          case 4:
           var const_name = cst_ostype_unix; break;
          case 5:
           var const_name = cst_ostype_win32; break;
          case 6:
           var const_name = cst_ostype_cygwin; break;
          default: var const_name = cst_backend_type;
        }
        return [30, caml_call2(Stdlib_Printf[4], ai, const_name), 1];
       case 60:
        var bi$14 = p$0[1];
        return comp_bint_primitive(bi$14, cst_bswap, args);
       case 61:
        return aj;
     }
    return caml_call1(Misc[1], cst_Bytegen_comp_primitive);
   }
   function is_immed(n){
    var a = Instruct[1] <= n ? 1 : 0, b = a ? n <= Instruct[2] ? 1 : 0 : a;
    return b;
   }
   var
    compare_key = runtime.caml_compare,
    make_key = Lambda[7],
    Storer = caml_call1(Switch[2], [0, compare_key, make_key]),
    cst_Bytegen_comp_expr_var = "Bytegen.comp_expr: var ",
    ak = [0, cst_bytecomp_bytegen_ml, 715, 6],
    al = [0, cst_bytecomp_bytegen_ml, 702, 6],
    cst_Reperform_used_in_non_tail = "Reperform used in non-tail position",
    am = [0, cst_bytecomp_bytegen_ml, 730, 6],
    an = [30, "caml_eq_float", 2],
    ao = [30, "caml_neq_float", 2],
    ap = [30, cst_caml_lt_float, 2],
    aq = [30, cst_caml_lt_float, 2],
    ar = [30, cst_caml_gt_float, 2],
    as = [30, cst_caml_gt_float, 2],
    at = [30, cst_caml_le_float, 2],
    au = [30, cst_caml_le_float, 2],
    av = [30, cst_caml_ge_float, 2],
    aw = [30, cst_caml_ge_float, 2],
    ax = [16, 0, 0],
    ay = [30, "caml_array_of_uniform_array", 1],
    cst_Bytegen_comp_expr_Pduparra =
      "Bytegen.comp_expr: Pduparray takes exactly one arg",
    cst_caml_obj_dup = cst_caml_obj_dup$0,
    az = [0, cst_bytecomp_bytegen_ml, 739, 6],
    aA = [0, cst_bytecomp_bytegen_ml, 818, 16],
    aB = [0, cst_bytecomp_bytegen_ml, 800, 56],
    aC = [31, 1],
    aD = [1, 1],
    aE = [4, 2],
    aF = [1, 1],
    aG = [1, 2],
    cst_Bytegen_comp_expr_assign = "Bytegen.comp_expr: assign",
    aH = [0, cst_bytecomp_bytegen_ml, 570, 6],
    aI = [30, "caml_ensure_stack_capacity", 1];
   function comp_expr$0(counter, stack_info$2, env, exp$4, sz, cont$25){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                var exp = exp$4, cont = cont$25;
                m:
                for(;;){
                 check_stack(stack_info$2, sz);
                 switch(exp[0]){
                   case 2:
                    var cst = exp[1]; return [0, [15, cst], cont];
                   case 3:
                    break a;
                   case 4:
                    break b;
                   case 5:
                    var body$0 = exp[5], arg = exp[4], id$0 = exp[3]; break;
                   case 6:
                    var body$0 = exp[4], arg = exp[3], id$0 = exp[2]; break;
                   case 7:
                    break c;
                   case 8:
                    var p = exp[1];
                    if(typeof p === "number")
                     switch(p){
                       case 2:
                        var e = exp[2];
                        if(! e) break d;
                        if(e[2]) break d;
                        var arg$0 = e[1], cont$2 = add_const_unit(cont);
                        exp = arg$0;
                        cont = cont$2;
                        continue;
                       case 4:
                        break e;
                       case 6:
                        break f;
                       case 7:
                        var
                         args$3 = exp[2],
                         nargs$3 = caml_call1(Stdlib_List[1], args$3) - 1 | 0;
                        if(2 !== nargs$3)
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, am], 1);
                        check_stack(stack_info$2, sz + 3 | 0);
                        if(! is_tailcall(cont))
                         return caml_call1(Misc[1], cst_Reperform_used_in_non_tail);
                        var
                         J = [0, [37, sz + nargs$3 | 0], discard_dead_code(cont)];
                        if(counter >= 50)
                         return caml_trampoline_return
                                 (comp_args$0, [0, stack_info$2, env, args$3, sz, J]);
                        var counter$7 = counter + 1 | 0;
                        return comp_args$0
                                (counter$7, stack_info$2, env, args$3, sz, J);
                       case 8:
                        var f = exp[2];
                        if(! f) break d;
                        var g = f[2];
                        if(! g) break d;
                        if(g[2]) break d;
                        var exp2 = g[1], exp1 = f[1];
                        if(cont){
                         var match$4 = cont[1];
                         if(typeof match$4 !== "number")
                          switch(match$4[0]){
                            case 23:
                             var
                              cont1$1 = cont[2],
                              lbl$2 = match$4[1],
                              match$6 = label_code(cont1$1),
                              cont2 = match$6[2],
                              lbl2 = match$6[1],
                              cont$4 =
                                [0,
                                 [24, lbl2],
                                 comp_expr
                                  (stack_info$2, env, exp2, sz, [0, [23, lbl$2], cont2])];
                             exp = exp1;
                             cont = cont$4;
                             continue;
                            case 24:
                             var
                              lbl$3 = match$4[1],
                              cont$5 =
                                [0,
                                 [24, lbl$3],
                                 comp_expr(stack_info$2, env, exp2, sz, cont)];
                             exp = exp1;
                             cont = cont$5;
                             continue;
                          }
                        }
                        var
                         match$5 = label_code(cont),
                         cont1$0 = match$5[2],
                         lbl$1 = match$5[1],
                         cont$3 =
                           [0,
                            [26, lbl$1],
                            comp_expr(stack_info$2, env, exp2, sz, cont1$0)];
                        exp = exp1;
                        cont = cont$3;
                        continue;
                       case 9:
                        var h = exp[2];
                        if(! h) break d;
                        var j = h[2];
                        if(! j) break d;
                        if(j[2]) break d;
                        var exp2$0 = j[1], exp1$0 = h[1];
                        if(cont){
                         var match$7 = cont[1];
                         if(typeof match$7 !== "number")
                          switch(match$7[0]){
                            case 23:
                             var
                              lbl$5 = match$7[1],
                              cont$7 =
                                [0,
                                 [23, lbl$5],
                                 comp_expr(stack_info$2, env, exp2$0, sz, cont)];
                             exp = exp1$0;
                             cont = cont$7;
                             continue;
                            case 24:
                             var
                              cont1$3 = cont[2],
                              lbl$6 = match$7[1],
                              match$9 = label_code(cont1$3),
                              cont2$0 = match$9[2],
                              lbl2$0 = match$9[1],
                              cont$8 =
                                [0,
                                 [23, lbl2$0],
                                 comp_expr
                                  (stack_info$2, env, exp2$0, sz, [0, [24, lbl$6], cont2$0])];
                             exp = exp1$0;
                             cont = cont$8;
                             continue;
                          }
                        }
                        var
                         match$8 = label_code(cont),
                         cont1$2 = match$8[2],
                         lbl$4 = match$8[1],
                         cont$6 =
                           [0,
                            [25, lbl$4],
                            comp_expr(stack_info$2, env, exp2$0, sz, cont1$2)];
                        exp = exp1$0;
                        cont = cont$6;
                        continue;
                       case 10:
                        var m = exp[2];
                        if(! m) break d;
                        if(m[2]) break d;
                        var arg$1 = m[1];
                        if(cont){
                         var match$10 = cont[1];
                         if(typeof match$10 !== "number")
                          switch(match$10[0]){
                            case 23:
                             var cont1$4 = cont[2], lbl$7 = match$10[1];
                             exp = arg$1;
                             cont = [0, [24, lbl$7], cont1$4];
                             continue;
                            case 24:
                             var cont1$5 = cont[2], lbl$8 = match$10[1];
                             exp = arg$1;
                             cont = [0, [23, lbl$8], cont1$5];
                             continue;
                          }
                        }
                        exp = arg$1;
                        cont = [0, 8, cont];
                        continue;
                       case 12:
                        var o = exp[2];
                        if(! o) break d;
                        var q = o[2];
                        if(! q) break d;
                        var K = q[1];
                        if(2 !== K[0]) break d;
                        var L = K[1];
                        if(0 !== L[0]) break d;
                        var M = L[1];
                        if(0 !== M[0]) break d;
                        if(q[2]) break d;
                        var n = M[1], arg$2 = o[1];
                        if(! is_immed(n)) break d;
                        var cont$9 = [0, [32, n], cont];
                        exp = arg$2;
                        cont = cont$9;
                        continue;
                       case 13:
                        var s = exp[2];
                        if(! s) break d;
                        var t = s[2];
                        if(! t) break d;
                        var N = t[1];
                        if(2 !== N[0]) break d;
                        var O = N[1];
                        if(0 !== O[0]) break d;
                        var P = O[1];
                        if(0 !== P[0]) break d;
                        if(t[2]) break d;
                        var n$0 = P[1], arg$3 = s[1];
                        if(! is_immed(- n$0 | 0)) break d;
                        var cont$10 = [0, [32, - n$0 | 0], cont];
                        exp = arg$3;
                        cont = cont$10;
                        continue;
                       case 46:
                        var u = exp[2];
                        if(! u) break d;
                        if(u[2]) break d;
                        var arg$4 = u[1];
                        exp = arg$4;
                        continue;
                       default: break d;
                     }
                    switch(p[0]){
                      case 2:
                       var
                        loc$0 = exp[3],
                        args$4 = exp[2],
                        tag = p[1],
                        cont$11 = add_pseudo_event(loc$0, compunit_name[1], cont),
                        Q =
                          [0, [16, caml_call1(Stdlib_List[1], args$4), tag], cont$11];
                       if(counter >= 50)
                        return caml_trampoline_return
                                (comp_args$0, [0, stack_info$2, env, args$4, sz, Q]);
                       var counter$8 = counter + 1 | 0;
                       return comp_args$0
                               (counter$8, stack_info$2, env, args$4, sz, Q);
                      case 6:
                       var
                        loc$1 = exp[3],
                        args$5 = exp[2],
                        n$1 = p[1],
                        cont$12 = add_pseudo_event(loc$1, compunit_name[1], cont),
                        R = [0, [20, n$1], cont$12];
                       if(counter >= 50)
                        return caml_trampoline_return
                                (comp_args$0, [0, stack_info$2, env, args$5, sz, R]);
                       var counter$9 = counter + 1 | 0;
                       return comp_args$0
                               (counter$9, stack_info$2, env, args$5, sz, R);
                      case 10:
                       var v = exp[2];
                       if(! v) break d;
                       if(v[2]) break d;
                       var
                        arg$5 = v[1],
                        k = p[1],
                        cont$13 = [0, [29, k], discard_dead_code(cont)];
                       exp = arg$5;
                       cont = cont$13;
                       continue;
                      case 13:
                       break g;
                      case 15:
                       var y = exp[2];
                       if(! y) break d;
                       if(y[2]) break d;
                       var arg$7 = y[1], n$2 = p[1];
                       if(is_immed(n$2)) break d;
                       var
                        cont$14 = [0, 0, [0, [15, [0, [0, n$2]]], [0, 12, cont]]];
                       exp = arg$7;
                       cont = cont$14;
                       continue;
                      case 17:
                       break h;
                      case 18:
                       break i;
                      case 19:
                       var kind$0 = p[1], a = exp[2];
                       n:
                       if(a){
                        var arg$8 = a[1], mutability = p[2];
                        if(8 === arg$8[0]){
                         var z = arg$8[1];
                         if(typeof z !== "number" && 18 === z[0]){
                          if(a[2]) break n;
                          var loc$4 = exp[3], args$9 = arg$8[2], kind$1 = z[1];
                          if(kind$0 !== kind$1)
                           throw caml_maybe_attach_backtrace
                                  ([0, Assert_failure, az], 1);
                          var exp$1 = [8, [18, kind$0, mutability], args$9, loc$4];
                          exp = exp$1;
                          continue;
                         }
                        }
                        if(! a[2]){
                         var
                          loc$3 = exp[3],
                          prim_obj_dup =
                            caml_call3(Primitive[1], cst_caml_obj_dup, 1, 1),
                          exp$0 = [8, [9, prim_obj_dup], [0, arg$8, 0], loc$3];
                         exp = exp$0;
                         continue;
                        }
                       }
                       return caml_call1(Misc[1], cst_Bytegen_comp_expr_Pduparra);
                      default: break d;
                    }
                   case 9:
                    var
                     sw = exp[2],
                     arg$9 = exp[1],
                     match$11 = make_branch(cont),
                     cont1$6 = match$11[2],
                     branch = match$11[1],
                     c$0 = [0, discard_dead_code(cont1$6)],
                     store = caml_call1(Storer[1], 0),
                     act_consts = caml_array_make(sw[1], 0),
                     act_blocks = caml_array_make(sw[3], 0),
                     match$12 = sw[5];
                    if(match$12){
                     var fail = match$12[1];
                     caml_call2(store[3], 0, fail);
                    }
                    let store$0 = store, act_consts$0 = act_consts;
                    caml_call2
                     (Stdlib_List[18],
                      function(param){
                       var
                        act = param[2],
                        n = param[1],
                        a = caml_call2(store$0[3], 0, act);
                       caml_check_bound(act_consts$0, n)[n + 1] = a;
                       return 0;
                      },
                      sw[2]);
                    let act_blocks$0 = act_blocks;
                    caml_call2
                     (Stdlib_List[18],
                      function(param){
                       var
                        act = param[2],
                        n = param[1],
                        a = caml_call2(store$0[3], 0, act);
                       caml_check_bound(act_blocks$0, n)[n + 1] = a;
                       return 0;
                      },
                      sw[4]);
                    var
                     acts = caml_call1(store[1], 0),
                     lbls$0 = caml_array_make(acts.length - 1, 0),
                     W = acts.length - 2 | 0;
                    if(W >= 0){
                     var i$1 = W;
                     for(;;){
                      var
                       aN = [0, branch, c$0[1]],
                       match$13 =
                         label_code
                          (comp_expr
                            (stack_info$2,
                             env,
                             caml_check_bound(acts, i$1)[i$1 + 1],
                             sz,
                             aN)),
                       c1 = match$13[2],
                       lbl$9 = match$13[1];
                      caml_check_bound(lbls$0, i$1)[i$1 + 1] = lbl$9;
                      c$0[1] = discard_dead_code(c1);
                      var aO = i$1 - 1 | 0;
                      if(0 === i$1) break;
                      i$1 = aO;
                     }
                    }
                    var
                     lbl_blocks = caml_array_make(sw[3], 0),
                     X = sw[3] - 1 | 0;
                    if(X >= 0){
                     var i$0 = X;
                     for(;;){
                      var
                       _ = caml_check_bound(act_blocks, i$0)[i$0 + 1],
                       aL = caml_check_bound(lbls$0, _)[_ + 1];
                      caml_check_bound(lbl_blocks, i$0)[i$0 + 1] = aL;
                      var aM = i$0 - 1 | 0;
                      if(0 === i$0) break;
                      i$0 = aM;
                     }
                    }
                    var
                     lbl_consts = caml_array_make(sw[1], 0),
                     Y = sw[1] - 1 | 0;
                    if(Y >= 0){
                     var i = Y;
                     for(;;){
                      var
                       Z = caml_check_bound(act_consts, i)[i + 1],
                       aJ = caml_check_bound(lbls$0, Z)[Z + 1];
                      caml_check_bound(lbl_consts, i)[i + 1] = aJ;
                      var aK = i - 1 | 0;
                      if(0 === i) break;
                      i = aK;
                     }
                    }
                    var cont$17 = [0, [27, lbl_consts, lbl_blocks], c$0[1]];
                    exp = arg$9;
                    cont = cont$17;
                    continue;
                   case 10:
                    var
                     loc$5 = exp[4],
                     d = exp[3],
                     sw$0 = exp[2],
                     arg$10 = exp[1],
                     exp$2 = caml_call4(Matching[10], loc$5, arg$10, sw$0, d);
                    exp = exp$2;
                    continue;
                   case 11:
                    var
                     args$10 = exp[2],
                     i$2 = exp[1],
                     cont$18 = discard_dead_code(cont),
                     match$14 = find_raise_label(stack_info$2, i$2),
                     tb = match$14[3],
                     size = match$14[2],
                     label = match$14[1];
                    n:
                    {
                     if(cont$18){
                      var match = cont$18[1];
                      if(typeof match !== "number" && 0 === match[0]){
                       var label0 = match[1];
                       if(label === label0){var cont$19 = cont$18; break n;}
                      }
                     }
                     var cont$19 = [0, [22, label], cont$18];
                    }
                    let tb$0 = tb, size$0 = size, cont$0 = cont$19;
                    var
                     loop =
                       function(sz, tbb){
                        if(tb$0 === tbb) return add_pop(sz - size$0 | 0, cont$0);
                        if(! tbb)
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, aA], 1);
                        var tbb$0 = tbb[2], try_sz = tbb[1];
                        return add_pop
                                ((sz - try_sz | 0) - 4 | 0, [0, 9, loop$0(try_sz, tbb$0)]);
                       };
                    let loop$0 = loop;
                    var cont$20 = loop(sz, stack_info$2[1]);
                    if(args$10 && ! args$10[2]){
                     var arg$11 = args$10[1];
                     exp = arg$11;
                     cont = cont$20;
                     continue;
                    }
                    var ac = caml_call1(Stdlib_List[10], args$10);
                    if(counter >= 50)
                     return caml_trampoline_return
                             (comp_expr_list_assign$0,
                              [0, stack_info$2, env, ac, sz, size, cont$20]);
                    var counter$0 = counter + 1 | 0;
                    return comp_expr_list_assign$0
                            (counter$0, stack_info$2, env, ac, sz, size, cont$20);
                   case 12:
                    break j;
                   case 13:
                    break k;
                   case 14:
                    var ifnot = exp[3], ifso = exp[2], cond = exp[1];
                    if(runtime.caml_equal(ifnot, [2, Lambda[8]])){
                     var
                      match$23 = label_code(cont),
                      cont1$11 = match$23[2],
                      lbl_end = match$23[1];
                     exp = cond;
                     cont =
                      [0,
                       [26, lbl_end],
                       comp_expr(stack_info$2, env, ifso, sz, cont1$11)];
                     continue;
                    }
                    var match$24 = code_as_jump(stack_info$2, ifso, sz);
                    if(match$24){
                     var
                      label$0 = match$24[1],
                      cont$23 = comp_expr(stack_info$2, env, ifnot, sz, cont);
                     exp = cond;
                     cont = [0, [23, label$0], cont$23];
                     continue;
                    }
                    var match$25 = code_as_jump(stack_info$2, ifnot, sz);
                    if(match$25){
                     var
                      label$1 = match$25[1],
                      cont$24 = comp_expr(stack_info$2, env, ifso, sz, cont);
                     exp = cond;
                     cont = [0, [24, label$1], cont$24];
                     continue;
                    }
                    var
                     match$26 = make_branch(cont),
                     cont1$12 = match$26[2],
                     branch_end = match$26[1],
                     match$27 =
                       label_code
                        (comp_expr(stack_info$2, env, ifnot, sz, cont1$12)),
                     cont2$3 = match$27[2],
                     lbl_not = match$27[1];
                    exp = cond;
                    cont =
                     [0,
                      [24, lbl_not],
                      comp_expr
                       (stack_info$2, env, ifso, sz, [0, branch_end, cont2$3])];
                    continue;
                   case 15:
                    var
                     exp2$1 = exp[2],
                     exp1$1 = exp[1],
                     cont$21 = comp_expr(stack_info$2, env, exp2$1, sz, cont);
                    exp = exp1$1;
                    cont = cont$21;
                    continue;
                   case 16:
                    var
                     body$4 = exp[2],
                     cond$0 = exp[1],
                     lbl_loop = new_label(0),
                     lbl_test = new_label(0);
                    return [0,
                            [22, lbl_test],
                            [0,
                             [0, lbl_loop],
                             [0,
                              10,
                              comp_expr
                               (stack_info$2,
                                env,
                                body$4,
                                sz,
                                [0,
                                 [0, lbl_test],
                                 comp_expr
                                  (stack_info$2,
                                   env,
                                   cond$0,
                                   sz,
                                   [0, [23, lbl_loop], add_const_unit(cont)])])]]];
                   case 17:
                    var
                     body$5 = exp[5],
                     dir = exp[4],
                     stop = exp[3],
                     start = exp[2],
                     param = exp[1],
                     lbl_loop$0 = new_label(0),
                     lbl_exit = new_label(0),
                     offset = dir ? -1 : 1,
                     comp = dir ? 2 : 3,
                     aS =
                       [0,
                        aF,
                        [0,
                         0,
                         [0,
                          [32, offset],
                          [0,
                           aE,
                           [0,
                            aD,
                            [0,
                             aC,
                             [0,
                              [23, lbl_loop$0],
                              [0, [0, lbl_exit], add_const_unit(add_pop(2, cont))]]]]]]]],
                     cont$22 =
                       [0,
                        0,
                        comp_expr
                         (stack_info$2,
                          env,
                          stop,
                          sz + 1 | 0,
                          [0,
                           0,
                           [0,
                            0,
                            [0,
                             aG,
                             [0,
                              [31, comp],
                              [0,
                               [23, lbl_exit],
                               [0,
                                [0, lbl_loop$0],
                                [0,
                                 10,
                                 comp_expr
                                  (stack_info$2,
                                   add_var(param, sz + 1 | 0, env),
                                   body$5,
                                   sz + 2 | 0,
                                   aS)]]]]]]])];
                    exp = start;
                    cont = cont$22;
                    continue;
                   case 18:
                    var expr = exp[2], id$2 = exp[1];
                    try{
                     var
                      pos$2 = caml_call2(Ident[31], id$2, env[1]),
                      aT =
                        comp_expr
                         (stack_info$2,
                          env,
                          expr,
                          sz,
                          [0, [4, sz - pos$2 | 0], cont]);
                     return aT;
                    }
                    catch(exn){
                     var exn$1 = caml_wrap_exception(exn);
                     if(exn$1 === Stdlib[8])
                      return caml_call1(Misc[1], cst_Bytegen_comp_expr_assign);
                     throw caml_maybe_attach_backtrace(exn$1, 0);
                    }
                   case 19:
                    break l;
                   case 20:
                    var
                     lev = exp[2],
                     lam = exp[1],
                     ev_defname = caml_call1(Debuginfo[1][10], lev[1]);
                    let lev$0 = lev, ev_defname$0 = ev_defname;
                    var
                     event =
                       function(kind, info){
                        var match = lev$0[3];
                        if(match)
                         var
                          repr = match[1],
                          a =
                            1 === repr[1]
                             ? 1 === lev$0[2] ? [1, repr] : [0, repr]
                             : 1 === lev$0[2] ? [0, repr] : [1, repr];
                        else
                         var a = 0;
                        var
                         b = Subst[1],
                         c = caml_call1(Env[128], lev$0[4]),
                         d = caml_call1(Debuginfo[1][9], lev$0[1]);
                        return [0,
                                0,
                                compunit_name[1],
                                d,
                                kind,
                                ev_defname$0,
                                info,
                                c,
                                b,
                                env,
                                sz,
                                a];
                       },
                     match$22 = lev[2];
                    if(typeof match$22 === "number")
                     switch(match$22){
                       case 0:
                        var
                         c$1 = comp_expr(stack_info$2, env, lam, sz, cont),
                         ev = event(0, 1);
                        return add_event(ev, c$1);
                       case 1:
                        var
                         c$2 = comp_expr(stack_info$2, env, lam, sz, cont),
                         ev$0 = event(1, 0);
                        return add_event(ev$0, c$2);
                       default:
                        var
                         c$3 = comp_expr(stack_info$2, env, lam, sz, cont),
                         ev$1 = event(1, 1);
                        return add_event(ev$1, c$3);
                     }
                    var ty = match$22[1];
                    n:
                    if(8 === lam[0]){
                     var prim = lam[1];
                     o:
                     if(typeof prim === "number"){
                      var b = prim - 10 | 0;
                      if(37 < b >>> 0){
                       if(-6 > b) break o;
                      }
                      else if(36 !== b) break o;
                      var preserve_tailcall = 1;
                      break n;
                     }
                     var preserve_tailcall = 0;
                    }
                    else
                     var preserve_tailcall = 1;
                    if(preserve_tailcall && is_tailcall(cont)){exp = lam; continue;}
                    switch(lam[0]){
                      case 3:
                       var
                        args$14 = lam[1][2],
                        info = [0, caml_call1(Stdlib_List[1], args$14)];
                       break;
                      case 8:
                       var
                        args$15 = lam[2],
                        info = [0, caml_call1(Stdlib_List[1], args$15)];
                       break;
                      case 19:
                       var
                        args$16 = lam[4],
                        info = [0, caml_call1(Stdlib_List[1], args$16) + 1 | 0];
                       break;
                      default: var info = 1;
                    }
                    var
                     ev$2 = event([0, ty], info),
                     cont1$10 = add_event(ev$2, cont);
                    exp = lam;
                    cont = cont1$10;
                    continue;
                   case 21:
                    var exp$3 = exp[2]; exp = exp$3; continue;
                   default: break m;
                 }
                 var
                  af = add_pop(1, cont),
                  cont$1 =
                    [0,
                     0,
                     comp_expr
                      (stack_info$2,
                       add_var(id$0, sz + 1 | 0, env),
                       body$0,
                       sz + 1 | 0,
                       af)];
                 exp = arg;
                 cont = cont$1;
                }
                var id = exp[1];
                try{
                 var
                  pos$1 = caml_call2(Ident[31], id, env[1]),
                  ad = [0, [1, sz - pos$1 | 0], cont];
                 return ad;
                }
                catch(exn$1){
                 var exn = caml_wrap_exception(exn$1);
                 if(exn !== Stdlib[8])
                  throw caml_maybe_attach_backtrace(exn, 0);
                 var
                  not_found =
                    function(param){
                     var
                      a = caml_call1(Ident[17], id),
                      b = caml_call2(Stdlib[28], cst_Bytegen_comp_expr_var, a);
                     return caml_call1(Misc[1], b);
                    },
                  match$0 = env[2];
                 if(! match$0) return not_found(0);
                 var env_pos = match$0[2], entries = match$0[1];
                 try{var val = caml_call2(Ident[31], id, entries);}
                 catch(exn){
                  var exn$0 = caml_wrap_exception(exn);
                  if(exn$0 === Stdlib[8]) return not_found(0);
                  throw caml_maybe_attach_backtrace(exn$0, 0);
                 }
                 if(0 === val[0]){
                  var pos = val[1];
                  return [0, [2, pos - env_pos | 0], cont];
                 }
                 var pos$0 = val[1];
                 return [0, [12, pos$0 - env_pos | 0], cont];
                }
               }
               var
                args$11 = exp[4],
                obj = exp[3],
                met = exp[2],
                kind$2 = exp[1];
               if(2 === kind$2)
                throw caml_maybe_attach_backtrace([0, Assert_failure, aH], 1);
               var nargs$5 = caml_call1(Stdlib_List[1], args$11) + 1 | 0;
               l:
               if(0 === kind$2)
                var args$12 = [0, met, [0, obj, args$11]], getmethod = 25;
               else{
                if(2 === met[0]){
                 var ab = met[1];
                 if(0 === ab[0]){
                  var match$21 = ab[1];
                  if(0 === match$21[0]){
                   var
                    n$3 = match$21[1],
                    args$12 = [0, obj, args$11],
                    getmethod = [34, n$3];
                   break l;
                  }
                 }
                }
                var
                 args$13 = [0, met, [0, obj, args$11]],
                 args$12 = args$13,
                 getmethod = 26;
               }
               if(is_tailcall(cont)){
                var
                 $ =
                   [0,
                    getmethod,
                    [0, [7, nargs$5, sz + nargs$5 | 0], discard_dead_code(cont)]];
                if(counter >= 50)
                 return caml_trampoline_return
                         (comp_args$0, [0, stack_info$2, env, args$12, sz, $]);
                var counter$16 = counter + 1 | 0;
                return comp_args$0
                        (counter$16, stack_info$2, env, args$12, sz, $);
               }
               if(4 <= nargs$5){
                var
                 match$20 = label_code(cont),
                 cont1$9 = match$20[2],
                 lbl$10 = match$20[1];
                return [0,
                        [5, lbl$10],
                        comp_args
                         (stack_info$2,
                          env,
                          args$12,
                          sz + 3 | 0,
                          [0, getmethod, [0, [6, nargs$5], cont1$9]])];
               }
               var aa = [0, getmethod, [0, [6, nargs$5], cont]];
               if(counter >= 50)
                return caml_trampoline_return
                        (comp_args$0, [0, stack_info$2, env, args$12, sz, aa]);
               var counter$17 = counter + 1 | 0;
               return comp_args$0
                       (counter$17, stack_info$2, env, args$12, sz, aa);
              }
              var
               handler$0 = exp[3],
               id$1 = exp[2],
               body$3 = exp[1],
               match$19 = make_branch(cont),
               cont1$8 = match$19[2],
               branch1$0 = match$19[1],
               lbl_handler$1 = new_label(0),
               aR = add_pop(1, cont1$8),
               body_cont =
                 [0,
                  9,
                  [0,
                   branch1$0,
                   [0,
                    [0, lbl_handler$1],
                    [0,
                     0,
                     comp_expr
                      (stack_info$2,
                       add_var(id$1, sz + 1 | 0, env),
                       handler$0,
                       sz + 1 | 0,
                       aR)]]]],
               stack_info$1 =
                 [0,
                  [0, sz, stack_info$2[1]],
                  stack_info$2[2],
                  stack_info$2[3]],
               l = comp_expr(stack_info$1, env, body$3, sz + 4 | 0, body_cont);
              return [0, [28, lbl_handler$1], l];
             }
             var
              handler = exp[3],
              match$15 = exp[2],
              vars = match$15[2],
              i$3 = match$15[1],
              body$2 = exp[1],
              vars$0 =
                caml_call2(Stdlib_List[20], function(a){return a[1];}, vars),
              nvars = caml_call1(Stdlib_List[1], vars$0),
              match$16 = make_branch(cont),
              cont1$7 = match$16[2],
              branch1 = match$16[1];
             j:
             {
              if(1 === nvars){
               if(vars$0 && ! vars$0[2]){
                var
                 var$ = vars$0[1],
                 aP = add_pop(1, cont1$7),
                 match$17 =
                   label_code
                    ([0,
                      0,
                      comp_expr
                       (stack_info$2,
                        add_var(var$, sz + 1 | 0, env),
                        handler,
                        sz + 1 | 0,
                        aP)]),
                 cont2$1 = match$17[2],
                 lbl_handler = match$17[1],
                 stack_info =
                   push_static_raise(stack_info$2, i$3, lbl_handler, sz),
                 r =
                   comp_expr
                    (stack_info, env, body$2, sz, [0, branch1, cont2$1]);
                break j;
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, aB], 1);
              }
              var
               aQ = add_pop(nvars, cont1$7),
               match$18 =
                 label_code
                  (comp_expr
                    (stack_info$2,
                     add_vars(vars$0, sz + 1 | 0, env),
                     handler,
                     sz + nvars | 0,
                     aQ)),
               cont2$2 = match$18[2],
               lbl_handler$0 = match$18[1],
               stack_info$0 =
                 push_static_raise
                  (stack_info$2, i$3, lbl_handler$0, sz + nvars | 0),
               r =
                 push_dummies
                  (nvars,
                   comp_expr
                    (stack_info$0,
                     env,
                     body$2,
                     sz + nvars | 0,
                     add_pop(nvars, [0, branch1, cont2$2])));
             }
             return r;
            }
            var
             loc$2 = exp[3],
             args$8 = exp[2],
             kind = p[1],
             cont$16 = add_pseudo_event(loc$2, compunit_name[1], cont);
            if(! kind){
             if(0 === args$8) return [0, ax, cont$16];
             var
              V =
                [0,
                 [16, caml_call1(Stdlib_List[1], args$8), 0],
                 [0, ay, cont$16]];
             if(counter >= 50)
              return caml_trampoline_return
                      (comp_args$0, [0, stack_info$2, env, args$8, sz, V]);
             var counter$14 = counter + 1 | 0;
             return comp_args$0(counter$14, stack_info$2, env, args$8, sz, V);
            }
            if(3 <= kind){
             var T = [0, [17, caml_call1(Stdlib_List[1], args$8)], cont$16];
             if(counter >= 50)
              return caml_trampoline_return
                      (comp_args$0, [0, stack_info$2, env, args$8, sz, T]);
             var counter$12 = counter + 1 | 0;
             return comp_args$0(counter$12, stack_info$2, env, args$8, sz, T);
            }
            var U = [0, [16, caml_call1(Stdlib_List[1], args$8), 0], cont$16];
            if(counter >= 50)
             return caml_trampoline_return
                     (comp_args$0, [0, stack_info$2, env, args$8, sz, U]);
            var counter$13 = counter + 1 | 0;
            return comp_args$0(counter$13, stack_info$2, env, args$8, sz, U);
           }
           var args$7 = exp[2], cmp = p[1];
           switch(cmp){
             case 0:
              var cont$15 = [0, an, cont]; break;
             case 1:
              var cont$15 = [0, ao, cont]; break;
             case 2:
              var cont$15 = [0, ap, cont]; break;
             case 3:
              var cont$15 = [0, aq, [0, 8, cont]]; break;
             case 4:
              var cont$15 = [0, ar, cont]; break;
             case 5:
              var cont$15 = [0, as, [0, 8, cont]]; break;
             case 6:
              var cont$15 = [0, at, cont]; break;
             case 7:
              var cont$15 = [0, au, [0, 8, cont]]; break;
             case 8:
              var cont$15 = [0, av, cont]; break;
             default: var cont$15 = [0, aw, [0, 8, cont]];
           }
           if(counter >= 50)
            return caml_trampoline_return
                    (comp_args$0, [0, stack_info$2, env, args$7, sz, cont$15]);
           var counter$11 = counter + 1 | 0;
           return comp_args$0
                   (counter$11, stack_info$2, env, args$7, sz, cont$15);
          }
          var w = exp[2];
          if(! w) break d;
          var x = w[2];
          if(! x) break d;
          var k$0 = x[1];
          if(2 !== k$0[0]) break d;
          if(x[2]) break d;
          var
           arg$6 = w[1],
           c = p[1],
           p$0 = [13, caml_call1(Lambda[35], c)],
           args$6 = [0, k$0, [0, arg$6, 0]],
           nargs$4 = caml_call1(Stdlib_List[1], args$6) - 1 | 0,
           S =
             [0,
              comp_primitive
               (stack_info$2, p$0, (sz + nargs$4 | 0) - 1 | 0, args$6),
              cont];
          if(counter >= 50)
           return caml_trampoline_return
                   (comp_args$0, [0, stack_info$2, env, args$6, sz, S]);
          var counter$10 = counter + 1 | 0;
          return comp_args$0(counter$10, stack_info$2, env, args$6, sz, S);
         }
         var
          args$2 = exp[2],
          nargs$2 = caml_call1(Stdlib_List[1], args$2) - 1 | 0;
         if(3 !== nargs$2)
          throw caml_maybe_attach_backtrace([0, Assert_failure, al], 1);
         if(is_tailcall(cont)){
          check_stack(stack_info$2, 3);
          var H = [0, [36, sz + nargs$2 | 0], discard_dead_code(cont)];
          if(counter >= 50)
           return caml_trampoline_return
                   (comp_args$0, [0, stack_info$2, env, args$2, sz, H]);
          var counter$5 = counter + 1 | 0;
          return comp_args$0(counter$5, stack_info$2, env, args$2, sz, H);
         }
         check_stack(stack_info$2, (sz + nargs$2 | 0) + 3 | 0);
         var I = [0, 28, cont];
         if(counter >= 50)
          return caml_trampoline_return
                  (comp_args$0, [0, stack_info$2, env, args$2, sz, I]);
         var counter$6 = counter + 1 | 0;
         return comp_args$0(counter$6, stack_info$2, env, args$2, sz, I);
        }
        var args$1 = exp[2], nargs$1 = caml_call1(Stdlib_List[1], args$1);
        if(3 !== nargs$1)
         throw caml_maybe_attach_backtrace([0, Assert_failure, ak], 1);
        if(is_tailcall(cont)){
         check_stack(stack_info$2, 3);
         var
          aj =
            [0,
             0,
             comp_args
              (stack_info$2,
               env,
               args$1,
               sz + 1 | 0,
               [0, [36, sz + nargs$1 | 0], discard_dead_code(cont)])];
         return [0, [15, Lambda[8]], aj];
        }
        check_stack(stack_info$2, (sz + nargs$1 | 0) + 3 | 0);
        var
         aI =
           [0,
            0,
            comp_args(stack_info$2, env, args$1, sz + 1 | 0, [0, 28, cont])];
        return [0, [15, Lambda[8]], aI];
       }
       var
        args$0 = exp[2],
        nargs$0 = caml_call1(Stdlib_List[1], args$0) - 1 | 0,
        G =
          [0,
           comp_primitive(stack_info$2, p, (sz + nargs$0 | 0) - 1 | 0, args$0),
           cont];
       if(counter >= 50)
        return caml_trampoline_return
                (comp_args$0, [0, stack_info$2, env, args$0, sz, G]);
       var counter$15 = counter + 1 | 0;
       return comp_args$0(counter$15, stack_info$2, env, args$0, sz, G);
      }
      var
       body$1 = exp[2],
       decl = exp[1],
       ndecl = caml_call1(Stdlib_List[1], decl),
       ag = caml_call1(Lambda[20], [7, decl, Lambda[10]]),
       fv$0 = caml_call1(Ident[6][10], ag),
       rec_idents =
         caml_call2
          (Stdlib_List[20],
           function(param){var id = param[1]; return id;},
           decl),
       entries$1 = closure_entries([0, rec_idents], fv$0),
       comp_fun =
         function(pos, param){
          if(! param) return 0;
          var
           rem = param[2],
           match = param[1][2],
           body = match[4],
           params = match[2],
           lbl = new_label(0),
           to_compile =
             [0,
              caml_call2(Stdlib_List[20], function(a){return a[1];}, params),
              body,
              lbl,
              entries$1,
              pos];
          caml_call2(Stdlib_Stack[3], to_compile, functions_to_compile);
          return [0, lbl, comp_fun(pos + 1 | 0, rem)];
         },
       lbls = comp_fun(0, decl),
       ah = add_pop(ndecl, cont),
       ai =
         comp_expr
          (stack_info$2,
           add_vars(rec_idents, sz + 1 | 0, env),
           body$1,
           sz + ndecl | 0,
           ah),
       E = [0, [11, lbls, caml_call1(Stdlib_List[1], fv$0)], ai],
       F = caml_call2(Stdlib_List[20], function(n){return [0, n];}, fv$0);
      if(counter >= 50)
       return caml_trampoline_return
               (comp_args$0, [0, stack_info$2, env, F, sz, E]);
      var counter$4 = counter + 1 | 0;
      return comp_args$0(counter$4, stack_info$2, env, F, sz, E);
     }
     var
      match$3 = exp[1],
      loc = match$3[6],
      body = match$3[4],
      params = match$3[2],
      cont$0 = add_pseudo_event(loc, compunit_name[1], cont),
      lbl$0 = new_label(0),
      ae = caml_call1(Lambda[20], exp),
      fv = caml_call1(Ident[6][10], ae),
      entries$0 = closure_entries(0, fv),
      to_compile =
        [0,
         caml_call2(Stdlib_List[20], function(a){return a[1];}, params),
         body,
         lbl$0,
         entries$0,
         0];
     caml_call2(Stdlib_Stack[3], to_compile, functions_to_compile);
     var
      C = [0, [10, lbl$0, caml_call1(Stdlib_List[1], fv)], cont$0],
      D = caml_call2(Stdlib_List[20], function(n){return [0, n];}, fv);
     if(counter >= 50)
      return caml_trampoline_return
              (comp_args$0, [0, stack_info$2, env, D, sz, C]);
     var counter$3 = counter + 1 | 0;
     return comp_args$0(counter$3, stack_info$2, env, D, sz, C);
    }
    var
     match$1 = exp[1],
     args = match$1[2],
     func = match$1[1],
     nargs = caml_call1(Stdlib_List[1], args);
    if(is_tailcall(cont)){
     var
      A =
        [0,
         0,
         comp_expr
          (stack_info$2,
           env,
           func,
           sz + nargs | 0,
           [0, [7, nargs, sz + nargs | 0], discard_dead_code(cont)])];
     if(counter >= 50)
      return caml_trampoline_return
              (comp_args$0, [0, stack_info$2, env, args, sz, A]);
     var counter$1 = counter + 1 | 0;
     return comp_args$0(counter$1, stack_info$2, env, args, sz, A);
    }
    if(4 <= nargs){
     var match$2 = label_code(cont), cont1 = match$2[2], lbl = match$2[1];
     return [0,
             [5, lbl],
             comp_args
              (stack_info$2,
               env,
               args,
               sz + 3 | 0,
               [0,
                0,
                comp_expr
                 (stack_info$2,
                  env,
                  func,
                  (sz + 3 | 0) + nargs | 0,
                  [0, [6, nargs], cont1])])];
    }
    var
     B =
       [0,
        0,
        comp_expr
         (stack_info$2, env, func, sz + nargs | 0, [0, [6, nargs], cont])];
    if(counter >= 50)
     return caml_trampoline_return
             (comp_args$0, [0, stack_info$2, env, args, sz, B]);
    var counter$2 = counter + 1 | 0;
    return comp_args$0(counter$2, stack_info$2, env, args, sz, B);
   }
   function comp_expr(stack_info, env, exp, sz, cont){
    return caml_trampoline(comp_expr$0(0, stack_info, env, exp, sz, cont));
   }
   function comp_args$0(counter, stack_info, env, argl, sz, cont){
    var a = caml_call1(Stdlib_List[10], argl);
    if(counter >= 50)
     return caml_trampoline_return
             (comp_expr_list$0, [0, stack_info, env, a, sz, cont]);
    var counter$0 = counter + 1 | 0;
    return comp_expr_list$0(counter$0, stack_info, env, a, sz, cont);
   }
   function comp_args(stack_info, env, argl, sz, cont){
    return caml_trampoline(comp_args$0(0, stack_info, env, argl, sz, cont));
   }
   function comp_expr_list$0(counter, stack_info, env, exprl, sz, cont){
    if(! exprl) return cont;
    var exp = exprl[1];
    if(exprl[2]){
     var
      rem = exprl[2],
      a = [0, 0, comp_expr_list(stack_info, env, rem, sz + 1 | 0, cont)];
     if(counter >= 50)
      return caml_trampoline_return
              (comp_expr$0, [0, stack_info, env, exp, sz, a]);
     var counter$0 = counter + 1 | 0;
     return comp_expr$0(counter$0, stack_info, env, exp, sz, a);
    }
    if(counter >= 50)
     return caml_trampoline_return
             (comp_expr$0, [0, stack_info, env, exp, sz, cont]);
    var counter$1 = counter + 1 | 0;
    return comp_expr$0(counter$1, stack_info, env, exp, sz, cont);
   }
   function comp_expr_list(stack_info, env, exprl, sz, cont){
    return caml_trampoline
            (comp_expr_list$0(0, stack_info, env, exprl, sz, cont));
   }
   function comp_expr_list_assign$0
   (counter, stack_info, env, exprl, sz, pos, cont){
    if(! exprl) return cont;
    var
     rem = exprl[2],
     exp = exprl[1],
     a =
       [0,
        [4, sz - pos | 0],
        comp_expr_list_assign(stack_info, env, rem, sz, pos - 1 | 0, cont)];
    if(counter >= 50)
     return caml_trampoline_return
             (comp_expr$0, [0, stack_info, env, exp, sz, a]);
    var counter$0 = counter + 1 | 0;
    return comp_expr$0(counter$0, stack_info, env, exp, sz, a);
   }
   function comp_expr_list_assign(stack_info, env, exprl, sz, pos, cont){
    return caml_trampoline
            (comp_expr_list_assign$0(0, stack_info, env, exprl, sz, pos, cont));
   }
   function comp_block(env, exp, sz, cont){
    var
     stack_info = [0, 0, 0, [0, 0]],
     code = comp_expr(stack_info, env, exp, sz, cont),
     used_safe = stack_info[3][1] + Config[39] | 0;
    return Config[38] < used_safe
            ? [0, [15, [0, [0, used_safe]]], [0, aI, code]]
            : code;
   }
   function reset(param){
    label_counter[1] = 0;
    compunit_name[1] = cst$0;
    return caml_call1(Stdlib_Stack[9], functions_to_compile);
   }
   function compile_gen(modulename, init_stack, expr){
    reset(0);
    if(modulename){var name = modulename[1]; compunit_name[1] = name;}
    return caml_call2
            (Stdlib_Fun[5],
             reset,
             function(param$0){
              var init_code = comp_block(empty_env, expr, init_stack, 0);
              if(0 >= caml_call1(Stdlib_Stack[12], functions_to_compile))
               return [0, init_code, 1];
              var
               lbl_init = new_label(0),
               cont$1 = [0, [0, lbl_init], init_code],
               c = [0, cont$1],
               b = 0;
              try{
               for(;;){
                var
                 cont$0 = c[1],
                 tc = caml_call1(Stdlib_Stack[4], functions_to_compile),
                 arity = caml_call1(Stdlib_List[1], tc[1]),
                 entries$0 = Ident[29],
                 ce_stack = entries$0,
                 pos = arity,
                 param = tc[1];
                for(;;){
                 if(! param) break;
                 var
                  rem = param[2],
                  id = param[1],
                  entries = caml_call3(Ident[30], id, pos, ce_stack),
                  pos$0 = pos - 1 | 0;
                 ce_stack = entries;
                 pos = pos$0;
                 param = rem;
                }
                var
                 env = [0, ce_stack, [0, tc[4], 3 * tc[5] | 0]],
                 cont = comp_block(env, tc[2], arity, [0, [8, arity], cont$0]),
                 a =
                   1 < arity
                    ? [0, 1, [0, [0, tc[3]], [0, [9, arity - 1 | 0], cont]]]
                    : [0, [0, tc[3]], cont];
                c[1] = a;
               }
              }
              catch(exn$0){
               var exn = caml_wrap_exception(exn$0);
               if(exn === Stdlib_Stack[1])
                return [0, [0, [22, lbl_init], c[1]], b];
               throw caml_maybe_attach_backtrace(exn, 0);
              }
             });
   }
   function compile_implementation(modulename, expr){return compile_gen([0, modulename], 0, expr)[1];
   }
   function compile_phrase(expr){return compile_gen(0, 1, expr);}
   var Bytegen = [0, compile_implementation, compile_phrase, merge_events];
   runtime.caml_register_global(151, Bytegen, "Bytegen");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Printinstr
//# unitInfo: Requires: Ident, Lambda, Printlambda, Stdlib__Array, Stdlib__Format, Stdlib__List
//# shape: Printinstr:[F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_addint = "\taddint",
    cst_andint = "\tandint",
    cst_asrint = "\tasrint",
    cst_boolnot = "\tboolnot",
    cst_check_signals = "\tcheck_signals",
    cst_closurerec = "\tclosurerec",
    cst_divint = "\tdivint",
    cst_eqint = "\teqint",
    cst_geint = "\tgeint",
    cst_getbyteschar = "\tgetbyteschar",
    cst_getdynmet = "\tgetdynmet",
    cst_getmethod = "\tgetmethod",
    cst_getstringchar = "\tgetstringchar",
    cst_getvectitem = "\tgetvectitem",
    cst_gtint = "\tgtint",
    cst_isint = "\tisint",
    cst_isout = "\tisout",
    cst_leint = "\tleint",
    cst_lslint = "\tlslint",
    cst_lsrint = "\tlsrint",
    cst_ltint = "\tltint",
    cst_modint = "\tmodint",
    cst_mulint = "\tmulint",
    cst_negint = "\tnegint",
    cst_neqint = "\tneqint",
    cst_orint = "\torint",
    cst_perform = "\tperform",
    cst_poptrap = "\tpoptrap",
    cst_push = "\tpush",
    cst_restart = "\trestart",
    cst_resume = "\tresume",
    cst_setbyteschar = "\tsetbyteschar",
    cst_setvectitem = "\tsetvectitem",
    cst_stop = "\tstop",
    cst_subint = "\tsubint",
    cst_vectlength = "\tvectlength",
    cst_xorint = "\txorint",
    cst$0 = ", ",
    cst_10 = "<10>",
    cst_v_0 = "<v 0>",
    cst = "@ ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Ident = global_data.Ident,
    Printlambda = global_data.Printlambda,
    Lambda = global_data.Lambda,
    a = [0, [11, cst_push, 0], cst_push],
    b = [0, [11, cst_restart, 0], cst_restart],
    c = [0, [11, cst_vectlength, 0], cst_vectlength],
    d = [0, [11, cst_getvectitem, 0], cst_getvectitem],
    e = [0, [11, cst_setvectitem, 0], cst_setvectitem],
    f = [0, [11, cst_getstringchar, 0], cst_getstringchar],
    g = [0, [11, cst_getbyteschar, 0], cst_getbyteschar],
    h = [0, [11, cst_setbyteschar, 0], cst_setbyteschar],
    i = [0, [11, cst_boolnot, 0], cst_boolnot],
    j = [0, [11, cst_poptrap, 0], cst_poptrap],
    k = [0, [11, cst_check_signals, 0], cst_check_signals],
    l = [0, [11, cst_negint, 0], cst_negint],
    m = [0, [11, cst_addint, 0], cst_addint],
    n = [0, [11, cst_subint, 0], cst_subint],
    o = [0, [11, cst_mulint, 0], cst_mulint],
    p = [0, [11, cst_divint, 0], cst_divint],
    q = [0, [11, cst_modint, 0], cst_modint],
    r = [0, [11, cst_andint, 0], cst_andint],
    s = [0, [11, cst_orint, 0], cst_orint],
    t = [0, [11, cst_xorint, 0], cst_xorint],
    u = [0, [11, cst_lslint, 0], cst_lslint],
    v = [0, [11, cst_lsrint, 0], cst_lsrint],
    w = [0, [11, cst_asrint, 0], cst_asrint],
    x = [0, [11, cst_isint, 0], cst_isint],
    y = [0, [11, cst_isout, 0], cst_isout],
    z = [0, [11, cst_getmethod, 0], cst_getmethod],
    A = [0, [11, cst_getdynmet, 0], cst_getdynmet],
    B = [0, [11, cst_perform, 0], cst_perform],
    C = [0, [11, cst_resume, 0], cst_resume],
    D = [0, [11, cst_stop, 0], cst_stop],
    E = [0, [12, 76, [4, 3, 0, 0, [12, 58, 0]]], "L%i:"],
    F = [0, [11, "\tacc ", [4, 3, 0, 0, 0]], "\tacc %i"],
    G = [0, [11, "\tenvacc ", [4, 3, 0, 0, 0]], "\tenvacc %i"],
    H = [0, [11, "\tpop ", [4, 3, 0, 0, 0]], "\tpop %i"],
    I = [0, [11, "\tassign ", [4, 3, 0, 0, 0]], "\tassign %i"],
    J = [0, [11, "\tpush_retaddr L", [4, 3, 0, 0, 0]], "\tpush_retaddr L%i"],
    K = [0, [11, "\tapply ", [4, 3, 0, 0, 0]], "\tapply %i"],
    L =
      [0,
       [11, "\tappterm ", [4, 3, 0, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tappterm %i, %i"],
    M = [0, [11, "\treturn ", [4, 3, 0, 0, 0]], "\treturn %i"],
    N = [0, [11, "\tgrab ", [4, 3, 0, 0, 0]], "\tgrab %i"],
    O =
      [0,
       [11, "\tclosure L", [4, 3, 0, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tclosure L%i, %i"],
    P = [0, [11, cst_closurerec, 0], cst_closurerec],
    Q = [0, [12, 32, [4, 3, 0, 0, 0]], " %i"],
    R = [0, [11, cst$0, [4, 3, 0, 0, 0]], ", %i"],
    S = [0, [11, "\toffsetclosure ", [4, 3, 0, 0, 0]], "\toffsetclosure %i"],
    T = [0, [11, "\tgetglobal ", [15, 0]], "\tgetglobal %a"],
    U = [0, [11, "\tsetglobal ", [15, 0]], "\tsetglobal %a"],
    V =
      [0,
       [18,
        [1, [0, [11, cst_10, 0], cst_10]],
        [11, "\tconst", [17, [0, cst, 1, 0], [15, [17, 0, 0]]]]],
       "@[<10>\tconst@ %a@]"],
    W =
      [0,
       [11, "\tmakeblock ", [4, 3, 0, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tmakeblock %i, %i"],
    X = [0, [11, "\tmakefloatblock ", [4, 3, 0, 0, 0]], "\tmakefloatblock %i"],
    Y = [0, [11, "\tgetfield ", [4, 3, 0, 0, 0]], "\tgetfield %i"],
    Z = [0, [11, "\tsetfield ", [4, 3, 0, 0, 0]], "\tsetfield %i"],
    _ = [0, [11, "\tgetfloatfield ", [4, 3, 0, 0, 0]], "\tgetfloatfield %i"],
    $ = [0, [11, "\tsetfloatfield ", [4, 3, 0, 0, 0]], "\tsetfloatfield %i"],
    aa = [0, [11, "\tbranch L", [4, 3, 0, 0, 0]], "\tbranch L%i"],
    ab = [0, [11, "\tbranchif L", [4, 3, 0, 0, 0]], "\tbranchif L%i"],
    ac = [0, [11, "\tbranchifnot L", [4, 3, 0, 0, 0]], "\tbranchifnot L%i"],
    ad =
      [0, [11, "\tstrictbranchif L", [4, 3, 0, 0, 0]], "\tstrictbranchif L%i"],
    ae =
      [0,
       [11, "\tstrictbranchifnot L", [4, 3, 0, 0, 0]],
       "\tstrictbranchifnot L%i"],
    af = [0, [17, [0, cst, 1, 0], [4, 3, 0, 0, 0]], "@ %i"],
    ag =
      [0,
       [18,
        [1, [0, [11, cst_10, 0], cst_10]],
        [11, "\tswitch", [15, [12, 47, [15, [17, 0, 0]]]]]],
       "@[<10>\tswitch%a/%a@]"],
    ah = [0, [11, "\tpushtrap L", [4, 3, 0, 0, 0]], "\tpushtrap L%i"],
    ai = [0, [12, 9, [2, 0, 0]], "\t%s"],
    aj =
      [0,
       [11, "\tccall ", [2, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tccall %s, %i"],
    ak = [0, [11, cst_eqint, 0], cst_eqint],
    al = [0, [11, cst_neqint, 0], cst_neqint],
    am = [0, [11, cst_ltint, 0], cst_ltint],
    an = [0, [11, cst_gtint, 0], cst_gtint],
    ao = [0, [11, cst_leint, 0], cst_leint],
    ap = [0, [11, cst_geint, 0], cst_geint],
    aq = [0, [11, "\toffsetint ", [4, 3, 0, 0, 0]], "\toffsetint %i"],
    ar = [0, [11, "\toffsetref ", [4, 3, 0, 0, 0]], "\toffsetref %i"],
    as = [0, [11, "\tgetpubmet ", [4, 3, 0, 0, 0]], "\tgetpubmet %i"],
    at =
      [0,
       [11,
        '\tevent "',
        [2, 0, [11, '" ', [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]]],
       '\tevent "%s" %i-%i'],
    au = [0, [11, "\tresumeterm ", [4, 3, 0, 0, 0]], "\tresumeterm %i"],
    av = [0, [11, "\treperformterm ", [4, 3, 0, 0, 0]], "\treperformterm %i"],
    aw = [0, [15, [17, [0, cst, 1, 0], [15, 0]]], "%a@ %a"],
    ax = [0, [12, 76, [4, 3, 0, 0, [12, 58, [15, 0]]]], "L%i:%a"],
    ay =
      [0,
       [18, [1, [0, [11, cst_v_0, 0], cst_v_0]], [15, [17, 0, 0]]],
       "@[<v 0>%a@]"];
   function instruction(ppf, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return caml_call2(Stdlib_Format[143], ppf, a);
       case 1:
        return caml_call2(Stdlib_Format[143], ppf, b);
       case 2:
        return caml_call2(Stdlib_Format[143], ppf, c);
       case 3:
        return caml_call2(Stdlib_Format[143], ppf, d);
       case 4:
        return caml_call2(Stdlib_Format[143], ppf, e);
       case 5:
        return caml_call2(Stdlib_Format[143], ppf, f);
       case 6:
        return caml_call2(Stdlib_Format[143], ppf, g);
       case 7:
        return caml_call2(Stdlib_Format[143], ppf, h);
       case 8:
        return caml_call2(Stdlib_Format[143], ppf, i);
       case 9:
        return caml_call2(Stdlib_Format[143], ppf, j);
       case 10:
        return caml_call2(Stdlib_Format[143], ppf, k);
       case 11:
        return caml_call2(Stdlib_Format[143], ppf, l);
       case 12:
        return caml_call2(Stdlib_Format[143], ppf, m);
       case 13:
        return caml_call2(Stdlib_Format[143], ppf, n);
       case 14:
        return caml_call2(Stdlib_Format[143], ppf, o);
       case 15:
        return caml_call2(Stdlib_Format[143], ppf, p);
       case 16:
        return caml_call2(Stdlib_Format[143], ppf, q);
       case 17:
        return caml_call2(Stdlib_Format[143], ppf, r);
       case 18:
        return caml_call2(Stdlib_Format[143], ppf, s);
       case 19:
        return caml_call2(Stdlib_Format[143], ppf, t);
       case 20:
        return caml_call2(Stdlib_Format[143], ppf, u);
       case 21:
        return caml_call2(Stdlib_Format[143], ppf, v);
       case 22:
        return caml_call2(Stdlib_Format[143], ppf, w);
       case 23:
        return caml_call2(Stdlib_Format[143], ppf, x);
       case 24:
        return caml_call2(Stdlib_Format[143], ppf, y);
       case 25:
        return caml_call2(Stdlib_Format[143], ppf, z);
       case 26:
        return caml_call2(Stdlib_Format[143], ppf, A);
       case 27:
        return caml_call2(Stdlib_Format[143], ppf, B);
       case 28:
        return caml_call2(Stdlib_Format[143], ppf, C);
       default: return caml_call2(Stdlib_Format[143], ppf, D);
     }
    switch(param[0]){
      case 0:
       var lbl = param[1]; return caml_call3(Stdlib_Format[143], ppf, E, lbl);
      case 1:
       var n$0 = param[1]; return caml_call3(Stdlib_Format[143], ppf, F, n$0);
      case 2:
       var n$1 = param[1]; return caml_call3(Stdlib_Format[143], ppf, G, n$1);
      case 3:
       var n$2 = param[1]; return caml_call3(Stdlib_Format[143], ppf, H, n$2);
      case 4:
       var n$3 = param[1]; return caml_call3(Stdlib_Format[143], ppf, I, n$3);
      case 5:
       var lbl$0 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, J, lbl$0);
      case 6:
       var n$4 = param[1]; return caml_call3(Stdlib_Format[143], ppf, K, n$4);
      case 7:
       var m$0 = param[2], n$5 = param[1];
       return caml_call4(Stdlib_Format[143], ppf, L, n$5, m$0);
      case 8:
       var n$6 = param[1]; return caml_call3(Stdlib_Format[143], ppf, M, n$6);
      case 9:
       var n$7 = param[1]; return caml_call3(Stdlib_Format[143], ppf, N, n$7);
      case 10:
       var n$8 = param[2], lbl$1 = param[1];
       return caml_call4(Stdlib_Format[143], ppf, O, lbl$1, n$8);
      case 11:
       var n$9 = param[2], lbls = param[1];
       caml_call2(Stdlib_Format[143], ppf, P);
       caml_call2
        (Stdlib_List[18],
         function(lbl){return caml_call3(Stdlib_Format[143], ppf, Q, lbl);},
         lbls);
       return caml_call3(Stdlib_Format[143], ppf, R, n$9);
      case 12:
       var n$10 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, S, n$10);
      case 13:
       var id = param[1];
       return caml_call4(Stdlib_Format[143], ppf, T, Ident[5], id);
      case 14:
       var id$0 = param[1];
       return caml_call4(Stdlib_Format[143], ppf, U, Ident[5], id$0);
      case 15:
       var cst = param[1];
       return caml_call4(Stdlib_Format[143], ppf, V, Printlambda[3], cst);
      case 16:
       var m$1 = param[2], n$11 = param[1];
       return caml_call4(Stdlib_Format[143], ppf, W, n$11, m$1);
      case 17:
       var n$12 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, X, n$12);
      case 18:
       var n$13 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, Y, n$13);
      case 19:
       var n$14 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, Z, n$14);
      case 20:
       var n$15 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, _, n$15);
      case 21:
       var n$16 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, $, n$16);
      case 22:
       var lbl$2 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, aa, lbl$2);
      case 23:
       var lbl$3 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, ab, lbl$3);
      case 24:
       var lbl$4 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, ac, lbl$4);
      case 25:
       var lbl$5 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, ad, lbl$5);
      case 26:
       var lbl$6 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, ae, lbl$6);
      case 27:
       var
        blocks = param[2],
        consts = param[1],
        labels =
          function(ppf, labs){
           return caml_call2
                   (Stdlib_Array[12],
                    function(lbl){
                     return caml_call3(Stdlib_Format[143], ppf, af, lbl);
                    },
                    labs);
          };
       return caml_call6
               (Stdlib_Format[143], ppf, ag, labels, consts, labels, blocks);
      case 28:
       var lbl$7 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, ah, lbl$7);
      case 29:
       var k$0 = param[1], aw = caml_call1(Lambda[47], k$0);
       return caml_call3(Stdlib_Format[143], ppf, ai, aw);
      case 30:
       var n$17 = param[2], s$0 = param[1];
       return caml_call4(Stdlib_Format[143], ppf, aj, s$0, n$17);
      case 31:
       switch(param[1]){
         case 0:
          return caml_call2(Stdlib_Format[143], ppf, ak);
         case 1:
          return caml_call2(Stdlib_Format[143], ppf, al);
         case 2:
          return caml_call2(Stdlib_Format[143], ppf, am);
         case 3:
          return caml_call2(Stdlib_Format[143], ppf, an);
         case 4:
          return caml_call2(Stdlib_Format[143], ppf, ao);
         default: return caml_call2(Stdlib_Format[143], ppf, ap);
       }
      case 32:
       var n$18 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, aq, n$18);
      case 33:
       var n$19 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, ar, n$19);
      case 34:
       var n$20 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, as, n$20);
      case 35:
       var ev = param[1];
       return caml_call5
               (Stdlib_Format[143],
                ppf,
                at,
                ev[3][1][1],
                ev[3][1][4],
                ev[3][2][4]);
      case 36:
       var n$21 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, au, n$21);
      default:
       var n$22 = param[1];
       return caml_call3(Stdlib_Format[143], ppf, av, n$22);
    }
   }
   function instruction_list(ppf, param){
    if(! param) return 0;
    var instr = param[1];
    if(typeof instr !== "number" && 0 === instr[0]){
     var il$0 = param[2], lbl = instr[1];
     return caml_call5
             (Stdlib_Format[143], ppf, ax, lbl, instruction_list, il$0);
    }
    var il = param[2];
    return caml_call6
            (Stdlib_Format[143],
             ppf,
             aw,
             instruction,
             instr,
             instruction_list,
             il);
   }
   function instrlist(ppf, il){
    return caml_call4(Stdlib_Format[143], ppf, ay, instruction_list, il);
   }
   var Printinstr = [0, instruction, instrlist];
   runtime.caml_register_global(85, Printinstr, "Printinstr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Emitcode
//# unitInfo: Requires: Btype, Bytegen, Clflags, Compression, Config, Env, Format_doc, Ident, Instruct, Lambda, Location, Misc, Opcodes, Primitive, Stdlib, Stdlib__Array, Stdlib__Bigarray, Stdlib__Filename, Stdlib__Fun, Stdlib__List, Stdlib__Marshal, Stdlib__Out_channel, Stdlib__Sys, Symtable, Translmod, Unit_info
//# shape: Emitcode:[F(4),F(1),F(2),F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bytecomp_emitcode_ml = "bytecomp/emitcode.ml",
    caml_array_make = runtime.caml_array_make,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_sub = runtime.caml_ba_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Opcodes = global_data.Opcodes,
    Lambda = global_data.Lambda,
    Stdlib_Out_channel = global_data.Stdlib__Out_channel,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Ident = global_data.Ident,
    Config = global_data.Config,
    Stdlib = global_data.Stdlib,
    Clflags = global_data.Clflags,
    Unit_info = global_data.Unit_info,
    Location = global_data.Location,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Misc = global_data.Misc,
    Compression = global_data.Compression,
    Translmod = global_data.Translmod,
    Primitive = global_data.Primitive,
    Env = global_data.Env,
    Btype = global_data.Btype,
    Bytegen = global_data.Bytegen,
    Stdlib_Array = global_data.Stdlib__Array,
    Assert_failure = global_data.Assert_failure,
    Symtable = global_data.Symtable,
    Instruct = global_data.Instruct,
    Format_doc = global_data.Format_doc,
    Stdlib_Marshal = global_data.Stdlib__Marshal,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Error = [248, "Emitcode.Error", caml_fresh_oo_id(0)],
    a = [0, 2, 0],
    b =
      [0,
       [11,
        "Generated ",
        [2,
         0,
         [12, 32, [3, 0, [11, " cannot be used on a 32-bit platform", 0]]]]],
       "Generated %s %S cannot be used on a 32-bit platform"];
   function marshal_to_channel_with_possib(filename, kind, outchan, obj){
    try{
     var
      b = Clflags[27][1] ? a : 0,
      c = caml_call3(Stdlib_Marshal[1], outchan, obj, b);
     return c;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[7])
      throw caml_maybe_attach_backtrace
             ([0, Error, [0, [0, filename, kind]]], 1);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function report_error(ppf, param){
    var kind = param[2], file = param[1];
    return caml_call4(Format_doc[9], ppf, b, kind, file);
   }
   caml_call1
    (Location[55],
     function(param){
      var tag = param[1];
      if(tag !== Error) return 0;
      var info = param[2][1];
      return [0, caml_call2(Location[54], report_error, info)];
     });
   var
    create_bigarray =
      caml_call2(Stdlib_Bigarray[20][1], 12, Stdlib_Bigarray[16]);
   function copy_bigarray(src, dst, size){
    var a = caml_ba_sub(dst, 0, size);
    runtime.caml_ba_blit(caml_ba_sub(src, 0, size), a);
   }
   var
    out_buffer = [0, caml_call1(create_bigarray, 0)],
    out_position = [0, 0];
   function out_word(b1, b2, b3, b4){
    var p = out_position[1];
    if(caml_ba_dim_1(out_buffer[1]) <= (p + 3 | 0)){
     var
      needed = p + 3 | 0,
      size = caml_ba_dim_1(out_buffer[1]),
      new_size = [0, caml_call2(Stdlib[17], size, 16)];
     for(;;){
      if(new_size[1] > needed){
       var new_buffer = caml_call1(create_bigarray, new_size[1]);
       copy_bigarray(out_buffer[1], new_buffer, size);
       out_buffer[1] = new_buffer;
       break;
      }
      new_size[1] = 2 * new_size[1] | 0;
     }
    }
    caml_ba_set_1(out_buffer[1], p, b1);
    caml_ba_set_1(out_buffer[1], p + 1 | 0, b2);
    caml_ba_set_1(out_buffer[1], p + 2 | 0, b3);
    caml_ba_set_1(out_buffer[1], p + 3 | 0, b4);
    out_position[1] = p + 4 | 0;
    return 0;
   }
   function out(opcode){return out_word(opcode, 0, 0, 0);}
   var
    AsInt = [248, "Emitcode.AsInt", caml_fresh_oo_id(0)],
    cst_Emitcode_const_as_int = "Emitcode.const_as_int";
   function const_as_int(param){
    if(0 === param[0]){
     var match = param[1];
     if(match[0] < 2){var i = match[1]; return i;}
    }
    throw caml_maybe_attach_backtrace(AsInt, 1);
   }
   function is_immed(i){
    var a = Instruct[1] <= i ? 1 : 0, b = a ? i <= Instruct[2] ? 1 : 0 : a;
    return b;
   }
   function is_immed_const(k){
    try{var a = is_immed(const_as_int(k)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === AsInt) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function out_int(n){return out_word(n, n >> 8, n >> 16, n >> 24);}
   function out_const(c){
    try{out_int(const_as_int(c)); return;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === AsInt) return caml_call1(Misc[1], cst_Emitcode_const_as_int);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var label_table = [0, [0]], c = [1, 0];
   function extend_label_table(needed){
    var
     size = label_table[1].length - 1,
     new_size = [0, caml_call2(Stdlib[17], size, 16)];
    for(;;){
     if(new_size[1] > needed){
      var new_table = caml_array_make(new_size[1], c);
      caml_call5
       (Stdlib_Array[9],
        label_table[1],
        0,
        new_table,
        0,
        label_table[1].length - 1);
      label_table[1] = new_table;
      return;
     }
     new_size[1] = 2 * new_size[1] | 0;
    }
   }
   function backpatch(param){
    var
     orig = param[2],
     pos = param[1],
     displ = (out_position[1] - orig | 0) >> 2;
    caml_ba_set_1(out_buffer[1], pos, displ);
    caml_ba_set_1(out_buffer[1], pos + 1 | 0, displ >> 8);
    caml_ba_set_1(out_buffer[1], pos + 2 | 0, displ >> 16);
    return caml_ba_set_1(out_buffer[1], pos + 3 | 0, displ >> 24);
   }
   function out_label_with_orig(orig, lbl){
    if(label_table[1].length - 1 <= lbl) extend_label_table(lbl);
    var match = caml_check_bound(label_table[1], lbl)[lbl + 1];
    if(0 === match[0]){
     var def = match[1];
     return out_int((def - orig | 0) >> 2);
    }
    var
     patchlist = match[1],
     a = [1, [0, [0, out_position[1], orig], patchlist]];
    caml_check_bound(label_table[1], lbl)[lbl + 1] = a;
    return out_int(0);
   }
   function out_label(l){return out_label_with_orig(out_position[1], l);}
   var reloc_info = [0, 0], d = [0, cst_bytecomp_emitcode_ml, 168, 9];
   function enter(info){
    reloc_info[1] = [0, [0, info, out_position[1]], reloc_info[1]];
   }
   function slot_for_literal(sc){
    enter([0, caml_call1(Symtable[13], sc)]);
    return out_int(0);
   }
   function slot_for_getglobal(id){
    var name = caml_call1(Ident[16], id);
    if(caml_call1(Ident[24], id))
     var reloc_info = [2, name];
    else{
     if(! caml_call1(Ident[23], id))
      throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
     var reloc_info = [1, name];
    }
    enter(reloc_info);
    return out_int(0);
   }
   function slot_for_c_prim(name){enter([4, name]); return out_int(0);}
   var
    events = [0, 0],
    debug_dirs = [0, Misc[14][4][64][1]],
    cst_Emitcode_define_label = "Emitcode.define_label",
    e = [0, cst_bytecomp_emitcode_ml, 176, 9],
    f = [1, 0],
    cst_bytecode_unit = "bytecode unit";
   function clear(param){
    out_position[1] = 0;
    label_table[1] = [0];
    reloc_info[1] = 0;
    debug_dirs[1] = Misc[14][4][64][1];
    events[1] = 0;
    out_buffer[1] = caml_call1(create_bigarray, 0);
    return 0;
   }
   function init(param){
    clear(0);
    label_table[1] = caml_array_make(16, f);
    out_buffer[1] = caml_call1(create_bigarray, 1024);
   }
   function emit_branch_comp(param){
    switch(param){
      case 0:
       return out(Opcodes[132]);
      case 1:
       return out(Opcodes[133]);
      case 2:
       return out(Opcodes[134]);
      case 3:
       return out(Opcodes[136]);
      case 4:
       return out(Opcodes[135]);
      default: return out(Opcodes[137]);
    }
   }
   function emit_instr(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return out(Opcodes[10]);
       case 1:
        return out(Opcodes[42]);
       case 2:
        return out(Opcodes[80]);
       case 3:
        return out(Opcodes[81]);
       case 4:
        return out(Opcodes[82]);
       case 5:
        return out(Opcodes[149]);
       case 6:
        return out(Opcodes[83]);
       case 7:
        return out(Opcodes[84]);
       case 8:
        return out(Opcodes[89]);
       case 9:
        return out(Opcodes[91]);
       case 10:
        return out(Opcodes[93]);
       case 11:
        return out(Opcodes[110]);
       case 12:
        return out(Opcodes[111]);
       case 13:
        return out(Opcodes[112]);
       case 14:
        return out(Opcodes[113]);
       case 15:
        return out(Opcodes[114]);
       case 16:
        return out(Opcodes[115]);
       case 17:
        return out(Opcodes[116]);
       case 18:
        return out(Opcodes[117]);
       case 19:
        return out(Opcodes[118]);
       case 20:
        return out(Opcodes[119]);
       case 21:
        return out(Opcodes[120]);
       case 22:
        return out(Opcodes[121]);
       case 23:
        return out(Opcodes[130]);
       case 24:
        return out(Opcodes[138]);
       case 25:
        return out(Opcodes[131]);
       case 26:
        return out(Opcodes[143]);
       case 27:
        return out(Opcodes[150]);
       case 28:
        return out(Opcodes[151]);
       default: return out(Opcodes[144]);
     }
    switch(param[0]){
      case 0:
       var lbl = param[1];
       if(label_table[1].length - 1 <= lbl) extend_label_table(lbl);
       var match = caml_check_bound(label_table[1], lbl)[lbl + 1];
       if(0 === match[0])
        return caml_call1(Misc[1], cst_Emitcode_define_label);
       var patchlist = match[1];
       caml_call2(Stdlib_List[18], backpatch, patchlist);
       var a = [0, out_position[1]];
       caml_check_bound(label_table[1], lbl)[lbl + 1] = a;
       return;
      case 1:
       var n = param[1];
       return 8 <= n ? (out(Opcodes[9]), out_int(n)) : out(Opcodes[1] + n | 0);
      case 2:
       var n$0 = param[1];
       if(1 <= n$0 && 4 >= n$0) return out((Opcodes[22] + n$0 | 0) - 1 | 0);
       out(Opcodes[26]);
       return out_int(n$0);
      case 3:
       var n$1 = param[1]; out(Opcodes[20]); return out_int(n$1);
      case 4:
       var n$2 = param[1]; out(Opcodes[21]); return out_int(n$2);
      case 5:
       var lbl$0 = param[1]; out(Opcodes[32]); return out_label(lbl$0);
      case 6:
       var n$3 = param[1];
       return 4 <= n$3
               ? (out(Opcodes[33]), out_int(n$3))
               : out((Opcodes[34] + n$3 | 0) - 1 | 0);
      case 7:
       var sz = param[2], n$4 = param[1];
       return 4 <= n$4
               ? (out(Opcodes[37]), out_int(n$4), out_int(sz))
               : (out((Opcodes[38] + n$4 | 0) - 1 | 0), out_int(sz));
      case 8:
       var n$5 = param[1]; out(Opcodes[41]); return out_int(n$5);
      case 9:
       var n$6 = param[1]; out(Opcodes[43]); return out_int(n$6);
      case 10:
       var n$7 = param[2], lbl$1 = param[1];
       out(Opcodes[44]);
       out_int(n$7);
       return out_label(lbl$1);
      case 11:
       var n$8 = param[2], lbls = param[1];
       out(Opcodes[45]);
       out_int(caml_call1(Stdlib_List[1], lbls));
       out_int(n$8);
       var org = out_position[1];
       return caml_call2
               (Stdlib_List[18],
                function(a){return out_label_with_orig(org, a);},
                lbls);
      case 12:
       var ofs = param[1];
       if(-3 !== ofs && 0 !== ofs && 3 !== ofs){out(Opcodes[49]); return out_int(ofs);}
       return out(Opcodes[47] + (ofs / 3 | 0) | 0);
      case 13:
       var q = param[1]; out(Opcodes[54]); return slot_for_getglobal(q);
      case 14:
       var id = param[1];
       out(Opcodes[58]);
       var name = caml_call1(Ident[16], id);
       if(! caml_call1(Ident[19], id))
        throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
       var reloc_info = [3, name];
       enter(reloc_info);
       return out_int(0);
      case 15:
       var sc = param[1];
       switch(sc[0]){
         case 0:
          var match$0 = sc[1];
          switch(match$0[0]){
            case 0:
             var i = match$0[1];
             if(is_immed(i)){
              if(0 <= i && 3 >= i) return out(Opcodes[100] + i | 0);
              out(Opcodes[104]);
              return out_int(i);
             }
             break;
            case 1:
             var c = match$0[1]; out(Opcodes[104]); return out_int(c);
          }
          break;
         case 1:
          if(! sc[2]){
           var t = sc[1];
           return 0 === t ? out(Opcodes[59]) : (out(Opcodes[60]), out_int(t));
          }
          break;
       }
       out(Opcodes[54]);
       return slot_for_literal(sc);
      case 16:
       var t$0 = param[2], n$9 = param[1];
       return 0 === n$9
               ? 0
                 === t$0
                 ? out(Opcodes[59])
                 : (out(Opcodes[60]), out_int(t$0))
               : 4
                 <= n$9
                 ? (out(Opcodes[63]), out_int(n$9), out_int(t$0))
                 : (out((Opcodes[64] + n$9 | 0) - 1 | 0), out_int(t$0));
      case 17:
       var n$10 = param[1];
       return 0 === n$10
               ? out(Opcodes[59])
               : (out(Opcodes[67]), out_int(n$10));
      case 18:
       var n$11 = param[1];
       return 4 <= n$11
               ? (out(Opcodes[72]), out_int(n$11))
               : out(Opcodes[68] + n$11 | 0);
      case 19:
       var n$12 = param[1];
       return 4 <= n$12
               ? (out(Opcodes[78]), out_int(n$12))
               : out(Opcodes[74] + n$12 | 0);
      case 20:
       var n$13 = param[1]; out(Opcodes[73]); return out_int(n$13);
      case 21:
       var n$14 = param[1]; out(Opcodes[79]); return out_int(n$14);
      case 22:
       var lbl$2 = param[1]; out(Opcodes[85]); return out_label(lbl$2);
      case 27:
       var tbl_block = param[2], tbl_const = param[1];
       out(Opcodes[88]);
       out_int(tbl_const.length - 1 + (tbl_block.length - 1 << 16) | 0);
       var org$0 = out_position[1];
       caml_call2
        (Stdlib_Array[12],
         function(a){return out_label_with_orig(org$0, a);},
         tbl_const);
       return caml_call2
               (Stdlib_Array[12],
                function(a){return out_label_with_orig(org$0, a);},
                tbl_block);
      case 28:
       var lbl$5 = param[1]; out(Opcodes[90]); return out_label(lbl$5);
      case 29:
       switch(param[1]){
         case 0:
          return out(Opcodes[92]);
         case 1:
          return out(Opcodes[147]);
         default: return out(Opcodes[148]);
       }
      case 30:
       var n$15 = param[2], name$0 = param[1];
       return 5 < n$15
               ? (out(Opcodes[99]), out_int(n$15), slot_for_c_prim(name$0))
               : (out
                  ((Opcodes[94] + n$15 | 0) - 1 | 0),
                 slot_for_c_prim(name$0));
      case 31:
       var c$0 = param[1];
       switch(c$0){
         case 0:
          return out(Opcodes[122]);
         case 1:
          return out(Opcodes[123]);
         case 2:
          return out(Opcodes[124]);
         case 3:
          return out(Opcodes[126]);
         case 4:
          return out(Opcodes[125]);
         default: return out(Opcodes[127]);
       }
      case 32:
       var n$16 = param[1]; out(Opcodes[128]); return out_int(n$16);
      case 33:
       var n$17 = param[1]; out(Opcodes[129]); return out_int(n$17);
      case 34:
       var tag = param[1]; out(Opcodes[142]); out_int(tag); return out_int(0);
      case 35:
       var
        ev = param[1],
        path = ev[3][1][1],
        abspath = caml_call1(Location[21], path),
        b = debug_dirs[1],
        d = caml_call1(Stdlib_Filename[14], abspath);
       debug_dirs[1] = caml_call2(Misc[14][4][64][2], d, b);
       if(caml_call1(Stdlib_Filename[5], path)){
        var f = runtime.caml_sys_getcwd(0), cwd = caml_call1(Location[18], f);
        debug_dirs[1] = caml_call2(Misc[14][4][64][2], cwd, debug_dirs[1]);
       }
       ev[1] = out_position[1];
       events[1] = [0, ev, events[1]];
       return;
      case 36:
       var n$18 = param[1]; out(Opcodes[152]); return out_int(n$18);
      case 37:
       var n$19 = param[1]; out(Opcodes[153]); return out_int(n$19);
      case 23:
      case 25:
       var lbl$3 = param[1]; out(Opcodes[86]); return out_label(lbl$3);
      default:
       var lbl$4 = param[1]; out(Opcodes[87]); return out_label(lbl$4);
    }
   }
   function remerge_events(ev1, c){
    if(c){
     var match = c[1];
     if(typeof match !== "number" && 35 === match[0]){
      var c$0 = c[2], ev2 = match[1];
      return [0, [35, Bytegen[3].call(null, ev1, ev2)], c$0];
     }
    }
    return [0, [35, ev1], c];
   }
   function emit(param$0){
    var param = param$0;
    for(;;){
     if(! param) return;
     var instr = param[1];
     if(typeof instr === "number"){
      if(0 === instr){
       var a = param[2];
       if(a){
        var match = a[1];
        if(typeof match !== "number")
         a:
         switch(match[0]){
           case 1:
            var n = match[1];
            if(0 === n){
             var g = a[2];
             if(g){
              var match$0 = g[1];
              if(typeof match$0 !== "number" && 8 === match$0[0]){
               var c$1 = g[2], m = match$0[1];
               param = [0, [8, m - 1 | 0], c$1];
               continue;
              }
             }
            }
            var c$0 = a[2];
            if(8 <= n){out(Opcodes[19]); out_int(n); param = c$0; continue;}
            out(Opcodes[11] + n | 0);
            param = c$0;
            continue;
           case 2:
            var c$2 = a[2], n$0 = match[1];
            if(1 <= n$0 && 4 > n$0){
             out((Opcodes[27] + n$0 | 0) - 1 | 0);
             param = c$2;
             continue;
            }
            out(Opcodes[31]);
            out_int(n$0);
            param = c$2;
            continue;
           case 12:
            var c$3 = a[2], ofs = match[1];
            if(-3 !== ofs && 0 !== ofs && 3 !== ofs){
             out(Opcodes[53]);
             out_int(ofs);
             param = c$3;
             continue;
            }
            out(Opcodes[51] + (ofs / 3 | 0) | 0);
            param = c$3;
            continue;
           case 13:
            var id = match[1], h = a[2];
            if(h){
             var match$1 = h[1];
             if(typeof match$1 !== "number" && 18 === match$1[0]){
              var c$5 = h[2], n$1 = match$1[1];
              out(Opcodes[57]);
              slot_for_getglobal(id);
              out_int(n$1);
              param = c$5;
              continue;
             }
            }
            var c$4 = a[2];
            out(Opcodes[55]);
            slot_for_getglobal(id);
            param = c$4;
            continue;
           case 15:
            var sc = match[1], b = a[2];
            if(b){
             var d = b[1];
             if(typeof d === "number"){
              if(24 === d){
               var e = b[2];
               if(e){
                var match$3 = e[1];
                if(typeof match$3 !== "number")
                 switch(match$3[0]){
                   case 23:
                    var rem = e[2], lbl = match$3[1];
                    if(is_immed_const(sc)){
                     out(Opcodes[140]);
                     out_const(sc);
                     out_label(lbl);
                     param = rem;
                     continue;
                    }
                    break;
                   case 24:
                    var rem$0 = e[2], lbl$0 = match$3[1];
                    if(is_immed_const(sc)){
                     out(Opcodes[141]);
                     out_const(sc);
                     out_label(lbl$0);
                     param = rem$0;
                     continue;
                    }
                    break;
                 }
               }
              }
             }
             else if(31 === d[0]){
              var f = b[2];
              if(f){
               var match$4 = f[1], c$8 = d[1];
               if(typeof match$4 !== "number")
                switch(match$4[0]){
                  case 23:
                   var rem$1 = f[2], lbl$1 = match$4[1];
                   if(is_immed_const(sc)){
                    emit_branch_comp(c$8);
                    out_const(sc);
                    out_label(lbl$1);
                    param = rem$1;
                    continue;
                   }
                   break;
                  case 24:
                   var rem$2 = f[2], lbl$2 = match$4[1];
                   if(is_immed_const(sc)){
                    emit_branch_comp(caml_call1(Lambda[34], c$8));
                    out_const(sc);
                    out_label(lbl$2);
                    param = rem$2;
                    continue;
                   }
                   break;
                }
              }
             }
            }
            var c$6 = a[2];
            switch(sc[0]){
              case 0:
               var match$2 = sc[1];
               switch(match$2[0]){
                 case 0:
                  var i = match$2[1];
                  if(is_immed(i)){
                   if(0 <= i && 3 >= i){
                    out(Opcodes[105] + i | 0);
                    param = c$6;
                    continue;
                   }
                   out(Opcodes[109]);
                   out_int(i);
                   param = c$6;
                   continue;
                  }
                  break;
                 case 1:
                  var c$7 = match$2[1];
                  out(Opcodes[109]);
                  out_int(c$7);
                  param = c$6;
                  continue;
               }
               break;
              case 1:
               if(! sc[2]){
                var t = sc[1];
                if(0 === t){out(Opcodes[61]); param = c$6; continue;}
                out(Opcodes[62]);
                out_int(t);
                param = c$6;
                continue;
               }
               break;
            }
            out(Opcodes[55]);
            slot_for_literal(sc);
            param = c$6;
            continue;
           case 35:
            var ev = match[1], k = ev[4];
            if(typeof k === "number" && ! k){
             var match$5 = a[2];
             if(match$5){
              var instr1 = match$5[1];
              if(typeof instr1 !== "number"){
               switch(instr1[0]){
                 case 13:
                  var match$6 = match$5[2];
                  if(match$6){
                   var instr2 = match$6[1];
                   if(typeof instr2 !== "number" && 18 === instr2[0]){
                    var c$10 = match$6[2];
                    param =
                     [0, 0, [0, instr1, [0, instr2, remerge_events(ev, c$10)]]];
                    continue;
                   }
                  }
                  break;
                 case 1:
                 case 2:
                 case 12:
                 case 15: break;
                 default: break a;
               }
               var c$9 = match$5[2];
               param = [0, 0, [0, instr1, remerge_events(ev, c$9)]];
               continue;
              }
             }
            }
            break;
         }
       }
      }
     }
     else if(13 === instr[0]){
      var j = param[2];
      if(j){
       var match$7 = j[1];
       if(typeof match$7 !== "number" && 18 === match$7[0]){
        var c$11 = j[2], n$2 = match$7[1], id$0 = instr[1];
        out(Opcodes[56]);
        slot_for_getglobal(id$0);
        out_int(n$2);
        param = c$11;
        continue;
       }
      }
     }
     var c = param[2];
     emit_instr(instr);
     param = c;
    }
   }
   function to_file(outchan, artifact_info, required_globals, code){
    init(0);
    return caml_call2
            (Stdlib_Fun[5],
             clear,
             function(param){
              caml_call2(Stdlib[66], outchan, Config[26]);
              var pos_depl = caml_call1(Stdlib[74], outchan);
              caml_call2(Stdlib[71], outchan, 0);
              var pos_code = caml_call1(Stdlib[74], outchan);
              emit(code);
              caml_call4
               (Stdlib_Out_channel[17],
                outchan,
                out_buffer[1],
                0,
                out_position[1]);
              if(Clflags[20][1]){
               var
                filename = caml_call1(Unit_info[13][3], artifact_info),
                a = debug_dirs[1],
                b = caml_call1(Location[21], filename),
                c = caml_call1(Stdlib_Filename[14], b);
               debug_dirs[1] = caml_call2(Misc[14][4][64][2], c, a);
               var p = caml_call1(Stdlib[74], outchan);
               caml_call2(Compression[1], outchan, events[1]);
               var d = caml_call1(Misc[14][4][64][10], debug_dirs[1]);
               caml_call2(Compression[1], outchan, d);
               var
                size_debug = caml_call1(Stdlib[74], outchan) - p | 0,
                pos_debug = p;
              }
              else
               var size_debug = 0, pos_debug = 0;
              var
               e = Clflags[24][1],
               f = caml_call2(Stdlib_List[20], Primitive[6], Translmod[11][1]),
               g = caml_call1(Ident[6][10], required_globals),
               h =
                 caml_call2
                  (Stdlib_List[20],
                   function(id){return caml_call1(Ident[16], id);},
                   g),
               i = caml_call1(Env[124], 0),
               j = caml_call1(Stdlib_List[10], reloc_info[1]),
               k = out_position[1],
               compunit =
                 [0,
                  caml_call1(Unit_info[13][4], artifact_info),
                  pos_code,
                  k,
                  j,
                  i,
                  h,
                  f,
                  e,
                  pos_debug,
                  size_debug],
               pos_compunit = caml_call1(Stdlib[74], outchan);
              caml_call1(Btype[51], 0);
              marshal_to_channel_with_possib
               (caml_call1(Unit_info[13][3], artifact_info),
                cst_bytecode_unit,
                outchan,
                compunit);
              caml_call2(Stdlib[73], outchan, pos_depl);
              return caml_call2(Stdlib[71], outchan, pos_compunit);
             });
   }
   function to_memory(instrs){
    init(0);
    return caml_call2
            (Stdlib_Fun[5],
             clear,
             function(param){
              emit(instrs);
              var code = caml_call1(create_bigarray, out_position[1]);
              copy_bigarray(out_buffer[1], code, out_position[1]);
              var
               reloc = caml_call1(Stdlib_List[10], reloc_info[1]),
               events$0 = events[1];
              return [0, code, reloc, events$0];
             });
   }
   function to_packed_file(outchan, code){
    init(0);
    return caml_call2
            (Stdlib_Fun[5],
             clear,
             function(param){
              emit(code);
              caml_call4
               (Stdlib_Out_channel[17],
                outchan,
                out_buffer[1],
                0,
                out_position[1]);
              var
               reloc = caml_call1(Stdlib_List[10], reloc_info[1]),
               events$0 = events[1],
               debug_dirs$0 = debug_dirs[1],
               size = out_position[1];
              return [0, size, reloc, events$0, debug_dirs$0];
             });
   }
   var
    Emitcode =
      [0, to_file, to_memory, to_packed_file, marshal_to_channel_with_possib];
   runtime.caml_register_global(37, Emitcode, "Emitcode");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytelink
//# unitInfo: Requires: Bytesections, Ccomp, Clflags, Compression, Config, Consistbl, Dll, Emitcode, Format_doc, Linkdeps, Load_path, Location, Misc, Opcodes, Stdlib, Stdlib__Bigarray, Stdlib__Filename, Stdlib__In_channel, Stdlib__List, Stdlib__Marshal, Stdlib__Option, Stdlib__Out_channel, Stdlib__Printf, Stdlib__Set, Stdlib__String, Stdlib__Sys, Symtable
//# shape: Bytelink:[[F(2)*],N,F(2),F(1),F(2),F(3),F(1),N,N,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = "",
    cst_ifdef_cplusplus_endif$1 = "\n#ifdef __cplusplus\n}\n#endif\n",
    cst$15 = "#!",
    cst$14 = ", ",
    cst_lcamlrun$1 = "-lcamlrun",
    cst_c$4 = ".c",
    cst_hov = "<hov>",
    cst$12 = "@ ",
    cst_Error_while_building_custo =
      "Error while building custom runtime system",
    cst_camlprim$1 = "camlprim",
    cst_sh = "sh",
    cst_stdlib_cma$1 = "stdlib.cma",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_output_value_to_string = runtime.caml_output_value_to_string,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$9 = cst$13,
    cst$10 = cst$13,
    cst$11 = cst$13,
    stable_name = [0, "camlobj.c"],
    cst$8 = cst$13,
    cst$7 = " ",
    cst$5 = "\n};\n",
    cst$6 = "\n};\n\n",
    cst$4 = "\n",
    header = "runtime-launch-info",
    cst$1 = cst$13,
    cst$3 = cst$13,
    cst$2 = cst$13,
    cst = ")",
    cst$0 = "(",
    Location = global_data.Location,
    Format_doc = global_data.Format_doc,
    Misc = global_data.Misc,
    Symtable = global_data.Symtable,
    Linkdeps = global_data.Linkdeps,
    Stdlib_List = global_data.Stdlib__List,
    Clflags = global_data.Clflags,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ccomp = global_data.Ccomp,
    Config = global_data.Config,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_String = global_data.Stdlib__String,
    Opcodes = global_data.Opcodes,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Bytesections = global_data.Bytesections,
    Stdlib_Out_channel = global_data.Stdlib__Out_channel,
    Dll = global_data.Dll,
    Load_path = global_data.Load_path,
    Emitcode = global_data.Emitcode,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_In_channel = global_data.Stdlib__In_channel,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Compression = global_data.Compression,
    Stdlib_Set = global_data.Stdlib__Set,
    Consistbl = global_data.Consistbl,
    compare = runtime.caml_compare,
    Dep = [0, compare],
    DepSet = caml_call1(Stdlib_Set[1], Dep),
    Error = [248, "Bytelink.Error", runtime.caml_fresh_oo_id(0)],
    lib_ccobjs = [0, 0],
    lib_ccopts = [0, 0],
    lib_dllibs = [0, 0],
    cst_CAMLORIGIN = "$CAMLORIGIN";
   function linkdeps_unit(ldeps, filename, compunit){
    var
     a = compunit[6],
     b = caml_call1(Symtable[22], compunit[4]),
     c = caml_call2(Stdlib[37], b, a),
     requires =
       caml_call1
        (caml_call1(Stdlib_List[20], function(param){return param;}), c),
     provides =
       caml_call2
        (Stdlib_List[23],
         function(param){
          var rel = param[1];
          return 3 === rel[0] ? [0, rel[1]] : 0;
         },
         compunit[4]);
    return caml_call5
            (Linkdeps[2], ldeps, filename, compunit[1], provides, requires);
   }
   function scan_file(ldeps, obj_name, tolink){
    try{var file_name = caml_call1(Load_path[10], obj_name);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Error, [0, obj_name]], 1);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var ic = caml_call1(Stdlib[80], file_name);
    try{
     var
      buffer = caml_call2(Stdlib[86], ic, caml_ml_string_length(Config[26]));
     if(buffer === Config[26]){
      var compunit_pos = caml_call1(Stdlib[88], ic);
      caml_call2(Stdlib[90], ic, compunit_pos);
      var compunit = caml_call1(Stdlib[89], ic);
      caml_call1(Stdlib[93], ic);
      linkdeps_unit(ldeps, obj_name, compunit);
      var b = [0, [0, file_name, compunit], tolink];
     }
     else{
      if(buffer !== Config[27])
       throw caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1);
      var pos_toc = caml_call1(Stdlib[88], ic);
      caml_call2(Stdlib[90], ic, pos_toc);
      var toc = caml_call1(Stdlib[89], ic);
      caml_call1(Stdlib[93], ic);
      var origin = caml_call1(Stdlib_Filename[14], file_name);
      if(1 - Clflags[62][1]){
       var
        a = 0 === caml_ml_string_length(Clflags[52][1]) ? 1 : 0,
        c = a ? 0 === caml_ml_string_length(Clflags[51][1]) ? 1 : 0 : a;
       if(c){
        if(toc[2]) Clflags[25][1] = 1;
        lib_ccobjs[1] = caml_call2(Stdlib[37], toc[3], lib_ccobjs[1]);
        var
         replace_origin = caml_call2(Misc[40], cst_CAMLORIGIN, origin),
         d = lib_ccopts[1],
         e = caml_call2(Stdlib_List[20], replace_origin, toc[4]);
        lib_ccopts[1] = caml_call2(Stdlib[37], e, d);
       }
       lib_dllibs[1] = caml_call2(Stdlib[37], toc[5], lib_dllibs[1]);
      }
      var
       required =
         caml_call3
          (Stdlib_List[27],
           function(compunit, reqd){
            var match = compunit[1];
            if
             (!
              compunit[8]
              && ! Clflags[24][1] && ! caml_call2(Linkdeps[3], ldeps, match))
             return reqd;
            linkdeps_unit(ldeps, obj_name, compunit);
            return [0, compunit, reqd];
           },
           toc[1],
           0),
       b = [0, [1, file_name, required], tolink];
     }
     return b;
    }
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     if(x === Stdlib[12]){
      caml_call1(Stdlib[93], ic);
      throw caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1);
     }
     caml_call1(Stdlib[93], ic);
     throw caml_maybe_attach_backtrace(x, 0);
    }
   }
   var
    a = Misc[14][4],
    Consistbl$0 = caml_call1(Consistbl[1], [0, a[64], a[65], a[66], a[10]]),
    crc_interfaces = caml_call1(Consistbl$0[1], 0),
    interfaces = [0, 0];
   function check_consistency(file_name, cu){
    try{
     var
      a =
        caml_call2
         (Stdlib_List[18],
          function(param){
           var crco = param[2], name = param[1];
           interfaces[1] = [0, name, interfaces[1]];
           if(! crco) return 0;
           var crc = crco[1];
           return caml_call4
                   (Consistbl$0[3], crc_interfaces, name, crc, file_name);
          },
          cu[5]);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Consistbl$0[9]) throw caml_maybe_attach_backtrace(exn, 0);
     var auth = exn[4], user = exn[3], name = exn[2];
     throw caml_maybe_attach_backtrace([0, Error, [4, name, user, auth]], 1);
    }
   }
   function extract_crc_interfaces(param){
    return caml_call2(Consistbl$0[6], interfaces[1], crc_interfaces);
   }
   function clear_crc_interfaces(param){
    caml_call1(Consistbl$0[2], crc_interfaces);
    interfaces[1] = 0;
   }
   var
    debug_info = [0, 0],
    cst_corrupt_header = "corrupt header",
    cst_caml_bin_sh = "caml_bin_sh",
    b = [0, "-p", [0, "-v", [0, cst_sh, 0]]],
    cst_command = "command",
    c = [0, [11, "+ ", [2, 0, [12, 10, 0]]], "+ %s\n"],
    d = [0, [2, 0, [12, 0, 0]], "%s\0"],
    e = [0, [11, cst$15, [2, 0, [12, 10, 0]]], "#!%s\n"],
    f =
      [0,
       [11,
        cst$15,
        [2,
         0,
         [11, "\nexec ", [2, 0, [11, ' "$0" "$', [17, [2, 34], [12, 10, 0]]]]]]],
       '#!%s\nexec %s "$0" "$@"\n'],
    cst_ocamlrun = "ocamlrun",
    g = [0, 1, [0, 4, [0, 3, [0, 6, 0]]]],
    cst_bytecode_executable = "bytecode executable";
   function link_compunit
   (output_fun, currpos_fun, inchan, file_name, compunit){
    check_consistency(file_name, compunit);
    caml_call2(Stdlib[90], inchan, compunit[2]);
    var
     code_block =
       caml_call3
        (Stdlib_Bigarray[20][1], 12, Stdlib_Bigarray[16], compunit[3]);
    if
     (! caml_call4(Stdlib_In_channel[19], inchan, code_block, 0, compunit[3]))
     throw caml_maybe_attach_backtrace(Stdlib[12], 1);
    caml_call2(Symtable[5], code_block, compunit[4]);
    var a = Clflags[20][1], c = a ? 0 < compunit[9] ? 1 : 0 : a;
    if(c){
     caml_call2(Stdlib[90], inchan, compunit[9]);
     var
      debug_event_list = caml_call1(Compression[2], inchan),
      debug_dirs = caml_call1(Compression[2], inchan),
      d = caml_call1(Location[21], file_name),
      file_path = caml_call1(Stdlib_Filename[14], d),
      debug_dirs$0 =
        caml_call2(Stdlib_List[37], file_path, debug_dirs)
         ? debug_dirs
         : [0, file_path, debug_dirs],
      e = debug_info[1];
     debug_info[1] =
      [0, [0, caml_call1(currpos_fun, 0), debug_event_list, debug_dirs$0], e];
    }
    caml_call1(output_fun, code_block);
    var b = Clflags[24][1];
    return b ? caml_call2(Stdlib_List[18], Symtable[6], compunit[7]) : b;
   }
   function link_file(output_fun, currpos_fun, param){
    if(0 === param[0]){
     var
      compunit = param[2],
      file_name = param[1],
      inchan = caml_call1(Stdlib[80], file_name);
     try{
      link_compunit(output_fun, currpos_fun, inchan, file_name, compunit);
      var a = caml_call1(Stdlib[93], inchan);
      return a;
     }
     catch(x$0){
      var x = caml_wrap_exception(x$0), tag = x[1];
      if(tag === Symtable[30]){
       var msg = x[2];
       caml_call1(Stdlib[93], inchan);
       throw caml_maybe_attach_backtrace([0, Error, [3, file_name, msg]], 1);
      }
      caml_call1(Stdlib[93], inchan);
      throw caml_maybe_attach_backtrace(x, 0);
     }
    }
    var
     units_required = param[2],
     file_name$0 = param[1],
     inchan$0 = caml_call1(Stdlib[80], file_name$0);
    try{
     caml_call2
      (Stdlib_List[18],
       function(cu){
        var
         n = caml_call1(Symtable[1][1], cu[1]),
         a = caml_call2(Stdlib[28], n, cst),
         b = caml_call2(Stdlib[28], cst$0, a),
         name = caml_call2(Stdlib[28], file_name$0, b);
        try{
         var c = link_compunit(output_fun, currpos_fun, inchan$0, name, cu);
         return c;
        }
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0), tag = exn[1];
         if(tag !== Symtable[30]) throw caml_maybe_attach_backtrace(exn, 0);
         var msg = exn[2];
         throw caml_maybe_attach_backtrace([0, Error, [3, name, msg]], 1);
        }
       },
       units_required);
     var b = caml_call1(Stdlib[93], inchan$0);
     return b;
    }
    catch(x){
     var x$0 = caml_wrap_exception(x);
     caml_call1(Stdlib[93], inchan$0);
     throw caml_maybe_attach_backtrace(x$0, 0);
    }
   }
   function output_debug_info(oc){
    var a = caml_call1(Stdlib_List[1], debug_info[1]);
    caml_call2(Stdlib[71], oc, a);
    caml_call2
     (Stdlib_List[18],
      function(param){
       var debug_dirs = param[3], evl = param[2], ofs = param[1];
       caml_call2(Stdlib[71], oc, ofs);
       caml_call2(Stdlib[72], oc, evl);
       return caml_call2(Stdlib[72], oc, debug_dirs);
      },
      debug_info[1]);
    debug_info[1] = 0;
   }
   function invalid_for_shebang_line(path){
    function invalid_char(param){
     a:
     {
      if(11 <= param){if(32 !== param) break a;} else if(9 > param) break a;
      return 1;
     }
     return 0;
    }
    var a = 125 < caml_ml_string_length(path) ? 1 : 0;
    return a ? a : caml_call2(Stdlib_String[23], invalid_char, path);
   }
   function write_header(outchan){
    if(0 < caml_ml_string_length(Clflags[52][1])){
     var file = Clflags[52][1];
     if(caml_call1(Stdlib_Filename[5], file))
      var
       g = runtime.caml_sys_getcwd(0),
       h = caml_call2(Stdlib_Filename[4], g, file),
       a = caml_call1(Location[18], h);
     else
      var a = file;
     var runtime$0 = a, use_runtime = 1;
    }
    else
     var
      runtime$2 = caml_call2(Stdlib[28], cst_ocamlrun, Clflags[132][1]),
      runtime$0 = runtime$2,
      use_runtime = 0;
    try{
     var file$0 = caml_call1(Load_path[10], header);
     try{
      var
       buffer =
         caml_call2(Stdlib_In_channel[5], file$0, Stdlib_In_channel[14]);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag = exn[1];
      if(tag !== Stdlib[11]) throw caml_maybe_attach_backtrace(exn, 0);
      var msg = exn[2];
      throw caml_maybe_attach_backtrace([0, Error, [7, msg, file$0]], 1);
     }
     a:
     try{
      var
       bindir_start = caml_call2(Stdlib_String[36], buffer, 10) + 1 | 0,
       bindir_end = caml_call3(Stdlib_String[32], buffer, bindir_start, 0),
       bindir =
         caml_call3
          (Stdlib_String[16],
           buffer,
           bindir_start,
           bindir_end - bindir_start | 0),
       executable_offset = bindir_end + 2 | 0,
       kind = caml_call3(Stdlib_String[16], buffer, 0, bindir_start - 1 | 0);
      b:
      {
       if(kind !== "exe"){
        c:
        if(kind !== cst$13){
         if(47 !== caml_string_get(kind, 0) && kind !== cst_sh) break c;
         var launcher = [0, kind];
         break b;
        }
        throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       }
       var launcher = 1;
      }
      if
       (caml_ml_string_length(buffer) >= executable_offset
        && 10 === caml_string_get(buffer, executable_offset - 1 | 0))
       break a;
      throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     }
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      if(exn$0 === Stdlib[8])
       throw caml_maybe_attach_backtrace
              ([0, Error, [7, cst_corrupt_header, file$0]], 1);
      throw caml_maybe_attach_backtrace(exn$0, 0);
     }
    }
    catch(exn){
     var exn$2 = caml_wrap_exception(exn);
     if(exn$2 === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Error, [0, header]], 1);
     throw caml_maybe_attach_backtrace(exn$2, 0);
    }
    var
     runtime$1 =
       use_runtime
        ? runtime$0
        : Stdlib_Sys
           [7]
          ? runtime$0
          : caml_call2(Stdlib_Filename[4], bindir, runtime$0);
    a:
    if(1 === launcher)
     var launcher$0 = 1;
    else if(invalid_for_shebang_line(runtime$1))
     if(typeof launcher === "number")
      var launcher$0 = 1;
     else{
      var sh = launcher[1];
      if(sh === cst_sh){
       var
        output_file =
          caml_call3(Stdlib_Filename[16], 0, cst_caml_bin_sh, cst$1);
       try{
        var
         cmd =
           caml_call5
            (Stdlib_Filename[22], cst_command, 0, [0, output_file], 0, b);
        if(Clflags[45][1]) caml_call2(Stdlib_Printf[3], c, cmd);
        var
         i =
           0 === runtime.caml_sys_system_command(cmd)
            ? caml_call2(Stdlib_In_channel[6], output_file, Stdlib[83])
            : cst$3,
         result = i;
       }
       catch(exn){
        var exn$1 = caml_wrap_exception(exn);
        if(exn$1[1] === Stdlib[11])
         var result = cst$2;
        else{
         if(exn$1 !== Stdlib[12]) throw caml_maybe_attach_backtrace(exn$1, 0);
         var result = cst$2;
        }
       }
       caml_call1(Misc[19], output_file);
       var sh$0 = result;
      }
      else
       var sh$0 = sh;
      if(sh$0 !== cst$13 && ! invalid_for_shebang_line(sh$0)){var launcher$0 = [0, sh$0]; break a;}
      var launcher$0 = 1;
     }
    else
     var launcher$0 = 0;
    if(typeof launcher$0 !== "number"){
     var
      bin_sh = launcher$0[1],
      j = caml_call1(Stdlib_Filename[21], runtime$1);
     caml_call4(Stdlib_Printf[1], outchan, f, bin_sh, j);
     return caml_call1(Bytesections[2], outchan);
    }
    if(launcher$0){
     var len = caml_ml_string_length(buffer) - executable_offset | 0;
     caml_call4
      (Stdlib_Out_channel[16], outchan, buffer, executable_offset, len);
     var toc_writer = caml_call1(Bytesections[2], outchan);
     caml_call3(Stdlib_Printf[1], outchan, d, runtime$1);
     caml_call2(Bytesections[3], toc_writer, 7);
     return toc_writer;
    }
    caml_call3(Stdlib_Printf[1], outchan, e, runtime$1);
    return caml_call1(Bytesections[2], outchan);
   }
   function link_bytecode(final_name, tolink, exec_name, standalone){
    var final_name$0 = caml_call2(Stdlib_Option[3], final_name, exec_name);
    caml_call2
     (Stdlib_List[18],
      function(param){
       if(0 === param[0]){
        var file_name = param[1];
        if(file_name === exec_name)
         throw caml_maybe_attach_backtrace([0, Error, [2, exec_name]], 1);
       }
       return 0;
      },
      tolink);
    caml_call1(Misc[19], exec_name);
    var
     outperm = Clflags[133][1] ? 511 : 438,
     outchan = caml_call3(Stdlib[62], g, outperm, exec_name);
    return caml_call3
            (Misc[4],
             [0, function(param){return caml_call1(Stdlib[76], outchan);}],
             [0, function(param){return caml_call1(Misc[19], exec_name);}],
             function(param){
              a:
              {
               if(standalone && Clflags[133][1]){
                var toc_writer = write_header(outchan);
                break a;
               }
               var toc_writer = caml_call1(Bytesections[2], outchan);
              }
              var start_code = caml_call1(Stdlib[74], outchan);
              caml_call1(Symtable[4], 0);
              clear_crc_interfaces(0);
              var
               sharedobjs =
                 caml_call2(Stdlib_List[20], Dll[1], Clflags[10][1]),
               check_dlls =
                 standalone ? Config[56] === Config[55] ? 1 : 0 : standalone;
              if(check_dlls){
               caml_call1(Dll[8], Clflags[16][1]);
               var a = caml_call1(Load_path[8], 0);
               caml_call1(Dll[6], a);
               try{caml_call2(Dll[2], 0, sharedobjs);}
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0), tag = exn[1];
                if(tag !== Stdlib[7])
                 throw caml_maybe_attach_backtrace(exn, 0);
                var reason = exn[2];
                throw caml_maybe_attach_backtrace([0, Error, [6, reason]], 1);
               }
              }
              function output_fun(buf){
               var a = caml_ba_dim_1(buf);
               return caml_call4(Stdlib_Out_channel[17], outchan, buf, 0, a);
              }
              function currpos_fun(param){
               return caml_call1(Stdlib[74], outchan) - start_code | 0;
              }
              caml_call2
               (Stdlib_List[18],
                function(a){return link_file(output_fun, currpos_fun, a);},
                tolink);
              if(check_dlls) caml_call1(Dll[3], 0);
              caml_call2(Stdlib[70], outchan, Opcodes[144]);
              caml_call2(Stdlib[70], outchan, 0);
              caml_call2(Stdlib[70], outchan, 0);
              caml_call2(Stdlib[70], outchan, 0);
              caml_call2(Bytesections[3], toc_writer, 0);
              if(standalone){
               var b = caml_call1(Misc[27], Clflags[63][1]);
               caml_call2(Stdlib[66], outchan, b);
               caml_call2(Bytesections[3], toc_writer, 5);
               var c = caml_call1(Misc[27], sharedobjs);
               caml_call2(Stdlib[66], outchan, c);
               caml_call2(Bytesections[3], toc_writer, 4);
              }
              caml_call1(Symtable[9], outchan);
              caml_call2(Bytesections[3], toc_writer, 6);
              var d = caml_call1(Symtable[7], 0);
              Emitcode[4].call
               (null, final_name$0, cst_bytecode_executable, outchan, d);
              caml_call2(Bytesections[3], toc_writer, 2);
              caml_call1(Symtable[8], outchan);
              caml_call2(Bytesections[3], toc_writer, 8);
              var e = extract_crc_interfaces(0);
              caml_call2(Stdlib[72], outchan, e);
              caml_call2(Bytesections[3], toc_writer, 1);
              if(Clflags[20][1]){
               output_debug_info(outchan);
               caml_call2(Bytesections[3], toc_writer, 3);
              }
              return caml_call1(Bytesections[4], toc_writer);
             });
   }
   var
    output_code_string_counter = [0, 0],
    h =
      [0,
       [11,
        "0x",
        [4,
         6,
         [0, 2, 2],
         0,
         [4,
          6,
          [0, 2, 2],
          0,
          [4, 6, [0, 2, 2], 0, [4, 6, [0, 2, 2], 0, [11, cst$14, 0]]]]]],
       "0x%02x%02x%02x%02x, "],
    i = [0, [4, 0, 0, 0, [11, cst$14, 0]], "%d, "],
    j = [0, 1, [0, 4, [0, 3, [0, 6, 0]]]],
    cst_ifdef_cplusplus_extern_C_e =
      '#ifdef __cplusplus\nextern "C" {\n#endif\n\n#define CAML_INTERNALS\n#define CAMLDLLIMPORT\n#define CAML_INTERNALS_NO_PRIM_DECLARATIONS\n\n#include <caml/mlvalues.h>\n#include <caml/startup.h>\n#include <caml/sys.h>\n#include <caml/misc.h>\n\nstatic int caml_code[] = {\n',
    k = [0, [11, "\n0x", [4, 6, 0, 0, [11, "};\n", 0]]], "\n0x%x};\n"],
    cst_static_char_caml_data = "\nstatic char caml_data[] = {\n",
    cst_static_char_caml_sections = "\nstatic char caml_sections[] = {\n",
    cst_int_main_os_int_argc_char_ =
      "\nint main_os(int argc, char_os **argv)\n{\n  caml_byte_program_mode = COMPLETE_EXE;\n  caml_startup_code(caml_code, sizeof(caml_code),\n                    caml_data, sizeof(caml_data),\n                    caml_sections, sizeof(caml_sections),\n                    /* pooling */ 0,\n                    argv);\n  caml_do_exit(0);\n  return 0; /* not reached */\n}\n",
    cst_ifdef_cplusplus_endif = cst_ifdef_cplusplus_endif$1,
    cst_void_caml_startup_char_os_ =
      "\nvoid caml_startup(char_os ** argv)\n{\n  caml_startup_code(caml_code, sizeof(caml_code),\n                    caml_data, sizeof(caml_data),\n                    caml_sections, sizeof(caml_sections),\n                    /* pooling */ 0,\n                    argv);\n}\n\nvalue caml_startup_exn(char_os ** argv)\n{\n  return caml_startup_code_exn(caml_code, sizeof(caml_code),\n                               caml_data, sizeof(caml_data),\n                               caml_sections, sizeof(caml_sections),\n                               /* pooling */ 0,\n                               argv);\n}\n\nvoid caml_startup_pooled(char_os ** argv)\n{\n  caml_startup_code(caml_code, sizeof(caml_code),\n                    caml_data, sizeof(caml_data),\n                    caml_sections, sizeof(caml_sections),\n                    /* pooling */ 1,\n                    argv);\n}\n\nvalue caml_startup_pooled_exn(char_os ** argv)\n{\n  return caml_startup_code_exn(caml_code, sizeof(caml_code),\n                               caml_data, sizeof(caml_data),\n                               caml_sections, sizeof(caml_sections),\n                               /* pooling */ 1,\n                               argv);\n}\n",
    cst_cds = ".cds",
    cst_lcamlrun = cst_lcamlrun$1,
    cst_camlprim = cst_camlprim$1,
    cst_I = "-I",
    l = [0, "camlprim.c"],
    m = [0, 1, [0, 2, [0, 6, 0]]],
    cst_exe = ".exe",
    cst_c = cst_c$4,
    cst_c$0 = cst_c$4,
    cst_c$1 = cst_c$4,
    cst_lcamlrun$0 = cst_lcamlrun$1,
    cst_c$2 = cst_c$4,
    cst_camlobj = "camlobj",
    cst_camlcode = "camlcode",
    cst_camlprim_c = ".camlprim.c",
    cst_ifdef_cplusplus_extern_C_e$0 =
      '#ifdef __cplusplus\nextern "C" {\n#endif\n\n#define CAML_INTERNALS_NO_PRIM_DECLARATIONS\n#include <caml/mlvalues.h>\n\n',
    cst_ifdef_cplusplus_endif$0 = cst_ifdef_cplusplus_endif$1,
    cst_c$3 = cst_c$4,
    cst_camlprim$0 = cst_camlprim$1,
    n = [0, "std_exit.cmo", 0],
    cst_stdlib_cma = cst_stdlib_cma$1,
    cst_stdlib_cma$0 = cst_stdlib_cma$1,
    o =
      [0,
       [11, cst_Error_while_building_custo, 0],
       cst_Error_while_building_custo],
    p = [0, [11, "Cannot find file ", [15, 0]], "Cannot find file %a"],
    q =
      [0,
       [11, "The file ", [15, [11, " is not a bytecode object file", 0]]],
       "The file %a is not a bytecode object file"],
    r =
      [0,
       [11,
        "The output file ",
        [15,
         [11,
          " has the wrong name. The extension implies an object file but the link step was requested",
          0]]],
       "The output file %a has the wrong name. The extension implies an object file but the link step was requested"],
    s =
      [0,
       [11,
        "Error while linking ",
        [15, [12, 58, [17, [0, cst$12, 1, 0], [15, 0]]]]],
       "Error while linking %a:@ %a"],
    t =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         "Files ",
         [15,
          [17,
           [0, cst$12, 1, 0],
           [11,
            "and ",
            [15,
             [17,
              [0, cst$12, 1, 0],
              [11,
               "make inconsistent assumptions over interface ",
               [15, [17, 0, 0]]]]]]]]]],
       "@[<hov>Files %a@ and %a@ make inconsistent assumptions over interface %a@]"],
    u =
      [0,
       [11, "Cannot overwrite existing file ", [15, 0]],
       "Cannot overwrite existing file %a"],
    v =
      [0,
       [11, "Error on dynamically loaded library: ", [15, 0]],
       "Error on dynamically loaded library: %a"],
    w =
      [0,
       [11, "System error while copying file ", [15, [11, ": ", [15, 0]]]],
       "System error while copying file %a: %a"];
   function output_data_string(outchan, data){
    var counter = [0, 0], a = caml_ml_string_length(data) - 1 | 0, b = 0;
    if(a >= 0){
     var i$0 = b;
     for(;;){
      var c = caml_string_get(data, i$0);
      caml_call3(Stdlib_Printf[1], outchan, i, c);
      counter[1]++;
      if(12 <= counter[1]){
       caml_call2(Stdlib[66], outchan, cst$4);
       counter[1] = 0;
      }
      var d = i$0 + 1 | 0;
      if(a === i$0) break;
      i$0 = d;
     }
    }
   }
   function link_bytecode_as_c(tolink, outfile, with_main){
    var outchan$0 = caml_call1(Stdlib[60], outfile);
    caml_call3
     (Misc[4],
      [0, function(param){return caml_call1(Stdlib[76], outchan$0);}],
      [0, function(param){return caml_call1(Misc[19], outfile);}],
      function(param){
       caml_call2(Stdlib[66], outchan$0, cst_ifdef_cplusplus_extern_C_e);
       caml_call1(Symtable[4], 0);
       clear_crc_interfaces(0);
       var currpos = [0, 0];
       function output_fun(code){
        var pos = [0, 0], len = caml_ba_dim_1(code);
        for(;;){
         if(pos[1] >= len){
          var a = caml_ba_dim_1(code);
          currpos[1] = currpos[1] + a | 0;
          return 0;
         }
         var
          c1 = caml_ba_get_1(code, pos[1]),
          c2 = caml_ba_get_1(code, pos[1] + 1 | 0),
          c3 = caml_ba_get_1(code, pos[1] + 2 | 0),
          c4 = caml_ba_get_1(code, pos[1] + 3 | 0);
         pos[1] = pos[1] + 4 | 0;
         caml_call6(Stdlib_Printf[1], outchan$0, h, c4, c3, c2, c1);
         output_code_string_counter[1]++;
         if(6 <= output_code_string_counter[1]){
          caml_call2(Stdlib[65], outchan$0, 10);
          output_code_string_counter[1] = 0;
         }
        }
       }
       function currpos_fun(param){return currpos[1];}
       caml_call2
        (Stdlib_List[18],
         function(a){return link_file(output_fun, currpos_fun, a);},
         tolink);
       caml_call3(Stdlib_Printf[1], outchan$0, k, Opcodes[144]);
       caml_call2(Stdlib[66], outchan$0, cst_static_char_caml_data);
       output_data_string
        (outchan$0,
         caml_output_value_to_string(caml_call1(Symtable[7], 0), 0));
       caml_call2(Stdlib[66], outchan$0, cst$5);
       var
        a = extract_crc_interfaces(0),
        b = [0, caml_call1(Bytesections[1][2], 1), a],
        c = caml_call1(Symtable[11], 0),
        sections = [0, [0, caml_call1(Bytesections[1][2], 8), c], b];
       caml_call2(Stdlib[66], outchan$0, cst_static_char_caml_sections);
       output_data_string(outchan$0, caml_output_value_to_string(sections, 0));
       caml_call2(Stdlib[66], outchan$0, cst$6);
       caml_call1(Symtable[10], outchan$0);
       if(with_main)
        caml_call2(Stdlib[66], outchan$0, cst_int_main_os_int_argc_char_);
       else
        caml_call2(Stdlib[66], outchan$0, cst_void_caml_startup_char_os_);
       return caml_call2(Stdlib[66], outchan$0, cst_ifdef_cplusplus_endif);
      });
    var a = 1 - with_main, b = a ? Clflags[20][1] : a;
    if(! b) return b;
    var
     c = caml_call1(Stdlib_Filename[12], outfile),
     outfile$0 = caml_call2(Stdlib[28], c, cst_cds);
    caml_call1(Misc[19], outfile$0);
    var outchan = caml_call3(Stdlib[62], j, 511, outfile$0);
    return caml_call3
            (Misc[4],
             [0, function(param){return caml_call1(Stdlib[76], outchan);}],
             [0, function(param){return caml_call1(Misc[19], outfile$0);}],
             function(param){
              var toc_writer = caml_call1(Bytesections[2], outchan);
              caml_call1(Symtable[8], outchan);
              caml_call2(Bytesections[3], toc_writer, 8);
              output_debug_info(outchan);
              caml_call2(Bytesections[3], toc_writer, 3);
              return caml_call1(Bytesections[4], toc_writer);
             });
   }
   function build_custom_runtime(prim_name, exec_name){
    var
     runtime_lib =
       Clflags[133][1]
        ? caml_call2(Stdlib[28], cst_lcamlrun, Clflags[132][1])
        : cst$8,
     stable_name = Clflags[83][1] ? 0 : l,
     prims_obj = caml_call3(Stdlib_Filename[16], 0, cst_camlprim, Config[47]),
     a =
       0 === caml_call4(Ccomp[3], [0, prims_obj], 0, stable_name, prim_name)
        ? 1
        : 0;
    if(a)
     var
      b = caml_call2(Stdlib[28], cst$7, Config[13]),
      c = caml_call1(Clflags[127], cst_I),
      d = caml_call2(Stdlib[28], c, b),
      e = caml_call1(Stdlib_List[10], Clflags[9][1]),
      f = caml_call2(Stdlib[37], e, [0, runtime_lib, 0]),
      g = caml_call2(Stdlib[37], [0, prims_obj, 0], f),
      result = 0 === caml_call4(Ccomp[7], 0, exec_name, g, d) ? 1 : 0;
    else
     var result = a;
    caml_call1(Misc[19], prims_obj);
    return result;
   }
   function link(objfiles, output_name){
    a:
    {
     var a = Clflags[28][1], match = Clflags[30][1];
     if(Clflags[33][1])
      var objfiles$0 = objfiles;
     else{
      if(a && ! match){
       var objfiles$0 = [0, cst_stdlib_cma$0, objfiles];
       break a;
      }
      var
       objfiles$0 = caml_call2(Stdlib[37], [0, cst_stdlib_cma, objfiles], n);
     }
    }
    var
     ldeps = caml_call1(Linkdeps[1], 1),
     tolink =
       caml_call3
        (Stdlib_List[27],
         function(a, b){return scan_file(ldeps, a, b);},
         objfiles$0,
         0),
     match$0 = caml_call1(Linkdeps[4], ldeps);
    if(match$0){
     var e = match$0[1];
     throw caml_maybe_attach_backtrace([0, Error, [8, e]], 1);
    }
    var b = caml_call2(Stdlib[37], Clflags[9][1], lib_ccobjs[1]);
    Clflags[9][1] = b;
    var c = caml_call2(Stdlib[37], lib_ccopts[1], Clflags[31][1]);
    Clflags[31][1] = c;
    var d = caml_call2(Stdlib[37], lib_dllibs[1], Clflags[10][1]);
    Clflags[10][1] = d;
    if(! Clflags[25][1]) return link_bytecode(0, tolink, output_name, 1);
    if(! Clflags[28][1]){
     var
      bytecode_name = caml_call3(Stdlib_Filename[16], 0, cst_camlcode, cst$11),
      prim_name =
        Clflags[83][1]
         ? caml_call2(Stdlib[28], output_name, cst_camlprim_c)
         : caml_call3(Stdlib_Filename[16], 0, cst_camlprim$0, cst_c$3);
     return caml_call3
             (Misc[4],
              [0,
               function(param){
                caml_call1(Misc[19], bytecode_name);
                var a = 1 - Clflags[83][1];
                return a ? caml_call1(Misc[19], prim_name) : a;
               }],
              0,
              function(param){
               link_bytecode([0, output_name], tolink, bytecode_name, 0);
               var poc = caml_call1(Stdlib[60], prim_name);
               caml_call2(Stdlib[66], poc, cst_ifdef_cplusplus_extern_C_e$0);
               caml_call1(Symtable[10], poc);
               caml_call2(Stdlib[66], poc, cst_ifdef_cplusplus_endif$0);
               caml_call1(Stdlib[76], poc);
               var match = Stdlib_Sys[4];
               a:
               {
                if(match !== "Cygwin" && match !== "Win32"){var exec_name = output_name; break a;}
                var
                 exec_name =
                   caml_call2(Stdlib_String[15], output_name, 46)
                    ? output_name
                    : caml_call2(Stdlib[28], output_name, cst_exe);
               }
               if(1 - build_custom_runtime(prim_name, exec_name))
                throw caml_maybe_attach_backtrace([0, Error, 0], 1);
               var a = 1 - Clflags[60][1];
               if(! a) return a;
               var
                oc = caml_call3(Stdlib[62], m, 0, exec_name),
                ic = caml_call1(Stdlib[80], bytecode_name);
               caml_call2(Misc[22], ic, oc);
               caml_call1(Stdlib[93], ic);
               return caml_call1(Stdlib[76], oc);
              });
    }
    var basename = caml_call1(Stdlib_Filename[11], output_name);
    a:
    {
     if
      (Clflags[29][1] && ! caml_call2(Stdlib_Filename[7], output_name, cst_c)){
      var
       stable_name$0 = stable_name,
       c_file$0 = caml_call3(Stdlib_Filename[16], 0, cst_camlobj, cst_c$2);
      break a;
     }
     var c_file = caml_call2(Stdlib[28], basename, cst_c$0);
     if(runtime.caml_sys_file_exists(c_file))
      throw caml_maybe_attach_backtrace([0, Error, [5, c_file]], 1);
     var stable_name$0 = 0, c_file$0 = c_file;
    }
    if(Clflags[29][1])
     var
      f = Config[47],
      g = caml_call1(Stdlib_Filename[12], c_file$0),
      obj_file = caml_call2(Stdlib[28], g, f);
    else
     var obj_file = caml_call2(Stdlib[28], basename, Config[47]);
    var temps = [0, 0];
    return caml_call3
            (Misc[4],
             [0,
              function(param){
               return caml_call2(Stdlib_List[18], Misc[19], temps[1]);
              }],
             0,
             function(param){
              link_bytecode_as_c(tolink, c_file$0, Clflags[30][1]);
              if(Clflags[30][1]){
               temps[1] = [0, c_file$0, temps[1]];
               var b = 1 - build_custom_runtime(c_file$0, output_name);
               if(b) throw caml_maybe_attach_backtrace([0, Error, 0], 1);
               return b;
              }
              var
               c = 1 - caml_call2(Stdlib_Filename[7], output_name, cst_c$1);
              if(c){
               temps[1] = [0, c_file$0, temps[1]];
               if
                (0
                 !==
                  caml_call4
                   (Ccomp[3], [0, obj_file], 0, stable_name$0, c_file$0))
                throw caml_maybe_attach_backtrace([0, Error, 0], 1);
               var
                f =
                  1 - caml_call2(Stdlib_Filename[7], output_name, Config[47]),
                d = f || Clflags[29][1];
               if(d){
                temps[1] = [0, obj_file, temps[1]];
                if(caml_call2(Stdlib_Filename[7], output_name, Config[47]))
                 var c_libs = cst$9, mode = 3;
                else
                 var c_libs$0 = Config[13], c_libs = c_libs$0, mode = 2;
                var
                 runtime_lib =
                   Clflags[133][1]
                    ? caml_call2(Stdlib[28], cst_lcamlrun$0, Clflags[132][1])
                    : cst$10,
                 g = caml_call1(Stdlib_List[10], Clflags[9][1]),
                 h = caml_call2(Stdlib[37], g, [0, runtime_lib, 0]),
                 i = caml_call2(Stdlib[37], [0, obj_file, 0], h),
                 e =
                   1
                   -
                    (0 === caml_call4(Ccomp[7], mode, output_name, i, c_libs)
                      ? 1
                      : 0);
                if(e) throw caml_maybe_attach_backtrace([0, Error, 0], 1);
                var a = e;
               }
               else
                var a = d;
              }
              else
               var a = c;
              return a;
             });
   }
   function report_error_doc(ppf, param){
    if(typeof param === "number") return caml_call2(Format_doc[9], ppf, o);
    switch(param[0]){
      case 0:
       var name = param[1];
       return caml_call4(Format_doc[9], ppf, p, Location[27][3], name);
      case 1:
       var name$0 = param[1];
       return caml_call4(Format_doc[9], ppf, q, Location[27][3], name$0);
      case 2:
       var name$1 = param[1];
       return caml_call4(Format_doc[9], ppf, r, Misc[60][4], name$1);
      case 3:
       var err = param[2], name$2 = param[1];
       return caml_call6
               (Format_doc[9],
                ppf,
                s,
                Location[27][3],
                name$2,
                Symtable[32],
                err);
      case 4:
       var file2 = param[3], file1 = param[2], intf = param[1];
       return caml_call8
               (Format_doc[9],
                ppf,
                t,
                Location[27][3],
                file1,
                Location[27][3],
                file2,
                Misc[60][4],
                intf);
      case 5:
       var file = param[1];
       return caml_call4(Format_doc[9], ppf, u, Location[27][3], file);
      case 6:
       var file$0 = param[1];
       return caml_call4(Format_doc[9], ppf, v, Location[27][2], file$0);
      case 7:
       var header = param[2], msg = param[1];
       return caml_call6
               (Format_doc[9], ppf, w, Misc[60][4], header, Misc[60][4], msg);
      default:
       var e = param[1];
       return caml_call3(Linkdeps[6], Location[27][2], ppf, e);
    }
   }
   caml_call1
    (Location[55],
     function(param){
      var tag = param[1];
      if(tag !== Error) return 0;
      var err = param[2];
      return [0, caml_call2(Location[54], report_error_doc, err)];
     });
   var report_error = caml_call1(Format_doc[3], report_error_doc);
   function reset(param){
    lib_ccobjs[1] = 0;
    lib_ccopts[1] = 0;
    lib_dllibs[1] = 0;
    caml_call1(Consistbl$0[2], crc_interfaces);
    debug_info[1] = 0;
    output_code_string_counter[1] = 0;
    return 0;
   }
   var
    Bytelink =
      [0,
       Dep,
       DepSet,
       link,
       reset,
       check_consistency,
       linkdeps_unit,
       extract_crc_interfaces,
       Error,
       report_error,
       report_error_doc];
   runtime.caml_register_global(102, Bytelink, "Bytelink");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytelibrarian
//# unitInfo: Requires: Bytelink, Clflags, Config, Emitcode, Format_doc, Linkdeps, Load_path, Location, Misc, Stdlib, Stdlib__List
//# shape: Bytelibrarian:[F(2),N,N,F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Location = global_data.Location,
    Misc = global_data.Misc,
    Format_doc = global_data.Format_doc,
    Linkdeps = global_data.Linkdeps,
    Stdlib = global_data.Stdlib,
    Bytelink = global_data.Bytelink,
    Config = global_data.Config,
    Stdlib_List = global_data.Stdlib__List,
    Clflags = global_data.Clflags,
    Emitcode = global_data.Emitcode,
    Load_path = global_data.Load_path,
    Error = [248, "Bytelibrarian.Error", runtime.caml_fresh_oo_id(0)];
   function copy_compunit(ic, oc, compunit){
    caml_call2(Stdlib[90], ic, compunit[2]);
    compunit[2] = caml_call1(Stdlib[74], oc);
    var b = compunit[8], c = b || Clflags[24][1];
    compunit[8] = c;
    caml_call3(Misc[23], ic, oc, compunit[3]);
    var a = 0 < compunit[9] ? 1 : 0;
    return a
            ? (caml_call2
               (Stdlib[90], ic, compunit[9]),
              compunit[9] = caml_call1(Stdlib[74], oc),
              caml_call3(Misc[23], ic, oc, compunit[10]))
            : a;
   }
   var
    lib_ccobjs = [0, 0],
    lib_ccopts = [0, 0],
    lib_dllibs = [0, 0],
    cst_bytecode_library = "bytecode library",
    a = [0, [11, "Cannot find file ", [15, 0]], "Cannot find file %a"],
    b =
      [0,
       [11, "The file ", [15, [11, " is not a bytecode object file", 0]]],
       "The file %a is not a bytecode object file"];
   function copy_object_file(oc, name){
    try{var file_name = caml_call1(Load_path[10], name);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Error, [0, name]], 1);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var ic = caml_call1(Stdlib[80], file_name);
    try{
     var
      buffer =
        caml_call2(Stdlib[86], ic, runtime.caml_ml_string_length(Config[26]));
     if(buffer === Config[26]){
      var compunit_pos = caml_call1(Stdlib[88], ic);
      caml_call2(Stdlib[90], ic, compunit_pos);
      var compunit = caml_call1(Stdlib[89], ic);
      Bytelink[5].call(null, file_name, compunit);
      copy_compunit(ic, oc, compunit);
      caml_call1(Stdlib[93], ic);
      var a = [0, [0, name, compunit], 0];
     }
     else{
      if(buffer !== Config[27])
       throw caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1);
      var toc_pos = caml_call1(Stdlib[88], ic);
      caml_call2(Stdlib[90], ic, toc_pos);
      var toc = caml_call1(Stdlib[89], ic), b = Bytelink[5];
      caml_call2
       (Stdlib_List[18], function(a){return b(file_name, a);}, toc[1]);
      if(1 - Clflags[62][1]){
       if(toc[2]) Clflags[25][1] = 1;
       lib_ccobjs[1] = caml_call2(Stdlib[37], lib_ccobjs[1], toc[3]);
       lib_ccopts[1] = caml_call2(Stdlib[37], lib_ccopts[1], toc[4]);
       lib_dllibs[1] = caml_call2(Stdlib[37], lib_dllibs[1], toc[5]);
      }
      caml_call2
       (Stdlib_List[18],
        function(a){return copy_compunit(ic, oc, a);},
        toc[1]);
      caml_call1(Stdlib[93], ic);
      var
       a =
         caml_call2
          (Stdlib_List[20], function(u){return [0, name, u];}, toc[1]);
     }
     return a;
    }
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     if(x === Stdlib[12]){
      caml_call1(Stdlib[93], ic);
      throw caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1);
     }
     caml_call1(Stdlib[93], ic);
     throw caml_maybe_attach_backtrace(x, 0);
    }
   }
   function create_archive(file_list, lib_name){
    var outchan = caml_call1(Stdlib[61], lib_name);
    return caml_call3
            (Misc[4],
             [0, function(param){return caml_call1(Stdlib[76], outchan);}],
             [0, function(param){return caml_call1(Misc[19], lib_name);}],
             function(param){
              caml_call2(Stdlib[66], outchan, Config[27]);
              var ofs_pos_toc = caml_call1(Stdlib[74], outchan);
              caml_call2(Stdlib[71], outchan, 0);
              var
               a =
                 caml_call2
                  (Stdlib_List[20],
                   function(a){return copy_object_file(outchan, a);},
                   file_list),
               units = caml_call1(Stdlib_List[15], a),
               ldeps = caml_call1(Linkdeps[1], 0),
               b = caml_call1(Stdlib_List[10], units);
              caml_call2
               (Stdlib_List[18],
                function(param){
                 var u = param[2], filename = param[1];
                 return Bytelink[6].call(null, ldeps, filename, u);
                },
                b);
              var match = caml_call1(Linkdeps[4], ldeps);
              if(match){
               var e = match[1];
               throw caml_maybe_attach_backtrace([0, Error, [2, e]], 1);
              }
              var
               c = caml_call2(Stdlib[37], Clflags[10][1], lib_dllibs[1]),
               d = caml_call2(Stdlib[37], Clflags[31][1], lib_ccopts[1]),
               f = caml_call2(Stdlib[37], Clflags[9][1], lib_ccobjs[1]),
               g = Clflags[25][1],
               toc =
                 [0,
                  caml_call2
                   (Stdlib_List[20], function(a){return a[2];}, units),
                  g,
                  f,
                  d,
                  c],
               pos_toc = caml_call1(Stdlib[74], outchan);
              Emitcode[4].call
               (null, lib_name, cst_bytecode_library, outchan, toc);
              caml_call2(Stdlib[73], outchan, ofs_pos_toc);
              return caml_call2(Stdlib[71], outchan, pos_toc);
             });
   }
   function report_error_doc(ppf, param){
    switch(param[0]){
      case 0:
       var name = param[1];
       return caml_call4(Format_doc[9], ppf, a, Misc[60][4], name);
      case 1:
       var name$0 = param[1];
       return caml_call4(Format_doc[9], ppf, b, Location[27][3], name$0);
      default:
       var e = param[1];
       return caml_call3(Linkdeps[6], Location[27][2], ppf, e);
    }
   }
   caml_call1
    (Location[55],
     function(param){
      var tag = param[1];
      if(tag !== Error) return 0;
      var err = param[2];
      return [0, caml_call2(Location[54], report_error_doc, err)];
     });
   var report_error = caml_call1(Format_doc[3], report_error_doc);
   function reset(param){
    lib_ccobjs[1] = 0;
    lib_ccopts[1] = 0;
    lib_dllibs[1] = 0;
    return 0;
   }
   var
    Bytelibrarian =
      [0, create_archive, Error, report_error, report_error_doc, reset];
   runtime.caml_register_global(15, Bytelibrarian, "Bytelibrarian");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytepackager
//# unitInfo: Requires: Bytegen, Bytelink, Clflags, Compression, Config, Emitcode, Env, Format_doc, Ident, Load_path, Location, Misc, Printlambda, Simplif, Stdlib, Stdlib__Format, Stdlib__Fun, Stdlib__List, Stdlib__Option, Subst, Symtable, Translmod, Typemod, Unit_info
//# shape: Bytepackager:[F(4),N,N,F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = ".",
    cst$2 = "@ ",
    cst_File = "File ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$3,
    cst$0 = cst$3,
    cst = cst$3,
    Location = global_data.Location,
    Symtable = global_data.Symtable,
    Misc = global_data.Misc,
    Format_doc = global_data.Format_doc,
    Unit_info = global_data.Unit_info,
    Typemod = global_data.Typemod,
    Load_path = global_data.Load_path,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Config = global_data.Config,
    Clflags = global_data.Clflags,
    Compression = global_data.Compression,
    Bytelink = global_data.Bytelink,
    Env = global_data.Env,
    Emitcode = global_data.Emitcode,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Option = global_data.Stdlib__Option,
    Ident = global_data.Ident,
    Translmod = global_data.Translmod,
    Simplif = global_data.Simplif,
    Printlambda = global_data.Printlambda,
    Stdlib_Format = global_data.Stdlib__Format,
    Bytegen = global_data.Bytegen,
    Subst = global_data.Subst,
    Assert_failure = global_data.Assert_failure,
    Error = [248, "Bytepackager.Error", runtime.caml_fresh_oo_id(0)],
    a = [0, "bytecomp/bytepackager.ml", 47, 42],
    b = Subst[1],
    c = 0,
    d = 0,
    e = Misc[14][4][64][1],
    f = 0,
    g = 0,
    h = [0, [15, [17, 4, 0]], "%a@."],
    cst_bytecode_unit = "bytecode unit",
    i =
      [0,
       [11, "Forward reference to ", [15, [11, " in file ", [15, 0]]]],
       "Forward reference to %a in file %a"],
    j =
      [0,
       [11, cst_File, [15, [11, " redefines ", [15, 0]]]],
       "File %a redefines %a"],
    k =
      [0,
       [15, [11, " is not a bytecode object file", 0]],
       "%a is not a bytecode object file"],
    l =
      [0,
       [11,
        "Wrong file naming: ",
        [15,
         [17,
          [0, cst$2, 1, 0],
          [11,
           "contains the code for",
           [17,
            [0, cst$2, 1, 0],
            [15, [11, " when ", [15, [11, " was expected", 0]]]]]]]]],
       "Wrong file naming: %a@ contains the code for@ %a when %a was expected"],
    m = [0, [11, cst_File, [15, [11, " not found", 0]]], "File %a not found"];
   function read_member_info(targetname, file){
    var
     member = caml_call1(Unit_info[13][5], file),
     member_compunit = caml_call1(Unit_info[13][4], member);
    if(caml_call1(Unit_info[26], member))
     var kind = 0;
    else
     var
      ic = caml_call1(Stdlib[80], file),
      kind =
        caml_call2
         (Stdlib_Fun[5],
          function(param){return caml_call1(Stdlib[93], ic);},
          function(param){
           var
            buffer =
              caml_call2
               (Stdlib[86], ic, runtime.caml_ml_string_length(Config[26]));
           if(buffer !== Config[26])
            throw caml_maybe_attach_backtrace([0, Error, [2, file]], 1);
           var compunit_pos = caml_call1(Stdlib[88], ic);
           caml_call2(Stdlib[90], ic, compunit_pos);
           var compunit = caml_call1(Stdlib[89], ic);
           if(compunit[1] !== member_compunit)
            throw caml_maybe_attach_backtrace
                   ([0, Error, [3, member_compunit, file, compunit[1]]], 1);
           return [0, compunit];
          });
    var
     a = caml_call2(Stdlib[28], cst$1, member_compunit),
     pm_packed_ident = caml_call2(Stdlib[28], targetname, a);
    return [0, file, member_compunit, member_compunit, pm_packed_ident, kind];
   }
   function rename_append_pack_member(packagename, oc, state, m){
    var match = m[5];
    if(! match) return state;
    var
     compunit = match[1],
     objfile = m[1],
     ic = caml_call1(Stdlib[80], objfile);
    try{
     Bytelink[5].call(null, objfile, compunit);
     var
      rest = state[1],
      l = compunit[4],
      base = state[5],
      mapping$0 = state[7],
      relocs = rest,
      l$1 = l;
     for(;;){
      if(! l$1) break;
      var
       xs$0 = l$1[2],
       x$0 = l$1[1],
       ofs = x$0[2],
       rel = x$0[1],
       make_compunit_name_unique =
         function(cu){
          if(! caml_call1(Symtable[1][2], cu)) return cu;
          var
           a = caml_call1(Symtable[1][1], cu),
           b = caml_call2(Stdlib[28], cst, a);
          return caml_call2(Stdlib[28], packagename, b);
         };
      switch(rel[0]){
        case 1:
         var cu = rel[1];
         try{
          var mapped_modname = caml_call2(Symtable[1][5][17], cu, mapping$0);
          if(! mapped_modname[2])
           throw caml_maybe_attach_backtrace([0, Error, [0, objfile, cu]], 1);
          var b = [1, mapped_modname[1]], rel$0 = b;
         }
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
          var rel$0 = [1, make_compunit_name_unique(cu)];
         }
         break;
        case 3:
         var cu$0 = rel[1];
         try{
          var
           mapped_modname$0 = caml_call2(Symtable[1][5][17], cu$0, mapping$0);
          if(mapped_modname$0[2])
           throw caml_maybe_attach_backtrace
                  ([0, Error, [1, objfile, cu$0]], 1);
          var c = [3, mapped_modname$0[1]], rel$0 = c;
         }
         catch(exn){
          var exn$0 = caml_wrap_exception(exn);
          if(exn$0 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$0, 0);
          var rel$0 = [3, make_compunit_name_unique(cu$0)];
         }
         break;
        default: var rel$0 = rel;
      }
      var rest$2 = [0, [0, rel$0, base + ofs | 0], relocs];
      relocs = rest$2;
      l$1 = xs$0;
     }
     var primitives = caml_call2(Stdlib_List[13], compunit[7], state[4]);
     caml_call2(Stdlib[90], ic, compunit[2]);
     caml_call3(Misc[23], ic, oc, compunit[3]);
     a:
     {
      if(Clflags[20][1] && 0 < compunit[9]){
       caml_call2(Stdlib[90], ic, compunit[9]);
       var
        unit_events = caml_call1(Compression[2], ic),
        rest$0 = state[2],
        subst = state[6],
        base$0 = state[5],
        events$0 = rest$0,
        l$0 = unit_events;
       for(;;){
        if(! l$0){
         var
          unit_debug_dirs = caml_call1(Compression[2], ic),
          q = caml_call1(Misc[14][4][64][38], unit_debug_dirs),
          debug_dirs = caml_call2(Misc[14][4][64][5], state[3], q),
          debug_dirs$0 = debug_dirs,
          events = events$0;
         break a;
        }
        var
         xs = l$0[2],
         ev = l$0[1],
         d = ev[11],
         e = ev[10],
         f = ev[9],
         g = caml_call2(Subst[24], ev[8], subst),
         h = ev[7],
         i = ev[6],
         j = ev[5],
         k = ev[4],
         n = ev[3],
         o = caml_call2(Stdlib[28], cst$0, ev[2]),
         p = caml_call2(Stdlib[28], packagename, o),
         rest$1 =
           [0,
            [0, base$0 + ev[1] | 0, p, n, k, j, i, h, g, f, e, d],
            events$0];
        events$0 = rest$1;
        l$0 = xs;
       }
      }
      var debug_dirs$0 = state[3], events = state[2];
     }
     caml_call1(Stdlib[93], ic);
     var mapping$1 = state[7], r = state[6], s = state[5] + compunit[3] | 0;
    }
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     caml_call1(Stdlib[93], ic);
     throw caml_maybe_attach_backtrace(x, 0);
    }
    var id = m[3], root = [0, caml_call1(Ident[13], packagename)];
    function update_processed(param){
     if(param){var r = param[1]; if(! r[2]) return [0, [0, r[1], 1]];}
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    }
    var
     mapping = caml_call3(Symtable[1][5][4], id, update_processed, mapping$1),
     id$0 = caml_call1(Symtable[1][3], id),
     t = [1, root, caml_call1(Ident[16], id$0)],
     subst$0 = caml_call3(Subst[4], id$0, t, r);
    return [0, relocs, events, debug_dirs$0, primitives, s, subst$0, mapping];
   }
   function package_object_files(ppf_dump, files, target, coercion){
    var
     targetfile = caml_call1(Unit_info[13][3], target),
     target_name = caml_call1(Unit_info[13][4], target),
     members =
       caml_call2
        (Misc[8],
         function(a){return read_member_info(target_name, a);},
         files),
     required_compunits =
       caml_call3
        (Stdlib_List[27],
         function(compunit, required_compunits){
          var match = compunit[5];
          if(! match) return required_compunits;
          var
           match$0 = match[1],
           cu_required_compunits = match$0[6],
           cu_reloc = match$0[4];
          function remove_required(param, required_compunits){
           var rel = param[1];
           if(3 !== rel[0]) return required_compunits;
           var cu = rel[1];
           return caml_call2(Symtable[1][4][4], cu, required_compunits);
          }
          var
           required_compunits$0 =
             caml_call3
              (Stdlib_List[27], remove_required, cu_reloc, required_compunits);
          return caml_call3
                  (Stdlib_List[27],
                   Symtable[1][4][2],
                   cu_required_compunits,
                   required_compunits$0);
         },
         members,
         Symtable[1][4][1]),
     oc = caml_call1(Stdlib[61], targetfile);
    return caml_call2
            (Stdlib_Fun[5],
             function(param){return caml_call1(Stdlib[76], oc);},
             function(param){
              caml_call2(Stdlib[66], oc, Config[26]);
              var pos_depl = caml_call1(Stdlib[74], oc);
              caml_call2(Stdlib[71], oc, 0);
              var
               pos_code = caml_call1(Stdlib[74], oc),
               m =
                 caml_call2
                  (Stdlib_List[20],
                   function(m){return [0, m[3], [0, m[4], 0]];},
                   members),
               mapping = caml_call1(Symtable[1][5][38], m),
               state = [0, g, f, e, d, c, b, mapping],
               state$0 =
                 caml_call3
                  (Stdlib_List[26],
                   function(a, b){
                    return rename_append_pack_member(target_name, oc, a, b);
                   },
                   state,
                   members),
               components$0 =
                 caml_call2
                  (Stdlib_List[20],
                   function(m){return m[5] ? [0, m[4]] : 0;},
                   members),
               i = caml_call1(Stdlib_Option[7], Symtable[1][3]),
               components = caml_call2(Stdlib_List[20], i, components$0),
               j = caml_call1(Ident[13], target_name),
               lam = caml_call3(Translmod[6], components, j, coercion),
               lam$0 = caml_call1(Simplif[1], lam);
              if(Clflags[76][1])
               caml_call4
                (Stdlib_Format[143], ppf_dump, h, Printlambda[4], lam$0);
              var
               instrs = Bytegen[1].call(null, target_name, lam$0),
               match = Emitcode[3].call(null, oc, instrs),
               pack_debug_dirs = match[4],
               pack_events = match[3],
               pack_relocs = match[2],
               events = caml_call2(Stdlib_List[13], pack_events, state$0[2]),
               debug_dirs =
                 caml_call2(Misc[14][4][64][5], pack_debug_dirs, state$0[3]),
               rest$0 = state$0[1],
               l = pack_relocs,
               relocs = rest$0;
              for(;;){
               if(! l) break;
               var
                xs = l[2],
                x = l[1],
                ofs = x[2],
                r = x[1],
                rest = [0, [0, r, state$0[5] + ofs | 0], relocs];
               l = xs;
               relocs = rest;
              }
              var
               k = state$0[4],
               pos_debug = caml_call1(Stdlib[74], oc),
               a = Clflags[20][1],
               n = a ? 0 !== events ? 1 : 0 : a;
              if(n){
               var o = caml_call1(Stdlib_List[10], events);
               caml_call2(Compression[1], oc, o);
               var p = caml_call1(Misc[14][4][64][10], debug_dirs);
               caml_call2(Compression[1], oc, p);
              }
              var
               force_link =
                 caml_call2
                  (Stdlib_List[34],
                   function(param){
                    var match = param[5];
                    if(! match) return 0;
                    var cu_force_link = match[1][8];
                    return cu_force_link;
                   },
                   members),
               pos_final = caml_call1(Stdlib[74], oc),
               unit_names =
                 caml_call2
                  (Stdlib_List[20], function(m){return m[2];}, members),
               q = Bytelink[7].call(null, 0),
               imports =
                 caml_call2
                  (Stdlib_List[44],
                   function(param){
                    var name = param[1];
                    return 1 - caml_call2(Stdlib_List[37], name, unit_names);
                   },
                   q),
               s = pos_final - pos_debug | 0,
               pos_debug$0 = pos_debug < pos_final ? pos_debug : 0,
               t = caml_call1(Stdlib_List[10], k),
               u = caml_call1(Symtable[1][4][10], required_compunits),
               v =
                 [0,
                  [0, target_name, [0, caml_call1(Env[123], target_name)]],
                  imports],
               compunit =
                 [0,
                  target_name,
                  pos_code,
                  pos_debug - pos_code | 0,
                  caml_call1(Stdlib_List[10], relocs),
                  v,
                  u,
                  t,
                  force_link,
                  pos_debug$0,
                  s];
              Emitcode[4].call
               (null, targetfile, cst_bytecode_unit, oc, compunit);
              caml_call2(Stdlib[73], oc, pos_depl);
              return caml_call2(Stdlib[71], oc, pos_final);
             });
   }
   function package_files(ppf_dump, initial_env, files, targetfile){
    var
     files$0 =
       caml_call2
        (Stdlib_List[20],
         function(f){
          try{var a = caml_call1(Load_path[10], f); return a;}
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(exn === Stdlib[8])
            throw caml_maybe_attach_backtrace([0, Error, [4, f]], 1);
           throw caml_maybe_attach_backtrace(exn, 0);
          }
         },
         files),
     target = caml_call1(Unit_info[13][5], targetfile);
    return caml_call3
            (Misc[4],
             0,
             [0, function(param){return caml_call1(Misc[19], targetfile);}],
             function(param){
              var
               a = caml_call1(Unit_info[23], target),
               coercion = caml_call3(Typemod[11], initial_env, files$0, a);
              return package_object_files(ppf_dump, files$0, target, coercion);
             });
   }
   function report_error_doc(ppf, param){
    switch(param[0]){
      case 0:
       var
        compunit = param[2],
        file = param[1],
        a = Location[27][3],
        b = caml_call1(Symtable[1][1], compunit);
       return caml_call6(Format_doc[9], ppf, i, Misc[60][4], b, a, file);
      case 1:
       var
        compunit$0 = param[2],
        file$0 = param[1],
        c = caml_call1(Symtable[1][1], compunit$0);
       return caml_call6
               (Format_doc[9],
                ppf,
                j,
                Location[27][3],
                file$0,
                Misc[60][4],
                c);
      case 2:
       var file$1 = param[1];
       return caml_call4(Format_doc[9], ppf, k, Location[27][3], file$1);
      case 3:
       var
        id = param[3],
        file$2 = param[2],
        name = param[1],
        d = caml_call1(Symtable[1][1], id),
        e = Misc[60][4],
        f = caml_call1(Symtable[1][1], name);
       return caml_call8
               (Format_doc[9],
                ppf,
                l,
                Location[27][3],
                file$2,
                Misc[60][4],
                f,
                e,
                d);
      default:
       var file$3 = param[1];
       return caml_call4(Format_doc[9], ppf, m, Misc[60][4], file$3);
    }
   }
   caml_call1
    (Location[55],
     function(param){
      var tag = param[1];
      if(tag !== Error) return 0;
      var err = param[2];
      return [0, caml_call2(Location[54], report_error_doc, err)];
     });
   var
    report_error = caml_call1(Format_doc[3], report_error_doc),
    Bytepackager = [0, package_files, Error, report_error, report_error_doc];
   runtime.caml_register_global(37, Bytepackager, "Bytepackager");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Errors
//# unitInfo: Requires: Location
//# shape: Errors:[N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Location = global_data.Location,
    report_error = Location[60],
    Errors = [0, report_error];
   runtime.caml_register_global(1, Errors, "Errors");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Compile
//# unitInfo: Requires: Bytegen, Clflags, Compile_common, Emitcode, Misc, Printinstr, Printlambda, Profile, Simplif, Stdlib, Translmod, Unit_info
//# shape: Compile:[F(2),F(3),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    tool_name = "ocamlc",
    Clflags = global_data.Clflags,
    Misc = global_data.Misc,
    Compile_common = global_data.Compile_common,
    Unit_info = global_data.Unit_info,
    Stdlib = global_data.Stdlib,
    Emitcode = global_data.Emitcode,
    Profile = global_data.Profile,
    Printlambda = global_data.Printlambda,
    Simplif = global_data.Simplif,
    Bytegen = global_data.Bytegen,
    Printinstr = global_data.Printinstr,
    Translmod = global_data.Translmod,
    with_info = caml_call2(Compile_common[1], 0, tool_name),
    cst_cmi = "cmi",
    a = [0, 1],
    b = [0, 1],
    c = [0, [11, "Cannot start from ", [2, 0, 0]], "Cannot start from %s"],
    cst_cmo = "cmo";
   function interface$(source_file, output_prefix){
    var
     unit_info = caml_call4(Unit_info[12], 0, source_file, 0, output_prefix);
    return caml_call1
            (caml_call2(with_info, cst_cmi, unit_info),
             function(info){return caml_call1(Compile_common[5], info);});
   }
   function to_bytecode(i, param){
    var
     coercion = param[2],
     structure = param[1],
     b = caml_call1(Unit_info[9], i[1]),
     c = caml_call1(Translmod[1], b),
     d =
       caml_call1
        (caml_call1(caml_call2(Profile[3], 0, Profile[8]), c),
         [0, structure, coercion]);
    return caml_call1
            (caml_call1
              (caml_call2(Profile[3], a, Profile[7]),
               function(param){
                var
                 lambda = param[4],
                 required_globals = param[3],
                 a =
                   caml_call1
                    (caml_call3(Misc[62], i[3], Clflags[75], Printlambda[4]),
                     lambda),
                 b = caml_call1(Simplif[1], a),
                 c =
                   caml_call1
                    (caml_call3(Misc[62], i[3], Clflags[76], Printlambda[4]), b),
                 d = caml_call1(Unit_info[9], i[1]),
                 e = Bytegen[1].call(null, d, c),
                 bytecode =
                   caml_call1
                    (caml_call3(Misc[62], i[3], Clflags[82], Printinstr[2]), e);
                return [0, bytecode, required_globals];
               }),
             d);
   }
   function emit_bytecode(i, param){
    var
     required_globals = param[2],
     bytecode = param[1],
     cmo = caml_call1(Unit_info[15], i[1]),
     a = caml_call1(Unit_info[13][3], cmo),
     oc = caml_call1(Stdlib[61], a);
    return caml_call3
            (Misc[4],
             [0, function(param){return caml_call1(Stdlib[76], oc);}],
             [0,
              function(param){
               var a = caml_call1(Unit_info[13][3], cmo);
               return caml_call1(Misc[19], a);
              }],
             function(param){
              var a = Emitcode[1];
              return caml_call1
                      (caml_call1
                        (caml_call2(Profile[3], b, Profile[7]),
                         function(b){return a(oc, cmo, required_globals, b);}),
                       bytecode);
             });
   }
   function implementation(start_from, source_file, output_prefix){
    function backend(info, typed){
     var bytecode = to_bytecode(info, typed);
     return emit_bytecode(info, bytecode);
    }
    var
     unit_info = caml_call4(Unit_info[12], 0, source_file, 1, output_prefix);
    return caml_call1
            (caml_call2(with_info, cst_cmo, unit_info),
             function(info){
              if(! start_from)
               return caml_call2(Compile_common[8], info, backend);
              var a = caml_call1(Clflags[169][2], start_from);
              return caml_call2(Misc[2], c, a);
             });
   }
   var Compile = [0, interface$, implementation, to_bytecode, emit_bytecode];
   runtime.caml_register_global(18, Compile, "Compile");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Maindriver
//# unitInfo: Requires: Bytelibrarian, Bytelink, Bytepackager, Clflags, Compenv, Compile, Compmisc, Config, Location, Main_args, Makedepend, Profile, Stdlib, Stdlib__Arg, Stdlib__Filename, Stdlib__List, Stdlib__Printf, Stdlib__String, Warnings
//# shape: Maindriver:[F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_driver_maindriver_ml = "driver/maindriver.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    program = "ocamlc",
    cst = "|",
    Clflags = global_data.Clflags,
    Profile = global_data.Profile,
    Compmisc = global_data.Compmisc,
    Bytepackager = global_data.Bytepackager,
    Makedepend = global_data.Makedepend,
    Compenv = global_data.Compenv,
    Compile = global_data.Compile,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Bytelibrarian = global_data.Bytelibrarian,
    Warnings = global_data.Warnings,
    Config = global_data.Config,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Bytelink = global_data.Bytelink,
    Location = global_data.Location,
    Main_args = global_data.Main_args,
    Options = caml_call1(Main_args[1], Main_args[7][3]),
    cst_File_driver_maindriver_ml_ =
      'File "driver/maindriver.ml", line 23, characters 24-31',
    cst_options_Compute_dependenci =
      "<options> Compute dependencies (use 'ocamlc -depend -help' for details)",
    cst_depend = "-depend",
    cst_File_driver_maindriver_ml_$0 =
      'File "driver/maindriver.ml", line 24, characters 24-31',
    cst_Continue = "Continue",
    cst_profile = "profile",
    cst_plugin_is_only_supported_u =
      "-plugin is only supported up to OCaml 4.08.0",
    a = [0, cst_driver_maindriver_ml, 69, 40],
    b =
      [0,
       [11,
        "Options -i and -stop-after (",
        [2, 0, [11, ") are  incompatible with -pack, -a, -output-obj", 0]]],
       "Options -i and -stop-after (%s) are  incompatible with -pack, -a, -output-obj"],
    cst_c = ".c",
    c =
      [0,
       [11,
        "The extension of the output file must be .c, ",
        [2, 0, [11, " or ", [2, 0, 0]]]],
       "The extension of the output file must be .c, %s or %s"],
    d = [0, cst_driver_maindriver_ml, 63, 8],
    cst_Please_specify_at_most_one =
      "Please specify at most one of -pack, -a, -c, -output-obj",
    cst_cma = ".cma",
    cst_cmo = ".cmo";
   function main(argv, ppf){
    caml_call2(Clflags[175], cst_File_driver_maindriver_ml_, Options[1]);
    caml_call2
     (Clflags[175],
      cst_File_driver_maindriver_ml_$0,
      [0,
       [0, cst_depend, [0, Makedepend[2]], cst_options_Compute_dependenci],
       0]);
    var Continue = [248, cst_Continue, runtime.caml_fresh_oo_id(0)];
    try{
     caml_call2(Compenv[18], ppf, 0);
     caml_call4(Compenv[25], 0, [0, argv], Compenv[21], program);
     caml_call1(Compmisc[4], 0);
     if(Clflags[53][1])
      caml_call1(Compenv[8], cst_plugin_is_only_supported_u);
     try{
      caml_call1
       (Compenv[24], [0, ppf, Compile[2], Compile[1], cst_cmo, cst_cma]);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag$0 = exn[1];
      if(tag$0 !== Stdlib_Arg[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var msg = exn[2];
      caml_call1(Stdlib[53], msg);
      caml_call1(Clflags[177], program);
      caml_call1(Stdlib[99], 2);
     }
     if(caml_call1(Clflags[171], 2))
      throw caml_maybe_attach_backtrace(Continue, 1);
     caml_call2(Compenv[18], ppf, 1);
     var
      f =
        caml_call2
         (Stdlib_List[44],
          function(x){return x[1];},
          [0,
           Clflags[19],
           [0, Clflags[64], [0, Compenv[16], [0, Clflags[28], 0]]]]);
     if(1 < caml_call1(Stdlib_List[1], f)){
      var match = Clflags[170][1];
      if(match){
       var p = match[1];
       if(3 <= p)
        throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
       if(! caml_call1(Clflags[169][3], p))
        throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
       var
        g = caml_call2(Clflags[169][4], function(param){return 1;}, 0),
        h = caml_call2(Stdlib_String[7], cst, g);
       caml_call3(Stdlib_Printf[10], Compenv[8], b, h);
      }
      else
       caml_call1(Compenv[8], cst_Please_specify_at_most_one);
     }
     if(Clflags[19][1]){
      caml_call3(Compmisc[1], 0, 0, 0);
      var
       i = caml_call1(Compenv[3], Clflags[13][1]),
       j = caml_call1(Compenv[13], 0);
      Bytelibrarian[1].call(null, j, i);
      caml_call1(Warnings[12], 0);
     }
     else if(Clflags[64][1]){
      caml_call3(Compmisc[1], 0, 0, 0);
      var
       extracted_output = caml_call1(Compenv[3], Clflags[13][1]),
       revd = caml_call1(Compenv[13], 0);
      caml_call2
       (Compmisc[5],
        extracted_output,
        function(ppf_dump){
         var a = caml_call1(Compmisc[2], 0);
         return Bytepackager[1].call
                 (null, ppf_dump, a, revd, extracted_output);
        });
      caml_call1(Warnings[12], 0);
     }
     else{
      var e = 1 - Compenv[16][1], k = e ? 0 !== Clflags[8][1] ? 1 : 0 : e;
      if(k){
       a:
       {
        if(Clflags[28][1] && ! Clflags[30][1]){
         var s = caml_call1(Compenv[3], Clflags[13][1]);
         if(caml_call2(Stdlib_Filename[7], s, Config[47])){var target = s; break a;}
         if(caml_call2(Stdlib_Filename[7], s, Config[50])){var target = s; break a;}
         if(caml_call2(Stdlib_Filename[7], s, cst_c)){var target = s; break a;}
         var
          m = caml_call3(Stdlib_Printf[4], c, Config[47], Config[50]),
          target = caml_call1(Compenv[8], m);
         break a;
        }
        var target = caml_call1(Compenv[4], Clflags[13][1]);
       }
       caml_call3(Compmisc[1], 0, 0, 0);
       var l = caml_call1(Compenv[13], 1);
       Bytelink[3].call(null, l, target);
       caml_call1(Warnings[12], 0);
      }
     }
    }
    catch(x$0){
     var x = caml_wrap_exception(x$0), tag = x[1];
     if(tag === Compenv[1]){var n = x[2]; return n;}
     if(x !== Continue){caml_call2(Location[60], ppf, x); return 2;}
    }
    caml_call2
     (Compmisc[5],
      cst_profile,
      function(ppf){return caml_call2(Profile[4], ppf, Clflags[138][1]);});
    return 0;
   }
   var Maindriver = [0, main];
   runtime.caml_register_global(37, Maindriver, "Maindriver");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
