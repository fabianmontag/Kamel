// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Js_of_ocaml_toplevel__
//# shape: Js_of_ocaml_toplevel__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Js_of_ocaml_toplevel = [0],
    Js_of_ocaml_toplevel$0 = [0, Js_of_ocaml_toplevel];
   runtime.caml_register_global
    (0, Js_of_ocaml_toplevel$0, "Js_of_ocaml_toplevel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel__JsooTopPpx
//# unitInfo: Requires: Ast_mapper, Js_of_ocaml_compiler__Stdlib
//# shape: Js_of_ocaml_toplevel__JsooTopPpx:[F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_compiler_Stdlib = global_data.Js_of_ocaml_compiler__Stdlib,
    Ast_mapper = global_data.Ast_mapper,
    ppx_rewriters = [0, 0];
   Ast_mapper[5][1] =
    function(param, f){ppx_rewriters[1] = [0, f, ppx_rewriters[1]]; return 0;};
   function preprocess_structure(str){
    return caml_call3
            (Js_of_ocaml_compiler_Stdlib[24][26],
             function(ppx_rewriter, str){
              var mapper = caml_call1(ppx_rewriter, 0);
              return caml_call2(mapper[37], mapper, str);
             },
             ppx_rewriters[1],
             str);
   }
   function preprocess_signature(str){
    return caml_call3
            (Js_of_ocaml_compiler_Stdlib[24][26],
             function(ppx_rewriter, str){
              var mapper = caml_call1(ppx_rewriter, 0);
              return caml_call2(mapper[35], mapper, str);
             },
             ppx_rewriters[1],
             str);
   }
   function preprocess_phrase(phrase){
    if(0 !== phrase[0]) return phrase;
    var str = phrase[1];
    return [0, preprocess_structure(str)];
   }
   var
    Js_of_ocaml_toplevel_JsooTopPp =
      [0, preprocess_structure, preprocess_signature, preprocess_phrase];
   runtime.caml_register_global
    (2, Js_of_ocaml_toplevel_JsooTopPp, "Js_of_ocaml_toplevel__JsooTopPpx");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel__JsooTopError
//# unitInfo: Requires: Lexer, Syntaxerr, Translclass, Translcore, Translmod, Typeclass, Typecore, Typedecl, Typemod, Typetexp
//# shape: Js_of_ocaml_toplevel__JsooTopError:[F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Syntaxerr = global_data.Syntaxerr,
    Lexer = global_data.Lexer,
    Typecore = global_data.Typecore,
    Typetexp = global_data.Typetexp,
    Typeclass = global_data.Typeclass,
    Typemod = global_data.Typemod,
    Typedecl = global_data.Typedecl,
    Translcore = global_data.Translcore,
    Translclass = global_data.Translclass,
    Translmod = global_data.Translmod;
   function loc(param){
    var tag = param[1];
    if(tag === Syntaxerr[1]){
     var x = param[2];
     return [0, caml_call1(Syntaxerr[3], x)];
    }
    if(param[1] === Lexer[4])
     var loc = param[3];
    else if
     (param[1] === Typecore[23]
      ||
       param[1] === Typetexp[10]
       ||
        param[1] === Typeclass[5]
        ||
         param[1] === Typemod[14]
         ||
          param[1] === Typedecl[13]
          || param[1] === Translcore[7] || param[1] === Translclass[2])
     var loc = param[2];
    else{
     var tag$0 = param[1];
     if(tag$0 !== Translmod[12]) return 0;
     var loc = param[2];
    }
    return [0, loc];
   }
   var Js_of_ocaml_toplevel_JsooTopEr = [0, loc];
   runtime.caml_register_global
    (10, Js_of_ocaml_toplevel_JsooTopEr, "Js_of_ocaml_toplevel__JsooTopError");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel__JsooTop
//# unitInfo: Requires: CamlinternalLazy, Errors, Js_of_ocaml_compiler__Config, Js_of_ocaml_compiler__Debug, Js_of_ocaml_compiler__Stdlib, Js_of_ocaml_toplevel__JsooTopError, Js_of_ocaml_toplevel__JsooTopPpx, Stdlib, Stdlib__BytesLabels, Stdlib__Format, Stdlib__Sys, Topdirs, Toploop
//# shape: Js_of_ocaml_toplevel__JsooTop:[F(2),F(5),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_js_of_ocaml = "js_of_ocaml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Sys = global_data.Stdlib__Sys,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Toploop = global_data.Toploop,
    Js_of_ocaml_compiler_Stdlib = global_data.Js_of_ocaml_compiler__Stdlib,
    Js_of_ocaml_toplevel_JsooTopPp =
      global_data.Js_of_ocaml_toplevel__JsooTopPpx,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_toplevel_JsooTopEr =
      global_data.Js_of_ocaml_toplevel__JsooTopError,
    Stdlib_Format = global_data.Stdlib__Format,
    Errors = global_data.Errors,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Topdirs = global_data.Topdirs,
    Js_of_ocaml_compiler_Config = global_data.Js_of_ocaml_compiler__Config,
    Js_of_ocaml_compiler_Debug = global_data.Js_of_ocaml_compiler__Debug,
    cst_static_cmis = "/static/cmis",
    a = [0, cst_js_of_ocaml, "Enable the given flag"],
    cst_enable = "enable",
    b = [0, cst_js_of_ocaml, "Disable the given flag"],
    cst_disable = "disable",
    c = [0, cst_js_of_ocaml, "Enable debug for the given section"],
    cst_debug_on = "debug_on",
    d = [0, cst_js_of_ocaml, "Disable debug for the given section"],
    cst_debug_off = "debug_off",
    e =
      [0,
       cst_js_of_ocaml,
       "Set the depth of tail calls before going through a trampoline"],
    cst_tc = "tc",
    cst_tailcall = "tailcall",
    setup =
      [246,
       function(param){
        caml_call1(Topdirs[2], cst_static_cmis);
        caml_call3
         (Toploop[7], cst_enable, [1, Js_of_ocaml_compiler_Config[1][30]], a);
        caml_call3
         (Toploop[7], cst_disable, [1, Js_of_ocaml_compiler_Config[1][31]], b);
        caml_call3
         (Toploop[7], cst_debug_on, [1, Js_of_ocaml_compiler_Debug[3]], c);
        caml_call3
         (Toploop[7], cst_debug_off, [1, Js_of_ocaml_compiler_Debug[4]], d);
        var f = [1, caml_call1(Js_of_ocaml_compiler_Config[2][1], cst_tc)];
        return caml_call3(Toploop[7], cst_tailcall, f, e);
       }],
    f = [0, [2, 0, 0], "%s"],
    cst_toplevel = "//toplevel//";
   function use(ffp, content){
    return caml_call2(Toploop[20], ffp, [1, content]);
   }
   function execute(printval, pp_code, highlight_location, pp_answer, s){
    var
     p = [0, 0],
     lb =
       caml_call2
        (Js_of_ocaml_compiler_Stdlib[55][4],
         0,
         function(buffer, len$2){
          if
           (caml_call2
             (Js_of_ocaml_compiler_Stdlib[14], p[1], caml_ml_string_length(s)))
           return 0;
          try{
           var
            b = p[1],
            nl$0 = 0,
            c =
              (caml_call3(Js_of_ocaml_compiler_Stdlib[34][32], s, p[1], 10)
              - b
              | 0)
              + 1
              | 0,
            nl = nl$0,
            len$0 = c;
          }
          catch(exn){
           var len = caml_ml_string_length(s) - p[1] | 0, nl = 1, len$0 = len;
          }
          var
           len$1 = caml_call2(Js_of_ocaml_compiler_Stdlib[20], len$2, len$0);
          caml_call5
           (Js_of_ocaml_compiler_Stdlib[34][6], s, p[1], buffer, 0, len$1);
          if(pp_code){
           var
            ppf = pp_code[1],
            a = caml_call3(Stdlib_BytesLabels[8], buffer, 0, len$1);
           caml_call3(Stdlib_Format[143], ppf, f, a);
           if(nl) caml_call2(Stdlib_Format[45], ppf, 0);
           caml_call2(Stdlib_Format[43], ppf, 0);
          }
          p[1] = p[1] + len$1 | 0;
          return len$1;
         });
    try{
     for(;;)
      try{
       var
        phr = caml_call1(Toploop[37][1], lb),
        phr$0 = Js_of_ocaml_toplevel_JsooTopPp[3].call(null, phr);
       caml_call3(Toploop[16], printval, pp_answer, phr$0);
      }
      catch(x$0){
       var x = caml_wrap_exception(x$0);
       if(x === Stdlib[12]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
       if(highlight_location){
        var
         f$0 = highlight_location[1],
         match = Js_of_ocaml_toplevel_JsooTopEr[1].call(null, x);
        if(match){var loc = match[1]; caml_call1(f$0, loc);}
       }
       caml_call2(Errors[1], Stdlib_Format[118], x);
      }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return caml_call1(Stdlib[64], 0);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function initialize(param){
    Stdlib_Sys[3][1] = 0;
    var a = runtime.caml_obj_tag(setup);
    a:
    if(250 !== a){
     if(246 !== a && 244 !== a) break a;
     caml_call1(CamlinternalLazy[2], setup);
    }
    caml_call1(Toploop[14], 0);
    Toploop[42][1] = cst_toplevel;
    Stdlib_Sys[3][1] = 1;
    return 0;
   }
   var Js_of_ocaml_toplevel_JsooTop = [0, use, execute, initialize];
   runtime.caml_register_global
    (27, Js_of_ocaml_toplevel_JsooTop, "Js_of_ocaml_toplevel__JsooTop");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel
//# shape: Js_of_ocaml_toplevel:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Js_of_ocaml_toplevel = [0];
   runtime.caml_register_global
    (0, Js_of_ocaml_toplevel, "Js_of_ocaml_toplevel");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
