// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Ppx_js__
//# shape: Ppx_js__:[[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_js = [0],
    Ppx_js$0 = [0, Ppx_js];
   runtime.caml_register_global(0, Ppx_js$0, "Ppx_js__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_js__Ppx_js_internal
//# unitInfo: Requires: Ast_mapper, CamlinternalOO, Ppxlib__Ast_traverse, Ppxlib__Driver, Ppxlib__Location, Ppxlib_ast__Ast_helper_lite, Ppxlib_ast__Import, Stdlib, Stdlib__ListLabels, Stdlib__Map, Stdlib__Printf, Stdlib__StringLabels
//# shape: Ppx_js__Ppx_js_internal:[N,N,F(3),F(2),F(1),F(2),F(1),F(2)*,F(1)*,F(2),F(2)*,F(3),F(3),F(3),F(1),F(1),F(2),N,F(2)*,N,[F(3),F(3),F(3)],F(3),F(1),F(1)*,F(1),F(1),[F(2),F(1)*,F(1),F(1)*,F(1)],F(1),F(5),F(1),F(5),F(3),F(5),F(2),N,F(1)*,[F(2),F(2)],F(2),F(1),F(2),F(2),N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst$2 = "##",
    cst$3 = "##.",
    cst_A_mutable_field_cannot_be_ = "A mutable field cannot be readonly.",
    cst_Duplicated_val_or_method = "Duplicated val or method ",
    cst_Duplicated_val_or_method_S = "Duplicated val or method %S%s.",
    cst_Javascript_methods_or_attr =
      "Javascript methods or attributes can only be simple identifiers.",
    cst_Polymorphic_method_not_sup = "Polymorphic method not supported.",
    cst_This_field_is_not_valid_in =
      "This field is not valid inside a js literal object.",
    cst_Too_many_attributes = "Too many attributes.",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_function_body = "function_body",
    cst_function_param = "function_param",
    cst_function_param_desc = "function_param_desc",
    cst_functor_parameter = "functor_parameter",
    cst_gen_prop$1 = "gen_prop",
    cst_get$1 = "get",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_inject$1 = "inject",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_js = "js",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_meth$1 = "meth",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_optdef$0 = "optdef",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_ppx_ppx_js_as_lib_ppx_js_i = "ppx/ppx_js/as-lib/ppx_js_internal.ml",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_set$1 = "set",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string$0 = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_t$7 = "t",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_constraint = "type_constraint",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_constraint = "value_constraint",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    cst_x$5 = "x",
    caml_equal = runtime.caml_equal,
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_oo_cache_id = runtime.caml_oo_cache_id,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) === 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    self = "self",
    cst$0 = cst$1,
    res = "res",
    cst = "_",
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_value_constraint,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string$0,
       cst_pattern,
       cst_include_description,
       cst_function_param,
       cst_signature,
       cst_function_body,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_type_constraint,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_function_param_desc,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib = global_data.Stdlib,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_ast_Ast_helper_lite = global_data.Ppxlib_ast__Ast_helper_lite,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Map = global_data.Stdlib__Map,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Ppxlib_Driver = global_data.Ppxlib__Driver,
    Ast_mapper = global_data.Ast_mapper,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    nolabel = 0,
    Syntax_error =
      [248,
       "Ppx_js__Ppx_js_internal.Syntax_error",
       runtime.caml_fresh_oo_id(0)],
    f = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 57, 18],
    g = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 59, 15],
    h = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 65, 18],
    i = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 67, 15],
    j = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 71, 17],
    k = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 70, 12],
    l = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 79, 12],
    m = [0, "()"],
    n =
      [0,
       [11, cst_Javascript_methods_or_attr, 0],
       cst_Javascript_methods_or_attr];
   function make_exception(loc, sub, str){
    return [0,
            Syntax_error,
            caml_call3(Ppxlib_Location[14][1], loc, str, sub)];
   }
   function raise_errorf(loc, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(str){
              throw caml_maybe_attach_backtrace
                     (make_exception(loc, 0, str), 1);
             },
             fmt);
   }
   function unflatten(l){
    if(! l) return 0;
    var tl = l[2], hd = l[1];
    return [0,
            caml_call3
             (Stdlib_ListLabels[26],
              function(p, s){return [1, p, s];},
              [0, hd],
              tl)];
   }
   function split_at_dots(s, pos){
    try{
     var
      dot = caml_call3(Stdlib_StringLabels[32], s, pos, 46),
      a = split_at_dots(s, dot + 1 | 0),
      b = [0, caml_call3(Stdlib_StringLabels[16], s, pos, dot - pos | 0), a];
     return b;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      return [0,
              caml_call3
               (Stdlib_StringLabels[16],
                s,
                pos,
                caml_ml_string_length(s) - pos | 0),
              0];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function parse_lid(s){
    var
     components = split_at_dots(s, 0),
     assert_lid =
       caml_call1
        (Stdlib_StringLabels[31],
         function(i, c){
          if(0 === i){
           a:
           {
            if(97 <= c){if(123 <= c) break a;} else if(95 !== c) break a;
            return 0;
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
          }
          a:
          {
           if(91 <= c){
            if(97 <= c){if(123 > c) break a;} else if(95 === c) break a;
           }
           else
            if(58 <= c){if(65 <= c) break a;} else if(48 <= c) break a;
           throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
          }
          return 0;
         }),
     assert_uid =
       caml_call1
        (Stdlib_StringLabels[31],
         function(i$0, c){
          if(0 === i$0){
           if(25 < c - 65 >>> 0)
            throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
           return 0;
          }
          a:
          {
           if(91 <= c){
            if(97 <= c){if(123 > c) break a;} else if(95 === c) break a;
           }
           else
            if(58 <= c){if(65 <= c) break a;} else if(48 <= c) break a;
           throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
          }
          return 0;
         }),
     param = components;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
     var s$0 = param[1];
     if(s$0 === cst$1)
      throw caml_maybe_attach_backtrace([0, Assert_failure, j], 1);
     if(! param[2]){
      caml_call1(assert_lid, s$0);
      var match = unflatten(components);
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, l], 1);
      var v = match[1];
      return v;
     }
     var rest = param[2];
     caml_call1(assert_uid, s$0);
     param = rest;
    }
   }
   function mkloc(txt, loc){return [0, txt, loc];}
   function mknoloc(txt){return [0, txt, Ppxlib_Location[3]];}
   function lid(opt, s){
    var
     loc = opt ? opt[1] : Ppxlib_ast_Ast_helper_lite[1][1],
     txt = parse_lid(s);
    return [0, txt, loc];
   }
   function mkloc_opt(opt, txt){
    var loc = opt ? opt[1] : Ppxlib_ast_Ast_helper_lite[1][1];
    return [0, txt, loc];
   }
   function unit(loc, attrs, param){
    var a = mkloc_opt(loc, m);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][12], loc, attrs, a, 0);
   }
   function tuple(loc, attrs, xs){
    if(! xs) return unit(loc, attrs, 0);
    if(xs[2])
     return caml_call3(Ppxlib_ast_Ast_helper_lite[7][11], loc, attrs, xs);
    var x = xs[1];
    return x;
   }
   function ocaml_str(loc, attrs, s){
    var a = caml_call3(Ppxlib_ast_Ast_helper_lite[3][2], 0, 0, s);
    return caml_call3(Ppxlib_ast_Ast_helper_lite[7][4], loc, attrs, a);
   }
   function exp_to_string(param){
    var a = param[1];
    if(typeof a !== "number")
     switch(a[0]){
       case 0:
        var match = a[1][1];
        if(0 === match[0]){var s = match[1]; return s;}
        break;
       case 8:
        var b = a[1][1];
        if(0 === b[0] && ! a[2]){
         var s$0 = b[1];
         if
          (0 < caml_ml_string_length(s$0)
           && 65 <= caml_string_get(s$0, 0) && 90 >= caml_string_get(s$0, 0))
          return caml_call2(Stdlib[28], cst, s$0);
        }
        break;
     }
    var pexp_loc = param[2];
    return raise_errorf(pexp_loc, n);
   }
   function typ(s){
    var a = lid(0, s);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[5][7], 0, 0, a, 0);
   }
   function arrows(args, ret){
    return caml_call3
            (Stdlib_ListLabels[27],
             function(param, fun){
              var ty = param[2], l = param[1];
              return caml_call5
                      (Ppxlib_ast_Ast_helper_lite[5][5], 0, 0, l, ty, fun);
             },
             args,
             ret);
   }
   var wrapper = [0, 0];
   function make_str(loc, txt){
    if(! loc) return mknoloc(txt);
    var loc$0 = loc[1];
    return [0, txt, loc$0];
   }
   var
    merlin_hide =
      [0, [0, "merlin.hide", Ppxlib_Location[3]], [0, 0], Ppxlib_Location[3]],
    cst_Js = ".Js.",
    cst_Js$0 = "Js.",
    cst_Unsafe = "Unsafe.";
   function js_dot(name){
    var match = wrapper[1];
    if(! match) return caml_call2(Stdlib[28], cst_Js$0, name);
    var m = match[1], a = caml_call2(Stdlib[28], cst_Js, name);
    return caml_call2(Stdlib[28], m, a);
   }
   function js_unsafe_dot(name){
    return js_dot(caml_call2(Stdlib[28], cst_Unsafe, name));
   }
   function type(loc, s, args){
    var a = lid(loc, js_dot(s));
    return caml_call4(Ppxlib_ast_Ast_helper_lite[5][7], loc, 0, a, args);
   }
   function apply(where, loc, s, args){
    var
     args$0 =
       caml_call2
        (Stdlib_ListLabels[20], function(x){return [0, nolabel, x];}, args),
     a = lid(loc, caml_call1(where, s)),
     b = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], loc, 0, a);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], loc, 0, b, args$0);
   }
   function unsafe(a, b, c){return apply(js_unsafe_dot, a, b, c);}
   function fun(a, b, c){return apply(js_dot, a, b, c);}
   var
    Js = [0, type, unsafe, fun],
    cst_string = cst_string$0,
    cst_inject = cst_inject$1,
    cst_inject$0 = cst_inject$1;
   function javascript_str(loc, attrs, s){
    return apply(js_dot, loc, cst_string, [0, ocaml_str(loc, attrs, s), 0]);
   }
   function unescape(lab){
    if(lab === cst$1) return lab;
    var
     lab$0 =
       95 === caml_string_get(lab, 0)
        ? caml_call3
          (Stdlib_StringLabels[16],
           lab,
           1,
           caml_ml_string_length(lab) - 1 | 0)
        : lab;
    try{
     var i = caml_call2(Stdlib_StringLabels[38], lab$0, 95);
     if(0 === i) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var a = caml_call3(Stdlib_StringLabels[16], lab$0, 0, i);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return lab$0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function app_arg(e){return [0, nolabel, e];}
   function inject_arg(e){
    return apply(js_unsafe_dot, 0, cst_inject, [0, e, 0]);
   }
   function inject_args(args){
    var
     a =
       caml_call2
        (Stdlib_ListLabels[20],
         function(e){return apply(js_unsafe_dot, 0, cst_inject$0, [0, e, 0]);},
         args);
    return caml_call3(Ppxlib_ast_Ast_helper_lite[7][17], 0, 0, a);
   }
   var count = [0, 0], cst_t = cst_t$7;
   function make(opt, param){
    var label = opt ? opt[1] : nolabel, c = count[1];
    count[1]++;
    var a = caml_call1(Stdlib[33], c);
    return [0, label, caml_call2(Stdlib[28], cst_t, a)];
   }
   function label(arg){return arg[1];}
   function name(arg){return arg[2];}
   function typ$0(arg){return typ(arg[2]);}
   function args(l){
    return caml_call2
            (Stdlib_ListLabels[20],
             function(arg){var a = typ$0(arg); return [0, arg[1], a];},
             l);
   }
   var
    Arg = [0, make, name, typ$0, label, args],
    cst_t$0 = cst_t$7,
    o = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 220, 10],
    p = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 252, 4],
    cst_t$1 = cst_t$7,
    cst_meth_call = "meth_call",
    q = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 334, 16],
    cst_meth = cst_meth$1,
    cst_x = cst_x$5,
    cst_x$0 = cst_x$5,
    r = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 380, 30],
    cst_get = cst_get$1,
    cst_get$0 = cst_get$1,
    cst_gen_prop = cst_gen_prop$1,
    cst_x$1 = cst_x$5,
    cst_x$2 = cst_x$5,
    s = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 434, 15],
    cst_set = cst_set$1,
    t = [0, cst_unit],
    u = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 427, 15],
    v = [0, cst_unit],
    cst_set$0 = cst_set$1,
    cst_gen_prop$0 = cst_gen_prop$1,
    w = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 423, 12],
    x = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 422, 12],
    cst_x$3 = cst_x$5,
    cst_x$4 = cst_x$5,
    cst_new_obj = "new_obj",
    y = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 487, 15],
    cst_t$2 = cst_t$7,
    cst_constr = "constr",
    z = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 482, 12],
    A = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 480, 16],
    B = [0, cst_unit];
   function js_dot_t_the_first_arg(args$0){
    if(! args$0) throw caml_maybe_attach_backtrace([0, Assert_failure, o], 1);
    var
     xs = args$0[2],
     arg = args$0[1],
     a = args(xs),
     b = type(0, cst_t$0, [0, typ$0(arg), 0]);
    return [0, [0, arg[1], b], a];
   }
   function invoker(opt, uplift, downlift, body, arguments$){
    var
     extra_types = opt ? opt[1] : 0,
     default_loc = Ppxlib_ast_Ast_helper_lite[1][1];
    Ppxlib_ast_Ast_helper_lite[1][1] = Ppxlib_Location[3];
    var
     typ_res = typ(res),
     twrap = caml_call2(uplift, arguments$, typ_res),
     match = caml_call2(downlift, arguments$, typ_res),
     tfunc_res = match[2],
     tfunc_args = match[1];
    function ident(arg){
     var a = lid(0, arg[2]);
     return caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], 0, 0, a);
    }
    var
     args = caml_call2(Stdlib_ListLabels[20], ident, arguments$),
     ebody = caml_call1(body, args),
     annotated_ebody =
       caml_call4(Ppxlib_ast_Ast_helper_lite[7][23], 0, 0, ebody, tfunc_res),
     labels_and_pats =
       caml_call2
        (Stdlib_ListLabels[20],
         function(arg){
          var
           label = arg[1],
           a = mknoloc(arg[2]),
           patt = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], 0, 0, a);
          return [0, label, patt];
         },
         arguments$);
    function make_fun(g, param, expr){
     var typ = param[2], label = param[1], pat = g[2], label$0 = g[1];
     if(! caml_equal(label, label$0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, p], 1);
     var match = expr[1];
     if(typeof match !== "number" && 3 === match[0]){
      var
       b = match[3],
       c = match[2],
       params = match[1],
       i =
         [0,
          nolabel,
          0,
          caml_call4(Ppxlib_ast_Ast_helper_lite[6][14], 0, 0, pat, typ)],
       d = expr[2],
       params$0 = [0, [0, [0, d[1], d[2], 1], i], params];
      if(c || ! (0 === b[0]))
       var b$0 = b, c$0 = c;
      else{
       var f = b[1], a = f[1];
       if(typeof a === "number" || ! (18 === a[0] && ! f[4]))
        var b$0 = b, c$0 = c;
       else
        var ty = a[2], e = a[1], b$0 = [0, e], c$0 = [0, [0, ty]];
      }
      return [0, [3, params$0, c$0, b$0], expr[2], expr[3], expr[4]];
     }
     var h = caml_call4(Ppxlib_ast_Ast_helper_lite[6][14], 0, 0, pat, typ);
     return caml_call6
             (Ppxlib_ast_Ast_helper_lite[7][6], 0, 0, label$0, 0, h, expr);
    }
    var
     a =
       make_fun
        ([0, nolabel, caml_call3(Ppxlib_ast_Ast_helper_lite[6][3], 0, 0, 0)],
         [0, nolabel, twrap],
         annotated_ebody),
     invoker =
       caml_call4
        (Stdlib_ListLabels[32], make_fun, labels_and_pats, tfunc_args, a),
     d = caml_call2(Stdlib[37], extra_types, arguments$),
     e =
       caml_call2
        (Stdlib_ListLabels[20], function(arg){return make_str(0, arg[2]);}, d),
     local_types = [0, make_str(0, res), e],
     match$0 = invoker[1];
    a:
    {
     if(typeof match$0 !== "number" && 3 === match$0[0]){
      var
       b = match$0[3],
       c = match$0[2],
       params = match$0[1],
       f = invoker[4],
       g = invoker[3],
       h = invoker[2],
       i =
         caml_call2
          (Stdlib_ListLabels[20],
           function(t){return [0, Ppxlib_Location[3], [1, t]];},
           local_types),
       result = [0, [3, caml_call2(Stdlib[37], i, params), c, b], h, g, f];
      break a;
     }
     var
      arg = Ppxlib_ast_Ast_helper_lite[7][34],
      result =
        caml_call3
         (Stdlib_ListLabels[27],
          function(eta){return caml_call3(arg, 0, 0, eta);},
          local_types,
          invoker);
    }
    Ppxlib_ast_Ast_helper_lite[1][1] = default_loc;
    return result;
   }
   function open_t(loc){
    return type
            ([0, loc],
             cst_t$1,
             [0,
              caml_call4(Ppxlib_ast_Ast_helper_lite[5][8], [0, loc], 0, 0, 1),
              0]);
   }
   function method_call(loc, apply_loc, obj, param, args$0){
    var
     meth_loc = param[2],
     meth = param[1],
     gloc = [0, loc[1], loc[2], 1],
     a = obj[2],
     gloc$0 = [0, a[1], a[2], 1],
     b = open_t(gloc$0),
     obj$0 =
       caml_call4
        (Ppxlib_ast_Ast_helper_lite[7][23],
         [0, gloc$0],
         [0, [0, merlin_hide, 0]],
         obj,
         b),
     c =
       [0,
        nolabel,
        caml_call2(Stdlib_ListLabels[20], function(a){return a[1];}, args$0)],
     invoker$0 =
       invoker
        (0,
         function(args$0, tres){
          var a = type(0, cst_meth, [0, tres, 0]);
          return arrows(args(args$0), a);
         },
         function(args, tres){return [0, js_dot_t_the_first_arg(args), tres];},
         function(eargs){
          if(! eargs)
           throw caml_maybe_attach_backtrace([0, Assert_failure, q], 1);
          var
           eargs$0 = eargs[2],
           eobj = eargs[1],
           eargs$1 = inject_args(eargs$0);
          return apply
                  (js_unsafe_dot,
                   0,
                   cst_meth_call,
                   [0,
                    eobj,
                    [0, ocaml_str(0, 0, unescape(meth)), [0, eargs$1, 0]]]);
         },
         caml_call2
          (Stdlib_ListLabels[20],
           function(label){return make([0, label], 0);},
           c)),
     d = make_str([0, meth_loc], meth),
     f = lid([0, obj$0[2]], cst_x),
     g = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, obj$0[2]], 0, f),
     h = caml_call4(Ppxlib_ast_Ast_helper_lite[7][24], [0, loc], 0, g, d),
     i = mknoloc(cst_x$0),
     j = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, i),
     e =
       caml_call6
        (Ppxlib_ast_Ast_helper_lite[7][6], [0, gloc], 0, nolabel, 0, j, h),
     k =
       caml_call2
        (Stdlib[37],
         [0, [0, nolabel, obj$0], args$0],
         [0, [0, nolabel, e], 0]);
    return caml_call4
            (Ppxlib_ast_Ast_helper_lite[7][8],
             [0, apply_loc],
             0,
             [0,
              invoker$0[1],
              invoker$0[2],
              invoker$0[3],
              [0, merlin_hide, 0]],
             k);
   }
   function prop_get(loc, obj, prop){
    var
     a = obj[2],
     gloc = [0, a[1], a[2], 1],
     b = open_t(gloc),
     obj$0 =
       caml_call4(Ppxlib_ast_Ast_helper_lite[7][23], [0, gloc], 0, obj, b),
     invoker$0 =
       invoker
        (0,
         function(args$0, tres){
          var
           loc = Ppxlib_ast_Ast_helper_lite[1][1],
           a =
             type
              (0,
               cst_gen_prop,
               [0,
                [0,
                 [4, [0, [0, [0, [0, cst_get$0, loc], tres], loc, 0], 0], 1],
                 loc,
                 0,
                 0],
                0]);
          return arrows(args(args$0), a);
         },
         function(args, tres){return [0, js_dot_t_the_first_arg(args), tres];},
         function(eargs){
          if(eargs && ! eargs[2]){
           var only_arg = eargs[1];
           return apply
                   (js_unsafe_dot,
                    0,
                    cst_get,
                    [0, only_arg, [0, javascript_str(0, 0, unescape(prop)), 0]]);
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, r], 1);
         },
         [0, make(0, 0), 0]),
     c = make_str([0, loc], prop),
     d = lid([0, gloc], cst_x$1),
     f = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, gloc], 0, d),
     g = caml_call4(Ppxlib_ast_Ast_helper_lite[7][24], [0, loc], 0, f, c),
     h = mknoloc(cst_x$2),
     i = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, h),
     e =
       caml_call6
        (Ppxlib_ast_Ast_helper_lite[7][6], [0, gloc], 0, nolabel, 0, i, g);
    return caml_call4
            (Ppxlib_ast_Ast_helper_lite[7][8],
             0,
             0,
             invoker$0,
             [0, [0, nolabel, obj$0], [0, [0, nolabel, e], 0]]);
   }
   function prop_set(loc, prop_loc, obj, prop, value){
    var
     b = obj[2],
     gloc = [0, b[1], b[2], 1],
     c = open_t(gloc),
     a = caml_call4(Ppxlib_ast_Ast_helper_lite[7][23], [0, gloc], 0, obj, c),
     obj$0 = [0, a[1], a[2], a[3], [0, merlin_hide, 0]],
     d = [0, make(0, 0), 0],
     invoker$0 =
       invoker
        (0,
         function(args, tres){
          if(args){
           var a = args[2];
           if(a && ! a[2]){
            var
             arg = a[1],
             obj = args[1],
             loc = Ppxlib_ast_Ast_helper_lite[1][1];
            if(! caml_equal(obj[1], nolabel))
             throw caml_maybe_attach_backtrace([0, Assert_failure, x], 1);
            if(! caml_equal(arg[1], nolabel))
             throw caml_maybe_attach_backtrace([0, Assert_failure, w], 1);
            var
             b =
               type
                (0,
                 cst_gen_prop$0,
                 [0,
                  [0,
                   [4,
                    [0,
                     [0,
                      [0,
                       [0, cst_set$0, loc],
                       [0,
                        [1, 0, typ$0(arg), [0, [3, [0, v, loc], 0], loc, 0, 0]],
                        loc,
                        0,
                        0]],
                      loc,
                      0],
                     0],
                    1],
                   loc,
                   0,
                   0],
                  0]);
            return arrows([0, [0, nolabel, typ$0(obj)], 0], b);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, u], 1);
         },
         function(args, tres){
          var loc = Ppxlib_ast_Ast_helper_lite[1][1];
          return [0,
                  js_dot_t_the_first_arg(args),
                  [0, [3, [0, t, loc], 0], loc, 0, 0]];
         },
         function(param){
          if(param){
           var a = param[2];
           if(a && ! a[2]){
            var arg = a[1], obj = param[1], b = [0, inject_arg(arg), 0];
            return apply
                    (js_unsafe_dot,
                     0,
                     cst_set,
                     [0, obj, [0, javascript_str(0, 0, unescape(prop)), b]]);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, s], 1);
         },
         [0, make(0, 0), d]),
     f = make_str([0, loc], prop),
     g = lid([0, gloc], cst_x$3),
     h = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, obj$0[2]], 0, g),
     i = caml_call4(Ppxlib_ast_Ast_helper_lite[7][24], [0, prop_loc], 0, h, f),
     j = mknoloc(cst_x$4),
     k = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, j),
     e =
       caml_call6
        (Ppxlib_ast_Ast_helper_lite[7][6],
         [0, [0, loc[1], loc[2], 1]],
         0,
         nolabel,
         0,
         k,
         i);
    return caml_call4
            (Ppxlib_ast_Ast_helper_lite[7][8],
             0,
             0,
             invoker$0,
             [0,
              [0, nolabel, obj$0],
              [0, [0, nolabel, value], [0, [0, nolabel, e], 0]]]);
   }
   function new_object(constr, args$0){
    var
     b =
       [0,
        nolabel,
        caml_call2(Stdlib_ListLabels[20], function(a){return a[1];}, args$0)],
     invoker$0 =
       invoker
        (0,
         function(args, tres){
          var loc = Ppxlib_ast_Ast_helper_lite[1][1];
          return [0, [3, [0, B, loc], 0], loc, 0, 0];
         },
         function(args$0, tres){
          var tres$0 = type(0, cst_t$2, [0, tres, 0]);
          if(! args$0)
           throw caml_maybe_attach_backtrace([0, Assert_failure, A], 1);
          var args$1 = args$0[2], unit = args$0[1];
          if(! caml_equal(unit[1], nolabel))
           throw caml_maybe_attach_backtrace([0, Assert_failure, z], 1);
          var args$2 = args(args$1);
          return [0,
                  [0,
                   [0,
                    nolabel,
                    type(0, cst_constr, [0, arrows(args$2, tres$0), 0])],
                   args$2],
                  tres$0];
         },
         function(param){
          if(! param)
           throw caml_maybe_attach_backtrace([0, Assert_failure, y], 1);
          var args = param[2], constr = param[1];
          return apply
                  (js_unsafe_dot,
                   0,
                   cst_new_obj,
                   [0, constr, [0, inject_args(args), 0]]);
         },
         caml_call2
          (Stdlib_ListLabels[20],
           function(label){return make([0, label], 0);},
           b)),
     a = constr[2],
     gloc = [0, a[1], a[2], 1],
     e = unit([0, gloc], 0, 0),
     e$0 =
       caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, constr[2]], 0, constr),
     c =
       caml_call2
        (Stdlib[37], [0, [0, nolabel, e$0], args$0], [0, [0, nolabel, e], 0]);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], 0, 0, invoker$0, c);
   }
   var
    S = caml_call1(Stdlib_Map[1], [0, Stdlib_StringLabels[10]]),
    cst_prop = "prop",
    cst_writeonly_prop = "writeonly_prop",
    cst_readonly_prop = "readonly_prop",
    cst_optdef_prop = "optdef_prop",
    cst_optdef = cst_optdef$0;
   function drop_pexp_poly(body){
    var match = body[1];
    if(typeof match !== "number" && 28 === match[0]){
     var ty = match[2], e = match[1];
     return [0, e, ty];
    }
    return [0, body, 0];
   }
   function prop_type(constr, ty){
    var
     constr$0 =
       157298091 <= constr
        ? 803613097 <= constr ? cst_prop : cst_writeonly_prop
        : -528289822 <= constr ? cst_readonly_prop : cst_optdef_prop;
    return type(0, constr$0, [0, ty, 0]);
   }
   function wrap_arg_type(constr, ty){
    return -528289822 <= constr ? ty : type(0, cst_optdef, [0, ty, 0]);
   }
   var
    Prop_kind = [0, prop_type, wrap_arg_type],
    C =
      [0,
       [11, " (normalized to ", [3, 0, [12, 41, 0]]],
       " (normalized to %S)"],
    D =
      [0,
       [11, cst_Duplicated_val_or_method, [3, 0, [2, 0, [12, 46, 0]]]],
       cst_Duplicated_val_or_method_S],
    E =
      [0,
       [11, cst_Duplicated_val_or_method, [3, 0, [2, 0, [12, 46, 0]]]],
       cst_Duplicated_val_or_method_S],
    F = [0, 157298091],
    G = [0, 803613097],
    H = [0, -528289822],
    I = [0, -536120430],
    J =
      [0,
       [11, cst_This_field_is_not_valid_in, 0],
       cst_This_field_is_not_valid_in],
    K = [0, [11, cst_Too_many_attributes, 0], cst_Too_many_attributes],
    L =
      [0,
       [11, "Unkown jsoo attribute ([", [17, 5, [2, 0, [11, "]).", 0]]]],
       "Unkown jsoo attribute ([@@%s])."],
    M =
      [0,
       [11, cst_A_mutable_field_cannot_be_, 0],
       cst_A_mutable_field_cannot_be_],
    N =
      [0,
       [11, cst_Polymorphic_method_not_sup, 0],
       cst_Polymorphic_method_not_sup],
    O = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 721, 19],
    cst_wrap_meth_callback = "wrap_meth_callback",
    cst_obj = "obj",
    cst_t$3 = cst_t$7,
    cst_t$4 = cst_t$7,
    cst_meth$0 = cst_meth$1,
    cst_t$5 = cst_t$7,
    cst_t$6 = cst_t$7;
   function filter_map(f, l){
    var
     l$0 =
       caml_call3
        (Stdlib_ListLabels[26],
         function(acc, x){
          var match = caml_call1(f, x);
          if(! match) return acc;
          var x$0 = match[1];
          return [0, x$0, acc];
         },
         0,
         l);
    return caml_call1(Stdlib_ListLabels[10], l$0);
   }
   function create_meth_ty(exp){
    var match = exp[1];
    if(typeof match !== "number" && 3 === match[0]){
     var body = match[3], params = match[1];
     if(0 === body[0])
      var e = body[1], a = create_meth_ty(e);
     else
      var a = [0, nolabel, 0];
     var
      b =
        caml_call2
         (Stdlib_ListLabels[23],
          function(param){
           var match = param[2];
           if(0 !== match[0]) return 0;
           var label = match[1];
           return [0, label];
          },
          params);
     return caml_call2(Stdlib[37], b, a);
    }
    return 0;
   }
   function preprocess_literal_object(mappper, fields){
    function check_name(id, names){
     var txt = unescape(id[1]);
     if(! caml_call2(S[32], txt, names))
      return caml_call3(S[2], txt, id, names);
     var id$0 = caml_call2(S[17], txt, names);
     function details(id){
      return id[1] !== txt ? caml_call2(Stdlib_Printf[4], C, txt) : cst$0;
     }
     var
      a = details(id$0),
      b = caml_call3(Stdlib_Printf[4], D, id$0[1], a),
      sub = [0, [0, id$0[2], b], 0],
      c = details(id),
      d = caml_call3(Stdlib_Printf[4], E, id[1], c);
     throw caml_maybe_attach_backtrace(make_exception(id[2], sub, d), 1);
    }
    function a(param){
     var txt = param[1][1], prefix_len = 5;
     a:
     {
      if
       (5 < caml_ml_string_length(txt)
        && caml_call3(Stdlib_StringLabels[16], txt, 0, prefix_len) === "jsoo."){
       var
        a =
          [0,
           1,
           caml_call3
            (Stdlib_StringLabels[16],
             txt,
             prefix_len,
             caml_ml_string_length(txt) - 5 | 0)];
       break a;
      }
      var a = [0, 0, txt];
     }
     var match$0 = a[2], match = a[1];
     return match$0 !== cst_optdef$0
             ? match$0
               !== "readonly"
               ? match$0
                 !== "readwrite"
                 ? match$0
                   !== "writeonly"
                   ? match ? [0, [0, 427291060, txt]] : 0
                   : F
                 : G
               : H
             : I;
    }
    function f(param, exp){
     var fields = param[2], names = param[1], b = exp[1];
     switch(b[0]){
       case 1:
        var c = b[1], match = c[3], mut = c[2], id = c[1];
        if(0 !== match[0]){
         var
          body = match[2],
          bang = match[1],
          names$0 = check_name(id, names),
          body$0 = caml_call1(mappper, body),
          match$4 = filter_map(a, exp[3]);
         a:
         {
          if(mut){
           if(! match$4){var kind = 803613097; break a;}
           var e = match$4[1];
           if(typeof e === "number" && -528289822 === e && ! match$4[2]){var kind = raise_errorf(exp[2], M); break a;}
          }
          else{
           if(! match$4){var kind = -528289822; break a;}
           var f = match$4[1];
           if(typeof f === "number" && -528289822 === f && ! match$4[2]){var kind = -528289822; break a;}
          }
          if(match$4[2])
           var kind = raise_errorf(exp[2], K);
          else{
           var match$0 = match$4[1];
           if(typeof match$0 === "number")
            var
             kind =
               157298091 === match$0
                ? 157298091
                : 803613097 <= match$0 ? 803613097 : -536120430;
           else
            var s = match$0[2], kind = caml_call1(raise_errorf(exp[2], L), s);
          }
         }
         return [0, names$0, [0, [1, id, kind, bang, body$0], fields]];
        }
        break;
       case 2:
        var d = b[1], match$1 = d[3], priv = d[2], id$0 = d[1];
        if(0 !== match$1[0]){
         var
          body$1 = match$1[2],
          bang$0 = match$1[1],
          names$1 = check_name(id$0, names),
          match$2 = drop_pexp_poly(caml_call1(mappper, body$1)),
          body_ty = match$2[2],
          body$2 = match$2[1],
          g = create_meth_ty(body$2),
          fun_ty =
            caml_call2
             (Stdlib_ListLabels[20],
              function(label){return make([0, label], 0);},
              g);
         a:
         if(body_ty){
          var ty = body_ty[1], match$3 = ty[1];
          if(typeof match$3 !== "number" && 8 === match$3[0]){var body$3 = raise_errorf(exp[2], N); break a;}
          var body$3 = [0, body$2, [0, ty]];
         }
         else
          var body$3 = [0, body$2, 0];
         return [0,
                 names$1,
                 [0, [0, id$0, priv, bang$0, body$3, fun_ty], fields]];
        }
        break;
     }
     return raise_errorf(exp[2], J);
    }
    try{
     var
      b = caml_call3(Stdlib_ListLabels[26], f, [0, S[1], 0], fields)[2],
      c = [0, 891486873, caml_call1(Stdlib_ListLabels[10], b)];
     return c;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Syntax_error) throw caml_maybe_attach_backtrace(exn, 0);
     var error = exn[2];
     return [0, 106380200, caml_call1(Ppxlib_Location[14][7], error)];
    }
   }
   function literal_object(self_id, fields){
    function name(param){
     if(0 === param[0]){var id = param[1]; return id;}
     var id$0 = param[1];
     return id$0;
    }
    var
     c =
       caml_call2
        (Stdlib_ListLabels[20],
         function(param){
          if(0 !== param[0]) return 0;
          var l = param[5];
          return l;
         },
         fields),
     extra_types = caml_call1(Stdlib_ListLabels[14], c),
     invoker$0 =
       invoker
        ([0, extra_types],
         function(args$0, tres){
          var
           args$1 =
             caml_call3
              (Stdlib_ListLabels[29],
               function(f, desc){
                var ret_ty = typ$0(desc), label = desc[1];
                if(0 === f[0]){
                 var
                  args$0 = f[5],
                  a = type(0, cst_meth$0, [0, ret_ty, 0]),
                  b = args(args$0);
                 return [0,
                         label,
                         arrows
                          ([0, [0, nolabel, type(0, cst_t$5, [0, tres, 0])], b], a)];
                }
                var constr = f[2];
                return [0, label, prop_type(constr, ret_ty)];
               },
               fields,
               args$0);
          return arrows
                  ([0, [0, nolabel, type(0, cst_t$6, [0, tres, 0])], args$1],
                   tres);
         },
         function(args$0, tres){
          var
           args$1 =
             caml_call3
              (Stdlib_ListLabels[29],
               function(f, desc){
                var ret_ty = typ$0(desc), label = desc[1];
                if(0 === f[0]){
                 var args$0 = f[5], a = args(args$0);
                 return [0,
                         label,
                         arrows
                          ([0, [0, nolabel, type(0, cst_t$3, [0, tres, 0])], a],
                           ret_ty)];
                }
                var constr = f[2];
                return [0, label, wrap_arg_type(constr, ret_ty)];
               },
               fields,
               args$0);
          return [0, args$1, type(0, cst_t$4, [0, tres, 0])];
         },
         function(args){
          var
           a =
             caml_call3
              (Stdlib_ListLabels[29],
               function(f, arg){
                var
                 a = 0,
                 b =
                   0 === f[0]
                    ? apply(js_dot, 0, cst_wrap_meth_callback, [0, arg, 0])
                    : arg,
                 c = [0, inject_arg(b), a];
                return tuple
                        (0, 0, [0, ocaml_str(0, 0, unescape(name(f)[1])), c]);
               },
               fields,
               args);
          return apply
                  (js_unsafe_dot,
                   0,
                   cst_obj,
                   [0,
                    caml_call3(Ppxlib_ast_Ast_helper_lite[7][17], 0, 0, a),
                    0]);
         },
         caml_call2
          (Stdlib_ListLabels[20],
           function(param){return 0 === param[0] ? make(0, 0) : make(0, 0);},
           fields)),
     b = Ppxlib_ast_Ast_helper_lite[1][1],
     gloc = [0, b[1], b[2], 1],
     d =
       caml_call2
        (Stdlib_ListLabels[20],
         function(f){
          var
           loc = name(f)[2],
           g = name(f)[1],
           h = lid([0, Ppxlib_Location[3]], g),
           e = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, loc], 0, h),
           d = 0;
          if(0 === f[0])
           var
            b = lid([0, Ppxlib_Location[3]], self),
            c =
              [0,
               [0,
                nolabel,
                caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], 0, 0, b)],
               0],
            a = caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], 0, 0, e, c);
          else
           var a = e;
          return [0, [2, [0, name(f), 1, [1, 1, a]]], loc, d];
         },
         fields),
     f = [0, caml_call3(Ppxlib_ast_Ast_helper_lite[6][3], [0, gloc], 0, 0), d],
     fake_object = caml_call3(Ppxlib_ast_Ast_helper_lite[7][33], 0, 0, f),
     g =
       [0,
        self,
        caml_call2
         (Stdlib_ListLabels[20], function(f){return name(f)[1];}, fields)],
     a =
       caml_call3
        (Stdlib_ListLabels[27],
         function(name, fun){
          var match = fun[1];
          if(typeof match !== "number" && 3 === match[0]){
           var
            b = match[3],
            c = match[2],
            params = match[1],
            f = mknoloc(name),
            g =
              [0,
               nolabel,
               0,
               caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, f)],
            a = fun[2],
            params$0 = [0, [0, [0, a[1], a[2], 1], g], params];
           return [0, [3, params$0, c, b], fun[2], fun[3], fun[4]];
          }
          var
           d = mknoloc(name),
           e = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, d);
          return caml_call6
                  (Ppxlib_ast_Ast_helper_lite[7][6],
                   [0, gloc],
                   0,
                   nolabel,
                   0,
                   e,
                   fun);
         },
         g,
         fake_object),
     e = [0, a[1], a[2], a[3], [0, merlin_hide, 0]],
     h =
       caml_call2
        (Stdlib_ListLabels[20],
         function(f){
          a:
          if(0 === f[0]){
           var
            match = f[4],
            ty = match[2],
            body = match[1],
            match$0 = body[1];
           if(typeof match$0 !== "number" && 3 === match$0[0] && ! ty){
            var
             b$0 = match$0[3],
             c = match$0[2],
             params = match$0[1],
             h = body[2],
             params$0 =
               [0, [0, [0, h[1], h[2], 1], [0, nolabel, 0, self_id]], params],
             e$0 = [0, [3, params$0, c, b$0], body[2], body[3], body[4]];
            break a;
           }
           if(ty){
            var
             ty$0 = ty[1],
             d = body[2],
             e =
               caml_call6
                (Ppxlib_ast_Ast_helper_lite[7][6],
                 [0, [0, d[1], d[2], 1]],
                 0,
                 0,
                 0,
                 self_id,
                 body),
             match$1 = e[1];
            if(typeof match$1 !== "number" && 3 === match$1[0]){
             var a = match$1[1];
             if(a && ! a[2] && ! match$1[2]){
              var
               b = match$1[3],
               e$0 =
                 [0, [3, [0, a[1], 0], [0, [0, ty$0]], b], e[2], e[3], e[4]];
              break a;
             }
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, O], 1);
           }
           var
            g = body[2],
            e$0 =
              caml_call6
               (Ppxlib_ast_Ast_helper_lite[7][6],
                [0, [0, g[1], g[2], 1]],
                0,
                0,
                0,
                self_id,
                body);
          }
          else
           var body$0 = f[4], e$0 = body$0;
          return [0, nolabel, e$0];
         },
         fields),
     i = caml_call2(Stdlib[37], h, [0, [0, nolabel, e], 0]);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], 0, 0, invoker$0, i);
   }
   var
    c = caml_call1(CamlinternalOO[16], shared),
    b =
      caml_call2
        (CamlinternalOO[8],
         c,
         [0,
          cst_with_constraint,
          cst_virtual_flag,
          cst_variance,
          cst_value_description,
          cst_value_constraint,
          cst_value_binding,
          cst_type_kind,
          cst_type_extension,
          cst_type_exception,
          cst_type_declaration,
          cst_type_constraint,
          cst_toplevel_phrase,
          cst_toplevel_directive,
          cst_structure_item_desc,
          cst_structure_item,
          cst_structure,
          cst_string$0,
          cst_signature_item_desc,
          cst_signature_item,
          cst_signature,
          cst_row_field_desc,
          cst_row_field,
          cst_rec_flag,
          cst_private_flag,
          cst_position,
          cst_payload,
          cst_pattern_desc,
          cst_pattern,
          cst_package_type,
          cst_override_flag,
          cst_option,
          cst_open_infos,
          cst_open_description,
          cst_open_declaration,
          cst_object_field_desc,
          cst_object_field,
          cst_mutable_flag,
          cst_module_type_desc,
          cst_module_type_declaration,
          cst_module_type,
          cst_module_substitution,
          cst_module_expr_desc,
          cst_module_expr,
          cst_module_declaration,
          cst_module_binding,
          cst_longident_loc,
          cst_longident,
          cst_location_stack,
          cst_location,
          cst_loc,
          cst_list,
          cst_letop,
          cst_label_declaration,
          cst_label,
          cst_int,
          cst_injectivity,
          cst_include_infos,
          cst_include_description,
          cst_include_declaration,
          cst_functor_parameter,
          cst_function_param_desc,
          cst_function_param,
          cst_function_body,
          cst_extension_constructor_kind,
          cst_extension_constructor,
          cst_extension,
          cst_expression_desc,
          cst_expression,
          cst_directive_argument_desc,
          cst_directive_argument,
          cst_direction_flag,
          cst_core_type_desc,
          cst_core_type,
          cst_constructor_declaration,
          cst_constructor_arguments,
          cst_constant,
          cst_closed_flag,
          cst_class_type_field_desc,
          cst_class_type_field,
          cst_class_type_desc,
          cst_class_type_declaration,
          cst_class_type,
          cst_class_structure,
          cst_class_signature,
          cst_class_infos,
          cst_class_field_kind,
          cst_class_field_desc,
          cst_class_field,
          cst_class_expr_desc,
          cst_class_expr,
          cst_class_description,
          cst_class_declaration,
          cst_char,
          cst_cases,
          cst_case,
          cst_bool,
          cst_binding_op,
          cst_attributes,
          cst_attribute,
          cst_array,
          cst_arg_label])
       [68],
    d =
      caml_call6
       (CamlinternalOO[18],
        c,
        0,
        0,
        [0,
         cst_arg_label,
         cst_array,
         cst_attribute,
         cst_attributes,
         cst_binding_op,
         cst_bool,
         cst_case,
         cst_cases,
         cst_char,
         cst_class_declaration,
         cst_class_description,
         cst_class_expr,
         cst_class_expr_desc,
         cst_class_field,
         cst_class_field_desc,
         cst_class_field_kind,
         cst_class_infos,
         cst_class_signature,
         cst_class_structure,
         cst_class_type,
         cst_class_type_declaration,
         cst_class_type_desc,
         cst_class_type_field,
         cst_class_type_field_desc,
         cst_closed_flag,
         cst_constant,
         cst_constructor_arguments,
         cst_constructor_declaration,
         cst_core_type,
         cst_core_type_desc,
         cst_direction_flag,
         cst_directive_argument,
         cst_directive_argument_desc,
         cst_expression,
         cst_expression_desc,
         cst_extension,
         cst_extension_constructor,
         cst_extension_constructor_kind,
         cst_function_body,
         cst_function_param,
         cst_function_param_desc,
         cst_functor_parameter,
         cst_include_declaration,
         cst_include_description,
         cst_include_infos,
         cst_injectivity,
         cst_int,
         cst_label,
         cst_label_declaration,
         cst_letop,
         cst_list,
         cst_loc,
         cst_location,
         cst_location_stack,
         cst_longident,
         cst_longident_loc,
         cst_module_binding,
         cst_module_declaration,
         cst_module_expr,
         cst_module_expr_desc,
         cst_module_substitution,
         cst_module_type,
         cst_module_type_declaration,
         cst_module_type_desc,
         cst_mutable_flag,
         cst_object_field,
         cst_object_field_desc,
         cst_open_declaration,
         cst_open_description,
         cst_open_infos,
         cst_option,
         cst_override_flag,
         cst_package_type,
         cst_pattern,
         cst_pattern_desc,
         cst_payload,
         cst_position,
         cst_private_flag,
         cst_rec_flag,
         cst_row_field,
         cst_row_field_desc,
         cst_signature,
         cst_signature_item,
         cst_signature_item_desc,
         cst_string$0,
         cst_structure,
         cst_structure_item,
         cst_structure_item_desc,
         cst_toplevel_directive,
         cst_toplevel_phrase,
         cst_type_constraint,
         cst_type_declaration,
         cst_type_exception,
         cst_type_extension,
         cst_type_kind,
         cst_value_binding,
         cst_value_constraint,
         cst_value_description,
         cst_variance,
         cst_virtual_flag,
         cst_with_constraint],
        Ppxlib_Ast_traverse[1],
        1),
    Q = d[35],
    P = d[1];
   caml_call3
    (CamlinternalOO[10],
     c,
     b,
     function(self_1, expr){
      var prev_default_loc = Ppxlib_ast_Ast_helper_lite[1][1];
      Ppxlib_ast_Ast_helper_lite[1][1] = expr[2];
      var pexp_attributes = expr[4], a = expr[1];
      a:
      {
       if(typeof a !== "number")
        switch(a[0]){
          case 4:
           var prop = a[1], c = prop[1];
           if(typeof c !== "number")
            switch(c[0]){
              case 0:
               var x = c[1][1];
               if(0 === x[0]){
                var j = x[1];
                if(j !== cst$2)
                 if(j !== cst$3){
                  if(j === ":="){
                   var k = a[2];
                   if(k){
                    var y = k[1];
                    if(typeof y[1] === "number"){
                     var prop$0 = y[2], d = prop$0[1];
                     if(typeof d !== "number" && 4 === d[0]){
                      var l = d[1][1];
                      if(typeof l !== "number" && 0 === l[0]){
                       var z = l[1][1];
                       if(0 === z[0] && z[1] === cst$3){
                        var m = d[2];
                        if(m){
                         var A = m[1];
                         if(typeof A[1] === "number"){
                          var n = m[2];
                          if(n){
                           var B = n[1];
                           if(typeof B[1] === "number" && ! n[2]){
                            var o = k[2];
                            if(o){
                             var C = o[1];
                             if(typeof C[1] === "number" && ! o[2]){
                              var
                               value = C[2],
                               meth = B[2],
                               obj = A[2],
                               obj$0 = caml_call2(self_1[1][b + 1], self_1, obj),
                               value$0 = caml_call2(self_1[1][b + 1], self_1, value),
                               prop_loc = prop$0[2],
                               prop$1 = exp_to_string(meth),
                               new_expr$0 =
                                 prop_set(meth[2], prop_loc, obj$0, prop$1, value$0),
                               new_expr =
                                 caml_call2
                                  (self_1[1][b + 1],
                                   self_1,
                                   [0,
                                    new_expr$0[1],
                                    new_expr$0[2],
                                    new_expr$0[3],
                                    pexp_attributes]);
                              break a;
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                 else{
                  var p = a[2];
                  if(p){
                   var D = p[1];
                   if(typeof D[1] === "number"){
                    var q = p[2];
                    if(q){
                     var E = q[1];
                     if(typeof E[1] === "number" && ! q[2]){
                      var
                       meth$0 = E[2],
                       obj$1 = D[2],
                       obj$2 = caml_call2(self_1[1][b + 1], self_1, obj$1),
                       prop$2 = exp_to_string(meth$0),
                       new_expr$1 = prop_get(meth$0[2], obj$2, prop$2),
                       new_expr =
                         caml_call2
                          (self_1[1][b + 1],
                           self_1,
                           [0,
                            new_expr$1[1],
                            new_expr$1[2],
                            new_expr$1[3],
                            pexp_attributes]);
                      break a;
                     }
                    }
                   }
                  }
                 }
                else{
                 var r = a[2];
                 if(r){
                  var F = r[1];
                  if(typeof F[1] === "number"){
                   var f = r[2];
                   if(f){
                    var G = f[1];
                    if(typeof G[1] === "number"){
                     var meth$1 = G[2], g = meth$1[1], obj$3 = F[2];
                     if(typeof g !== "number" && 4 === g[0]){
                      if(f[2]) break;
                      var
                       args = g[2],
                       meth$2 = g[1],
                       meth_str$0 = exp_to_string(meth$2),
                       obj$5 = caml_call2(self_1[1][b + 1], self_1, obj$3),
                       args$0 =
                         caml_call2
                          (Stdlib_ListLabels[20],
                           function(param){
                            var e = param[2], s = param[1];
                            return [0, s, caml_call2(self_1[1][b + 1], self_1, e)];
                           },
                           args),
                       H = expr[2],
                       loc = [0, H[1], H[2], 1],
                       new_expr$3 =
                         method_call
                          (loc, expr[2], obj$5, [0, meth_str$0, meth$2[2]], args$0),
                       new_expr =
                         caml_call2
                          (self_1[1][b + 1],
                           self_1,
                           [0,
                            new_expr$3[1],
                            new_expr$3[2],
                            new_expr$3[3],
                            pexp_attributes]);
                      break a;
                     }
                     if(! f[2]){
                      var
                       obj$4 = caml_call2(self_1[1][b + 1], self_1, obj$3),
                       meth_str = exp_to_string(meth$1),
                       new_expr$2 =
                         method_call
                          (expr[2], expr[2], obj$4, [0, meth_str, meth$1[2]], 0),
                       new_expr =
                         caml_call2
                          (self_1[1][b + 1],
                           self_1,
                           [0,
                            new_expr$2[1],
                            new_expr$2[2],
                            new_expr$2[3],
                            pexp_attributes]);
                      break a;
                     }
                    }
                   }
                  }
                 }
                }
               }
               break;
              case 4:
               var s = c[1][1];
               if(typeof s !== "number" && 0 === s[0]){
                var I = s[1][1];
                if(0 === I[0] && I[1] === cst$2){
                 var t = c[2];
                 if(t){
                  var J = t[1];
                  if(typeof J[1] === "number"){
                   var u = t[2];
                   if(u){
                    var K = u[1];
                    if(typeof K[1] === "number" && ! u[2]){
                     var
                      pexp_loc = expr[2],
                      args$1 = a[2],
                      meth$3 = K[2],
                      obj$6 = J[2],
                      meth_str$1 = exp_to_string(meth$3),
                      obj$7 = caml_call2(self_1[1][b + 1], self_1, obj$6),
                      args$2 =
                        caml_call2
                         (Stdlib_ListLabels[20],
                          function(param){
                           var e = param[2], s = param[1];
                           return [0, s, caml_call2(self_1[1][b + 1], self_1, e)];
                          },
                          args$1),
                      new_expr$4 =
                        method_call
                         (prop[2],
                          pexp_loc,
                          obj$7,
                          [0, meth_str$1, meth$3[2]],
                          args$2),
                      new_expr =
                        caml_call2
                         (self_1[1][b + 1],
                          self_1,
                          [0,
                           new_expr$4[1],
                           new_expr$4[2],
                           new_expr$4[3],
                           pexp_attributes]);
                     break a;
                    }
                   }
                  }
                 }
                }
               }
               break;
              case 34:
               var L = c[1];
               if(L[1][1] === cst_js){
                var M = L[2];
                if(0 === M[0]){
                 var v = M[1];
                 if(v){
                  var N = v[1][1];
                  if(0 === N[0]){
                   var w = N[1][1];
                   if(typeof w !== "number" && 21 === w[0] && ! v[2]){
                    var
                     args$3 = a[2],
                     constr = w[1],
                     args$4 =
                       caml_call2
                        (Stdlib_ListLabels[20],
                         function(param){
                          var e = param[2], s = param[1];
                          return [0, s, caml_call2(self_1[1][b + 1], self_1, e)];
                         },
                         args$3),
                     new_expr$5 = new_object(constr, args$4),
                     new_expr =
                       caml_call2
                        (self_1[1][b + 1],
                         self_1,
                         [0,
                          new_expr$5[1],
                          new_expr$5[2],
                          new_expr$5[3],
                          pexp_attributes]);
                    break a;
                   }
                  }
                 }
                }
               }
               break;
            }
           break;
          case 34:
           var O = a[1];
           if(O[1][1] === cst_js){
            var P = O[2];
            if(0 === P[0]){
             var h = P[1];
             if(h){
              var R = h[1][1];
              if(0 === R[0]){
               var i = R[1][1];
               if(typeof i !== "number")
                switch(i[0]){
                  case 21:
                   if(! h[2]){
                    var
                     constr$0 = i[1],
                     new_expr$6 = new_object(constr$0, 0),
                     new_expr =
                       caml_call2
                        (self_1[1][b + 1],
                         self_1,
                         [0,
                          new_expr$6[1],
                          new_expr$6[2],
                          new_expr$6[3],
                          pexp_attributes]);
                    break a;
                   }
                   break;
                  case 29:
                   if(! h[2]){
                    var
                     class_struct = i[1],
                     S = class_struct[2],
                     fields =
                       preprocess_literal_object
                        (caml_call1(self_1[1][b + 1], self_1), S),
                     variant = fields[1];
                    if(891486873 <= variant)
                     var
                      fields$0 = fields[2],
                      new_expr$7 = literal_object(class_struct[1], fields$0);
                    else
                     var
                      e = fields[2],
                      new_expr$7 =
                        caml_call3(Ppxlib_ast_Ast_helper_lite[7][38], 0, 0, e);
                    var
                     new_expr =
                       caml_call2
                        (self_1[1][b + 1],
                         self_1,
                         [0,
                          new_expr$7[1],
                          new_expr$7[2],
                          new_expr$7[3],
                          pexp_attributes]);
                    break a;
                   }
                   break;
                }
              }
             }
            }
           }
           break;
        }
       var new_expr = caml_call1(caml_call1(Q, self_1), expr);
      }
      Ppxlib_ast_Ast_helper_lite[1][1] = prev_default_loc;
      return new_expr;
     });
   caml_call1(CamlinternalOO[17], c);
   var e = caml_call2(CamlinternalOO[24], 0, c);
   caml_call1(P, e);
   var
    transform = caml_call3(CamlinternalOO[26], 0, e, c),
    R =
      [0,
       caml_call1
        (caml_get_cached_method(transform, -951102413, cache_id), transform)];
   caml_call13(Ppxlib_Driver[5], 0, 0, 0, 0, R, 0, 0, 0, 0, 0, 0, 0, "ppx_js");
   function expr(param, exp){
    var
     a =
       caml_call2
        (caml_get_cached_method(transform, 782176664, cache_id$0),
         transform,
         caml_call2(Ppxlib_ast_Import[2][9], 4, exp));
    return caml_call1(caml_call1(Ppxlib_ast_Import[2][10], 4), a);
   }
   var
    a = Ast_mapper[1],
    mapper =
      [0,
       a[1],
       a[2],
       a[3],
       a[4],
       a[5],
       a[6],
       a[7],
       a[8],
       a[9],
       a[10],
       a[11],
       a[12],
       a[13],
       a[14],
       a[15],
       a[16],
       a[17],
       expr,
       a[19],
       a[20],
       a[21],
       a[22],
       a[23],
       a[24],
       a[25],
       a[26],
       a[27],
       a[28],
       a[29],
       a[30],
       a[31],
       a[32],
       a[33],
       a[34],
       a[35],
       a[36],
       a[37],
       a[38],
       a[39],
       a[40],
       a[41],
       a[42],
       a[43],
       a[44],
       a[45],
       a[46],
       a[47],
       a[48]],
    Ppx_js_Ppx_js_internal =
      [0,
       nolabel,
       Syntax_error,
       make_exception,
       raise_errorf,
       unflatten,
       split_at_dots,
       parse_lid,
       mkloc,
       mknoloc,
       lid,
       mkloc_opt,
       unit,
       tuple,
       ocaml_str,
       exp_to_string,
       typ,
       arrows,
       wrapper,
       make_str,
       merlin_hide,
       Js,
       javascript_str,
       unescape,
       app_arg,
       inject_arg,
       inject_args,
       Arg,
       js_dot_t_the_first_arg,
       invoker,
       open_t,
       method_call,
       prop_get,
       prop_set,
       new_object,
       S,
       drop_pexp_poly,
       Prop_kind,
       filter_map,
       create_meth_ty,
       preprocess_literal_object,
       literal_object,
       transform,
       mapper];
   runtime.caml_register_global
    (112, Ppx_js_Ppx_js_internal, "Ppx_js__Ppx_js_internal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_js
//# unitInfo: Requires: Ppx_js__Ppx_js_internal
//# shape: Ppx_js:[N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Ppx_js_Ppx_js_internal = global_data.Ppx_js__Ppx_js_internal,
    wrapper = Ppx_js_Ppx_js_internal[18],
    mapper = Ppx_js_Ppx_js_internal[43];
   wrapper[1] = [0, "Js_of_ocaml"];
   var Ppx_js = [0, mapper];
   runtime.caml_register_global(2, Ppx_js, "Ppx_js");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
