// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Gen_intf
//# shape: Gen_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Gen_intf = [0];
   runtime.caml_register_global(0, Gen_intf, "Gen_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: GenShims_
//# shape: GenShims_:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, GenShims = [0];
   runtime.caml_register_global(0, GenShims, "GenShims_");
   return;
  }
  (globalThis));

//# unitInfo: Provides: GenM_intf
//# shape: GenM_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, GenM_intf = [0];
   runtime.caml_register_global(0, GenM_intf, "GenM_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: GenMList
//# unitInfo: Requires: CamlinternalOO, Stdlib, Stdlib__Array
//# shape: GenMList:[F(1),F(3),F(1)*->F(1),F(1)*->F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_clone = "clone",
    cst_gen = "gen",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    shared = [0, cst_clone, cst_gen],
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    c = [0, "src/genMList.ml", 76, 19];
   function make(max_chunk_size, gen){
    return [0, [0, [2, gen]], 8, max_chunk_size];
   }
   function read_chunk(mlist, gen){
    var match = caml_call1(gen, 0);
    if(! match) return 0;
    var x = match[1];
    if(1 === mlist[3]){
     var tail = [0, [2, gen]], node = [1, x, tail];
     return node;
    }
    var
     r = [0, 1],
     a = runtime.caml_array_make(mlist[2], x),
     tail$0 = [0, [2, gen]],
     stop = [0, 0],
     node$0 = [0, a, r, tail$0];
    for(;;){
     if(! stop[1] && r[1] < mlist[2]){
      var match$0 = caml_call1(gen, 0);
      if(match$0){
       var x$0 = match$0[1], b = r[1];
       caml_check_bound(a, b)[b + 1] = x$0;
       r[1]++;
       continue;
      }
      tail$0[1] = 0;
      stop[1] = 1;
      continue;
     }
     if(mlist[2] < mlist[3]) mlist[2] = 2 * mlist[2] | 0;
     return node$0;
    }
   }
   function of_gen(gen){
    var mlist = make(4096, gen), prev$2 = mlist[1], prev = prev$2;
    for(;;){
     var node = read_chunk(mlist, gen);
     if(typeof node === "number"){prev[1] = 0; return mlist;}
     switch(node[0]){
       case 0:
        var prev$0 = node[3]; prev[1] = node; prev = prev$0; break;
       case 1:
        var prev$1 = node[2]; prev[1] = node; prev = prev$1; break;
       default: throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
     }
    }
   }
   function of_gen_lazy(a, opt, gen){
    var max_chunk_size = a ? a[1] : 2048, caching = opt ? opt[1] : 1;
    if(! caching) return [0, [0, [2, gen]], 1, 1];
    var max_chunk_size$0 = caml_call2(Stdlib[17], max_chunk_size, 2);
    return make(max_chunk_size$0, gen);
   }
   function to_gen(l){
    var cur = [0, l[1]], i = [0, 0];
    function next(param){
     for(;;){
      var match = cur[1][1];
      if(typeof match === "number") return 0;
      switch(match[0]){
        case 0:
         var l$0 = match[3], n = match[2], a = match[1];
         if(i[1] !== n[1]){
          var b = i[1], y = caml_check_bound(a, b)[b + 1];
          i[1]++;
          return [0, y];
         }
         cur[1] = l$0;
         i[1] = 0;
         break;
        case 1:
         var l$1 = match[2], x = match[1]; cur[1] = l$1; return [0, x];
        default:
         var gen = match[1], node = read_chunk(l, gen); cur[1][1] = node;
      }
     }
    }
    return next;
   }
   function to_seq(l0){
    function next(l$2, i$0, param){
     a:
     {
      var l = l$2, i = i$0;
      b:
      for(;;){
       var match = l[1];
       if(typeof match === "number") return 0;
       switch(match[0]){
         case 0:
          var l$0 = match[3], n = match[2], a = match[1];
          if(i !== n[1]) break a;
          l = l$0;
          i = 0;
          break;
         case 1:
          break b;
         default: var gen = match[1], node = read_chunk(l0, gen); l[1] = node;
       }
      }
      var l$1 = match[2], x = match[1];
      return [0, x, function(a){return next(l$1, i, a);}];
     }
     var y = caml_check_bound(a, i)[i + 1], b = i + 1 | 0;
     return [0, y, function(a){return next(l, b, a);}];
    }
    var a = 0, b = l0[1];
    return function(c){return next(b, a, c);};
   }
   var a = [0, 0], b = [0, cst_gen, cst_clone];
   function to_clonable(l){
    function make(node, i){
     var cur = [0, node], i$0 = [0, i];
     function next(param){
      for(;;){
       var match = cur[1][1];
       if(typeof match === "number") return 0;
       switch(match[0]){
         case 0:
          var l$0 = match[3], n = match[2], a = match[1];
          if(i$0[1] !== n[1]){
           var b = i$0[1], y = caml_check_bound(a, b)[b + 1];
           i$0[1] = i$0[1] + 1 | 0;
           return [0, y];
          }
          cur[1] = l$0;
          i$0[1] = 0;
          break;
         case 1:
          var l$1 = match[2], x = match[1]; cur[1] = l$1; return [0, x];
         default:
          var gen = match[1], node = read_chunk(l, gen); cur[1][1] = node;
       }
      }
     }
     if(! a[1]){
      var
       c = caml_call1(CamlinternalOO[16], shared),
       d = caml_call2(CamlinternalOO[3], c, cst),
       e = caml_call2(CamlinternalOO[8], c, b);
      caml_call2
       (CamlinternalOO[11],
        c,
        [0,
         e[1],
         function(self_1){var env = self_1[d + 1]; return env[4];},
         e[2],
         function(self_1){
          var env = self_1[d + 1];
          return caml_call2(env[1], env[2][1], env[3][1]);
         }]);
      caml_call1(CamlinternalOO[17], c);
      a[1] =
       function(b){
        var a = caml_call2(CamlinternalOO[24], 0, c);
        a[d + 1] = b;
        return a;
       };
     }
     return caml_call1(a[1], [0, make, cur, i$0, next]);
    }
    return make(l[1], 0);
   }
   var GenMList = [0, of_gen, of_gen_lazy, to_gen, to_seq, to_clonable];
   runtime.caml_register_global(7, GenMList, "GenMList");
   return;
  }
  (globalThis));

//# unitInfo: Provides: GenM
//# shape: GenM:[F(1)*]
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    GenM =
      [0,
       function(M){
        var a = M[2], b = M[3];
        function return$(x){
         var first = [0, 1];
         return function(param){
          return first[1]
                  ? (first[1] = 0, caml_call1(M[1], [0, x]))
                  : caml_call1(M[1], 0);};
        }
        function sequence_m(g, param){
         var match = caml_call1(g, 0);
         if(! match) return caml_call1(M[1], 0);
         var act = match[1];
         return caml_call2(b, act, function(x){return [0, x];});
        }
        function map(f, g, param){
         return caml_call2
                 (b,
                  caml_call1(g, 0),
                  function(param){
                   if(! param) return 0;
                   var x = param[1];
                   return [0, caml_call1(f, x)];
                  });
        }
        function flat_map(f, g){
         function next(f, g, param){
          return caml_call2
                  (a,
                   caml_call1(g, 0),
                   function(param){
                    if(! param) return caml_call1(M[1], 0);
                    var x = param[1], cur = caml_call1(f, x);
                    return map_from(f, g, cur, 0);
                   });
         }
         function map_from(f, g, cur, param){
          var res = caml_call1(cur, 0);
          return caml_call2
                  (a,
                   res,
                   function(param){return param ? res : next(f, g, 0);});
         }
         return function(a){return next(f, g, a);};
        }
        function fold(f, acc, g){
         return caml_call2
                 (a,
                  caml_call1(g, 0),
                  function(param){
                   if(! param) return caml_call1(M[1], acc);
                   var x = param[1], acc$0 = caml_call2(f, acc, x);
                   return fold(f, acc$0, g);
                  });
        }
        function fold_m(f, acc, g){
         return caml_call2
                 (a,
                  caml_call1(g, 0),
                  function(param){
                   if(! param) return caml_call1(M[1], acc);
                   var x = param[1];
                   return caml_call2
                           (a,
                            caml_call2(f, acc, x),
                            function(acc){return fold_m(f, acc, g);});
                  });
        }
        function iter(f, g){
         return caml_call2
                 (a,
                  caml_call1(g, 0),
                  function(param){
                   if(! param) return caml_call1(M[1], 0);
                   var x = param[1];
                   caml_call1(f, x);
                   return iter(f, g);
                  });
        }
        function iter_s(f, g){
         return caml_call2
                 (a,
                  caml_call1(g, 0),
                  function(param){
                   if(! param) return caml_call1(M[1], 0);
                   var x = param[1];
                   return caml_call2
                           (a, caml_call1(f, x), function(param){return iter_s(f, g);});
                  });
        }
        function iter_p(f, g){
         return caml_call2
                 (a,
                  caml_call1(g, 0),
                  function(param){
                   if(! param) return caml_call1(M[1], 0);
                   var x = param[1];
                   caml_call1(f, x);
                   return iter_p(f, g);
                  });
        }
        function symbol(x, f){return function(a){return map(f, x, a);};}
        function symbol_bind(x, f){return flat_map(f, x);}
        return [0,
                M,
                return$,
                sequence_m,
                map,
                flat_map,
                fold,
                fold_m,
                iter,
                iter_s,
                iter_p,
                [0, symbol_bind, symbol],
                symbol_bind,
                symbol];
       }];
   runtime.caml_register_global(0, GenM, "GenM");
   return;
  }
  (globalThis));

//# unitInfo: Provides: GenLabels_intf
//# shape: GenLabels_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, GenLabels_intf = [0];
   runtime.caml_register_global(0, GenLabels_intf, "GenLabels_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Gen
//# unitInfo: Requires: GenMList, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Format, Stdlib__List, Stdlib__Queue, Stdlib__Random
//# shape: Gen:[F(1),F(1),F(1),F(1),F(2),F(1)*,F(1)*->F(1),F(1)*->F(1),F(2)*,F(2)*->F(1),F(2)*->F(1),F(2)*->F(1),F(1),F(3),F(2),F(3)*->F(1),F(3)*->F(1),F(2),F(2),F(1),F(2)*->F(1),F(1)*->F(1)*,F(3)*,F(2)*->F(1),F(1)*->F(1),F(2)*->F(1),F(3),F(2)->F(1),F(2)->F(1),F(2),F(2)->F(1),F(2)*->F(1),F(2)*->F(1),F(3),F(2)*->F(1),F(2)*->F(1),F(1)*->F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(2),F(1),F(3)*->F(1),F(3),F(4),F(3),F(3),F(3)*->F(1),F(2)*,F(1)->F(1),F(3)->F(1),F(3)->F(1),F(2)->F(1),F(2),F(2),F(2)*->F(1),F(2)*->F(1),F(2)*->F(1),F(2)->F(1),F(2)*->F(1),F(2)->F(1),F(2),F(2)*->F(1),F(1)->F(1),F(1)->F(1),F(2)->F(1),F(1)->F(1),F(1)*->F(1),F(1),F(1),F(1),F(3)->F(1),F(3)->F(1),F(1),F(2),F(1)*->F(1),F(3)->F(1),F(1)->F(1),F(1)*->F(1),[F(2),F(2)*,F(2)*,F(2)*],F(2),F(2)*,F(2)*,F(2)*,F(7),F(1)*->F(1),F(2),N,F(1)->F(1)*,F(3)->F(1)*,F(1),F(3),F(1)*->F(1),F(2)->F(1),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_src_gen_ml = "src/gen.ml",
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst$1 = cst$3,
    cst$0 = cst$3,
    cst = ",",
    step = [0, 1],
    Stdlib = global_data.Stdlib,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Assert_failure = global_data.Assert_failure,
    GenMList = global_data.GenMList,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Array = global_data.Stdlib__Array,
    cst_Gen_get_exn = "Gen.get_exn",
    cst_reduce = "reduce",
    a = [0, cst_src_gen_ml, 226, 14],
    b = [0, cst_src_gen_ml, 366, 2],
    c = [0, cst_src_gen_ml, 388, 2],
    d = [0, cst_src_gen_ml, 407, 2],
    e = [0, cst_src_gen_ml, 423, 2],
    cst_min = "min",
    cst_max = "max",
    f = [0, cst_src_gen_ml, 985, 10],
    g = [0, cst_src_gen_ml, 1318, 12],
    h = [0, 0],
    i = [0, cst_src_gen_ml, 1344, 15],
    j = [0, cst_src_gen_ml, 1407, 23],
    k = [0, cst_src_gen_ml, 1402, 26],
    l = [0, 0, 0],
    m = [0, 0],
    n = [0, cst_src_gen_ml, 1454, 2],
    o = [0, 0],
    p = [0, cst_src_gen_ml, 1567, 16],
    q = [0, cst_src_gen_ml, 1582, 16],
    cst_Gen_int_range = "Gen.int_range",
    r = [0, 10],
    s = [0, 10],
    t = [0, 1];
   function empty(param){return 0;}
   function singleton(x){
    var first = [0, 1];
    return function(param){return first[1] ? (first[1] = 0, [0, x]) : 0;};
   }
   function repeat(x, param){return [0, x];}
   function repeatedly(f, param){return [0, caml_call1(f, 0)];}
   function iterate(x, f){
    var cur = [0, x];
    return function(param){
     var x = cur[1];
     cur[1] = caml_call1(f, cur[1]);
     return [0, x];};
   }
   function next(gen){return caml_call1(gen, 0);}
   function get(gen){return caml_call1(gen, 0);}
   function get_exn(gen){
    var match = caml_call1(gen, 0);
    if(! match)
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Gen_get_exn], 1);
    var x = match[1];
    return x;
   }
   function junk(gen){caml_call1(gen, 0); return 0;}
   function fold(f, acc$1, gen){
    var acc = acc$1;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) return acc;
     var x = match[1], acc$0 = caml_call2(f, acc, x);
     acc = acc$0;
    }
   }
   function reduce(f, g){
    var match = caml_call1(g, 0);
    if(! match)
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_reduce], 1);
    var acc = match[1];
    return fold(f, acc, g);
   }
   function unfold(f, acc){
    var acc$0 = [0, acc];
    return function(param){
     var match = caml_call1(f, acc$0[1]);
     if(! match) return 0;
     var match$0 = match[1], acc = match$0[2], x = match$0[1];
     acc$0[1] = acc;
     return [0, x];};
   }
   function init(opt, f){
    var limit = opt ? opt[1] : Stdlib[19], r = [0, 0];
    return function(param){
     if(limit <= r[1]) return 0;
     var x = caml_call1(f, r[1]);
     r[1]++;
     return [0, x];};
   }
   function iter(f, gen){
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) return 0;
     var x = match[1];
     caml_call1(f, x);
    }
   }
   function iteri(f, gen){
    var i = 0;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) return 0;
     var x = match[1];
     caml_call2(f, i, x);
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function is_empty(gen){return caml_call1(gen, 0) ? 0 : 1;}
   function length(gen){
    var acc$0 = 0;
    for(;;){
     if(! caml_call1(gen, 0)) return acc$0;
     var acc = acc$0 + 1 | 0;
     acc$0 = acc;
    }
   }
   function scan(f, acc, g){
    var state = [0, 0];
    return function(param){
     var match = state[1];
     if(typeof match === "number")
      return match ? 0 : (state[1] = [0, acc], [0, acc]);
     var acc$0 = match[1], match$0 = caml_call1(g, 0);
     if(match$0){
      var x = match$0[1], acc$1 = caml_call2(f, acc$0, x);
      state[1] = [0, acc$1];
      return [0, acc$1];
     }
     state[1] = 1;
     return 0;};
   }
   function unfold_scan(f, acc, g){
    var state = [0, [0, acc]];
    return function(param){
     var match = state[1];
     if(typeof match === "number"){
      if(match) return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
     }
     var acc = match[1], match$0 = caml_call1(g, 0);
     if(match$0){
      var
       x = match$0[1],
       match$1 = caml_call2(f, acc, x),
       y = match$1[2],
       acc$0 = match$1[1];
      state[1] = [0, acc$0];
      return [0, y];
     }
     state[1] = 1;
     return 0;};
   }
   function map(f, gen){
    var stop = [0, 0];
    return function(param){
     if(stop[1]) return 0;
     var match = caml_call1(gen, 0);
     if(match){var x = match[1]; return [0, caml_call1(f, x)];}
     stop[1] = 1;
     return 0;};
   }
   function mapi(f){
    var cnt = [0, 0];
    function cnt_map(x){
     var i = cnt[1];
     cnt[1] = i + 1 | 0;
     return caml_call2(f, i, x);
    }
    return function(a){return map(cnt_map, a);};
   }
   function fold_map(f, s, gen){
    var state = [0, s];
    return map
            (function(x){
              state[1] = caml_call2(f, state[1], x);
              return state[1];
             },
             gen);
   }
   function append(gen1, gen2){
    var first = [0, 1];
    return function(param){
     if(! first[1]) return caml_call1(gen2, 0);
     var x = caml_call1(gen1, 0);
     return x ? x : (first[1] = 0, caml_call1(gen2, 0));};
   }
   function flatten(next_gen){
    var state = [0, 0];
    function next$0(counter, param){
     var match = state[1];
     if(typeof match === "number"){
      if(match) return 0;
      var a = 0;
      if(counter >= 50) return caml_trampoline_return(get_next_gen, [0, a]);
      var counter$0 = counter + 1 | 0;
      return get_next_gen(counter$0, a);
     }
     var gen = match[1], x = caml_call1(gen, 0);
     if(x) return x;
     var b = 0;
     if(counter >= 50) return caml_trampoline_return(get_next_gen, [0, b]);
     var counter$1 = counter + 1 | 0;
     return get_next_gen(counter$1, b);
    }
    function next(param){return caml_trampoline(next$0(0, param));}
    function get_next_gen(counter, param){
     var match = caml_call1(next_gen, 0);
     if(! match){state[1] = 1; return 0;}
     var gen = match[1];
     state[1] = [0, gen];
     var a = 0;
     if(counter >= 50) return caml_trampoline_return(next$0, [0, a]);
     var counter$0 = counter + 1 | 0;
     return next$0(counter$0, a);
    }
    return next;
   }
   function flat_map(f, next_elem){
    var state = [0, 0];
    function next$0(counter, param){
     var match = state[1];
     if(typeof match === "number"){
      if(match) return 0;
      var a = 0;
      if(counter >= 50) return caml_trampoline_return(get_next_gen, [0, a]);
      var counter$0 = counter + 1 | 0;
      return get_next_gen(counter$0, a);
     }
     var gen = match[1], x = caml_call1(gen, 0);
     if(x) return x;
     var b = 0;
     if(counter >= 50) return caml_trampoline_return(get_next_gen, [0, b]);
     var counter$1 = counter + 1 | 0;
     return get_next_gen(counter$1, b);
    }
    function next(param){return caml_trampoline(next$0(0, param));}
    function get_next_gen(counter, param){
     try{var val = caml_call1(next_elem, 0);}
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      state[1] = 1;
      throw caml_maybe_attach_backtrace(e, 0);
     }
     if(! val){state[1] = 1; return 0;}
     var x = val[1];
     state[1] = [0, caml_call1(f, x)];
     var a = 0;
     if(counter >= 50) return caml_trampoline_return(next$0, [0, a]);
     var counter$0 = counter + 1 | 0;
     return next$0(counter$0, a);
    }
    return next;
   }
   function mem(opt, x, gen){
    var eq = opt ? opt[1] : caml_equal;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) return 0;
     var y = match[1], a = caml_call2(eq, x, y);
     if(a) return a;
    }
   }
   function take(n, gen){
    if(0 > n) throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
    var count = [0, 0];
    return function(param){
     if(count[1] !== n && count[1] !== -1){
      var x = caml_call1(gen, 0);
      return x ? (count[1]++, x) : (count[1] = -1, 0);
     }
     return 0;};
   }
   function drop(n$1, gen){
    var n = n$1;
    for(;;){
     if(0 === n) return;
     if(! caml_call1(gen, 0)) return;
     var n$0 = n - 1 | 0;
     n = n$0;
    }
   }
   function drop$0(n, gen){
    if(0 > n) throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
    var dropped = [0, 0];
    return function(param){
     return dropped[1]
             ? caml_call1(gen, 0)
             : (dropped[1] = 1, drop(n, gen), caml_call1(gen, 0));};
   }
   function nth(n, gen){
    if(0 > n) throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
    drop(n, gen);
    var match = caml_call1(gen, 0);
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var x = match[1];
    return x;
   }
   function take_nth(n, gen){
    if(1 > n) throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
    var i = [0, n];
    function next(param){
     for(;;){
      var res = caml_call1(gen, 0);
      if(! res) return 0;
      if(i[1] === n){i[1] = 1; return res;}
      i[1]++;
     }
    }
    return next;
   }
   function filter(p, gen){
    function next(param){
     for(;;){
      var res = caml_call1(gen, 0);
      if(! res) return 0;
      var x = res[1];
      if(caml_call1(p, x)) return res;
     }
    }
    return next;
   }
   function take_while(p, gen){
    var stop = [0, 0];
    return function(param){
     if(stop[1]) return 0;
     var res = caml_call1(gen, 0);
     if(res){
      var x = res[1];
      return caml_call1(p, x) ? res : (stop[1] = 1, 0);
     }
     stop[1] = 1;
     return 0;};
   }
   function fold_while(f, s, gen){
    var state = [0, s];
    for(;;){
     var match = caml_call1(gen, 0);
     if(match){
      var
       x = match[1],
       match$0 = caml_call2(f, state[1], x),
       cont = match$0[2],
       acc = match$0[1];
      state[1] = acc;
      if(926227490 > cont) continue;
     }
     return state[1];
    }
   }
   function drop_while(p, gen){
    var state = [0, 1];
    function next(param){
     for(;;)
      switch(state[1]){
        case 0:
         return 0;
        case 1:
         var res = caml_call1(gen, 0);
         if(! res){state[1] = 0; return 0;}
         var x = res[1];
         if(! caml_call1(p, x)){state[1] = 2; return res;}
         break;
        default:
         var res$0 = caml_call1(gen, 0);
         return res$0 ? res$0 : (state[1] = 0, 0);
      }
    }
    return next;
   }
   function filter_map(f, gen){
    function next(param){
     for(;;){
      var match = caml_call1(gen, 0);
      if(! match) return 0;
      var x = match[1], res = caml_call1(f, x);
      if(res) return res;
     }
    }
    return next;
   }
   function zip_index(gen){
    var r = [0, -1];
    return function(param){
     var match = caml_call1(gen, 0);
     if(! match) return 0;
     var x = match[1];
     r[1]++;
     return [0, [0, r[1], x]];};
   }
   function unzip(gen){
    var
     stop = [0, 0],
     q1 = caml_call1(Stdlib_Queue[2], 0),
     q2 = caml_call1(Stdlib_Queue[2], 0);
    function next_left(param){
     if(! caml_call1(Stdlib_Queue[14], q1))
      return [0, caml_call1(Stdlib_Queue[7], q1)];
     if(stop[1]) return 0;
     var match = caml_call1(gen, 0);
     if(match){
      var match$0 = match[1], y = match$0[2], x = match$0[1];
      caml_call2(Stdlib_Queue[4], y, q2);
      return [0, x];
     }
     stop[1] = 1;
     return 0;
    }
    function next_right(param){
     if(! caml_call1(Stdlib_Queue[14], q2))
      return [0, caml_call1(Stdlib_Queue[7], q2)];
     if(stop[1]) return 0;
     var match = caml_call1(gen, 0);
     if(match){
      var match$0 = match[1], y = match$0[2], x = match$0[1];
      caml_call2(Stdlib_Queue[4], x, q1);
      return [0, y];
     }
     stop[1] = 1;
     return 0;
    }
    return [0, next_left, next_right];
   }
   function partition(p, gen){
    var
     qtrue = caml_call1(Stdlib_Queue[2], 0),
     qfalse = caml_call1(Stdlib_Queue[2], 0),
     stop = [0, 0];
    function nexttrue(param){
     for(;;){
      if(! caml_call1(Stdlib_Queue[14], qtrue))
       return [0, caml_call1(Stdlib_Queue[7], qtrue)];
      if(stop[1]) return 0;
      var res = caml_call1(gen, 0);
      if(! res){stop[1] = 1; return 0;}
      var x = res[1];
      if(caml_call1(p, x)) return res;
      caml_call2(Stdlib_Queue[4], x, qfalse);
     }
    }
    function nextfalse(param){
     for(;;){
      if(! caml_call1(Stdlib_Queue[14], qfalse))
       return [0, caml_call1(Stdlib_Queue[7], qfalse)];
      if(stop[1]) return 0;
      var res = caml_call1(gen, 0);
      if(! res){stop[1] = 1; return 0;}
      var x = res[1];
      if(! caml_call1(p, x)) return res;
      caml_call2(Stdlib_Queue[4], x, qtrue);
     }
    }
    return [0, nexttrue, nextfalse];
   }
   function for_all(p, gen){
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) return 1;
     var x = match[1], a = caml_call1(p, x);
     if(! a) return a;
    }
   }
   function exists(p, gen){
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) return 0;
     var x = match[1], a = caml_call1(p, x);
     if(a) return a;
    }
   }
   function min(opt, gen){
    var lt = opt ? opt[1] : caml_lessthan, match = caml_call1(gen, 0);
    if(! match) throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_min], 1);
    var first = match[1], acc = first;
    for(;;){
     var match$0 = caml_call1(gen, 0);
     if(! match$0) return acc;
     var x = match$0[1];
     if(caml_call2(lt, x, acc)) acc = x;
    }
   }
   function max(opt, gen){
    var lt = opt ? opt[1] : caml_lessthan, match = caml_call1(gen, 0);
    if(! match) throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_max], 1);
    var first = match[1], acc = first;
    for(;;){
     var match$0 = caml_call1(gen, 0);
     if(! match$0) return acc;
     var x = match$0[1];
     if(caml_call2(lt, acc, x)) acc = x;
    }
   }
   function eq(opt, gen1, gen2){
    var eq = opt ? opt[1] : caml_equal;
    for(;;){
     var match = caml_call1(gen1, 0), match$0 = caml_call1(gen2, 0);
     if(match){
      if(match$0){
       var x2 = match$0[1], x1 = match[1];
       if(caml_call2(eq, x1, x2)) continue;
      }
     }
     else if(! match$0) return 1;
     return 0;
    }
   }
   function lexico(opt, gen1, gen2){
    var cmp = opt ? opt[1] : caml_compare;
    for(;;){
     var match = caml_call1(gen1, 0), match$0 = caml_call1(gen2, 0);
     if(! match) return match$0 ? -1 : 0;
     var x1 = match[1];
     if(! match$0) return 1;
     var x2 = match$0[1], c = caml_call2(cmp, x1, x2);
     if(0 !== c) return c;
    }
   }
   function compare(cmp, gen1, gen2){return lexico(cmp, gen1, gen2);}
   function find(p, e){
    for(;;){
     var match = caml_call1(e, 0);
     if(! match) return 0;
     var x = match[1];
     if(caml_call1(p, x)) return [0, x];
    }
   }
   function sum(e){
    var acc = 0;
    for(;;){
     var match = caml_call1(e, 0);
     if(! match) return acc;
     var x = match[1], acc$0 = x + acc | 0;
     acc = acc$0;
    }
   }
   function map2(f, e1, e2){
    return function(param){
     var match = caml_call1(e1, 0), match$0 = caml_call1(e2, 0);
     if(match && match$0){
      var y = match$0[1], x = match[1];
      return [0, caml_call2(f, x, y)];
     }
     return 0;};
   }
   function iter2(f, e1, e2){
    for(;;){
     var match = caml_call1(e1, 0), match$0 = caml_call1(e2, 0);
     if(match && match$0){
      var y = match$0[1], x = match[1];
      caml_call2(f, x, y);
      continue;
     }
     return 0;
    }
   }
   function fold2(f, acc$1, e1, e2){
    var acc = acc$1;
    for(;;){
     var match = caml_call1(e1, 0), match$0 = caml_call1(e2, 0);
     if(match && match$0){
      var y = match$0[1], x = match[1], acc$0 = caml_call3(f, acc, x, y);
      acc = acc$0;
      continue;
     }
     return acc;
    }
   }
   function for_all2(p, e1, e2){
    for(;;){
     var match = caml_call1(e1, 0), match$0 = caml_call1(e2, 0);
     if(match && match$0){
      var y = match$0[1], x = match[1], a = caml_call2(p, x, y);
      if(a) continue;
      return a;
     }
     return 1;
    }
   }
   function exists2(p, e1, e2){
    for(;;){
     var match = caml_call1(e1, 0), match$0 = caml_call1(e2, 0);
     if(match && match$0){
      var y = match$0[1], x = match[1], a = caml_call2(p, x, y);
      if(a) return a;
      continue;
     }
     return 0;
    }
   }
   function zip_with(f, a, b){
    var stop = [0, 0];
    return function(param){
     if(stop[1]) return 0;
     var match = caml_call1(a, 0), match$0 = caml_call1(b, 0);
     if(match && match$0){
      var xb = match$0[1], xa = match[1];
      return [0, caml_call2(f, xa, xb)];
     }
     stop[1] = 1;
     return 0;};
   }
   function zip(a, b){
    return zip_with(function(x, y){return [0, x, y];}, a, b);
   }
   function merge(next_gen){
    var state = [0, caml_call1(Stdlib_Queue[2], 0), 0];
    function next(param){
     for(;;)
      switch(state[2]){
        case 0:
         var match = caml_call1(next_gen, 0);
         if(match){
          var gen = match[1];
          caml_call2(Stdlib_Queue[4], gen, state[1]);
          state[2] = 1;
         }
         else
          state[2] = 2;
         break;
        case 1:
         if(caml_call1(Stdlib_Queue[14], state[1]))
          state[2] = 0;
         else{
          var
           gen$0 = caml_call1(Stdlib_Queue[7], state[1]),
           res = caml_call1(gen$0, 0);
          if(res){
           caml_call2(Stdlib_Queue[4], gen$0, state[1]);
           state[2] = 0;
           return res;
          }
          state[2] = 0;
         }
         break;
        case 2:
         if(caml_call1(Stdlib_Queue[14], state[1])){state[2] = 3; return 0;}
         var
          gen$1 = caml_call1(Stdlib_Queue[7], state[1]),
          res$0 = caml_call1(gen$1, 0);
         if(res$0){
          caml_call2(Stdlib_Queue[4], gen$1, state[1]);
          return res$0;
         }
         break;
        default: return 0;
      }
    }
    return next;
   }
   function intersection(opt, gen1, gen2){
    var
     cmp = opt ? opt[1] : caml_compare,
     x1 = [0, caml_call1(gen1, 0)],
     x2 = [0, caml_call1(gen2, 0)];
    function next(param){
     for(;;){
      var a = x1[1], match = x2[1];
      if(a && match){
       var y2 = match[1], y1 = a[1], c = caml_call2(cmp, y1, y2);
       if(0 === c){
        x1[1] = caml_call1(gen1, 0);
        x2[1] = caml_call1(gen2, 0);
        return [0, y1];
       }
       if(0 <= c){x2[1] = caml_call1(gen2, 0); continue;}
       x1[1] = caml_call1(gen1, 0);
       continue;
      }
      return 0;
     }
    }
    return next;
   }
   function sorted_merge(opt, gen1, gen2){
    var
     cmp = opt ? opt[1] : caml_compare,
     x1 = [0, caml_call1(gen1, 0)],
     x2 = [0, caml_call1(gen2, 0)];
    return function(param){
     var r = x1[1], match = x2[1];
     if(! r) return match ? (x2[1] = caml_call1(gen2, 0), match) : 0;
     var y1 = r[1];
     if(match){
      var y2 = match[1];
      return 0 < caml_call2(cmp, y1, y2)
              ? (x2[1] = caml_call1(gen2, 0), match)
              : (x1[1] = caml_call1(gen1, 0), r);
     }
     x1[1] = caml_call1(gen1, 0);
     return r;};
   }
   function empty$0(cmp){return [0, 0, cmp];}
   function is_empty$0(h){return h[1] ? 0 : 1;}
   function union(cmp, t1, t2){
    if(! t1) return t2;
    if(! t2) return t1;
    var
     r2 = t2[3],
     l2 = t2[2],
     x2 = t2[1],
     r1 = t1[3],
     l1 = t1[2],
     x1 = t1[1];
    return 0 < caml_call2(cmp, x1, x2)
            ? [0, x2, union(cmp, t1, r2), l2]
            : [0, x1, union(cmp, t2, r1), l1];
   }
   function insert(h, x){h[1] = union(h[2], [0, x, 0, 0], h[1]); return 0;}
   function pop(h){
    var match = h[1];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var r = match[3], l = match[2], x = match[1];
    h[1] = union(h[2], l, r);
    return x;
   }
   function sorted_merge_n(opt, l){
    var cmp = opt ? opt[1] : caml_compare;
    function cmp$0(a, param){
     var v2 = param[1], v1 = a[1];
     return caml_call2(cmp, v1, v2);
    }
    var heap = empty$0(cmp$0);
    caml_call2
     (Stdlib_List[18],
      function(gen){
       var match = caml_call1(gen, 0);
       if(! match) return 0;
       var x = match[1];
       return insert(heap, [0, x, gen]);
      },
      l);
    return function(param){
     if(is_empty$0(heap)) return 0;
     var
      match = pop(heap),
      gen = match[2],
      x = match[1],
      match$0 = caml_call1(gen, 0);
     if(! match$0) return [0, x];
     var y = match$0[1];
     insert(heap, [0, y, gen]);
     return [0, x];};
   }
   function round_robin(opt, gen){
    var
     n = opt ? opt[1] : 2,
     qs =
       caml_call2
        (Stdlib_Array[1],
         n,
         function(param){return caml_call1(Stdlib_Queue[2], 0);}),
     cur = [0, 0],
     l =
       caml_call2
        (Stdlib_Array[16],
         function(i, param){
          return function(param){
           var q = caml_check_bound(qs, i)[i + 1];
           if(! caml_call1(Stdlib_Queue[14], q))
            return [0, caml_call1(Stdlib_Queue[7], q)];
           for(;;){
            var match = caml_call1(gen, 0);
            if(! match) return 0;
            var x = match[1], j = cur[1];
            cur[1] = runtime.caml_mod(j + 1 | 0, n);
            var q$0 = caml_check_bound(qs, j)[j + 1];
            if(j === i){
             if(caml_call1(Stdlib_Queue[14], q$0)) return [0, x];
             throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
            }
            caml_call2(Stdlib_Queue[4], x, q$0);
           }};
         },
         qs);
    return caml_call1(Stdlib_Array[10], l);
   }
   function tee(opt, gen){
    var
     n = opt ? opt[1] : 2,
     qs =
       caml_call2
        (Stdlib_Array[1],
         n,
         function(param){return caml_call1(Stdlib_Queue[2], 0);}),
     finished = [0, 0],
     l =
       caml_call2
        (Stdlib_Array[16],
         function(i, param){
          return function(param){
           var b = caml_check_bound(qs, i)[i + 1];
           if(! caml_call1(Stdlib_Queue[14], b)){
            var c = caml_check_bound(qs, i)[i + 1];
            return caml_call1(Stdlib_Queue[7], c);
           }
           if(finished[1]) return 0;
           var res = caml_call1(gen, 0);
           if(! res){finished[1] = 1; return 0;}
           var a = n - 1 | 0, d = 0;
           if(a >= 0){
            var j = d;
            for(;;){
             if(j !== i){
              var e = caml_check_bound(qs, j)[j + 1];
              caml_call2(Stdlib_Queue[4], res, e);
             }
             var f = j + 1 | 0;
             if(a === j) break;
             j = f;
            }
           }
           return res;};
         },
         qs);
    return caml_call1(Stdlib_Array[10], l);
   }
   function interleave(gen_a, gen_b){
    var state = [0, [1, gen_a, gen_b, [0, 1]]];
    function next(param){
     for(;;){
      var match = state[1];
      if(typeof match === "number") return 0;
      if(0 === match[0]){
       var g = match[1], res = caml_call1(g, 0);
       return res ? res : (state[1] = 0, 0);
      }
      var
       r = match[3],
       g2 = match[2],
       g1 = match[1],
       res$0 = r[1] ? caml_call1(g1, 0) : caml_call1(g2, 0);
      if(res$0){r[1] = 1 - r[1]; return res$0;}
      var a = r[1] ? [0, g2] : [0, g1];
      state[1] = a;
     }
    }
    return next;
   }
   function intersperse(x, gen){
    var state = [0, 0];
    function next(param){
     for(;;){
      var match = state[1];
      if(typeof match !== "number"){
       if(0 !== match[0]){
        var res$2 = match[1];
        state[1] = [0, res$2];
        return [0, x];
       }
       var res$0 = match[1], res$1 = caml_call1(gen, 0);
       state[1] = res$1 ? [1, res$1] : 1;
       return res$0;
      }
      if(0 !== match) return 0;
      var res = caml_call1(gen, 0);
      if(! res){state[1] = 1; return 0;}
      state[1] = [0, res];
     }
    }
    return next;
   }
   function product(gena, genb){
    var all_a = [0, 0], all_b = [0, 0], cur = [0, -410787939];
    function next(param){
     for(;;){
      var match = cur[1];
      if(typeof match === "number")
       if(-410787939 === match){
        var match$0 = caml_call1(gena, 0);
        if(match$0){
         var a = match$0[1];
         all_a[1] = [0, a, all_a[1]];
         cur[1] = [0, 210423646, [0, a, all_b[1]]];
        }
        else
         cur[1] = -671547669;
       }
       else{
        if(926227490 <= match) return 0;
        var match$1 = caml_call1(genb, 0);
        if(match$1){
         var b = match$1[1];
         all_b[1] = [0, b, all_b[1]];
         cur[1] = [0, -470306651, [0, b, all_a[1]]];
        }
        else if(-671547669 === cur[1])
         cur[1] = 926227490;
        else
         cur[1] = -410787939;
       }
      else{
       var variant = match[1];
       if(210423646 <= variant){
        var c = match[2], match$2 = c[2], x = c[1];
        if(match$2){
         var l = match$2[2], y = match$2[1];
         cur[1] = [0, 210423646, [0, x, l]];
         return [0, [0, x, y]];
        }
        cur[1] = 585947014;
       }
       else{
        var d = match[2], match$3 = d[2], y$0 = d[1];
        if(match$3){
         var l$0 = match$3[2], x$0 = match$3[1];
         cur[1] = [0, -470306651, [0, y$0, l$0]];
         return [0, [0, x$0, y$0]];
        }
        cur[1] = -410787939;
       }
      }
     }
    }
    return next;
   }
   function group(opt, gen){
    var eq = opt ? opt[1] : caml_equal, match = caml_call1(gen, 0);
    if(! match) return function(param){return 0;};
    var x = match[1], cur = [0, [0, x, 0]];
    function next(param){
     for(;;){
      var next_x = 0 === cur[1] ? 0 : caml_call1(gen, 0), match = cur[1];
      if(! next_x) return match ? (cur[1] = 0, [0, match]) : 0;
      var x = next_x[1];
      if(match){
       var y = match[1];
       if(caml_call2(eq, x, y)){cur[1] = [0, x, cur[1]]; continue;}
      }
      cur[1] = [0, x, 0];
      return [0, match];
     }
    }
    return next;
   }
   function uniq(opt, gen){
    var eq = opt ? opt[1] : caml_equal, state = [0, 0];
    function next(param){
     for(;;){
      var match = state[1];
      if(typeof match === "number"){
       if(match) return 0;
       var res = caml_call1(gen, 0);
       if(res){var x = res[1]; state[1] = [0, x]; return res;}
       state[1] = 1;
       return 0;
      }
      var x$0 = match[1], res$0 = caml_call1(gen, 0);
      if(! res$0){state[1] = 1; return 0;}
      var y = res$0[1];
      if(! caml_call2(eq, x$0, y)){state[1] = [0, y]; return res$0;}
     }
    }
    return next;
   }
   function sort(opt, gen){
    var cmp = opt ? opt[1] : caml_compare, h = empty$0(cmp);
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) break;
     var x = match[1];
     insert(h, x);
    }
    return function(param){return is_empty$0(h) ? 0 : [0, pop(h)];};
   }
   function sort_uniq(opt, gen){
    var cmp = opt ? opt[1] : caml_compare;
    return uniq
            ([0, function(x, y){return 0 === caml_call2(cmp, x, y) ? 1 : 0;}],
             sort([0, cmp], gen));
   }
   function chunks(n, e){
    function next(param){
     var match = caml_call1(e, 0);
     if(! match) return 0;
     var x = match[1], a = caml_array_make(n, x), i = 1;
     for(;;){
      if(i === n) return [0, a];
      var match$0 = caml_call1(e, 0);
      if(! match$0) return [0, caml_call3(Stdlib_Array[6], a, 0, i)];
      var x$0 = match$0[1];
      caml_check_bound(a, i)[i + 1] = x$0;
      var i$0 = i + 1 | 0;
      i = i$0;
     }
    }
    return next;
   }
   function permutations(gen){
    function make_machine(n, l){
     if(! l){
      if(0 === n) return [0, 1];
      throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
     }
     var
      tail = l[2],
      x = l[1],
      sub = make_machine(n - 1 | 0, tail),
      match = next(sub, 0);
     if(match)
      var l$0 = match[1], st = [0, [0, x, l$0, 0, n, sub]];
     else
      var st = 0;
     return [0, st];
    }
    function next(m, param){
     for(;;){
      var match = m[1];
      if(typeof match === "number") return match ? (m[1] = 0, h) : 0;
      var
       state = match[1],
       x = state[1],
       l = state[2],
       n = state[3],
       sub = state[5],
       len = state[4];
      if(n !== len){state[3] = state[3] + 1 | 0; return [0, insert(x, n, l)];}
      var match$0 = next(sub, 0);
      if(! match$0){m[1] = 0; return 0;}
      var l$0 = match$0[1];
      state[2] = l$0;
      state[3] = 0;
     }
    }
    function insert(x, n, l){
     if(0 === n) return [0, x, l];
     if(! l) throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
     var tail = l[2], y = l[1];
     return [0, y, insert(x, n - 1 | 0, tail)];
    }
    var acc$0 = 0;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) break;
     var x = match[1], acc = [0, x, acc$0];
     acc$0 = acc;
    }
    var a = make_machine(caml_call1(Stdlib_List[1], acc$0), acc$0);
    return function(b){return next(a, b);};
   }
   function permutations_heap(gen){
    var acc$0 = 0;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) break;
     var x = match[1], acc = [0, x, acc$0];
     acc$0 = acc;
    }
    var a = caml_call1(Stdlib_Array[11], acc$0), n = a.length - 1;
    if(0 === n) return empty;
    var st = [0, a, n, l];
    return function(param){
     for(;;){
      var n = st[2];
      if(0 === n) break;
      var match$1 = st[3];
      if(! match$1) return 0;
      var i$0 = match$1[1], is$0 = match$1[2];
      if(i$0 === n){
       st[3] = is$0;
       st[2] = n + 1 | 0;
       var match$2 = st[3];
       if(! match$2) return 0;
       var
        is$1 = match$2[2],
        i$1 = match$2[1],
        j$0 = 1 === (st[2] % 2 | 0) ? 0 : i$1,
        tmp = caml_check_bound(st[1], j$0)[j$0 + 1],
        b = caml_check_bound(st[1], n)[n + 1];
       caml_check_bound(st[1], j$0)[j$0 + 1] = b;
       caml_check_bound(st[1], n)[n + 1] = tmp;
       st[3] = [0, i$1 + 1 | 0, is$1];
      }
      else{st[2] = n - 1 | 0; st[3] = [0, 0, st[3]];}
     }
     var match = st[3];
     if(match){
      if(0 === match[1]){
       var match$0 = match[2];
       if(match$0){
        var is = match$0[2], i = match$0[1];
        st[3] = [0, i + 1 | 0, is];
        st[2] = 1;
        return [0, caml_call1(Stdlib_Array[7], a)];
       }
      }
      if(match[2])
       throw caml_maybe_attach_backtrace([0, Assert_failure, j], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);};
   }
   function combinations(n$0, gen){
    if(0 > n$0) throw caml_maybe_attach_backtrace([0, Assert_failure, n], 1);
    function make_state(n, l){
     if(0 === n) return [0, 1];
     if(! l) return [0, 0];
     var
      tail = l[2],
      x = l[1],
      m1 = make_state(n - 1 | 0, tail),
      m2 = make_state(n, tail);
     return [0, [0, x, m1, m2]];
    }
    function next(m$1, param){
     for(;;){
      var match = m$1[1];
      if(typeof match === "number") return 0 === match ? 0 : (m$1[1] = 0, m);
      if(0 !== match[0]){
       var m$0 = match[1], res = next(m$0, 0);
       return res ? res : (m$0[1] = 0, 0);
      }
      var m2 = match[3], m1 = match[2], x = match[1], match$0 = next(m1, 0);
      if(match$0){var l = match$0[1]; return [0, [0, x, l]];}
      m$1[1] = [1, m2];
     }
    }
    var acc$0 = 0;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) break;
     var x = match[1], acc = [0, x, acc$0];
     acc$0 = acc;
    }
    var a = make_state(n$0, acc$0);
    return function(b){return next(a, b);};
   }
   function power_set(gen){
    function make_state(l){
     if(! l) return [0, 1];
     var tail = l[2], x = l[1], m = make_state(tail);
     return [0, [0, x, m]];
    }
    function next(m, param){
     var match = m[1];
     if(typeof match === "number") return 0 === match ? 0 : (m[1] = 0, o);
     if(0 !== match[0]){
      var m$1 = match[3], x$0 = match[2], l$0 = match[1];
      m[1] = [0, x$0, m$1];
      return [0, [0, x$0, l$0]];
     }
     var m$0 = match[2], x = match[1], res = next(m$0, 0);
     if(res){var l = res[1]; m[1] = [1, l, x, m$0]; return res;}
     m[1] = 0;
     return 0;
    }
    var acc$0 = 0;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) break;
     var x = match[1], acc = [0, x, acc$0];
     acc$0 = acc;
    }
    var a = make_state(acc$0);
    return function(b){return next(a, b);};
   }
   function of_list(l){
    var l$0 = [0, l];
    return function(param){
     var match = l$0[1];
     if(! match) return 0;
     var l = match[2], x = match[1];
     l$0[1] = l;
     return [0, x];};
   }
   function to_rev_list(gen){
    var acc$0 = 0;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match) return acc$0;
     var x = match[1], acc = [0, x, acc$0];
     acc$0 = acc;
    }
   }
   function to_list(gen){
    var a = to_rev_list(gen);
    return caml_call1(Stdlib_List[10], a);
   }
   function to_array(gen){
    var l = to_rev_list(gen);
    if(! l) return [0];
    var
     a = caml_call1(Stdlib_Array[11], l),
     n = a.length - 1,
     b = (n - 1 | 0) / 2 | 0,
     e = 0;
    if(b >= 0){
     var i = e;
     for(;;){
      var tmp = caml_check_bound(a, i)[i + 1], c = (n - i | 0) - 1 | 0;
      a[i + 1] = caml_check_bound(a, c)[c + 1];
      var d = (n - i | 0) - 1 | 0;
      caml_check_bound(a, d)[d + 1] = tmp;
      var f = i + 1 | 0;
      if(b === i) break;
      i = f;
     }
    }
    return a;
   }
   function of_array(opt, len, a){
    var start = opt ? opt[1] : 0;
    if(len){
     var n = len[1];
     if((n + start | 0) >= a.length - 1)
      throw caml_maybe_attach_backtrace([0, Assert_failure, p], 1);
     var len$0 = n;
    }
    else
     var len$0 = a.length - 1 - start | 0;
    var i = [0, start];
    return function(param){
     if((start + len$0 | 0) <= i[1]) return 0;
     var b = i[1], x = caml_check_bound(a, b)[b + 1];
     i[1]++;
     return [0, x];};
   }
   function of_string(opt, len, s){
    var start = opt ? opt[1] : 0;
    if(len){
     var n = len[1];
     if((n + start | 0) >= caml_ml_string_length(s))
      throw caml_maybe_attach_backtrace([0, Assert_failure, q], 1);
     var len$0 = n;
    }
    else
     var len$0 = caml_ml_string_length(s) - start | 0;
    var i = [0, start];
    return function(param){
     if((start + len$0 | 0) <= i[1]) return 0;
     var x = caml_string_get(s, i[1]);
     i[1]++;
     return [0, x];};
   }
   function to_buffer(buf, g){
    return iter(caml_call1(Stdlib_Buffer[12], buf), g);
   }
   function to_string(s){
    var buf = caml_call1(Stdlib_Buffer[1], 16);
    to_buffer(buf, s);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function of_seq(seq){
    var seq$0 = [0, seq];
    return function(param){
     var match = caml_call1(seq$0[1], 0);
     if(! match) return 0;
     var tl = match[2], x = match[1];
     seq$0[1] = tl;
     return [0, x];};
   }
   function rand_int(i){
    return function(param){return [0, caml_call1(Stdlib_Random[5], i)];};
   }
   function int_range(opt, i, j){
    var step = opt ? opt[1] : 1;
    if(0 === step)
     throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_Gen_int_range], 1);
    var
     symbol = 0 < step ? runtime.caml_greaterthan : caml_lessthan,
     r = [0, i];
    return function(param){
     var x = r[1];
     return symbol(x, j) ? 0 : (r[1] = r[1] + step | 0, [0, x]);};
   }
   function lines(g){
    var buf = caml_call1(Stdlib_Buffer[1], 32), stop = [0, 0];
    function next(param){
     for(;;){
      if(stop[1]) return 0;
      var match = caml_call1(g, 0);
      if(! match){
       stop[1] = 1;
       return 0 === caml_call1(Stdlib_Buffer[7], buf)
               ? 0
               : [0, caml_call1(Stdlib_Buffer[2], buf)];
      }
      var c = match[1];
      if(10 === c){
       var s = caml_call1(Stdlib_Buffer[2], buf);
       caml_call1(Stdlib_Buffer[8], buf);
       return [0, s];
      }
      caml_call2(Stdlib_Buffer[12], buf, c);
     }
    }
    return next;
   }
   function unlines(g){
    var st = [0, 870035731];
    return function(param){
     var match = st[1];
     if(typeof match === "number"){
      if(926227490 <= match) return 0;
      var match$0 = caml_call1(g, 0);
      if(match$0){
       var s$0 = match$0[1];
       return s$0 !== cst$3
               ? (st
                  [1]
                 = [0, -433348196, [0, s$0, 1]],
                 [0, caml_string_get(s$0, 0)])
               : r;
      }
      st[1] = 926227490;
      return 0;
     }
     var match$1 = match[2], s$1 = match$1[1], i = match$1[2];
     if(i === caml_ml_string_length(s$1)){st[1] = 870035731; return s;}
     var i$0 = match$1[2];
     st[1] = [0, -433348196, [0, s$1, i$0 + 1 | 0]];
     return [0, caml_string_get(s$1, i$0)];};
   }
   function pp(c, b, a, opt, pp_elem, formatter, gen){
    var
     start = c ? c[1] : cst$1,
     stop = b ? b[1] : cst$0,
     sep = a ? a[1] : cst,
     horizontal = opt ? opt[1] : 0;
    if(horizontal)
     caml_call2(Stdlib_Format[5], formatter, 0);
    else
     caml_call2(Stdlib_Format[9], formatter, 0);
    caml_call2(Stdlib_Format[13], formatter, start);
    var is_first = 1;
    for(;;){
     var match = caml_call1(gen, 0);
     if(! match){
      caml_call2(Stdlib_Format[13], formatter, stop);
      return caml_call2(Stdlib_Format[3], formatter, 0);
     }
     var x = match[1];
     if(is_first)
      caml_call2(pp_elem, formatter, x);
     else{
      caml_call2(Stdlib_Format[13], formatter, sep);
      caml_call2(Stdlib_Format[32], formatter, 0);
      caml_call2(pp_elem, formatter, x);
     }
     is_first = 0;
    }
   }
   function symbol(a, b){return int_range(t, a, b);}
   function symbol_bind(x, f){return flat_map(f, x);}
   function symbol_map(x, f){return map(f, x);}
   function symbol$0(x, f){return map(f, x);}
   var
    Infix = [0, symbol, symbol_bind, symbol_map, symbol$0],
    u = [0, cst_src_gen_ml, 1724, 4];
   function lift(f, e){return caml_call1(f, caml_call1(e, 0));}
   function lift2(f, e1, e2){
    var a = caml_call1(e2, 0);
    return caml_call2(f, caml_call1(e1, 0), a);
   }
   function empty$1(param){return empty;}
   function singleton$0(x, param){return singleton(x);}
   function iterate$0(x, f, param){return iterate(x, f);}
   function repeat$0(x, param){return function(param){return [0, x];};}
   function unfold$0(f, acc, param){return unfold(f, acc);}
   function init$0(limit, f, param){return init(limit, f);}
   function cycle(enum$){
    if(is_empty(caml_call1(enum$, 0)))
     throw caml_maybe_attach_backtrace([0, Assert_failure, u], 1);
    return function(param){
     var gen = [0, caml_call1(enum$, 0)];
     function next(param){
      for(;;){
       var res = caml_call1(gen[1], 0);
       if(res) return res;
       gen[1] = caml_call1(enum$, 0);
      }
     }
     return next;};
   }
   function is_empty$1(e){return is_empty(caml_call1(e, 0));}
   function fold$0(f, acc, e){return fold(f, acc, caml_call1(e, 0));}
   function reduce$0(f, e){return reduce(f, caml_call1(e, 0));}
   function scan$0(f, acc, e, param){return scan(f, acc, caml_call1(e, 0));}
   function unfold_scan$0(f, acc, e, param){
    return unfold_scan(f, acc, caml_call1(e, 0));
   }
   function iter$0(f, e){return iter(f, caml_call1(e, 0));}
   function iteri$0(f, e){return iteri(f, caml_call1(e, 0));}
   function length$0(e){return length(caml_call1(e, 0));}
   function map$0(f, e, param){return map(f, caml_call1(e, 0));}
   function mapi$0(f, e, param){var a = caml_call1(e, 0); return mapi(f)(a);}
   function fold_map$0(f, s, e, param){
    return fold_map(f, s, caml_call1(e, 0));
   }
   function append$0(e1, e2, param){
    var a = caml_call1(e2, 0);
    return append(caml_call1(e1, 0), a);
   }
   function flatten$0(e, param){return flatten(caml_call1(e, 0));}
   function flat_map$0(f, e, param){return flat_map(f, caml_call1(e, 0));}
   function mem$0(eq, x, e){return mem(eq, x, caml_call1(e, 0));}
   function take$0(n, e, param){return take(n, caml_call1(e, 0));}
   function drop$1(n, e, param){return drop$0(n, caml_call1(e, 0));}
   function nth$0(n, e){return nth(n, caml_call1(e, 0));}
   function take_nth$0(n, e, param){return take_nth(n, caml_call1(e, 0));}
   function filter$0(p, e, param){return filter(p, caml_call1(e, 0));}
   function take_while$0(p, e, param){return take_while(p, caml_call1(e, 0));}
   function fold_while$0(f, s, e){return fold_while(f, s, caml_call1(e, 0));}
   function drop_while$0(p, e, param){return drop_while(p, caml_call1(e, 0));}
   function filter_map$0(f, e, param){return filter_map(f, caml_call1(e, 0));}
   function zip_with$0(f, e1, e2, param){
    var a = caml_call1(e2, 0);
    return zip_with(f, caml_call1(e1, 0), a);
   }
   function zip$0(e1, e2, param){
    var a = caml_call1(e2, 0);
    return zip(caml_call1(e1, 0), a);
   }
   function zip_index$0(e, param){return zip_index(caml_call1(e, 0));}
   function unzip$0(e){
    function a(a){return a[2];}
    function b(a){return a[1];}
    return [0,
            function(a){return map$0(b, e, a);},
            function(b){return map$0(a, e, b);}];
   }
   function partition$0(p, e){
    function a(x){return 1 - caml_call1(p, x);}
    return [0,
            function(a){return filter$0(p, e, a);},
            function(b){return filter$0(a, e, b);}];
   }
   function for_all$0(p, e){return for_all(p, caml_call1(e, 0));}
   function exists$0(p, e){return exists(p, caml_call1(e, 0));}
   function for_all2$0(p, e1, e2){
    var a = caml_call1(e2, 0);
    return for_all2(p, caml_call1(e1, 0), a);
   }
   function exists2$0(p, e1, e2){
    var a = caml_call1(e2, 0);
    return exists2(p, caml_call1(e1, 0), a);
   }
   function map2$0(f, e1, e2, param){
    var a = caml_call1(e2, 0);
    return map2(f, caml_call1(e1, 0), a);
   }
   function iter2$0(f, e1, e2){
    var a = caml_call1(e2, 0);
    return iter2(f, caml_call1(e1, 0), a);
   }
   function fold2$0(f, acc, e1, e2){
    var a = caml_call1(e2, 0);
    return fold2(f, acc, caml_call1(e1, 0), a);
   }
   function min$0(lt, e){return min(lt, caml_call1(e, 0));}
   function max$0(lt, e){return max(lt, caml_call1(e, 0));}
   function eq$0(eq$0, e1, e2){
    var a = caml_call1(e2, 0);
    return eq(eq$0, caml_call1(e1, 0), a);
   }
   function lexico$0(cmp, e1, e2){
    var a = caml_call1(e2, 0);
    return lexico(cmp, caml_call1(e1, 0), a);
   }
   function compare$0(cmp, e1, e2){
    var gen2 = caml_call1(e2, 0), gen1 = caml_call1(e1, 0);
    return lexico(cmp, gen1, gen2);
   }
   function sum$0(e){return sum(caml_call1(e, 0));}
   function find$0(f, e){return find(f, caml_call1(e, 0));}
   function merge$0(e, param){return merge(caml_call1(e, 0));}
   function intersection$0(cmp, e1, e2, param){
    var a = caml_call1(e2, 0);
    return intersection(cmp, caml_call1(e1, 0), a);
   }
   function sorted_merge$0(cmp, e1, e2, param){
    var a = caml_call1(e2, 0);
    return sorted_merge(cmp, caml_call1(e1, 0), a);
   }
   function sorted_merge_n$0(cmp, l, param){
    return sorted_merge_n
            (cmp,
             caml_call2
              (Stdlib_List[20], function(g){return caml_call1(g, 0);}, l));
   }
   function tee$0(n, e){return tee(n, caml_call1(e, 0));}
   function round_robin$0(n, e){return round_robin(n, caml_call1(e, 0));}
   function interleave$0(e1, e2, param){
    var a = caml_call1(e2, 0);
    return interleave(caml_call1(e1, 0), a);
   }
   function intersperse$0(x, e, param){
    return intersperse(x, caml_call1(e, 0));
   }
   function product$0(e1, e2, param){
    var a = caml_call1(e2, 0);
    return product(caml_call1(e1, 0), a);
   }
   function group$0(eq, e, param){return group(eq, caml_call1(e, 0));}
   function uniq$0(eq, e, param){return uniq(eq, caml_call1(e, 0));}
   function sort$0(opt, enum$){
    var cmp = opt ? opt[1] : caml_compare;
    return function(param){return sort([0, cmp], caml_call1(enum$, 0));};
   }
   function sort_uniq$0(opt, e){
    var
     cmp = opt ? opt[1] : caml_compare,
     e$0 = sort$0([0, cmp], e),
     a = [0, function(x, y){return 0 === caml_call2(cmp, x, y) ? 1 : 0;}];
    return function(b){return uniq$0(a, e$0, b);};
   }
   function chunks$0(n, e, param){return chunks(n, caml_call1(e, 0));}
   function permutations$0(g, param){return permutations(caml_call1(g, 0));}
   function permutations_heap$0(g, param){
    return permutations_heap(caml_call1(g, 0));
   }
   function combinations$0(n, g, param){
    return combinations(n, caml_call1(g, 0));
   }
   function power_set$0(g, param){return power_set(caml_call1(g, 0));}
   function of_list$0(l, param){return of_list(l);}
   function to_rev_list$0(e){return to_rev_list(caml_call1(e, 0));}
   function to_list$0(e){return to_list(caml_call1(e, 0));}
   function to_array$0(e){return to_array(caml_call1(e, 0));}
   function of_array$0(start, len, a, param){return of_array(start, len, a);}
   function of_string$0(start, len, s, param){return of_string(start, len, s);
   }
   function to_string$0(s){return to_string(caml_call1(s, 0));}
   function to_buffer$0(buf, s){return to_buffer(buf, caml_call1(s, 0));}
   function to_iter(s, yield$){return iter$0(yield$, s);}
   function rand_int$0(i, param){return rand_int(i);}
   function int_range$0(step, i, j, param){return int_range(step, i, j);}
   function lines$0(g, param){return lines(caml_call1(g, 0));}
   function unlines$0(g, param){return unlines(caml_call1(g, 0));}
   function symbol$1(i, j, param){return int_range(step, i, j);}
   function symbol_bind$0(x, f){
    return function(a){return flat_map$0(f, x, a);};
   }
   function symbol_map$0(x, f){return function(a){return map$0(f, x, a);};}
   function symbol$2(x, f){return function(a){return map$0(f, x, a);};}
   var
    Infix$0 = [0, symbol$1, symbol_bind$0, symbol_map$0, symbol$2],
    cst_peek_n = "peek_n",
    v = [0, cst_src_gen_ml, 2050, 8],
    w = [0, cst_src_gen_ml, 2058, 4],
    x = [0, 3, [0, 1, 0]];
   function pp$0(start, stop, sep, horizontal, pp_elem, fmt, e){
    return pp(start, stop, sep, horizontal, pp_elem, fmt, caml_call1(e, 0));
   }
   function of_gen(caching, max_chunk_size, g){
    var cached = [0, 0];
    return function(param){
     var match = cached[1];
     if(match){var mlist = match[1]; return GenMList[3].call(null, mlist);}
     var mlist$0 = GenMList[2].call(null, max_chunk_size, caching, g);
     cached[1] = [0, mlist$0];
     return GenMList[3].call(null, mlist$0);};
   }
   function of_seq$0(seq){return function(param){return of_seq(seq);};}
   function start(g){return caml_call1(g, 0);}
   function persistent(gen){
    var l = GenMList[1].call(null, gen);
    return function(param){return GenMList[3].call(null, l);};
   }
   function persistent_to_seq(gen){
    var l = GenMList[1].call(null, gen);
    return GenMList[4].call(null, l);
   }
   function persistent_lazy(caching, max_chunk_size, gen){
    var l = GenMList[2].call(null, max_chunk_size, caching, gen);
    return function(param){return GenMList[3].call(null, l);};
   }
   function persistent_lazy_to_seq(caching, max_chunk_size, gen){
    var l = GenMList[2].call(null, max_chunk_size, caching, gen);
    return GenMList[4].call(null, l);
   }
   function to_iter$0(g, yield$){return iter(yield$, g);}
   function peek(g){
    var state = [0, 389604418];
    function next(param){
     for(;;){
      var match = state[1];
      if(typeof match !== "number"){
       var x$0 = match[2], res = caml_call1(g, 0);
       if(res){
        var y = res[1];
        state[1] = [0, 14611, y];
        return [0, [0, x$0, res]];
       }
       state[1] = 926227490;
       return [0, [0, x$0, 0]];
      }
      if(926227490 <= match) return 0;
      var match$0 = caml_call1(g, 0);
      if(! match$0){state[1] = 926227490; return 0;}
      var x = match$0[1];
      state[1] = [0, 14611, x];
     }
    }
    return next;
   }
   function queue_to_array(q){
    if(caml_call1(Stdlib_Queue[14], q)) return [0];
    var
     x = caml_call1(Stdlib_Queue[8], q),
     a = caml_array_make(caml_call1(Stdlib_Queue[15], q), x),
     i = [0, 0];
    caml_call2
     (Stdlib_Queue[16],
      function(x){
       var b = i[1];
       caml_check_bound(a, b)[b + 1] = x;
       i[1]++;
       return 0;
      },
      q);
    return a;
   }
   function peek_n(n, g){
    if(n < 1) caml_call1(Stdlib[1], cst_peek_n);
    var state = [0, 389604418], q = caml_call1(Stdlib_Queue[2], 0);
    function next(param){
     for(;;){
      var match = state[1];
      if(389604418 !== match) break;
      fill(n);
      var a = caml_call1(Stdlib_Queue[14], q) ? 926227490 : 192584839;
      state[1] = a;
     }
     if(926227490 <= match) return 0;
     if(caml_call1(Stdlib_Queue[14], q))
      throw caml_maybe_attach_backtrace([0, Assert_failure, v], 1);
     var x = caml_call1(Stdlib_Queue[7], q);
     fill(1);
     var b = caml_call1(Stdlib_Queue[14], q) ? 926227490 : 192584839;
     state[1] = b;
     return [0, [0, x, queue_to_array(q)]];
    }
    function fill(i$1){
     var i = i$1;
     for(;;){
      if((i + caml_call1(Stdlib_Queue[15], q) | 0) > n)
       throw caml_maybe_attach_backtrace([0, Assert_failure, w], 1);
      if(0 < i){
       var match = caml_call1(g, 0);
       if(match){
        var x = match[1];
        caml_call2(Stdlib_Queue[4], x, q);
        var i$0 = i - 1 | 0;
        i = i$0;
        continue;
       }
      }
      return;
     }
    }
    return next;
   }
   function with_file_in(a, opt, filename, f){
    var
     mode = a ? a[1] : 420,
     flags = opt ? opt[1] : 0,
     ic = caml_call3(Stdlib[81], flags, mode, filename);
    try{var x = caml_call1(f, ic); caml_call1(Stdlib[94], ic); return x;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[94], ic);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function with_in(mode, flags, filename, f){
    return with_file_in
            (mode,
             flags,
             filename,
             function(ic){
              function next(param){
               try{var a = [0, caml_call1(Stdlib[82], ic)]; return a;}
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                if(exn === Stdlib[12]) return 0;
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              }
              return caml_call1(f, next);
             });
   }
   function with_lines(mode, flags, filename, f){
    return with_file_in
            (mode,
             flags,
             filename,
             function(ic){
              function next(param){
               try{var a = [0, caml_call1(Stdlib[83], ic)]; return a;}
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                if(exn === Stdlib[12]) return 0;
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              }
              return caml_call1(f, next);
             });
   }
   function with_file_out(a, opt, filename, f){
    var
     mode = a ? a[1] : 420,
     flags = opt ? opt[1] : x,
     oc = caml_call3(Stdlib[62], flags, mode, filename);
    try{var x$0 = caml_call1(f, oc); caml_call1(Stdlib[76], oc); return x$0;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[77], oc);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function write_str(mode, flags, opt, filename, gen){
    var sep = opt ? opt[1] : cst$2;
    return with_file_out
            (mode,
             flags,
             filename,
             function(oc){
              var i$0 = 0;
              for(;;){
               var match = caml_call1(gen, 0);
               if(! match) return 0;
               var x = match[1];
               if(0 < i$0) caml_call2(Stdlib[66], oc, sep);
               caml_call2(Stdlib[66], oc, x);
               var i = i$0 + 1 | 0;
               i$0 = i;
              }
             });
   }
   function write(mode, flags, filename, gen){
    return with_file_out
            (mode,
             flags,
             filename,
             function(oc){
              for(;;){
               var match = caml_call1(gen, 0);
               if(! match) return 0;
               var x = match[1];
               caml_call2(Stdlib[65], oc, x);
              }
             });
   }
   function write_lines(mode, flags, filename, gen){
    return with_file_out
            (mode,
             flags,
             filename,
             function(oc){
              for(;;){
               var match = caml_call1(gen, 0);
               if(! match) return 0;
               var x = match[1];
               caml_call2(Stdlib[66], oc, x);
               caml_call2(Stdlib[65], oc, 10);
              }
             });
   }
   var
    Gen =
      [0,
       get,
       next,
       get_exn,
       junk,
       repeatedly,
       empty,
       singleton,
       singleton,
       repeat,
       iterate,
       unfold,
       init,
       is_empty,
       fold,
       reduce,
       scan,
       unfold_scan,
       iter,
       iteri,
       length,
       map,
       mapi,
       fold_map,
       append,
       flatten,
       flat_map,
       mem,
       take,
       drop$0,
       nth,
       take_nth,
       filter,
       take_while,
       fold_while,
       drop_while,
       filter_map,
       zip_index,
       unzip,
       partition,
       for_all,
       exists,
       min,
       max,
       eq,
       lexico,
       compare,
       find,
       sum,
       map2,
       iter2,
       fold2,
       for_all2,
       exists2,
       zip_with,
       zip,
       merge,
       intersection,
       sorted_merge,
       sorted_merge_n,
       tee,
       round_robin,
       interleave,
       intersperse,
       product,
       group,
       uniq,
       sort,
       sort_uniq,
       chunks,
       permutations,
       permutations_heap,
       combinations,
       power_set,
       of_list,
       to_list,
       to_rev_list,
       to_array,
       of_array,
       of_string,
       to_string,
       to_buffer,
       rand_int,
       int_range,
       lines,
       unlines,
       Infix,
       symbol,
       symbol_bind,
       symbol_map,
       symbol$0,
       pp,
       of_seq,
       to_iter$0,
       [0,
        empty$1,
        singleton$0,
        singleton$0,
        repeat$0,
        iterate$0,
        unfold$0,
        init$0,
        is_empty$1,
        fold$0,
        reduce$0,
        scan$0,
        unfold_scan$0,
        iter$0,
        iteri$0,
        length$0,
        map$0,
        mapi$0,
        fold_map$0,
        append$0,
        flatten$0,
        flat_map$0,
        mem$0,
        take$0,
        drop$1,
        nth$0,
        take_nth$0,
        filter$0,
        take_while$0,
        fold_while$0,
        drop_while$0,
        filter_map$0,
        zip_index$0,
        unzip$0,
        partition$0,
        for_all$0,
        exists$0,
        min$0,
        max$0,
        eq$0,
        lexico$0,
        compare$0,
        find$0,
        sum$0,
        map2$0,
        iter2$0,
        fold2$0,
        for_all2$0,
        exists2$0,
        zip_with$0,
        zip$0,
        merge$0,
        intersection$0,
        sorted_merge$0,
        sorted_merge_n$0,
        tee$0,
        round_robin$0,
        interleave$0,
        intersperse$0,
        product$0,
        group$0,
        uniq$0,
        sort$0,
        sort_uniq$0,
        chunks$0,
        permutations$0,
        permutations_heap$0,
        combinations$0,
        power_set$0,
        of_list$0,
        to_list$0,
        to_rev_list$0,
        to_array$0,
        of_array$0,
        of_string$0,
        to_string$0,
        to_buffer$0,
        rand_int$0,
        int_range$0,
        lines$0,
        unlines$0,
        Infix$0,
        symbol$1,
        symbol_bind$0,
        symbol_map$0,
        symbol$2,
        pp$0,
        of_seq$0,
        to_iter,
        cycle,
        lift,
        lift2,
        of_gen],
       persistent,
       persistent_lazy,
       persistent_to_seq,
       persistent_lazy_to_seq,
       peek,
       peek_n,
       start,
       [0, with_in, with_lines, write_str, write, write_lines]];
   runtime.caml_register_global(45, Gen, "Gen");
   return;
  }
  (globalThis));

//# unitInfo: Provides: GenLabels
//# unitInfo: Requires: Gen
//# shape: GenLabels:[F(1),F(1),F(1),F(1),F(2),F(1)*,F(1)*->F(1),F(1)*->F(1),F(2)*,F(2)*->F(1),F(2)*->F(1),F(2)*->F(1),F(1),F(3),F(2),F(3)*->F(1),F(3)*->F(1),F(2),F(2),F(1),F(2)*->F(1),F(1)*->F(1)*,F(3)*,F(2)*->F(1),F(1)*->F(1),F(2)*->F(1),F(3),F(2)->F(1),F(2)->F(1),F(2),F(2)->F(1),F(2)*->F(1),F(2)*->F(1),F(3),F(2)*->F(1),F(2)*->F(1),F(1)*->F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(2),F(1),F(3)*->F(1),F(3),F(4),F(3),F(3),F(3)*->F(1),F(2)*,F(1)->F(1),F(3)->F(1),F(3)->F(1),F(2)->F(1),F(2),F(2),F(2)*->F(1),F(2)*->F(1),F(2)*->F(1),F(2)->F(1),F(2)*->F(1),F(2)->F(1),F(2),F(2)*->F(1),F(1)->F(1),F(1)->F(1),F(2)->F(1),F(1)->F(1),F(1)*->F(1),F(1),F(1),F(1),F(3)->F(1),F(3)->F(1),F(1),F(2),F(1)*->F(1),F(3)->F(1),F(1)->F(1),F(1)*->F(1),[F(2),F(2)*,F(2)*,F(2)*],F(2),F(2)*,F(2)*,F(2)*,F(7),F(1)*->F(1),F(2),N,F(1)->F(1)*,F(3)->F(1)*,F(1)*->F(1),F(2)->F(1),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Gen = global_data.Gen,
    get = Gen[1],
    next = Gen[2],
    get_exn = Gen[3],
    junk = Gen[4],
    repeatedly = Gen[5],
    empty = Gen[6],
    singleton = Gen[7],
    return$ = Gen[8],
    repeat = Gen[9],
    iterate = Gen[10],
    unfold = Gen[11],
    init = Gen[12],
    is_empty = Gen[13],
    fold = Gen[14],
    reduce = Gen[15],
    scan = Gen[16],
    unfold_scan = Gen[17],
    iter = Gen[18],
    iteri = Gen[19],
    length = Gen[20],
    map = Gen[21],
    mapi = Gen[22],
    fold_map = Gen[23],
    append = Gen[24],
    flatten = Gen[25],
    flat_map = Gen[26],
    mem = Gen[27],
    take = Gen[28],
    drop = Gen[29],
    nth = Gen[30],
    take_nth = Gen[31],
    filter = Gen[32],
    take_while = Gen[33],
    fold_while = Gen[34],
    drop_while = Gen[35],
    filter_map = Gen[36],
    zip_index = Gen[37],
    unzip = Gen[38],
    partition = Gen[39],
    for_all = Gen[40],
    exists = Gen[41],
    min = Gen[42],
    max = Gen[43],
    eq = Gen[44],
    lexico = Gen[45],
    compare = Gen[46],
    find = Gen[47],
    sum = Gen[48],
    map2 = Gen[49],
    iter2 = Gen[50],
    fold2 = Gen[51],
    for_all2 = Gen[52],
    exists2 = Gen[53],
    zip_with = Gen[54],
    zip = Gen[55],
    merge = Gen[56],
    intersection = Gen[57],
    sorted_merge = Gen[58],
    sorted_merge_n = Gen[59],
    tee = Gen[60],
    round_robin = Gen[61],
    interleave = Gen[62],
    intersperse = Gen[63],
    product = Gen[64],
    group = Gen[65],
    uniq = Gen[66],
    sort = Gen[67],
    sort_uniq = Gen[68],
    chunks = Gen[69],
    permutations = Gen[70],
    permutations_heap = Gen[71],
    combinations = Gen[72],
    power_set = Gen[73],
    of_list = Gen[74],
    to_list = Gen[75],
    to_rev_list = Gen[76],
    to_array = Gen[77],
    of_array = Gen[78],
    of_string = Gen[79],
    to_string = Gen[80],
    to_buffer = Gen[81],
    rand_int = Gen[82],
    int_range = Gen[83],
    lines = Gen[84],
    unlines = Gen[85],
    Infix = Gen[86],
    symbol = Gen[87],
    symbol_bind = Gen[88],
    symbol_map = Gen[89],
    symbol$0 = Gen[90],
    pp = Gen[91],
    of_seq = Gen[92],
    to_iter = Gen[93],
    Restart = Gen[94],
    persistent = Gen[95],
    persistent_lazy = Gen[96],
    peek = Gen[99],
    peek_n = Gen[100],
    start = Gen[101],
    IO = Gen[102],
    GenLabels =
      [0,
       get,
       next,
       get_exn,
       junk,
       repeatedly,
       empty,
       singleton,
       return$,
       repeat,
       iterate,
       unfold,
       init,
       is_empty,
       fold,
       reduce,
       scan,
       unfold_scan,
       iter,
       iteri,
       length,
       map,
       mapi,
       fold_map,
       append,
       flatten,
       flat_map,
       mem,
       take,
       drop,
       nth,
       take_nth,
       filter,
       take_while,
       fold_while,
       drop_while,
       filter_map,
       zip_index,
       unzip,
       partition,
       for_all,
       exists,
       min,
       max,
       eq,
       lexico,
       compare,
       find,
       sum,
       map2,
       iter2,
       fold2,
       for_all2,
       exists2,
       zip_with,
       zip,
       merge,
       intersection,
       sorted_merge,
       sorted_merge_n,
       tee,
       round_robin,
       interleave,
       intersperse,
       product,
       group,
       uniq,
       sort,
       sort_uniq,
       chunks,
       permutations,
       permutations_heap,
       combinations,
       power_set,
       of_list,
       to_list,
       to_rev_list,
       to_array,
       of_array,
       of_string,
       to_string,
       to_buffer,
       rand_int,
       int_range,
       lines,
       unlines,
       Infix,
       symbol,
       symbol_bind,
       symbol_map,
       symbol$0,
       pp,
       of_seq,
       to_iter,
       [0,
        Restart[1],
        Restart[2],
        Restart[3],
        Restart[4],
        Restart[5],
        Restart[6],
        Restart[7],
        Restart[8],
        Restart[9],
        Restart[10],
        Restart[11],
        Restart[12],
        Restart[13],
        Restart[14],
        Restart[15],
        Restart[16],
        Restart[17],
        Restart[18],
        Restart[19],
        Restart[20],
        Restart[21],
        Restart[22],
        Restart[23],
        Restart[24],
        Restart[25],
        Restart[26],
        Restart[27],
        Restart[28],
        Restart[29],
        Restart[30],
        Restart[31],
        Restart[32],
        Restart[33],
        Restart[34],
        Restart[35],
        Restart[36],
        Restart[37],
        Restart[38],
        Restart[39],
        Restart[40],
        Restart[41],
        Restart[42],
        Restart[43],
        Restart[44],
        Restart[45],
        Restart[46],
        Restart[47],
        Restart[48],
        Restart[49],
        Restart[50],
        Restart[51],
        Restart[52],
        Restart[53],
        Restart[54],
        Restart[55],
        Restart[56],
        Restart[57],
        Restart[58],
        Restart[59],
        Restart[60],
        Restart[61],
        Restart[62],
        Restart[63],
        Restart[64],
        Restart[65],
        Restart[66],
        Restart[67],
        Restart[68],
        Restart[69],
        Restart[70],
        Restart[71],
        Restart[72],
        Restart[73],
        Restart[74],
        Restart[75],
        Restart[76],
        Restart[77],
        Restart[78],
        Restart[79],
        Restart[80],
        Restart[81],
        Restart[82],
        Restart[83],
        Restart[84],
        Restart[85],
        Restart[86],
        Restart[87],
        Restart[88],
        Restart[89],
        Restart[90],
        Restart[91]],
       persistent,
       persistent_lazy,
       peek,
       peek_n,
       start,
       IO];
   runtime.caml_register_global(1, GenLabels, "GenLabels");
   return;
  }
  (globalThis));

//# unitInfo: Provides: GenClone
//# unitInfo: Requires: CamlinternalOO, Stdlib
//# shape: GenClone:[F(1),F(2),[F(4)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_clone = "clone",
    cst_gen = "gen",
    cst_prepend = "prepend",
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_oo_cache_id = runtime.caml_oo_cache_id,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$2,
    cst$0 = cst$2,
    cst$1 = cst$2,
    b = [0, cst_gen, cst_clone],
    shared = [0, cst_clone, cst_gen],
    CamlinternalOO = global_data.CamlinternalOO,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    c = [],
    d = [0, cst_prepend, cst_gen, cst_clone],
    e = [0, cst_clone, cst_gen, cst_prepend],
    f = [0, "src/genClone.ml", 32, 19];
   function to_prependable(c$0){
    var
     g = caml_call1(caml_get_cached_method(c$0, 5144720, cache_id), c$0),
     st = [0, 3507667];
    function next(param){
     var match = st[1];
     if(typeof match === "number") return caml_call1(g, 0);
     var match$0 = match[2];
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
     var x = match$0[1];
     if(match$0[2]){
      var l = match$0[2];
      st[1] = [0, 73271853, l];
      return [0, x];
     }
     st[1] = 3507667;
     return [0, x];
    }
    var h = c[1];
    if(! h[1]){
     var
      a = caml_call1(CamlinternalOO[16], e),
      b = caml_call2(CamlinternalOO[3], a, cst),
      i = caml_call2(CamlinternalOO[8], a, d);
     caml_call2
      (CamlinternalOO[11],
       a,
       [0,
        i[2],
        function(self_2){var env = self_2[b + 1]; return env[3];},
        i[3],
        function(self_2){
         var env = self_2[b + 1], a = env[2];
         return to_prependable
                 (caml_call1
                   (caml_get_cached_method(a, -933031075, cache_id$0), a));
        },
        i[1],
        function(self_2, x){
         var env = self_2[b + 1], match = env[1][1];
         if(typeof match === "number")
          var a = [0, 73271853, [0, x, 0]];
         else
          var l = match[2], a = [0, 73271853, [0, x, l]];
         env[1][1] = a;
         return 0;
        }]);
     caml_call1(CamlinternalOO[17], a);
     h[1] =
      function(d){
       var c = caml_call2(CamlinternalOO[24], 0, a);
       c[b + 1] = d;
       return c;
      };
    }
    return caml_call1(h[1], [0, st, c$0, next]);
   }
   caml_update_dummy(c, [0, [0, 0, 0, 0]]);
   var letrec_function_context = [];
   function map(f, c){
    var g = caml_call1(caml_get_cached_method(c, 5144720, cache_id$1), c);
    function next(param){
     var match = caml_call1(g, 0);
     if(! match) return 0;
     var x = match[1];
     return [0, caml_call1(f, x)];
    }
    var d = letrec_function_context[1];
    if(! d[1]){
     var
      a = caml_call1(CamlinternalOO[16], shared),
      e = caml_call2(CamlinternalOO[3], a, cst$0),
      h = caml_call2(CamlinternalOO[8], a, b);
     caml_call2
      (CamlinternalOO[11],
       a,
       [0,
        h[1],
        function(self_3){var env = self_3[e + 1]; return env[3];},
        h[2],
        function(self_3){
         var
          env = self_3[e + 1],
          a = env[2],
          b = caml_call1(caml_get_cached_method(a, -933031075, cache_id$2), a);
         return map(env[1], b);
        }]);
     caml_call1(CamlinternalOO[17], a);
     d[1] =
      function(c){
       var b = caml_call2(CamlinternalOO[24], 0, a);
       b[e + 1] = c;
       return b;
      };
    }
    return caml_call1(d[1], [0, f, c, next]);
   }
   caml_update_dummy(letrec_function_context, [0, [0, 0, 0, 0]]);
   var a = [0, 0], cst_invalidated_iterator = "invalidated iterator";
   function with_in(c, opt, filename, f){
    var
     mode = c ? c[1] : 420,
     flags = opt ? opt[1] : 0,
     ic = caml_call3(Stdlib[81], flags, mode, filename),
     timestamp = [0, 0];
    function make(i){
     var state = [0, 675659445];
     function next(param){
      for(;;){
       var match = state[1];
       if(typeof match !== "number"){
        var t = match[2];
        if(t < timestamp[1]) caml_call1(Stdlib[2], cst_invalidated_iterator);
        try{var a = [0, caml_call1(Stdlib[82], ic)]; return a;}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn === Stdlib[12]) return 0;
         throw caml_maybe_attach_backtrace(exn, 0);
        }
       }
       caml_call2(Stdlib[90], ic, i);
       timestamp[1]++;
       state[1] = [0, 40653089, timestamp[1]];
      }
     }
     if(! a[1]){
      var
       c = caml_call1(CamlinternalOO[16], shared),
       d = caml_call2(CamlinternalOO[3], c, cst$1),
       e = caml_call2(CamlinternalOO[8], c, b);
      caml_call2
       (CamlinternalOO[11],
        c,
        [0,
         e[2],
         function(self_4){
          var env = self_4[d + 1], i = caml_call1(Stdlib[91], env[2]);
          return caml_call1(env[3], i);
         },
         e[1],
         function(self_4){var env = self_4[d + 1]; return env[1];}]);
      caml_call1(CamlinternalOO[17], c);
      a[1] =
       function(b){
        var a = caml_call2(CamlinternalOO[24], 0, c);
        a[d + 1] = b;
        return a;
       };
     }
     return caml_call1(a[1], [0, next, ic, make]);
    }
    try{var x = caml_call1(f, make(0)); caml_call1(Stdlib[94], ic); return x;}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[94], ic);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   var IO = [0, with_in], GenClone = [0, to_prependable, map, IO];
   runtime.caml_register_global(12, GenClone, "GenClone");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
