// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cmo, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Dune__exe__Toplevel
//# unitInfo: Requires: CamlinternalOO, Js_of_ocaml__Js, Js_of_ocaml__Sys_js, Js_of_ocaml_toplevel__JsooTop, Stdlib, Stdlib__Array, Stdlib__Format, Stdlib__List, Stdlib__String, Stdlib__Sys
//# shape: Dune__exe__Toplevel:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_toplevel$0 = "toplevel",
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst = ";;",
    cst$0 = cst$2;
   global_data.CamlinternalOO;
   var
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Sys_js = global_data.Js_of_ocaml__Sys_js,
    Stdlib_Format = global_data.Stdlib__Format,
    Js_of_ocaml_toplevel_JsooTop = global_data.Js_of_ocaml_toplevel__JsooTop,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    cst_stdout = "stdout",
    cst_stderr = "stderr",
    cst_toplevel = cst_toplevel$0,
    cst_JsooTop_execute_raised = "JsooTop.execute raised",
    cst_exception = "exception";
   function reset(param){
    return caml_call1(Js_of_ocaml_toplevel_JsooTop[3], 0);
   }
   function evalCode(code){
    var len = runtime.caml_ml_string_length(code);
    try{
     var b = code !== cst$2 ? 1 : 0;
     if(b)
      var
       c = 59 !== caml_string_get(code, len - 1 | 0) ? 1 : 0,
       d = c ? 59 !== caml_string_get(code, len - 2 | 0) ? 1 : 0 : c;
     else
      var d = b;
     var a = d;
    }
    catch(exn){var a = 1;}
    var
     code$0 = a ? caml_call2(Stdlib[28], code, cst) : code,
     seq = [0, 0],
     events = [0, 0];
    function push(kind, chunk){
     var b = chunk !== cst$2 ? 1 : 0;
     if(b){
      var c = chunk !== "\n" ? 1 : 0;
      if(c)
       var d = chunk !== " " ? 1 : 0, a = d ? chunk !== "\t" ? 1 : 0 : d;
      else
       var a = c;
     }
     else
      var a = b;
     var
      e =
        a
         ? (seq[1]++, events[1] = [0, [0, kind, chunk, seq[1]], events[1]], 0)
         : a;
     return e;
    }
    caml_call2
     (Js_of_ocaml_Sys_js[1],
      Stdlib[39],
      function(a){return push(cst_stdout, a);});
    caml_call2
     (Js_of_ocaml_Sys_js[1],
      Stdlib[40],
      function(a){return push(cst_stderr, a);});
    var outc = [0, cst$0];
    function fmt_out(s, ofs, len){
     var a = caml_call3(Stdlib_String[16], s, ofs, len);
     outc[1] = caml_call2(Stdlib[28], outc[1], a);
     return 0;
    }
    function fmt_flush(param){
     push(cst_toplevel, outc[1]);
     outc[1] = cst$1;
     return 0;
    }
    var
     formatter = caml_call2(Stdlib_Format[126], fmt_out, fmt_flush),
     evalFailed = [0, 0];
    try{
     caml_call5(Js_of_ocaml_toplevel_JsooTop[2], 1, 0, 0, formatter, code$0);
    }
    catch(exn){
     evalFailed[1] = 1;
     push(cst_exception, cst_JsooTop_execute_raised);
    }
    caml_call2(Stdlib_Format[43], formatter, 0);
    var
     ordered = caml_call1(Stdlib_List[10], events[1]),
     e =
       caml_call1
        (caml_call1
          (Stdlib_List[20],
           function(e){
            var t2 = e[3], t1 = e[2], t0 = e[1];
            return {kind: t0, chunk: t1, seq: t2};
           }),
         ordered),
     js_events = runtime.caml_js_from_array(caml_call1(Stdlib_Array[11], e)),
     t3 = evalFailed[1];
    return {evalFailed: t3, events: js_events};
   }
   var t6 = Js_of_ocaml_Sys_js[9], t5 = Stdlib_Sys[46];
   caml_call2
    (Js_of_ocaml_Js[50],
     cst_toplevel$0,
     {compiledOcamlVersion: t5,
      compiledJsOfOcamlVersion: t6,
      reset: reset,
      evalCode: evalCode});
   var Dune_exe_Toplevel = [0];
   runtime.caml_register_global(42, Dune_exe_Toplevel, "Dune__exe__Toplevel");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLnRvcGxldmVsLmVvYmpzL2pzb28vZHVuZV9fZXhlX19Ub3BsZXZlbC5jbW8uanMiLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjEwLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6MywiZmlsZSI6Ii50b3BsZXZlbC5lb2Jqcy9qc29vL2R1bmVfX2V4ZV9fVG9wbGV2ZWwuY21vLmpzIiwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi93b3Jrc3BhY2Vfcm9vdC9iaW4vdG9wbGV2ZWwubWwiXSwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCJvcGVuIEpzX29mX29jYW1sXG5vcGVuIEpzX29mX29jYW1sX3RvcGxldmVsXG5cbigqIHJlc2V0IHRvcGxldmVsIGluc3RhbmNlICopXG5sZXQgcmVzZXQgKCkgPSBKc29vVG9wLmluaXRpYWxpemUgKClcblxuKCogbGV0IGV2YWxDb2RlIGNvZGUnID1cbiAgKCogYXNzdXJlIHNhZmUgY29kZSBmb3JtYXQgZm9yIGV4ZWN1dGluZyAqKVxuICBsZXQgY29kZSA9XG4gICAgbGV0IGxlbiA9IFN0cmluZy5sZW5ndGggY29kZScgaW5cbiAgICBpZlxuICAgICAgdHJ5IGNvZGUnIDw+IFwiXCIgJiYgY29kZScuW2xlbiAtIDFdIDw+ICc7JyAmJiBjb2RlJy5bbGVuIC0gMl0gPD4gJzsnXG4gICAgICB3aXRoIF8gLT4gdHJ1ZVxuICAgIHRoZW4gY29kZScgXiBcIjs7XCJcbiAgICBlbHNlIGNvZGUnXG4gIGluXG5cbiAgKCogY3JlYXRlIGJ1ZmZlcnMgdG8gY2FwdHVyZSBvdXRwdXQgZnJvbSBjaGFubmVscyAqKVxuICBsZXQgc3Rkb3V0X2J1ZiA9IEJ1ZmZlci5jcmVhdGUgMTI4IGluXG4gIGxldCBzdGRlcnJfYnVmID0gQnVmZmVyLmNyZWF0ZSAxMjggaW5cbiAgbGV0IHRvcGxldmVsX2J1ZiA9IEJ1ZmZlci5jcmVhdGUgMTI4IGluXG5cbiAgU3lzX2pzLnNldF9jaGFubmVsX2ZsdXNoZXIgc3Rkb3V0IChCdWZmZXIuYWRkX3N0cmluZyBzdGRvdXRfYnVmKTtcbiAgU3lzX2pzLnNldF9jaGFubmVsX2ZsdXNoZXIgc3RkZXJyIChCdWZmZXIuYWRkX3N0cmluZyBzdGRlcnJfYnVmKTtcblxuICAoKiBVc2UgdG9wbGV2ZWwgZm9ybWF0dGVyIG9uIG91ciBjdXN0b20gYnVmZmVyICopXG4gIGxldCBmb3JtYXR0ZXIgPSBGb3JtYXQuZm9ybWF0dGVyX29mX2J1ZmZlciB0b3BsZXZlbF9idWYgaW5cblxuICAoKlxuICAgIHRyeSB0byBleGVjdXRlLCB1c2UgdHJ5L2NhdGNoIGJlY2F1c2UgdGhpcyBjYW4gYWN0dWFsbHkgZmFpbDpcbiAgICBlLmcuOiB2YXJpYWJsZSBlc2NhcGUsIGNvZGU6IFwiZnVuICh4LCB5KSAtPiB4IHk7O1wiXG4gICopXG4gIGxldCBldmFsRmFpbGVkID0gcmVmIGZhbHNlIGluXG4gICh0cnkgSnNvb1RvcC5leGVjdXRlIHRydWUgZm9ybWF0dGVyIGNvZGUgd2l0aCBfIC0+IGV2YWxGYWlsZWQgOj0gdHJ1ZSk7XG5cbiAgbGV0IG91dF9zdHIgPSBCdWZmZXIuY29udGVudHMgc3Rkb3V0X2J1ZiBpblxuICBsZXQgZXJyX3N0ciA9IEJ1ZmZlci5jb250ZW50cyBzdGRlcnJfYnVmIGluXG4gIGxldCB0bF9zdHIgPSBCdWZmZXIuY29udGVudHMgdG9wbGV2ZWxfYnVmIGluXG5cbiAgQnVmZmVyLmNsZWFyIHN0ZG91dF9idWY7XG4gIEJ1ZmZlci5jbGVhciBzdGRlcnJfYnVmO1xuICBCdWZmZXIuY2xlYXIgdG9wbGV2ZWxfYnVmO1xuXG4gICgqIChKcy5zdHJpbmcgdGxfc3RyLCBKcy5zdHJpbmcgb3V0X3N0ciwgSnMuc3RyaW5nIGVycl9zdHIsICFldmFsRmFpbGVkKSAqKVxuICBvYmplY3QlanNcbiAgICB2YWwgZXZhbEZhaWxlZCA9ICFldmFsRmFpbGVkXG4gICAgdmFsIHN0ZG91dCA9IG91dF9zdHJcbiAgICB2YWwgc3RkZXJyID0gZXJyX3N0clxuICAgIHZhbCB0bG91dCA9IHRsX3N0clxuICBlbmQgKilcblxuKCogZXZlbnQgdHlwZSB3ZeKAmWxsIGV4cG9ydCB0byBKUyAqKVxudHlwZSBldmVudCA9IHsga2luZCA6IHN0cmluZzsgY2h1bmsgOiBzdHJpbmc7IHNlcSA6IGludCB9XG5cbigqIFVuaWZpZWQsIG9yZGVyZWQgY2FwdHVyZSBvZiBzdGRvdXQvc3RkZXJyL0pzb29Ub3Agb3V0cHV0ICopXG5sZXQgZXZhbENvZGUgY29kZScgPVxuICAoKiBub3JtYWxpemUgY29kZSB0byBlbnN1cmUgaXQgZW5kcyB3aXRoIFwiOztcIiBzYWZlbHkgKilcbiAgbGV0IGNvZGUgPVxuICAgIGxldCBsZW4gPSBTdHJpbmcubGVuZ3RoIGNvZGUnIGluXG4gICAgaWZcbiAgICAgIHRyeSBjb2RlJyA8PiBcIlwiICYmIGNvZGUnLltsZW4gLSAxXSA8PiAnOycgJiYgY29kZScuW2xlbiAtIDJdIDw+ICc7J1xuICAgICAgd2l0aCBfIC0+IHRydWVcbiAgICB0aGVuIGNvZGUnIF4gXCI7O1wiXG4gICAgZWxzZSBjb2RlJ1xuICBpblxuXG4gIGxldCBzZXEgPSByZWYgMCBpblxuICBsZXQgZXZlbnRzIDogZXZlbnQgbGlzdCByZWYgPSByZWYgW10gaW5cbiAgbGV0IHB1c2gga2luZCBjaHVuayA9XG4gICAgaWYgY2h1bmsgPD4gXCJcIiAmJiBjaHVuayA8PiBcIlxcblwiICYmIGNodW5rIDw+IFwiIFwiICYmIGNodW5rIDw+IFwiXFx0XCIgdGhlbiAoXG4gICAgICBpbmNyIHNlcTtcbiAgICAgIGV2ZW50cyA6PSB7IGtpbmQ7IGNodW5rOyBzZXEgPSAhc2VxIH0gOjogIWV2ZW50cylcbiAgaW5cblxuICAoKiBzZXQgdXAgdW5pZmllZCBmbHVzaGVycyBmb3Igc3Rkb3V0L3N0ZGVyciAqKVxuICBTeXNfanMuc2V0X2NoYW5uZWxfZmx1c2hlciBzdGRvdXQgKHB1c2ggXCJzdGRvdXRcIik7XG4gIFN5c19qcy5zZXRfY2hhbm5lbF9mbHVzaGVyIHN0ZGVyciAocHVzaCBcInN0ZGVyclwiKTtcblxuICAoKiBtYWtlIGEgZm9ybWF0dGVyIHRoYXQgd3JpdGVzIGludG8gb3VyIHN0cmVhbSBhcyBcInRvcGxldmVsXCIgKilcbiAgbGV0IG91dGMgPSByZWYgXCJcIiBpblxuICBsZXQgZm10X291dCBzIG9mcyBsZW4gPSBvdXRjIDo9ICFvdXRjIF4gU3RyaW5nLnN1YiBzIG9mcyBsZW4gaW5cbiAgbGV0IGZtdF9mbHVzaCAoKSA9XG4gICAgcHVzaCBcInRvcGxldmVsXCIgIW91dGM7XG4gICAgb3V0YyA6PSBcIlwiXG4gIGluXG4gIGxldCBmb3JtYXR0ZXIgPSBGb3JtYXQubWFrZV9mb3JtYXR0ZXIgZm10X291dCBmbXRfZmx1c2ggaW5cblxuICAoKiBydW4gdGhlIGNvZGUsIG1hcmtpbmcgc3RhcnQvZW5kICsgY2F0Y2hpbmcgaGFyZCBmYWlsdXJlcyAqKVxuICBsZXQgZXZhbEZhaWxlZCA9IHJlZiBmYWxzZSBpblxuICAodHJ5IGlnbm9yZSAoSnNvb1RvcC5leGVjdXRlIHRydWUgZm9ybWF0dGVyIGNvZGUpXG4gICB3aXRoIF8gLT5cbiAgICAgZXZhbEZhaWxlZCA6PSB0cnVlO1xuICAgICBwdXNoIFwiZXhjZXB0aW9uXCIgXCJKc29vVG9wLmV4ZWN1dGUgcmFpc2VkXCIpO1xuXG4gICgqIGVuc3VyZSBmb3JtYXR0ZXIgZmx1c2ggKEZvcm1hdCBkb2VzbuKAmXQgYXV0by1mbHVzaCBvbiBpdHMgb3duKSAqKVxuICBGb3JtYXQucHBfcHJpbnRfZmx1c2ggZm9ybWF0dGVyICgpO1xuXG4gIGxldCBvcmRlcmVkID0gTGlzdC5yZXYgIWV2ZW50cyBpblxuXG4gICgqIGJ1aWxkIGEgSlMgYXJyYXkgb2Ygb2JqZWN0cyAqKVxuICBsZXQganNfZXZlbnRzID1cbiAgICBvcmRlcmVkXG4gICAgfD4gTGlzdC5tYXAgKGZ1biBlIC0+XG4gICAgICAgICAgIG9iamVjdCVqc1xuICAgICAgICAgICAgIHZhbCBraW5kID0gZS5raW5kXG4gICAgICAgICAgICAgdmFsIGNodW5rID0gZS5jaHVua1xuICAgICAgICAgICAgIHZhbCBzZXEgPSBlLnNlcVxuICAgICAgICAgICBlbmQpXG4gICAgfD4gQXJyYXkub2ZfbGlzdCB8PiBKcy5hcnJheVxuICBpblxuXG4gIG9iamVjdCVqc1xuICAgIHZhbCBldmFsRmFpbGVkID0gIWV2YWxGYWlsZWRcbiAgICB2YWwgZXZlbnRzID0ganNfZXZlbnRzXG4gIGVuZFxuXG4oKiBnbG9iYWwgaW50ZXJmYWNlICopXG5sZXQgKCkgPVxuICBKc19vZl9vY2FtbC5Kcy5leHBvcnQgXCJ0b3BsZXZlbFwiXG4gICAgKG9iamVjdCVqc1xuICAgICAgIHZhbCBjb21waWxlZE9jYW1sVmVyc2lvbiA9IFN5cy5vY2FtbF92ZXJzaW9uXG4gICAgICAgdmFsIGNvbXBpbGVkSnNPZk9jYW1sVmVyc2lvbiA9IFN5c19qcy5qc19vZl9vY2FtbF92ZXJzaW9uXG4gICAgICAgdmFsIHJlc2V0ID0gcmVzZXRcbiAgICAgICB2YWwgZXZhbENvZGUgPSBldmFsQ29kZVxuICAgIGVuZClcbiJdLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0IiwiY3N0X3RvcGxldmVsIiwiY2FtbF9zdHJpbmdfZ2V0IiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImNhbWxfY2FsbDMiLCJhMiIsImNhbWxfY2FsbDUiLCJhMyIsImE0IiwiZ2xvYmFsX2RhdGEiLCJTdGRsaWJfU3RyaW5nIiwiU3RkbGliIiwiSnNfb2Zfb2NhbWxfU3lzX2pzIiwiU3RkbGliX0Zvcm1hdCIsIkpzX29mX29jYW1sX3RvcGxldmVsX0pzb29Ub3AiLCJTdGRsaWJfTGlzdCIsIlN0ZGxpYl9BcnJheSIsIlN0ZGxpYl9TeXMiLCJKc19vZl9vY2FtbF9KcyIsImNzdF9zdGRvdXQiLCJjc3Rfc3RkZXJyIiwiY3N0X0pzb29Ub3BfZXhlY3V0ZV9yYWlzZWQiLCJjc3RfZXhjZXB0aW9uIiwicmVzZXQiLCJwYXJhbSIsImV2YWxDb2RlIiwiY29kZSIsImxlbiIsImV4biIsInNlcSIsImV2ZW50cyIsInB1c2giLCJraW5kIiwiY2h1bmsiLCJvdXRjIiwiZm10X291dCIsInMiLCJvZnMiLCJmbXRfZmx1c2giLCJmb3JtYXR0ZXIiLCJldmFsRmFpbGVkIiwib3JkZXJlZCIsImUiLCJ0MiIsInQxIiwidDAiLCJqc19ldmVudHMiLCJ0MyIsInQ2IiwidDUiLCJEdW5lX2V4ZV9Ub3BsZXZlbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQyxrQkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQUosR0FBQUMsSUFBQUUsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFOLEdBQUFDLElBQUFFLElBQUFFLElBQUFFLElBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBYixRQUFBO0FBQUEsSUFBQUEsTUFBQTtBQUFBLElBQUFBLFFBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQWMsZ0JBQUE7QUFBQSxJQUFBQyxTQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLCtCQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLGVBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUF2QixlQUFBO0FBQUEsSUFBQXdCLDZCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxZQUFBQyxNQUFBQztBQUFBQSxJQ0llLHFEQUFxQjtBQUFBO0FBQUEsWUFBQUMsU0FBQUM7QUFBQUEsUUFBQUMsTUFxRGxDO0FBQUEsSUFFRTtBQUFBLGFBQ007QUFBQSxLQUFXO0FBQUE7QUFBQSxXQUFJO0FBQUEsV0FBZSxXQUFXO0FBQUE7QUFBQSxjQUE5QjtBQUFBO0FBQUE7QUFBQSxVQUFBQyxTQUFBLElBQ0w7QUFBQTtBQUFBLEtBQUFGLFNBRlosSUFHSztBQUFBLEtBQUFHLE1BSVA7QUFBQSxLQUFBQyxTQUNBO0FBQUEsYUFBQUMsS0FBQUMsTUFBQUM7QUFBQUEsU0FBQSxJQUVLO0FBQUEsS0FBVztBQUFBLGNBQUk7QUFBQSxNQUFhO0FBQUEsZUFBSSwyQkFBWTtBQUFBO0FBQUEsZUFBaEI7QUFBQTtBQUFBO0FBQUEsY0FBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUVxQztBQUFBLElBSXJEO0FBQUE7QUFBQTtBQUFBLGtCQUFrQztBQUFBLElBQ2xDO0FBQUE7QUFBQTtBQUFBLGtCQUFrQztBQUFBLFFBQUFDLE9BQWU7QUFBQSxhQUFBQyxRQUFBQyxHQUFBQyxLQUFBVjtBQUFBQSxTQUFBLElBSVQ7QUFBQSxLQUFSO0FBQUEsS0FBNEI7QUFBQTtBQUFBLGFBQUFXLFVBQUFkO0FBQUFBLEtBRTFEO0FBQUEsS0FBcUI7QUFBQTtBQUFBLElBQ1g7QUFBQTtBQUFBLEtBQUFlLFlBRUk7QUFBQSxLQUFBQyxhQUdoQjtBQUFBLElBQ0E7QUFBQSxLQUFZO0FBQUE7QUFBQSxVQUFBWjtBQUFBQSxLQUVUO0FBQUEsS0FDQTtBQUFBO0FBQUEsSUFHSDtBQUFBO0FBQUEsS0FBQWEsVUFFYztBQUFBO0FBQUEsT0FJWjtBQUFBLFNBQ0c7QUFBQTtBQUFBLG9CQUFBQztBQUFBQSxnQkFBQUMsS0FDSSxNQUFBQyxLQUFBLE1BQUFDLEtBQUE7QUFBQTtBQUFBLFdBSUc7QUFBQTtBQUFBLEtBQUFDLFlBTlY7QUFBQSxLQUFBQyxLQVVGO0FBQUE7QUFBQSxHQUdHO0FBQUEsT0FBQUMsS0RsSEwsdUJBQUFDLEtBQUE7QUFBQSxHQ3NIRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQUFDLG9CQU1NO0FBQUE7QUFBQTtBQUFBLEVENUhSIiwiaWdub3JlTGlzdCI6WzBdfX1dfQ==
